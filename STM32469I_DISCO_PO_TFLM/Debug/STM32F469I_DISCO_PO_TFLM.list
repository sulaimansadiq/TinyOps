
STM32F469I_DISCO_PO_TFLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022dd8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059e8  08022f98  08022f98  00032f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028980  08028980  00391358  2**0
                  CONTENTS
  4 .ARM          00000008  08028980  08028980  00038980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .qspi_data    000e2ff8  90000000  90000000  00050000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .qspi         00000000  900e2ff8  900e2ff8  00391358  2**0
                  CONTENTS
  7 .preinit_array 00000000  08028988  08028988  00391358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  08028988  08028988  00038988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000004  0802898c  0802898c  0003898c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000080  20000000  08028990  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .sdram_data   00000000  c0000000  c0000000  00391358  2**0
                  CONTENTS
 12 .ccmram       00000000  10000000  10000000  00391358  2**0
                  CONTENTS
 13 .bss          0000087c  20000080  20000080  00040080  2**2
                  ALLOC
 14 .ram_bss      00000000  200008fc  200008fc  00391358  2**0
                  CONTENTS
 15 .sdram_bss    00251358  c0000000  c0000000  00140000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 16 ._user_heap_stack 00000604  200008fc  200008fc  00040080  2**0
                  ALLOC
 17 .ARM.attributes 00000030  00000000  00000000  00391358  2**0
                  CONTENTS, READONLY
 18 .debug_info   002cb108  00000000  00000000  00391388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 0001c2df  00000000  00000000  0065c490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 000090b0  00000000  00000000  00678770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00008ce8  00000000  00000000  00681820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0001a4ed  00000000  00000000  0068a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00078f10  00000000  00000000  006a49f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001ded72  00000000  00000000  0071d905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000053  00000000  00000000  008fc677  2**0
                  CONTENTS, READONLY
 26 .debug_frame  0002a07c  00000000  00000000  008fc6cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08022f80 	.word	0x08022f80

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	08022f80 	.word	0x08022f80

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9a4 	b.w	8000fb0 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff41 	bl	8000b10 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fcb7 	bl	800062c <__aeabi_dmul>
 8000cbe:	f000 f979 	bl	8000fb4 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc38 	bl	8000538 <__aeabi_ui2d>
 8000cc8:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <__aeabi_d2ulz+0x38>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f7ff fcae 	bl	800062c <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faf0 	bl	80002bc <__aeabi_dsub>
 8000cdc:	f000 f96a 	bl	8000fb4 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cf0:	9d08      	ldr	r5, [sp, #32]
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f040 8083 	bne.w	8000e02 <__udivmoddi4+0x116>
 8000cfc:	428a      	cmp	r2, r1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	d947      	bls.n	8000d92 <__udivmoddi4+0xa6>
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	b142      	cbz	r2, 8000d1a <__udivmoddi4+0x2e>
 8000d08:	f1c2 0020 	rsb	r0, r2, #32
 8000d0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d10:	4091      	lsls	r1, r2
 8000d12:	4097      	lsls	r7, r2
 8000d14:	ea40 0c01 	orr.w	ip, r0, r1
 8000d18:	4094      	lsls	r4, r2
 8000d1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d1e:	0c23      	lsrs	r3, r4, #16
 8000d20:	fbbc f6f8 	udiv	r6, ip, r8
 8000d24:	fa1f fe87 	uxth.w	lr, r7
 8000d28:	fb08 c116 	mls	r1, r8, r6, ip
 8000d2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d30:	fb06 f10e 	mul.w	r1, r6, lr
 8000d34:	4299      	cmp	r1, r3
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x60>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 8119 	bcs.w	8000f74 <__udivmoddi4+0x288>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 8116 	bls.w	8000f74 <__udivmoddi4+0x288>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x8c>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 8105 	bcs.w	8000f78 <__udivmoddi4+0x28c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8102 	bls.w	8000f78 <__udivmoddi4+0x28c>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7c:	eba4 040e 	sub.w	r4, r4, lr
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa0>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	b902      	cbnz	r2, 8000d96 <__udivmoddi4+0xaa>
 8000d94:	deff      	udf	#255	; 0xff
 8000d96:	fab2 f282 	clz	r2, r2
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d150      	bne.n	8000e40 <__udivmoddi4+0x154>
 8000d9e:	1bcb      	subs	r3, r1, r7
 8000da0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da4:	fa1f f887 	uxth.w	r8, r7
 8000da8:	2601      	movs	r6, #1
 8000daa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dae:	0c21      	lsrs	r1, r4, #16
 8000db0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000db4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db8:	fb08 f30c 	mul.w	r3, r8, ip
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0xe4>
 8000dc0:	1879      	adds	r1, r7, r1
 8000dc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0xe2>
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	f200 80e9 	bhi.w	8000fa0 <__udivmoddi4+0x2b4>
 8000dce:	4684      	mov	ip, r0
 8000dd0:	1ac9      	subs	r1, r1, r3
 8000dd2:	b2a3      	uxth	r3, r4
 8000dd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ddc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000de0:	fb08 f800 	mul.w	r8, r8, r0
 8000de4:	45a0      	cmp	r8, r4
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x10c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	d202      	bcs.n	8000df6 <__udivmoddi4+0x10a>
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	f200 80d9 	bhi.w	8000fa8 <__udivmoddi4+0x2bc>
 8000df6:	4618      	mov	r0, r3
 8000df8:	eba4 0408 	sub.w	r4, r4, r8
 8000dfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e00:	e7bf      	b.n	8000d82 <__udivmoddi4+0x96>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0x12e>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80b1 	beq.w	8000f6e <__udivmoddi4+0x282>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x1cc>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0x140>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80b8 	bhi.w	8000f9c <__udivmoddi4+0x2b0>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	468c      	mov	ip, r1
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0a8      	beq.n	8000d8c <__udivmoddi4+0xa0>
 8000e3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e3e:	e7a5      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f603 	lsr.w	r6, r0, r3
 8000e48:	4097      	lsls	r7, r2
 8000e4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e52:	40d9      	lsrs	r1, r3
 8000e54:	4330      	orrs	r0, r6
 8000e56:	0c03      	lsrs	r3, r0, #16
 8000e58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e5c:	fa1f f887 	uxth.w	r8, r7
 8000e60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb06 f108 	mul.w	r1, r6, r8
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000e72:	d909      	bls.n	8000e88 <__udivmoddi4+0x19c>
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e7a:	f080 808d 	bcs.w	8000f98 <__udivmoddi4+0x2ac>
 8000e7e:	4299      	cmp	r1, r3
 8000e80:	f240 808a 	bls.w	8000f98 <__udivmoddi4+0x2ac>
 8000e84:	3e02      	subs	r6, #2
 8000e86:	443b      	add	r3, r7
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b281      	uxth	r1, r0
 8000e8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb00 f308 	mul.w	r3, r0, r8
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x1c4>
 8000ea0:	1879      	adds	r1, r7, r1
 8000ea2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea6:	d273      	bcs.n	8000f90 <__udivmoddi4+0x2a4>
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d971      	bls.n	8000f90 <__udivmoddi4+0x2a4>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4439      	add	r1, r7
 8000eb0:	1acb      	subs	r3, r1, r3
 8000eb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eb6:	e778      	b.n	8000daa <__udivmoddi4+0xbe>
 8000eb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000ebc:	fa03 f406 	lsl.w	r4, r3, r6
 8000ec0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ec4:	431c      	orrs	r4, r3
 8000ec6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ed2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ed6:	431f      	orrs	r7, r3
 8000ed8:	0c3b      	lsrs	r3, r7, #16
 8000eda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ede:	fa1f f884 	uxth.w	r8, r4
 8000ee2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ee6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eea:	fb09 fa08 	mul.w	sl, r9, r8
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x220>
 8000efa:	1861      	adds	r1, r4, r1
 8000efc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f00:	d248      	bcs.n	8000f94 <__udivmoddi4+0x2a8>
 8000f02:	458a      	cmp	sl, r1
 8000f04:	d946      	bls.n	8000f94 <__udivmoddi4+0x2a8>
 8000f06:	f1a9 0902 	sub.w	r9, r9, #2
 8000f0a:	4421      	add	r1, r4
 8000f0c:	eba1 010a 	sub.w	r1, r1, sl
 8000f10:	b2bf      	uxth	r7, r7
 8000f12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f1e:	fb00 f808 	mul.w	r8, r0, r8
 8000f22:	45b8      	cmp	r8, r7
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x24a>
 8000f26:	19e7      	adds	r7, r4, r7
 8000f28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f2c:	d22e      	bcs.n	8000f8c <__udivmoddi4+0x2a0>
 8000f2e:	45b8      	cmp	r8, r7
 8000f30:	d92c      	bls.n	8000f8c <__udivmoddi4+0x2a0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4427      	add	r7, r4
 8000f36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f3a:	eba7 0708 	sub.w	r7, r7, r8
 8000f3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000f42:	454f      	cmp	r7, r9
 8000f44:	46c6      	mov	lr, r8
 8000f46:	4649      	mov	r1, r9
 8000f48:	d31a      	bcc.n	8000f80 <__udivmoddi4+0x294>
 8000f4a:	d017      	beq.n	8000f7c <__udivmoddi4+0x290>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x27a>
 8000f4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000f52:	eb67 0701 	sbc.w	r7, r7, r1
 8000f56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f5a:	40f2      	lsrs	r2, r6
 8000f5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000f60:	40f7      	lsrs	r7, r6
 8000f62:	e9c5 2700 	strd	r2, r7, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	462e      	mov	r6, r5
 8000f70:	4628      	mov	r0, r5
 8000f72:	e70b      	b.n	8000d8c <__udivmoddi4+0xa0>
 8000f74:	4606      	mov	r6, r0
 8000f76:	e6e9      	b.n	8000d4c <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fd      	b.n	8000d78 <__udivmoddi4+0x8c>
 8000f7c:	4543      	cmp	r3, r8
 8000f7e:	d2e5      	bcs.n	8000f4c <__udivmoddi4+0x260>
 8000f80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f84:	eb69 0104 	sbc.w	r1, r9, r4
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e7df      	b.n	8000f4c <__udivmoddi4+0x260>
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	e7d2      	b.n	8000f36 <__udivmoddi4+0x24a>
 8000f90:	4660      	mov	r0, ip
 8000f92:	e78d      	b.n	8000eb0 <__udivmoddi4+0x1c4>
 8000f94:	4681      	mov	r9, r0
 8000f96:	e7b9      	b.n	8000f0c <__udivmoddi4+0x220>
 8000f98:	4666      	mov	r6, ip
 8000f9a:	e775      	b.n	8000e88 <__udivmoddi4+0x19c>
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	e74a      	b.n	8000e36 <__udivmoddi4+0x14a>
 8000fa0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa4:	4439      	add	r1, r7
 8000fa6:	e713      	b.n	8000dd0 <__udivmoddi4+0xe4>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	443c      	add	r4, r7
 8000fac:	e724      	b.n	8000df8 <__udivmoddi4+0x10c>
 8000fae:	bf00      	nop

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_d2uiz>:
 8000fb4:	004a      	lsls	r2, r1, #1
 8000fb6:	d211      	bcs.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fbc:	d211      	bcs.n	8000fe2 <__aeabi_d2uiz+0x2e>
 8000fbe:	d50d      	bpl.n	8000fdc <__aeabi_d2uiz+0x28>
 8000fc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fc8:	d40e      	bmi.n	8000fe8 <__aeabi_d2uiz+0x34>
 8000fca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fe6:	d102      	bne.n	8000fee <__aeabi_d2uiz+0x3a>
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <init>:
static void FMC_Init_();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

	HAL_Init();
 8000ffa:	f01d f84b 	bl	801e094 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000ffe:	f000 f95f 	bl	80012c0 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001002:	f000 f9d1 	bl	80013a8 <MX_GPIO_Init>
	#ifdef OVERLAY_FW
	MX_DMA_Init();
	#endif

	QSPI_Init_();
 8001006:	f000 fabb 	bl	8001580 <QSPI_Init_>
	FMC_Init_();
 800100a:	f000 fa67 	bl	80014dc <FMC_Init_>

	for (int i = 0; i<40000; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e007      	b.n	8001024 <init+0x30>
		*((unsigned char *)(0xC0800000+i)) = 0x20;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f1a3 537e 	sub.w	r3, r3, #1065353216	; 0x3f800000
 800101a:	2220      	movs	r2, #32
 800101c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<40000; i++)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3301      	adds	r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800102a:	4293      	cmp	r3, r2
 800102c:	ddf2      	ble.n	8001014 <init+0x20>

}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b090      	sub	sp, #64	; 0x40
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f01d f829 	bl	801e094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f93d 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 f9af 	bl	80013a8 <MX_GPIO_Init>
  MX_DMA_Init();
  #endif
  /* USER CODE BEGIN 2 */

//  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
  FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800104a:	4b85      	ldr	r3, [pc, #532]	; (8001260 <main+0x228>)
 800104c:	f240 7205 	movw	r2, #1797	; 0x705
 8001050:	601a      	str	r2, [r3, #0]
  #ifdef DEBUG_PRINTS
  timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 8001052:	f01d f855 	bl	801e100 <HAL_GetTick>
 8001056:	4603      	mov	r3, r0
 8001058:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 1: %u ... \n", timer_val);
 800105a:	4b82      	ldr	r3, [pc, #520]	; (8001264 <main+0x22c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001060:	4981      	ldr	r1, [pc, #516]	; (8001268 <main+0x230>)
 8001062:	4618      	mov	r0, r3
 8001064:	f021 f9da 	bl	802241c <siprintf>
 8001068:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 800106a:	4b7e      	ldr	r3, [pc, #504]	; (8001264 <main+0x22c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3320      	adds	r3, #32
 8001070:	4a7c      	ldr	r2, [pc, #496]	; (8001264 <main+0x22c>)
 8001072:	6013      	str	r3, [r2, #0]
  #endif

  DmaHandle[0] = &hdma_memtomem_dma2_stream0;
 8001074:	4b7d      	ldr	r3, [pc, #500]	; (800126c <main+0x234>)
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <main+0x238>)
 8001078:	601a      	str	r2, [r3, #0]
  DmaHandle[1] = &hdma_memtomem_dma2_stream1;
 800107a:	4b7c      	ldr	r3, [pc, #496]	; (800126c <main+0x234>)
 800107c:	4a7d      	ldr	r2, [pc, #500]	; (8001274 <main+0x23c>)
 800107e:	605a      	str	r2, [r3, #4]

  DMAQue[0].dmaHandle	=	DmaHandle[0];
 8001080:	4b7a      	ldr	r3, [pc, #488]	; (800126c <main+0x234>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a7c      	ldr	r2, [pc, #496]	; (8001278 <main+0x240>)
 8001086:	6013      	str	r3, [r2, #0]
  DMAQue[0].readIdx		=	0;
 8001088:	4b7b      	ldr	r3, [pc, #492]	; (8001278 <main+0x240>)
 800108a:	2200      	movs	r2, #0
 800108c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  DMAQue[0].writeIdx	=	0;
 8001090:	4b79      	ldr	r3, [pc, #484]	; (8001278 <main+0x240>)
 8001092:	2200      	movs	r2, #0
 8001094:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  DMAQue[1].dmaHandle	=	DmaHandle[1];
 8001098:	4b74      	ldr	r3, [pc, #464]	; (800126c <main+0x234>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a76      	ldr	r2, [pc, #472]	; (8001278 <main+0x240>)
 800109e:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  DMAQue[1].readIdx		=	0;
 80010a2:	4b75      	ldr	r3, [pc, #468]	; (8001278 <main+0x240>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  DMAQue[1].writeIdx	=	0;
 80010aa:	4b73      	ldr	r3, [pc, #460]	; (8001278 <main+0x240>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

  HAL_DMA_RegisterCallback(DmaHandle[0], HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <main+0x234>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a71      	ldr	r2, [pc, #452]	; (800127c <main+0x244>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f01d fce4 	bl	801ea88 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(DmaHandle[0], HAL_DMA_XFER_ERROR_CB_ID, TransferError);
 80010c0:	4b6a      	ldr	r3, [pc, #424]	; (800126c <main+0x234>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <main+0x248>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f01d fcdd 	bl	801ea88 <HAL_DMA_RegisterCallback>

  HAL_DMA_RegisterCallback(DmaHandle[1], HAL_DMA_XFER_CPLT_CB_ID, TransferComplete_Strm1_Ch0);
 80010ce:	4b67      	ldr	r3, [pc, #412]	; (800126c <main+0x234>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4a6c      	ldr	r2, [pc, #432]	; (8001284 <main+0x24c>)
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f01d fcd6 	bl	801ea88 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(DmaHandle[1], HAL_DMA_XFER_ERROR_CB_ID, TransferError_Strm1_Ch0);
 80010dc:	4b63      	ldr	r3, [pc, #396]	; (800126c <main+0x234>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4a69      	ldr	r2, [pc, #420]	; (8001288 <main+0x250>)
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f01d fccf 	bl	801ea88 <HAL_DMA_RegisterCallback>

  #ifdef DEBUG_PRINTS
  timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 80010ea:	f01d f809 	bl	801e100 <HAL_GetTick>
 80010ee:	4603      	mov	r3, r0
 80010f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 2: %u ... \n", timer_val);
 80010f2:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <main+0x22c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80010f8:	4964      	ldr	r1, [pc, #400]	; (800128c <main+0x254>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f021 f98e 	bl	802241c <siprintf>
 8001100:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 8001102:	4b58      	ldr	r3, [pc, #352]	; (8001264 <main+0x22c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3320      	adds	r3, #32
 8001108:	4a56      	ldr	r2, [pc, #344]	; (8001264 <main+0x22c>)
 800110a:	6013      	str	r3, [r2, #0]
//  BSP_LED_Off(LED2);
//  BSP_LED_Off(LED3);
//  BSP_LED_Off(LED4);

  #ifdef DEBUG_PRINTS
  timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 800110c:	f01c fff8 	bl	801e100 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 3: %u ... \n", timer_val);
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <main+0x22c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800111a:	495d      	ldr	r1, [pc, #372]	; (8001290 <main+0x258>)
 800111c:	4618      	mov	r0, r3
 800111e:	f021 f97d 	bl	802241c <siprintf>
 8001122:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <main+0x22c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3320      	adds	r3, #32
 800112a:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <main+0x22c>)
 800112c:	6013      	str	r3, [r2, #0]
  #endif

  #ifdef DEBUG_PRINTS
  //  HAL_TIM_Base_Start(&htim10);
  uart_buf_len = sprintf(debugPrintPtr, "Starting setup ... \r\n");
 800112e:	4b4d      	ldr	r3, [pc, #308]	; (8001264 <main+0x22c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4958      	ldr	r1, [pc, #352]	; (8001294 <main+0x25c>)
 8001134:	4618      	mov	r0, r3
 8001136:	f021 f971 	bl	802241c <siprintf>
 800113a:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 800113c:	4b49      	ldr	r3, [pc, #292]	; (8001264 <main+0x22c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3320      	adds	r3, #32
 8001142:	4a48      	ldr	r2, [pc, #288]	; (8001264 <main+0x22c>)
 8001144:	6013      	str	r3, [r2, #0]
//  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  #endif

  setup();
 8001146:	f008 fe8b 	bl	8009e60 <setup>

  #ifdef DEBUG_PRINTS
  uart_buf_len = sprintf(debugPrintPtr, "Finished setup ... \r\n");
 800114a:	4b46      	ldr	r3, [pc, #280]	; (8001264 <main+0x22c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4952      	ldr	r1, [pc, #328]	; (8001298 <main+0x260>)
 8001150:	4618      	mov	r0, r3
 8001152:	f021 f963 	bl	802241c <siprintf>
 8001156:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <main+0x22c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3320      	adds	r3, #32
 800115e:	4a41      	ldr	r2, [pc, #260]	; (8001264 <main+0x22c>)
 8001160:	6013      	str	r3, [r2, #0]
//  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
  #endif

  #ifdef DEBUG_PRINTS
  timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 8001162:	f01c ffcd 	bl	801e100 <HAL_GetTick>
 8001166:	4603      	mov	r3, r0
 8001168:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 4: %u ... \n", timer_val);
 800116a:	4b3e      	ldr	r3, [pc, #248]	; (8001264 <main+0x22c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001170:	494a      	ldr	r1, [pc, #296]	; (800129c <main+0x264>)
 8001172:	4618      	mov	r0, r3
 8001174:	f021 f952 	bl	802241c <siprintf>
 8001178:	63b8      	str	r0, [r7, #56]	; 0x38
  debugPrintPtr += 32;
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <main+0x22c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3320      	adds	r3, #32
 8001180:	4a38      	ldr	r2, [pc, #224]	; (8001264 <main+0x22c>)
 8001182:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	#ifdef DEBUG_PRINTS
    uart_buf_len = sprintf(debugPrintPtr, "%u ms ... \r\n", timer_val);
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <main+0x22c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800118a:	4945      	ldr	r1, [pc, #276]	; (80012a0 <main+0x268>)
 800118c:	4618      	mov	r0, r3
 800118e:	f021 f945 	bl	802241c <siprintf>
 8001192:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 8001194:	4b33      	ldr	r3, [pc, #204]	; (8001264 <main+0x22c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	3320      	adds	r3, #32
 800119a:	4a32      	ldr	r2, [pc, #200]	; (8001264 <main+0x22c>)
 800119c:	6013      	str	r3, [r2, #0]
	#endif

	#ifdef DEBUG_PRINTS
	uart_buf_len = sprintf(debugPrintPtr, "Starting Inference... \n");
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <main+0x22c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4940      	ldr	r1, [pc, #256]	; (80012a4 <main+0x26c>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f021 f939 	bl	802241c <siprintf>
 80011aa:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 80011ac:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <main+0x22c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3320      	adds	r3, #32
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <main+0x22c>)
 80011b4:	6013      	str	r3, [r2, #0]
//	HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
	#endif

	#ifdef DEBUG_PRINTS
    timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 80011b6:	f01c ffa3 	bl	801e100 <HAL_GetTick>
 80011ba:	4603      	mov	r3, r0
 80011bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 5: %u ... \n", timer_val);
 80011be:	4b29      	ldr	r3, [pc, #164]	; (8001264 <main+0x22c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80011c4:	4938      	ldr	r1, [pc, #224]	; (80012a8 <main+0x270>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f021 f928 	bl	802241c <siprintf>
 80011cc:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 80011ce:	4b25      	ldr	r3, [pc, #148]	; (8001264 <main+0x22c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	3320      	adds	r3, #32
 80011d4:	4a23      	ldr	r2, [pc, #140]	; (8001264 <main+0x22c>)
 80011d6:	6013      	str	r3, [r2, #0]
	#endif

	loop();
 80011d8:	f008 ff7e 	bl	800a0d8 <loop>

	#ifdef DEBUG_PRINTS
    timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 80011dc:	f01c ff90 	bl	801e100 <HAL_GetTick>
 80011e0:	4603      	mov	r3, r0
 80011e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 6: %u ... \n", timer_val);
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <main+0x22c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80011ea:	4930      	ldr	r1, [pc, #192]	; (80012ac <main+0x274>)
 80011ec:	4618      	mov	r0, r3
 80011ee:	f021 f915 	bl	802241c <siprintf>
 80011f2:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <main+0x22c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3320      	adds	r3, #32
 80011fa:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <main+0x22c>)
 80011fc:	6013      	str	r3, [r2, #0]
	#endif

	#ifdef DEBUG_PRINTS
	uart_buf_len = sprintf(debugPrintPtr, "Finished Inference... \n", timer_val);
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <main+0x22c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001204:	492a      	ldr	r1, [pc, #168]	; (80012b0 <main+0x278>)
 8001206:	4618      	mov	r0, r3
 8001208:	f021 f908 	bl	802241c <siprintf>
 800120c:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0x22c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3320      	adds	r3, #32
 8001214:	4a13      	ldr	r2, [pc, #76]	; (8001264 <main+0x22c>)
 8001216:	6013      	str	r3, [r2, #0]
//    BSP_LED_Toggle(LED2);
//    BSP_LED_Toggle(LED3);
//    BSP_LED_Toggle(LED4);

	#ifdef DEBUG_PRINTS
    timer_val = HAL_GetTick(); // __HAL_TIM_GET_COUNTER(&htim10);
 8001218:	f01c ff72 	bl	801e100 <HAL_GetTick>
 800121c:	4603      	mov	r3, r0
 800121e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 7: %u ... \n", timer_val);
 8001220:	4b10      	ldr	r3, [pc, #64]	; (8001264 <main+0x22c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001226:	4923      	ldr	r1, [pc, #140]	; (80012b4 <main+0x27c>)
 8001228:	4618      	mov	r0, r3
 800122a:	f021 f8f7 	bl	802241c <siprintf>
 800122e:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <main+0x22c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	3320      	adds	r3, #32
 8001236:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <main+0x22c>)
 8001238:	6013      	str	r3, [r2, #0]
	#endif

	#ifdef DEBUG_PRINTS
    timer_val2 = __HAL_TIM_GET_COUNTER(&htim10);
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <main+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001240:	86fb      	strh	r3, [r7, #54]	; 0x36
    uart_buf_len = sprintf(debugPrintPtr, "Time_Stamp 8: %u ... \n", timer_val2);
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <main+0x22c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001248:	491c      	ldr	r1, [pc, #112]	; (80012bc <main+0x284>)
 800124a:	4618      	mov	r0, r3
 800124c:	f021 f8e6 	bl	802241c <siprintf>
 8001250:	63b8      	str	r0, [r7, #56]	; 0x38
    debugPrintPtr += 32;
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <main+0x22c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3320      	adds	r3, #32
 8001258:	4a02      	ldr	r2, [pc, #8]	; (8001264 <main+0x22c>)
 800125a:	6013      	str	r3, [r2, #0]
  {
 800125c:	e792      	b.n	8001184 <main+0x14c>
 800125e:	bf00      	nop
 8001260:	40023c00 	.word	0x40023c00
 8001264:	20000000 	.word	0x20000000
 8001268:	08022f98 	.word	0x08022f98
 800126c:	200007c4 	.word	0x200007c4
 8001270:	2000082c 	.word	0x2000082c
 8001274:	200007cc 	.word	0x200007cc
 8001278:	2000051c 	.word	0x2000051c
 800127c:	08001ac9 	.word	0x08001ac9
 8001280:	08001ba9 	.word	0x08001ba9
 8001284:	08001bc9 	.word	0x08001bc9
 8001288:	08001ca9 	.word	0x08001ca9
 800128c:	08022fb0 	.word	0x08022fb0
 8001290:	08022fc8 	.word	0x08022fc8
 8001294:	08022fe0 	.word	0x08022fe0
 8001298:	08022ff8 	.word	0x08022ff8
 800129c:	08023010 	.word	0x08023010
 80012a0:	08023028 	.word	0x08023028
 80012a4:	08023038 	.word	0x08023038
 80012a8:	08023050 	.word	0x08023050
 80012ac:	08023068 	.word	0x08023068
 80012b0:	08023080 	.word	0x08023080
 80012b4:	08023098 	.word	0x08023098
 80012b8:	20000738 	.word	0x20000738
 80012bc:	080230b0 	.word	0x080230b0

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2234      	movs	r2, #52	; 0x34
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f020 fcb0 	bl	8021c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <SystemClock_Config+0xe0>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a2c      	ldr	r2, [pc, #176]	; (80013a0 <SystemClock_Config+0xe0>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <SystemClock_Config+0xe0>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <SystemClock_Config+0xe4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <SystemClock_Config+0xe4>)
 800130a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <SystemClock_Config+0xe4>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001330:	2308      	movs	r3, #8
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001334:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133a:	2302      	movs	r3, #2
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133e:	2304      	movs	r3, #4
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001342:	2302      	movs	r3, #2
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4618      	mov	r0, r3
 800134c:	f01f fc22 	bl	8020b94 <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001356:	f000 fcc9 	bl	8001cec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800135a:	f01d ff8d 	bl	801f278 <HAL_PWREx_EnableOverDrive>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001364:	f000 fcc2 	bl	8001cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136c:	2302      	movs	r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	2105      	movs	r1, #5
 8001386:	4618      	mov	r0, r3
 8001388:	f01f f9ea 	bl	8020760 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001392:	f000 fcab 	bl	8001cec <Error_Handler>
  }
}
 8001396:	bf00      	nop
 8001398:	3750      	adds	r7, #80	; 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40007000 	.word	0x40007000

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <MX_GPIO_Init+0x68>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <MX_GPIO_Init+0x68>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_GPIO_Init+0x68>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_GPIO_Init+0x68>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a0f      	ldr	r2, [pc, #60]	; (8001410 <MX_GPIO_Init+0x68>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <MX_GPIO_Init+0x68>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_GPIO_Init+0x68>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a08      	ldr	r2, [pc, #32]	; (8001410 <MX_GPIO_Init+0x68>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_GPIO_Init+0x68>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]

}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40023800 	.word	0x40023800

08001414 <BSP_SDRAM_Initialization_Sequence>:
  * @param  hsdram: SDRAM handle
  * @param  Command: Pointer to SDRAM command structure
  * @retval None
  */
static void BSP_SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  /* Step 3:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2201      	movs	r2, #1
 8001426:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	2210      	movs	r2, #16
 800142c:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2201      	movs	r2, #1
 8001432:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800143a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f01f fe5f 	bl	8021104 <HAL_SDRAM_SendCommand>

  /* Step 4: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f01c fe66 	bl	801e118 <HAL_Delay>

  /* Step 5: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	2210      	movs	r2, #16
 8001456:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2201      	movs	r2, #1
 800145c:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f01f fe4a 	bl	8021104 <HAL_SDRAM_SendCommand>

  /* Step 6 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2203      	movs	r2, #3
 8001474:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2210      	movs	r2, #16
 800147a:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2208      	movs	r2, #8
 8001480:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f01f fe38 	bl	8021104 <HAL_SDRAM_SendCommand>

  /* Step 7: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001494:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001498:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	2204      	movs	r2, #4
 800149e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2210      	movs	r2, #16
 80014a4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2201      	movs	r2, #1
 80014aa:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80014b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f01f fe23 	bl	8021104 <HAL_SDRAM_SendCommand>

  /* Step 8: Set the refresh rate counter */
  /* (15.62 us x Freq) - 20 */
  /* Set the device refresh counter */
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6153      	str	r3, [r2, #20]
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <FMC_Init_>:

static void FMC_Init_() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

	/*##-1- Configure the SDRAM device #########################################*/
	/* SDRAM device configuration */
	hsdram.Instance = FMC_SDRAM_DEVICE;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <FMC_Init_+0x94>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <FMC_Init_+0x98>)
 80014e4:	601a      	str	r2, [r3, #0]

	SDRAM_Timing.LoadToActiveDelay    = 2;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <FMC_Init_+0x9c>)
 80014e8:	2202      	movs	r2, #2
 80014ea:	601a      	str	r2, [r3, #0]
	SDRAM_Timing.ExitSelfRefreshDelay = 6;
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <FMC_Init_+0x9c>)
 80014ee:	2206      	movs	r2, #6
 80014f0:	605a      	str	r2, [r3, #4]
	SDRAM_Timing.SelfRefreshTime      = 4;
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <FMC_Init_+0x9c>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	609a      	str	r2, [r3, #8]
	SDRAM_Timing.RowCycleDelay        = 6;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <FMC_Init_+0x9c>)
 80014fa:	2206      	movs	r2, #6
 80014fc:	60da      	str	r2, [r3, #12]
	SDRAM_Timing.WriteRecoveryTime    = 2;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <FMC_Init_+0x9c>)
 8001500:	2202      	movs	r2, #2
 8001502:	611a      	str	r2, [r3, #16]
	SDRAM_Timing.RPDelay              = 2;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <FMC_Init_+0x9c>)
 8001506:	2202      	movs	r2, #2
 8001508:	615a      	str	r2, [r3, #20]
	SDRAM_Timing.RCDDelay             = 2;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <FMC_Init_+0x9c>)
 800150c:	2202      	movs	r2, #2
 800150e:	619a      	str	r2, [r3, #24]

	hsdram.Init.SDBank             = FMC_SDRAM_BANK1;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <FMC_Init_+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
	hsdram.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <FMC_Init_+0x94>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
	hsdram.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <FMC_Init_+0x94>)
 800151e:	2204      	movs	r2, #4
 8001520:	60da      	str	r2, [r3, #12]
	hsdram.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <FMC_Init_+0x94>)
 8001524:	2220      	movs	r2, #32
 8001526:	611a      	str	r2, [r3, #16]
	hsdram.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <FMC_Init_+0x94>)
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	615a      	str	r2, [r3, #20]
	hsdram.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <FMC_Init_+0x94>)
 8001530:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001534:	619a      	str	r2, [r3, #24]
	hsdram.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <FMC_Init_+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
	hsdram.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <FMC_Init_+0x94>)
 800153e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001542:	621a      	str	r2, [r3, #32]
	hsdram.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <FMC_Init_+0x94>)
 8001546:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <FMC_Init_+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	; 0x28

	/* Initialize the SDRAM controller */
	if(HAL_SDRAM_Init(&hsdram, &SDRAM_Timing) != HAL_OK)
 8001552:	4909      	ldr	r1, [pc, #36]	; (8001578 <FMC_Init_+0x9c>)
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <FMC_Init_+0x94>)
 8001556:	f01f fda1 	bl	802109c <HAL_SDRAM_Init>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <FMC_Init_+0x88>
	{
		/* Initialization Error */
		Error_Handler();
 8001560:	f000 fbc4 	bl	8001cec <Error_Handler>
	}

	/* Program the SDRAM external device */
	BSP_SDRAM_Initialization_Sequence(&hsdram, &command);
 8001564:	4905      	ldr	r1, [pc, #20]	; (800157c <FMC_Init_+0xa0>)
 8001566:	4802      	ldr	r0, [pc, #8]	; (8001570 <FMC_Init_+0x94>)
 8001568:	f7ff ff54 	bl	8001414 <BSP_SDRAM_Initialization_Sequence>

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200006b4 	.word	0x200006b4
 8001574:	a0000140 	.word	0xa0000140
 8001578:	200004fc 	.word	0x200004fc
 800157c:	2000088c 	.word	0x2000088c

08001580 <QSPI_Init_>:

static void QSPI_Init_() {
 8001580:	b580      	push	{r7, lr}
 8001582:	b096      	sub	sp, #88	; 0x58
 8001584:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef      sCommand;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;
	__IO uint32_t qspi_addr = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
	uint8_t *flash_addr = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	657b      	str	r3, [r7, #84]	; 0x54
	__IO uint8_t step = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	70fb      	strb	r3, [r7, #3]
	uint32_t max_size = 0, size = 0, nb_sectors_to_erase;
 8001592:	2300      	movs	r3, #0
 8001594:	64bb      	str	r3, [r7, #72]	; 0x48
 8001596:	2300      	movs	r3, #0
 8001598:	653b      	str	r3, [r7, #80]	; 0x50

	/* Initialize QuadSPI ------------------------------------------------------ */
	QSPIHandle.Instance = QUADSPI;
 800159a:	4b96      	ldr	r3, [pc, #600]	; (80017f4 <QSPI_Init_+0x274>)
 800159c:	4a96      	ldr	r2, [pc, #600]	; (80017f8 <QSPI_Init_+0x278>)
 800159e:	601a      	str	r2, [r3, #0]
	HAL_QSPI_DeInit(&QSPIHandle);
 80015a0:	4894      	ldr	r0, [pc, #592]	; (80017f4 <QSPI_Init_+0x274>)
 80015a2:	f01d ff35 	bl	801f410 <HAL_QSPI_DeInit>

	QSPIHandle.Init.ClockPrescaler     = 1;
 80015a6:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <QSPI_Init_+0x274>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	605a      	str	r2, [r3, #4]
	QSPIHandle.Init.FifoThreshold      = 4;
 80015ac:	4b91      	ldr	r3, [pc, #580]	; (80017f4 <QSPI_Init_+0x274>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	609a      	str	r2, [r3, #8]
	QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015b2:	4b90      	ldr	r3, [pc, #576]	; (80017f4 <QSPI_Init_+0x274>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	60da      	str	r2, [r3, #12]
	QSPIHandle.Init.FlashSize          = QSPI_FLASH_SIZE;
 80015b8:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <QSPI_Init_+0x274>)
 80015ba:	2217      	movs	r2, #23
 80015bc:	611a      	str	r2, [r3, #16]
	QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80015be:	4b8d      	ldr	r3, [pc, #564]	; (80017f4 <QSPI_Init_+0x274>)
 80015c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015c4:	615a      	str	r2, [r3, #20]
	QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <QSPI_Init_+0x274>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
	QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80015cc:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <QSPI_Init_+0x274>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
	QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_DISABLE;
 80015d2:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <QSPI_Init_+0x274>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]

	if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80015d8:	4886      	ldr	r0, [pc, #536]	; (80017f4 <QSPI_Init_+0x274>)
 80015da:	f01d fe9d 	bl	801f318 <HAL_QSPI_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <QSPI_Init_+0x68>
	{
		Error_Handler();
 80015e4:	f000 fb82 	bl	8001cec <Error_Handler>
	}

	sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
 80015ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f2:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015fc:	2300      	movs	r3, #0
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001600:	2300      	movs	r3, #0
 8001602:	647b      	str	r3, [r7, #68]	; 0x44

	max_size = (uint32_t)((uint8_t *)(&_qspi_init_length));
 8001604:	4b7d      	ldr	r3, [pc, #500]	; (80017fc <QSPI_Init_+0x27c>)
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
	nb_sectors_to_erase = (max_size / QSPI_SECTOR_SIZE) + 1;
 8001608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800160a:	0b1b      	lsrs	r3, r3, #12
 800160c:	3301      	adds	r3, #1
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c

	step = 4;
 8001610:	2304      	movs	r3, #4
 8001612:	70fb      	strb	r3, [r7, #3]
	while (step != 6) {
 8001614:	e0e3      	b.n	80017de <QSPI_Init_+0x25e>

		switch(step)
 8001616:	78fb      	ldrb	r3, [r7, #3]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b06      	cmp	r3, #6
 800161c:	f200 80dd 	bhi.w	80017da <QSPI_Init_+0x25a>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <QSPI_Init_+0xa8>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	08001645 	.word	0x08001645
 800162c:	08001689 	.word	0x08001689
 8001630:	080016e5 	.word	0x080016e5
 8001634:	0800175d 	.word	0x0800175d
 8001638:	08001785 	.word	0x08001785
 800163c:	080017d5 	.word	0x080017d5
 8001640:	080017df 	.word	0x080017df
		{
		  case 0:
			CmdCplt = 0;
 8001644:	4b6e      	ldr	r3, [pc, #440]	; (8001800 <QSPI_Init_+0x280>)
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]

			/* Enable write operations ------------------------------------------- */
			QSPI_WriteEnable(&QSPIHandle);
 800164a:	486a      	ldr	r0, [pc, #424]	; (80017f4 <QSPI_Init_+0x274>)
 800164c:	f000 f8e0 	bl	8001810 <QSPI_WriteEnable>

			/* Erasing Sequence -------------------------------------------------- */
			sCommand.Instruction = SUBSECTOR_ERASE_CMD;
 8001650:	2320      	movs	r3, #32
 8001652:	613b      	str	r3, [r7, #16]
			sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
			sCommand.Address     = qspi_addr;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	617b      	str	r3, [r7, #20]
			sCommand.DataMode    = QSPI_DATA_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
			sCommand.DummyCycles = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24

			if (HAL_QSPI_Command_IT(&QSPIHandle, &sCommand) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	4861      	ldr	r0, [pc, #388]	; (80017f4 <QSPI_Init_+0x274>)
 800166e:	f01e f911 	bl	801f894 <HAL_QSPI_Command_IT>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <QSPI_Init_+0xfc>
			{
			  Error_Handler();
 8001678:	f000 fb38 	bl	8001cec <Error_Handler>
			}

			step++;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b2db      	uxtb	r3, r3
 8001684:	70fb      	strb	r3, [r7, #3]
			break;
 8001686:	e0aa      	b.n	80017de <QSPI_Init_+0x25e>

		  case 1:
	//    	CmdCplt = 1;
			if(CmdCplt != 0)
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <QSPI_Init_+0x280>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a5 	beq.w	80017de <QSPI_Init_+0x25e>
			{
			  CmdCplt = 0;
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <QSPI_Init_+0x280>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
			  StatusMatch = 0;
 800169a:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <QSPI_Init_+0x284>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

			  /* Configure automatic polling mode to wait for end of erase ------- */
			  QSPI_AutoPollingMemReady(&QSPIHandle);
 80016a0:	4854      	ldr	r0, [pc, #336]	; (80017f4 <QSPI_Init_+0x274>)
 80016a2:	f000 f8ff 	bl	80018a4 <QSPI_AutoPollingMemReady>

			  nb_sectors_to_erase --;
 80016a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a8:	3b01      	subs	r3, #1
 80016aa:	64fb      	str	r3, [r7, #76]	; 0x4c
			  if(nb_sectors_to_erase != 0)
 80016ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <QSPI_Init_+0x13c>
			  {
				qspi_addr += QSPI_SECTOR_SIZE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00d      	b.n	80016d8 <QSPI_Init_+0x158>
			  }
			  else
			  {
			  /* Initialize the variables for the data writing ------------------- */
				qspi_addr = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
	#if defined(__CC_ARM)
				flash_addr = (uint8_t *)(&Load$$QSPI$$Base);
	#elif defined(__ICCARM__)
			  flash_addr = (uint8_t *)(__section_begin(".qspi_init"));
	#elif defined(__GNUC__)
				flash_addr = (uint8_t *)(&_qspi_init_base);
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <QSPI_Init_+0x288>)
 80016c2:	657b      	str	r3, [r7, #84]	; 0x54
	#endif

			  /* Copy only one page if the section is bigger */
			  if (max_size > QSPI_PAGE_SIZE)
 80016c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ca:	d903      	bls.n	80016d4 <QSPI_Init_+0x154>
			  {
				size = QSPI_PAGE_SIZE;
 80016cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d0:	653b      	str	r3, [r7, #80]	; 0x50
 80016d2:	e001      	b.n	80016d8 <QSPI_Init_+0x158>
			  }
			  else
			  {
				size = max_size;
 80016d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016d6:	653b      	str	r3, [r7, #80]	; 0x50
			  }
			  }
			  step++;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80016e2:	e07c      	b.n	80017de <QSPI_Init_+0x25e>

		  case 2:
			if(StatusMatch != 0)
 80016e4:	4b47      	ldr	r3, [pc, #284]	; (8001804 <QSPI_Init_+0x284>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d077      	beq.n	80017de <QSPI_Init_+0x25e>
			{
			  StatusMatch = 0;
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <QSPI_Init_+0x284>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
			  TxCplt = 0;
 80016f4:	4b45      	ldr	r3, [pc, #276]	; (800180c <QSPI_Init_+0x28c>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]

			  if(nb_sectors_to_erase != 0)
 80016fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <QSPI_Init_+0x186>
			  {
				step = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	70fb      	strb	r3, [r7, #3]
 8001704:	e06b      	b.n	80017de <QSPI_Init_+0x25e>
			  }
			  else
			  {
				/* Enable write operations ----------------------------------------- */
				QSPI_WriteEnable(&QSPIHandle);
 8001706:	483b      	ldr	r0, [pc, #236]	; (80017f4 <QSPI_Init_+0x274>)
 8001708:	f000 f882 	bl	8001810 <QSPI_WriteEnable>

				/* Writing Sequence ------------------------------------------------ */
				sCommand.Instruction = QUAD_IN_FAST_PROG_CMD;
 800170c:	2332      	movs	r3, #50	; 0x32
 800170e:	613b      	str	r3, [r7, #16]
				sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
				sCommand.Address     = qspi_addr;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	617b      	str	r3, [r7, #20]
				sCommand.DataMode    = QSPI_DATA_4_LINES;
 800171a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800171e:	637b      	str	r3, [r7, #52]	; 0x34
				sCommand.NbData      = size;
 8001720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38

				if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001724:	f107 0310 	add.w	r3, r7, #16
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4619      	mov	r1, r3
 800172e:	4831      	ldr	r0, [pc, #196]	; (80017f4 <QSPI_Init_+0x274>)
 8001730:	f01e f852 	bl	801f7d8 <HAL_QSPI_Command>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <QSPI_Init_+0x1be>
				{
				  Error_Handler();
 800173a:	f000 fad7 	bl	8001cec <Error_Handler>
				}

				if (HAL_QSPI_Transmit_DMA(&QSPIHandle, flash_addr) != HAL_OK)
 800173e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <QSPI_Init_+0x274>)
 8001742:	f01e fa45 	bl	801fbd0 <HAL_QSPI_Transmit_DMA>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <QSPI_Init_+0x1d0>
				{
				  Error_Handler();
 800174c:	f000 face 	bl	8001cec <Error_Handler>
				}

				step++;
 8001750:	78fb      	ldrb	r3, [r7, #3]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	3301      	adds	r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	70fb      	strb	r3, [r7, #3]
			  }
			}
			break;
 800175a:	e040      	b.n	80017de <QSPI_Init_+0x25e>

		  case 3:
			if(TxCplt != 0)
 800175c:	4b2b      	ldr	r3, [pc, #172]	; (800180c <QSPI_Init_+0x28c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d03b      	beq.n	80017de <QSPI_Init_+0x25e>
			{
			  TxCplt = 0;
 8001766:	4b29      	ldr	r3, [pc, #164]	; (800180c <QSPI_Init_+0x28c>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			  StatusMatch = 0;
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <QSPI_Init_+0x284>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]

			  /* Configure automatic polling mode to wait for end of program ----- */
			  QSPI_AutoPollingMemReady(&QSPIHandle);
 8001772:	4820      	ldr	r0, [pc, #128]	; (80017f4 <QSPI_Init_+0x274>)
 8001774:	f000 f896 	bl	80018a4 <QSPI_AutoPollingMemReady>

			  step++;
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3301      	adds	r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8001782:	e02c      	b.n	80017de <QSPI_Init_+0x25e>
//			  else
//			  {
//				StatusMatch = 0;
//				RxCplt = 0;

	            sCommand.AddressMode = QSPI_ADDRESS_1_LINE;
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
	            sCommand.Address     = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
	            sCommand.DataMode    = QSPI_DATA_4_LINES;
 800178e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
	            sCommand.NbData      = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38

				/* Configure Volatile Configuration register (with new dummy cycles) */
				QSPI_DummyCyclesCfg(&QSPIHandle);
 8001798:	4816      	ldr	r0, [pc, #88]	; (80017f4 <QSPI_Init_+0x274>)
 800179a:	f000 f8bb 	bl	8001914 <QSPI_DummyCyclesCfg>

				/* Reading Sequence ------------------------------------------------ */
				sCommand.Instruction = QUAD_OUT_FAST_READ_CMD;
 800179e:	236b      	movs	r3, #107	; 0x6b
 80017a0:	613b      	str	r3, [r7, #16]
				sCommand.DummyCycles = DUMMY_CLOCK_CYCLES_READ_QUAD;
 80017a2:	230a      	movs	r3, #10
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

				sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]

				if (HAL_QSPI_MemoryMapped(&QSPIHandle, &sCommand, &sMemMappedCfg) != HAL_OK)
 80017aa:	f107 0208 	add.w	r2, r7, #8
 80017ae:	f107 0310 	add.w	r3, r7, #16
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	; (80017f4 <QSPI_Init_+0x274>)
 80017b6:	f01e fbf7 	bl	801ffa8 <HAL_QSPI_MemoryMapped>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <QSPI_Init_+0x244>
				{
				  Error_Handler();
 80017c0:	f000 fa94 	bl	8001cec <Error_Handler>
				}

				step++;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	70fb      	strb	r3, [r7, #3]
				step = 6;
 80017ce:	2306      	movs	r3, #6
 80017d0:	70fb      	strb	r3, [r7, #3]
//				for (int i=0; i<5; i++) {
//					read_arena[i] = tensor_arena2[i];
//				}
//			  }
//			}
			break;
 80017d2:	e004      	b.n	80017de <QSPI_Init_+0x25e>

		  case 5:
			  /* Execute the code from QSPI memory ------------------------------- */
			  GpioToggle();
 80017d4:	f000 f970 	bl	8001ab8 <GpioToggle>
			break;
 80017d8:	e001      	b.n	80017de <QSPI_Init_+0x25e>

		  case 6:
			break;

		  default :
			Error_Handler();
 80017da:	f000 fa87 	bl	8001cec <Error_Handler>
	while (step != 6) {
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	f47f af17 	bne.w	8001616 <QSPI_Init_+0x96>
		}
	}
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3758      	adds	r7, #88	; 0x58
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200006e8 	.word	0x200006e8
 80017f8:	a0001000 	.word	0xa0001000
 80017fc:	00000000 	.word	0x00000000
 8001800:	20000518 	.word	0x20000518
 8001804:	2000089c 	.word	0x2000089c
 8001808:	08028988 	.word	0x08028988
 800180c:	20000735 	.word	0x20000735

08001810 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b096      	sub	sp, #88	; 0x58
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations ------------------------------------------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = WRITE_ENABLE_CMD;
 800181e:	2306      	movs	r3, #6
 8001820:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001822:	2300      	movs	r3, #0
 8001824:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001826:	2300      	movs	r3, #0
 8001828:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_NONE;
 800182a:	2300      	movs	r3, #0
 800182c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001836:	2300      	movs	r3, #0
 8001838:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800183a:	2300      	movs	r3, #0
 800183c:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800183e:	f107 0320 	add.w	r3, r7, #32
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4619      	mov	r1, r3
 8001848:	4815      	ldr	r0, [pc, #84]	; (80018a0 <QSPI_WriteEnable+0x90>)
 800184a:	f01d ffc5 	bl	801f7d8 <HAL_QSPI_Command>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <QSPI_WriteEnable+0x48>
  {
    Error_Handler();
 8001854:	f000 fa4a 	bl	8001cec <Error_Handler>
  }

  /* Configure automatic polling mode to wait for write enabling ---- */
  sConfig.Match           = 0x02;
 8001858:	2302      	movs	r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x02;
 800185c:	2302      	movs	r3, #2
 800185e:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 8001860:	2300      	movs	r3, #0
 8001862:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 8001868:	2310      	movs	r3, #16
 800186a:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800186c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001870:	61fb      	str	r3, [r7, #28]

  sCommand.Instruction    = READ_STATUS_REG_CMD;
 8001872:	2305      	movs	r3, #5
 8001874:	623b      	str	r3, [r7, #32]
  sCommand.DataMode       = QSPI_DATA_1_LINE;
 8001876:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800187a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(&QSPIHandle, &sCommand, &sConfig, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800187c:	f107 0208 	add.w	r2, r7, #8
 8001880:	f107 0120 	add.w	r1, r7, #32
 8001884:	f241 3388 	movw	r3, #5000	; 0x1388
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <QSPI_WriteEnable+0x90>)
 800188a:	f01e faa3 	bl	801fdd4 <HAL_QSPI_AutoPolling>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <QSPI_WriteEnable+0x88>
  {
    Error_Handler();
 8001894:	f000 fa2a 	bl	8001cec <Error_Handler>
  }
}
 8001898:	bf00      	nop
 800189a:	3758      	adds	r7, #88	; 0x58
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200006e8 	.word	0x200006e8

080018a4 <QSPI_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b096      	sub	sp, #88	; 0x58
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     sCommand;
  QSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready ------ */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80018ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.Instruction       = READ_STATUS_REG_CMD;
 80018b2:	2305      	movs	r3, #5
 80018b4:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 80018be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DummyCycles       = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80018cc:	2300      	movs	r3, #0
 80018ce:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80018d0:	2300      	movs	r3, #0
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54

  sConfig.Match           = 0x00;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfig.Mask            = 0x01;
 80018d8:	2301      	movs	r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
  sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
  sConfig.StatusBytesSize = 1;
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  sConfig.Interval        = 0x10;
 80018e4:	2310      	movs	r3, #16
 80018e6:	613b      	str	r3, [r7, #16]
  sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80018e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ec:	61fb      	str	r3, [r7, #28]

  if (HAL_QSPI_AutoPolling_IT(&QSPIHandle, &sCommand, &sConfig) != HAL_OK)
 80018ee:	f107 0208 	add.w	r2, r7, #8
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	; (8001910 <QSPI_AutoPollingMemReady+0x6c>)
 80018fa:	f01e fae2 	bl	801fec2 <HAL_QSPI_AutoPolling_IT>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <QSPI_AutoPollingMemReady+0x64>
  {
    Error_Handler();
 8001904:	f000 f9f2 	bl	8001cec <Error_Handler>
  }
}
 8001908:	bf00      	nop
 800190a:	3758      	adds	r7, #88	; 0x58
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200006e8 	.word	0x200006e8

08001914 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static void QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b094      	sub	sp, #80	; 0x50
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef sCommand;
  uint8_t reg;

  /* Read Volatile Configuration register --------------------------- */
  sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800191c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction       = READ_VOL_CFG_REG_CMD;
 8001922:	2385      	movs	r3, #133	; 0x85
 8001924:	60fb      	str	r3, [r7, #12]
  sCommand.AddressMode       = QSPI_ADDRESS_NONE;
 8001926:	2300      	movs	r3, #0
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.DataMode          = QSPI_DATA_1_LINE;
 800192e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.DummyCycles       = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
  sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001938:	2300      	movs	r3, #0
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800193c:	2300      	movs	r3, #0
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.NbData            = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001950:	4619      	mov	r1, r3
 8001952:	482b      	ldr	r0, [pc, #172]	; (8001a00 <QSPI_DummyCyclesCfg+0xec>)
 8001954:	f01d ff40 	bl	801f7d8 <HAL_QSPI_Command>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <QSPI_DummyCyclesCfg+0x4e>
  {
    Error_Handler();
 800195e:	f000 f9c5 	bl	8001cec <Error_Handler>
  }

  if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001962:	f107 030b 	add.w	r3, r7, #11
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4619      	mov	r1, r3
 800196c:	4824      	ldr	r0, [pc, #144]	; (8001a00 <QSPI_DummyCyclesCfg+0xec>)
 800196e:	f01e f88c 	bl	801fa8a <HAL_QSPI_Receive>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <QSPI_DummyCyclesCfg+0x68>
  {
    Error_Handler();
 8001978:	f000 f9b8 	bl	8001cec <Error_Handler>
  }

  /* Enable write operations ---------------------------------------- */
  QSPI_WriteEnable(&QSPIHandle);
 800197c:	4820      	ldr	r0, [pc, #128]	; (8001a00 <QSPI_DummyCyclesCfg+0xec>)
 800197e:	f7ff ff47 	bl	8001810 <QSPI_WriteEnable>

  /* Write Volatile Configuration register (with new dummy cycles) -- */
  sCommand.Instruction = WRITE_VOL_CFG_REG_CMD;
 8001982:	2381      	movs	r3, #129	; 0x81
 8001984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0, (DUMMY_CLOCK_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	b25a      	sxtb	r2, r3
 8001990:	23f0      	movs	r3, #240	; 0xf0
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001996:	fa93 f3a3 	rbit	r3, r3
 800199a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800199e:	64fb      	str	r3, [r7, #76]	; 0x4c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <QSPI_DummyCyclesCfg+0x96>
  {
    return 32U;
 80019a6:	2320      	movs	r3, #32
 80019a8:	e003      	b.n	80019b2 <QSPI_DummyCyclesCfg+0x9e>
  }
  return __builtin_clz(value);
 80019aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	230a      	movs	r3, #10
 80019b6:	408b      	lsls	r3, r1
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	72fb      	strb	r3, [r7, #11]

  if (HAL_QSPI_Command(&QSPIHandle, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <QSPI_DummyCyclesCfg+0xec>)
 80019ce:	f01d ff03 	bl	801f7d8 <HAL_QSPI_Command>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <QSPI_DummyCyclesCfg+0xc8>
  {
    Error_Handler();
 80019d8:	f000 f988 	bl	8001cec <Error_Handler>
  }

  if (HAL_QSPI_Transmit(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80019dc:	f107 030b 	add.w	r3, r7, #11
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4619      	mov	r1, r3
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <QSPI_DummyCyclesCfg+0xec>)
 80019e8:	f01d ffb8 	bl	801f95c <HAL_QSPI_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <QSPI_DummyCyclesCfg+0xe2>
  {
    Error_Handler();
 80019f2:	f000 f97b 	bl	8001cec <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3750      	adds	r7, #80	; 0x50
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200006e8 	.word	0x200006e8

08001a04 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  CmdCplt++;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_QSPI_CmdCpltCallback+0x24>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_QSPI_CmdCpltCallback+0x24>)
 8001a18:	701a      	strb	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000518 	.word	0x20000518

08001a2c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  RxCplt++;
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_QSPI_RxCpltCallback+0x24>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_QSPI_RxCpltCallback+0x24>)
 8001a40:	701a      	strb	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000734 	.word	0x20000734

08001a54 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  TxCplt++;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_QSPI_TxCpltCallback+0x24>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <HAL_QSPI_TxCpltCallback+0x24>)
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000735 	.word	0x20000735

08001a7c <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callbacks
  * @param  hqspi: QSPI handle
  * @retval None
  */
void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  StatusMatch++;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_QSPI_StatusMatchCallback+0x24>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <HAL_QSPI_StatusMatchCallback+0x24>)
 8001a90:	701a      	strb	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000089c 	.word	0x2000089c

08001aa4 <HAL_QSPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
 void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Turn LED3 on: Transfer error in reception/transmission process */
//  BSP_LED_On(LED3);
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <GpioToggle>:
  *         is generated
  * @retval None
  */

static void GpioToggle(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
///* Insert delay 100 ms */
//HAL_Delay(100);
//BSP_LED_Toggle(LED4);
///* Insert delay 100 ms */
//HAL_Delay(100);
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <TransferComplete>:

void TransferComplete(DMA_HandleTypeDef *dmaHandle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b094      	sub	sp, #80	; 0x50
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  char uart_buf[50];
  int uart_buf_len;

  uint8_t * prev_dst = DMAQue[0].copyReq[DMAQue[0].readIdx].dst;
 8001ad0:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <TransferComplete+0xd8>)
 8001ad2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001ad6:	4932      	ldr	r1, [pc, #200]	; (8001ba0 <TransferComplete+0xd8>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3308      	adds	r3, #8
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t prev_size = DMAQue[0].copyReq[DMAQue[0].readIdx].size;
 8001ae8:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <TransferComplete+0xd8>)
 8001aea:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001aee:	492c      	ldr	r1, [pc, #176]	; (8001ba0 <TransferComplete+0xd8>)
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	330c      	adds	r3, #12
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48

//  SCB_InvalidateDCache_by_Addr( (uint32_t*) ( ( (uint32_t)prev_dst ) & ~(uint32_t)0x1F), prev_size + 32 );

  DMAQue[0].readIdx++;
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <TransferComplete+0xd8>)
 8001b02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b06:	3301      	adds	r3, #1
 8001b08:	4a25      	ldr	r2, [pc, #148]	; (8001ba0 <TransferComplete+0xd8>)
 8001b0a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  if (DMAQue[0].readIdx == DMA_COPY_QUE_SIZE)
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <TransferComplete+0xd8>)
 8001b10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001b14:	2b10      	cmp	r3, #16
 8001b16:	d103      	bne.n	8001b20 <TransferComplete+0x58>
  	DMAQue[0].readIdx = 0;
 8001b18:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <TransferComplete+0xd8>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

  transferCompleteDetected++;
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <TransferComplete+0xdc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <TransferComplete+0xdc>)
 8001b28:	6013      	str	r3, [r2, #0]
  if (DMAQue[0].readIdx != DMAQue[0].writeIdx) { // Que not empty condition
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <TransferComplete+0xd8>)
 8001b2c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <TransferComplete+0xd8>)
 8001b32:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d02e      	beq.n	8001b98 <TransferComplete+0xd0>
	uint8_t * src = DMAQue[0].copyReq[DMAQue[0].readIdx].src;
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <TransferComplete+0xd8>)
 8001b3c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b40:	4917      	ldr	r1, [pc, #92]	; (8001ba0 <TransferComplete+0xd8>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t * dst = DMAQue[0].copyReq[DMAQue[0].readIdx].dst;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <TransferComplete+0xd8>)
 8001b54:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b58:	4911      	ldr	r1, [pc, #68]	; (8001ba0 <TransferComplete+0xd8>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	3308      	adds	r3, #8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t size = DMAQue[0].copyReq[DMAQue[0].readIdx].size;
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <TransferComplete+0xd8>)
 8001b6c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001b70:	490b      	ldr	r1, [pc, #44]	; (8001ba0 <TransferComplete+0xd8>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	330c      	adds	r3, #12
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	63fb      	str	r3, [r7, #60]	; 0x3c
	//	DMAQue.readIdx++;
//	if (DMAQue.readIdx == DMA_COPY_QUE_SIZE)
//		DMAQue.readIdx = 0;
//
//    SCB_InvalidateDCache_by_Addr( (uint32_t*) ( ( (uint32_t)dst ) & ~(uint32_t)0x1F), size + 32 );
	if (HAL_DMA_Start_IT(dmaHandle, (uint32_t)src, (uint32_t)dst, size) != HAL_OK)
 8001b82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f01c fd09 	bl	801e5a0 <HAL_DMA_Start_IT>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <TransferComplete+0xd0>
	{
	  /* Transfer Error */
	  Error_Handler();
 8001b94:	f000 f8aa 	bl	8001cec <Error_Handler>
	// next copy will start only when current ISR exits and the cached one is called
	// therefore only a max of one interrupt will be cached/pending while we are still in ISR

  }

}
 8001b98:	bf00      	nop
 8001b9a:	3750      	adds	r7, #80	; 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000051c 	.word	0x2000051c
 8001ba4:	200000a0 	.word	0x200000a0

08001ba8 <TransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void TransferError(DMA_HandleTypeDef *DmaHandle)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  transferErrorDetected = 1;
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <TransferError+0x1c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000009c 	.word	0x2000009c

08001bc8 <TransferComplete_Strm1_Ch0>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void TransferComplete_Strm1_Ch0(DMA_HandleTypeDef *dmaHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	; 0x50
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  char uart_buf[50];
  int uart_buf_len;

  uint8_t * prev_dst = DMAQue[1].copyReq[DMAQue[1].readIdx].dst;
 8001bd0:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001bd2:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001bd6:	4932      	ldr	r1, [pc, #200]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	33d4      	adds	r3, #212	; 0xd4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t prev_size = DMAQue[1].copyReq[DMAQue[1].readIdx].size;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001bea:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001bee:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	33d8      	adds	r3, #216	; 0xd8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48

//  SCB_InvalidateDCache_by_Addr( (uint32_t*) ( ( (uint32_t)prev_dst ) & ~(uint32_t)0x1F), prev_size + 32 );

  DMAQue[1].readIdx++;
 8001c00:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c02:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c0a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  if (DMAQue[1].readIdx == DMA_COPY_QUE_SIZE)
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c10:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d103      	bne.n	8001c20 <TransferComplete_Strm1_Ch0+0x58>
  	DMAQue[1].readIdx = 0;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190

  transferCompleteDetected++;
 8001c20:	4b20      	ldr	r3, [pc, #128]	; (8001ca4 <TransferComplete_Strm1_Ch0+0xdc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <TransferComplete_Strm1_Ch0+0xdc>)
 8001c28:	6013      	str	r3, [r2, #0]
  if (DMAQue[1].readIdx != DMAQue[1].writeIdx) { // Que not empty condition
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c2c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c32:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d02e      	beq.n	8001c98 <TransferComplete_Strm1_Ch0+0xd0>
	uint8_t * src = DMAQue[1].copyReq[DMAQue[1].readIdx].src;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c3c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001c40:	4917      	ldr	r1, [pc, #92]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	440b      	add	r3, r1
 8001c4c:	33d0      	adds	r3, #208	; 0xd0
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t * dst = DMAQue[1].copyReq[DMAQue[1].readIdx].dst;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c54:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001c58:	4911      	ldr	r1, [pc, #68]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	33d4      	adds	r3, #212	; 0xd4
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t size = DMAQue[1].copyReq[DMAQue[1].readIdx].size;
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c6c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8001c70:	490b      	ldr	r1, [pc, #44]	; (8001ca0 <TransferComplete_Strm1_Ch0+0xd8>)
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	33d8      	adds	r3, #216	; 0xd8
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c

	//	DMAQue.readIdx++;
//	if (DMAQue.readIdx == DMA_COPY_QUE_SIZE)
//		DMAQue.readIdx = 0;
//
	if (HAL_DMA_Start_IT(dmaHandle, (uint32_t)src, (uint32_t)dst, size) != HAL_OK)
 8001c82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f01c fc89 	bl	801e5a0 <HAL_DMA_Start_IT>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <TransferComplete_Strm1_Ch0+0xd0>
	{
	  /* Transfer Error */
	  Error_Handler();
 8001c94:	f000 f82a 	bl	8001cec <Error_Handler>
	// next copy will start only when current ISR exits and the cached one is called
	// therefore only a max of one interrupt will be cached/pending while we are still in ISR

  }

}
 8001c98:	bf00      	nop
 8001c9a:	3750      	adds	r7, #80	; 0x50
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000051c 	.word	0x2000051c
 8001ca4:	200000a0 	.word	0x200000a0

08001ca8 <TransferError_Strm1_Ch0>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void TransferError_Strm1_Ch0(DMA_HandleTypeDef *DmaHandle)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  transferErrorDetected = 1;
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <TransferError_Strm1_Ch0+0x1c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2000009c 	.word	0x2000009c

08001cc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cda:	f01c f9fd 	bl	801e0d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
}
 8001cf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <Error_Handler+0x8>
	...

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_MspInit+0x90>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	4a20      	ldr	r2, [pc, #128]	; (8001d88 <HAL_MspInit+0x90>)
 8001d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	; (8001d88 <HAL_MspInit+0x90>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_MspInit+0x90>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_MspInit+0x90>)
 8001d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d28:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_MspInit+0x90>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2101      	movs	r1, #1
 8001d3a:	f06f 000b 	mvn.w	r0, #11
 8001d3e:	f01c faeb 	bl	801e318 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2101      	movs	r1, #1
 8001d46:	f06f 000a 	mvn.w	r0, #10
 8001d4a:	f01c fae5 	bl	801e318 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2101      	movs	r1, #1
 8001d52:	f06f 0009 	mvn.w	r0, #9
 8001d56:	f01c fadf 	bl	801e318 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	f06f 0004 	mvn.w	r0, #4
 8001d62:	f01c fad9 	bl	801e318 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2101      	movs	r1, #1
 8001d6a:	f06f 0003 	mvn.w	r0, #3
 8001d6e:	f01c fad3 	bl	801e318 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2101      	movs	r1, #1
 8001d76:	f06f 0001 	mvn.w	r0, #1
 8001d7a:	f01c facd 	bl	801e318 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800

08001d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_TIM_Base_MspInit+0x48>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d115      	bne.n	8001dca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_TIM_Base_MspInit+0x4c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	2019      	movs	r0, #25
 8001dc0:	f01c faaa 	bl	801e318 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dc4:	2019      	movs	r0, #25
 8001dc6:	f01c fac3 	bl	801e350 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40014400 	.word	0x40014400
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_QSPI_MspInit>:
  *           - NVIC configuration for DMA and QSPI interrupts
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b090      	sub	sp, #64	; 0x40
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  static DMA_HandleTypeDef hdma;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001de8:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dec:	4a80      	ldr	r2, [pc, #512]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001dee:	f043 0302 	orr.w	r3, r3, #2
 8001df2:	6393      	str	r3, [r2, #56]	; 0x38
 8001df4:	4b7e      	ldr	r3, [pc, #504]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8001e00:	4b7b      	ldr	r3, [pc, #492]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	4a7a      	ldr	r2, [pc, #488]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8001e0c:	4b78      	ldr	r3, [pc, #480]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a77      	ldr	r2, [pc, #476]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	6193      	str	r3, [r2, #24]
  /* Enable GPIO clocks */
  QSPI_CS_GPIO_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e1c:	4b74      	ldr	r3, [pc, #464]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a73      	ldr	r2, [pc, #460]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_CLK_GPIO_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	4a6c      	ldr	r2, [pc, #432]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e3e:	f043 0320 	orr.w	r3, r3, #32
 8001e42:	6313      	str	r3, [r2, #48]	; 0x30
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	623b      	str	r3, [r7, #32]
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
  QSPI_D0_GPIO_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
  QSPI_D1_GPIO_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e76:	f043 0320 	orr.w	r3, r3, #32
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	69bb      	ldr	r3, [r7, #24]
  QSPI_D2_GPIO_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e92:	f043 0320 	orr.w	r3, r3, #32
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]
  QSPI_D3_GPIO_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a50      	ldr	r2, [pc, #320]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001eae:	f043 0320 	orr.w	r3, r3, #32
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b4e      	ldr	r3, [pc, #312]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
  /* Enable DMA clock */
  QSPI_DMA_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	4a49      	ldr	r2, [pc, #292]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001eca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ece:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed0:	4b47      	ldr	r3, [pc, #284]	; (8001ff0 <HAL_QSPI_MspInit+0x214>)
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CS GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_CS_PIN;
 8001edc:	2340      	movs	r3, #64	; 0x40
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001eec:	230a      	movs	r3, #10
 8001eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CS_GPIO_PORT, &GPIO_InitStruct);
 8001ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	483f      	ldr	r0, [pc, #252]	; (8001ff4 <HAL_QSPI_MspInit+0x218>)
 8001ef8:	f01c ff06 	bl	801ed08 <HAL_GPIO_Init>

  /* QSPI CLK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_CLK_PIN;
 8001efc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f06:	2309      	movs	r3, #9
 8001f08:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &GPIO_InitStruct);
 8001f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4839      	ldr	r0, [pc, #228]	; (8001ff8 <HAL_QSPI_MspInit+0x21c>)
 8001f12:	f01c fef9 	bl	801ed08 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D0_PIN;
 8001f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D0_GPIO_PORT, &GPIO_InitStruct);
 8001f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f24:	4619      	mov	r1, r3
 8001f26:	4834      	ldr	r0, [pc, #208]	; (8001ff8 <HAL_QSPI_MspInit+0x21c>)
 8001f28:	f01c feee 	bl	801ed08 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D1_PIN;
 8001f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001f32:	230a      	movs	r3, #10
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D1_GPIO_PORT, &GPIO_InitStruct);
 8001f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	482e      	ldr	r0, [pc, #184]	; (8001ff8 <HAL_QSPI_MspInit+0x21c>)
 8001f3e:	f01c fee3 	bl	801ed08 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D2_PIN;
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f46:	2309      	movs	r3, #9
 8001f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_PORT, &GPIO_InitStruct);
 8001f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4829      	ldr	r0, [pc, #164]	; (8001ff8 <HAL_QSPI_MspInit+0x21c>)
 8001f52:	f01c fed9 	bl	801ed08 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  GPIO_InitStruct.Pin       = QSPI_D3_PIN;
 8001f56:	2340      	movs	r3, #64	; 0x40
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001f5a:	2309      	movs	r3, #9
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_PORT, &GPIO_InitStruct);
 8001f5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f62:	4619      	mov	r1, r3
 8001f64:	4824      	ldr	r0, [pc, #144]	; (8001ff8 <HAL_QSPI_MspInit+0x21c>)
 8001f66:	f01c fecf 	bl	801ed08 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	210f      	movs	r1, #15
 8001f6e:	205b      	movs	r0, #91	; 0x5b
 8001f70:	f01c f9d2 	bl	801e318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001f74:	205b      	movs	r0, #91	; 0x5b
 8001f76:	f01c f9eb 	bl	801e350 <HAL_NVIC_EnableIRQ>

  /*##-4- Configure the DMA channel ###########################################*/
  /* QSPI DMA channel configuration */
  hdma.Init.Channel             = QSPI_DMA_CHANNEL;
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f7c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f80:	605a      	str	r2, [r3, #4]
  hdma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	60da      	str	r2, [r3, #12]
  hdma.Init.MemInc              = DMA_MINC_ENABLE;
 8001f88:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8e:	611a      	str	r2, [r3, #16]
  hdma.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  hdma.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  hdma.Init.Mode                = DMA_NORMAL;
 8001f9c:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	61da      	str	r2, [r3, #28]
  hdma.Init.Priority            = DMA_PRIORITY_LOW;
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  hdma.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;        /* FIFO mode disabled     */
 8001fa8:	4b14      	ldr	r3, [pc, #80]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  hdma.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001fae:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fb0:	2203      	movs	r2, #3
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma.Init.MemBurst            = DMA_MBURST_SINGLE;           /* Memory burst           */
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma.Init.PeriphBurst         = DMA_PBURST_SINGLE;           /* Peripheral burst       */
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hdma.Instance                 = QSPI_DMA_INSTANCE;
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_QSPI_MspInit+0x224>)
 8001fc4:	601a      	str	r2, [r3, #0]

  __HAL_LINKDMA(hqspi, hdma, hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0c      	ldr	r2, [pc, #48]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
  HAL_DMA_Init(&hdma);
 8001fd2:	480a      	ldr	r0, [pc, #40]	; (8001ffc <HAL_QSPI_MspInit+0x220>)
 8001fd4:	f01c f9d8 	bl	801e388 <HAL_DMA_Init>

  /* NVIC configuration for DMA interrupt */
  HAL_NVIC_SetPriority(QSPI_DMA_IRQ, 0x00, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2046      	movs	r0, #70	; 0x46
 8001fde:	f01c f99b 	bl	801e318 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QSPI_DMA_IRQ);
 8001fe2:	2046      	movs	r0, #70	; 0x46
 8001fe4:	f01c f9b4 	bl	801e350 <HAL_NVIC_EnableIRQ>

}
 8001fe8:	bf00      	nop
 8001fea:	3740      	adds	r7, #64	; 0x40
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400
 8001ff8:	40021400 	.word	0x40021400
 8001ffc:	200000a4 	.word	0x200000a4
 8002000:	400264b8 	.word	0x400264b8

08002004 <HAL_QSPI_MspDeInit>:
  *          - Revert GPIO, DMA and NVIC configuration to their default state
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma;

  /*##-1- Disable the NVIC for QSPI and DMA ##################################*/
  HAL_NVIC_DisableIRQ(QSPI_DMA_IRQ);
 800200c:	2046      	movs	r0, #70	; 0x46
 800200e:	f01c f9ad 	bl	801e36c <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(QUADSPI_IRQn);
 8002012:	205b      	movs	r0, #91	; 0x5b
 8002014:	f01c f9aa 	bl	801e36c <HAL_NVIC_DisableIRQ>

  /*##-2- Disable peripherals ################################################*/
  /* De-configure DMA channel */
  hdma.Instance = QSPI_DMA_INSTANCE;
 8002018:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_QSPI_MspDeInit+0x84>)
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_QSPI_MspDeInit+0x88>)
 800201c:	601a      	str	r2, [r3, #0]
  HAL_DMA_DeInit(&hdma);
 800201e:	481a      	ldr	r0, [pc, #104]	; (8002088 <HAL_QSPI_MspDeInit+0x84>)
 8002020:	f01c fa60 	bl	801e4e4 <HAL_DMA_DeInit>
  /* De-Configure QSPI pins */
  HAL_GPIO_DeInit(QSPI_CS_GPIO_PORT, QSPI_CS_PIN);
 8002024:	2140      	movs	r1, #64	; 0x40
 8002026:	481a      	ldr	r0, [pc, #104]	; (8002090 <HAL_QSPI_MspDeInit+0x8c>)
 8002028:	f01d f81a 	bl	801f060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_CLK_GPIO_PORT, QSPI_CLK_PIN);
 800202c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002030:	4818      	ldr	r0, [pc, #96]	; (8002094 <HAL_QSPI_MspDeInit+0x90>)
 8002032:	f01d f815 	bl	801f060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D0_GPIO_PORT, QSPI_D0_PIN);
 8002036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800203a:	4816      	ldr	r0, [pc, #88]	; (8002094 <HAL_QSPI_MspDeInit+0x90>)
 800203c:	f01d f810 	bl	801f060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D1_GPIO_PORT, QSPI_D1_PIN);
 8002040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002044:	4813      	ldr	r0, [pc, #76]	; (8002094 <HAL_QSPI_MspDeInit+0x90>)
 8002046:	f01d f80b 	bl	801f060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D2_GPIO_PORT, QSPI_D2_PIN);
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <HAL_QSPI_MspDeInit+0x90>)
 800204e:	f01d f807 	bl	801f060 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(QSPI_D3_GPIO_PORT, QSPI_D3_PIN);
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	480f      	ldr	r0, [pc, #60]	; (8002094 <HAL_QSPI_MspDeInit+0x90>)
 8002056:	f01d f803 	bl	801f060 <HAL_GPIO_DeInit>

  /*##-3- Reset peripherals ##################################################*/
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	6193      	str	r3, [r2, #24]
  QSPI_RELEASE_RESET();
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 800206c:	f023 0302 	bic.w	r3, r3, #2
 8002070:	6193      	str	r3, [r2, #24]

  /* Disable the QuadSPI memory interface clock */
  QSPI_CLK_DISABLE();
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <HAL_QSPI_MspDeInit+0x94>)
 8002078:	f023 0302 	bic.w	r3, r3, #2
 800207c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000104 	.word	0x20000104
 800208c:	400264b8 	.word	0x400264b8
 8002090:	40020400 	.word	0x40020400
 8002094:	40021400 	.word	0x40021400
 8002098:	40023800 	.word	0x40023800

0800209c <HAL_SDRAM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param hsram: SDRAM handle pointer
  * @retval None
  */
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b090      	sub	sp, #64	; 0x40
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_Init_Structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO clocks */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
 80020c4:	4b54      	ldr	r3, [pc, #336]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a53      	ldr	r2, [pc, #332]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b51      	ldr	r3, [pc, #324]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
 80020e0:	4b4d      	ldr	r3, [pc, #308]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020e6:	f043 0310 	orr.w	r3, r3, #16
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	623b      	str	r3, [r7, #32]
 80020f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	4a45      	ldr	r2, [pc, #276]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002102:	f043 0320 	orr.w	r3, r3, #32
 8002106:	6313      	str	r3, [r2, #48]	; 0x30
 8002108:	4b43      	ldr	r3, [pc, #268]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002114:	2300      	movs	r3, #0
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	4b3f      	ldr	r3, [pc, #252]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a3e      	ldr	r2, [pc, #248]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800211e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a37      	ldr	r2, [pc, #220]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800214c:	2300      	movs	r3, #0
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	4a30      	ldr	r2, [pc, #192]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6313      	str	r3, [r2, #48]	; 0x30
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6393      	str	r3, [r2, #56]	; 0x38
 8002178:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_SDRAM_MspInit+0x17c>)
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init_Structure.Pull      = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_Init_Structure.Speed     = GPIO_SPEED_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8002190:	230c      	movs	r3, #12
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOC configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0;
 8002194:	2301      	movs	r3, #1
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init_Structure);
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	4619      	mov	r1, r3
 800219e:	481f      	ldr	r0, [pc, #124]	; (800221c <HAL_SDRAM_MspInit+0x180>)
 80021a0:	f01c fdb2 	bl	801ed08 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 80021a4:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 80021aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ae:	4619      	mov	r1, r3
 80021b0:	481b      	ldr	r0, [pc, #108]	; (8002220 <HAL_SDRAM_MspInit+0x184>)
 80021b2:	f01c fda9 	bl	801ed08 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9       |\
 80021b6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 80021bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4818      	ldr	r0, [pc, #96]	; (8002224 <HAL_SDRAM_MspInit+0x188>)
 80021c4:	f01c fda0 	bl	801ed08 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4      |\
 80021c8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_Init_Structure);
 80021ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021d2:	4619      	mov	r1, r3
 80021d4:	4814      	ldr	r0, [pc, #80]	; (8002228 <HAL_SDRAM_MspInit+0x18c>)
 80021d6:	f01c fd97 	bl	801ed08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80021da:	f248 1333 	movw	r3, #33075	; 0x8133
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_Init_Structure);
 80021e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021e4:	4619      	mov	r1, r3
 80021e6:	4811      	ldr	r0, [pc, #68]	; (800222c <HAL_SDRAM_MspInit+0x190>)
 80021e8:	f01c fd8e 	bl	801ed08 <HAL_GPIO_Init>


  /* GPIOH configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80021ec:	f64f 730c 	movw	r3, #65292	; 0xff0c
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &GPIO_Init_Structure);
 80021f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f6:	4619      	mov	r1, r3
 80021f8:	480d      	ldr	r0, [pc, #52]	; (8002230 <HAL_SDRAM_MspInit+0x194>)
 80021fa:	f01c fd85 	bl	801ed08 <HAL_GPIO_Init>

  /* GPIOI configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4  |\
 80021fe:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &GPIO_Init_Structure);
 8002204:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002208:	4619      	mov	r1, r3
 800220a:	480a      	ldr	r0, [pc, #40]	; (8002234 <HAL_SDRAM_MspInit+0x198>)
 800220c:	f01c fd7c 	bl	801ed08 <HAL_GPIO_Init>


}
 8002210:	bf00      	nop
 8002212:	3740      	adds	r7, #64	; 0x40
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	40020800 	.word	0x40020800
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40021400 	.word	0x40021400
 800222c:	40021800 	.word	0x40021800
 8002230:	40021c00 	.word	0x40021c00
 8002234:	40022000 	.word	0x40022000

08002238 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002240:	2300      	movs	r3, #0
 8002242:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	2019      	movs	r0, #25
 800224e:	f01c f863 	bl	801e318 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002252:	2019      	movs	r0, #25
 8002254:	f01c f87c 	bl	801e350 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	4b1f      	ldr	r3, [pc, #124]	; (80022dc <HAL_InitTick+0xa4>)
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	4a1e      	ldr	r2, [pc, #120]	; (80022dc <HAL_InitTick+0xa4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6453      	str	r3, [r2, #68]	; 0x44
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_InitTick+0xa4>)
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002274:	f107 0210 	add.w	r2, r7, #16
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f01e fc56 	bl	8020b30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002284:	f01e fc40 	bl	8020b08 <HAL_RCC_GetPCLK2Freq>
 8002288:	4603      	mov	r3, r0
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_InitTick+0xa8>)
 8002292:	fba2 2303 	umull	r2, r3, r2, r3
 8002296:	0c9b      	lsrs	r3, r3, #18
 8002298:	3b01      	subs	r3, #1
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_InitTick+0xac>)
 800229e:	4a12      	ldr	r2, [pc, #72]	; (80022e8 <HAL_InitTick+0xb0>)
 80022a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_InitTick+0xac>)
 80022a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022a8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022aa:	4a0e      	ldr	r2, [pc, #56]	; (80022e4 <HAL_InitTick+0xac>)
 80022ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <HAL_InitTick+0xac>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_InitTick+0xac>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022bc:	4809      	ldr	r0, [pc, #36]	; (80022e4 <HAL_InitTick+0xac>)
 80022be:	f01e ff4c 	bl	802115a <HAL_TIM_Base_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80022c8:	4806      	ldr	r0, [pc, #24]	; (80022e4 <HAL_InitTick+0xac>)
 80022ca:	f01e ff95 	bl	80211f8 <HAL_TIM_Base_Start_IT>
 80022ce:	4603      	mov	r3, r0
 80022d0:	e000      	b.n	80022d4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3730      	adds	r7, #48	; 0x30
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40023800 	.word	0x40023800
 80022e0:	431bde83 	.word	0x431bde83
 80022e4:	200008a0 	.word	0x200008a0
 80022e8:	40010000 	.word	0x40010000

080022ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <NMI_Handler+0x4>

080022f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <HardFault_Handler+0x4>

080022f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler+0x4>

080022fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <UsageFault_Handler+0x4>

0800230a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002348:	4803      	ldr	r0, [pc, #12]	; (8002358 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800234a:	f01e ffc5 	bl	80212d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800234e:	4803      	ldr	r0, [pc, #12]	; (800235c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002350:	f01e ffc2 	bl	80212d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200008a0 	.word	0x200008a0
 800235c:	20000738 	.word	0x20000738

08002360 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA2_Stream0_IRQHandler+0x10>)
 8002366:	f01c fa05 	bl	801e774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000082c 	.word	0x2000082c

08002374 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA2_Stream1_IRQHandler+0x10>)
 800237a:	f01c f9fb 	bl	801e774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200007cc 	.word	0x200007cc

08002388 <QUADSPI_IRQHandler>:
  * @brief  This function handles QUADSPI interrupt request.
  * @param  None
  * @retval None
  */
void QUADSPI_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  HAL_QSPI_IRQHandler(&QSPIHandle);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <QUADSPI_IRQHandler+0x10>)
 800238e:	f01d f863 	bl	801f458 <HAL_QSPI_IRQHandler>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200006e8 	.word	0x200006e8

0800239c <DMA2_Stream7_IRQHandler>:
  * @brief  This function handles QUADSPI DMA interrupt request.
  * @param  None
  * @retval None
  */
void QSPI_DMA_IRQ_HANDLER(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(QSPIHandle.hdma);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <DMA2_Stream7_IRQHandler+0x14>)
 80023a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a4:	4618      	mov	r0, r3
 80023a6:	f01c f9e5 	bl	801e774 <HAL_DMA_IRQHandler>
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200006e8 	.word	0x200006e8

080023b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
	return 1;
 80023b8:	2301      	movs	r3, #1
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_kill>:

int _kill(int pid, int sig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023ce:	f01f fbab 	bl	8021b28 <__errno>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2216      	movs	r2, #22
 80023d6:	601a      	str	r2, [r3, #0]
	return -1;
 80023d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <_exit>:

void _exit (int status)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ec:	f04f 31ff 	mov.w	r1, #4294967295
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ffe7 	bl	80023c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023f6:	e7fe      	b.n	80023f6 <_exit+0x12>

080023f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e00a      	b.n	8002420 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800240a:	f3af 8000 	nop.w
 800240e:	4601      	mov	r1, r0
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	60ba      	str	r2, [r7, #8]
 8002416:	b2ca      	uxtb	r2, r1
 8002418:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	dbf0      	blt.n	800240a <_read+0x12>
	}

return len;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	60f8      	str	r0, [r7, #12]
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	e009      	b.n	8002458 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	60ba      	str	r2, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3301      	adds	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	429a      	cmp	r2, r3
 800245e:	dbf1      	blt.n	8002444 <_write+0x12>
	}
	return len;
 8002460:	687b      	ldr	r3, [r7, #4]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <_close>:

int _close(int file)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
	return -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002492:	605a      	str	r2, [r3, #4]
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_isatty>:

int _isatty(int file)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
	return 1;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	return 0;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d207      	bcs.n	8002514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002504:	f01f fb10 	bl	8021b28 <__errno>
 8002508:	4603      	mov	r3, r0
 800250a:	220c      	movs	r2, #12
 800250c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
 8002512:	e009      	b.n	8002528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251a:	4b07      	ldr	r3, [pc, #28]	; (8002538 <_sbrk+0x64>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	4a05      	ldr	r2, [pc, #20]	; (8002538 <_sbrk+0x64>)
 8002524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20040000 	.word	0x20040000
 8002534:	00000400 	.word	0x00000400
 8002538:	20000164 	.word	0x20000164
 800253c:	20000900 	.word	0x20000900

08002540 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <SystemInit+0x20>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a05      	ldr	r2, [pc, #20]	; (8002560 <SystemInit+0x20>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	3301      	adds	r3, #1
 8002570:	009b      	lsls	r3, r3, #2
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <TfLiteIntArrayEqual>:

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  if (a == b) return 1;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d101      	bne.n	8002594 <TfLiteIntArrayEqual+0x16>
 8002590:	2301      	movs	r3, #1
 8002592:	e010      	b.n	80025b6 <TfLiteIntArrayEqual+0x38>
  if (a == NULL || b == NULL) return 0;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d002      	beq.n	80025a0 <TfLiteIntArrayEqual+0x22>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <TfLiteIntArrayEqual+0x26>
 80025a0:	2300      	movs	r3, #0
 80025a2:	e008      	b.n	80025b6 <TfLiteIntArrayEqual+0x38>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	3304      	adds	r3, #4
 80025ac:	461a      	mov	r2, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f805 	bl	80025be <TfLiteIntArrayEqualsArray>
 80025b4:	4603      	mov	r3, r0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <TfLiteIntArrayEqualsArray>:

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]
  if (a == NULL) return (b_size == 0);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <TfLiteIntArrayEqualsArray+0x20>
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	e020      	b.n	8002620 <TfLiteIntArrayEqualsArray+0x62>
  if (a->size != b_size) return 0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d001      	beq.n	80025ec <TfLiteIntArrayEqualsArray+0x2e>
 80025e8:	2300      	movs	r3, #0
 80025ea:	e019      	b.n	8002620 <TfLiteIntArrayEqualsArray+0x62>
  int i = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
  for (; i < a->size; i++)
 80025f0:	e010      	b.n	8002614 <TfLiteIntArrayEqualsArray+0x56>
    if (a->data[i] != b_data[i]) return 0;
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	440b      	add	r3, r1
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d001      	beq.n	800260e <TfLiteIntArrayEqualsArray+0x50>
 800260a:	2300      	movs	r3, #0
 800260c:	e008      	b.n	8002620 <TfLiteIntArrayEqualsArray+0x62>
  for (; i < a->size; i++)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	429a      	cmp	r2, r3
 800261c:	dbe9      	blt.n	80025f2 <TfLiteIntArrayEqualsArray+0x34>
  return 1;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	2b10      	cmp	r3, #16
 800263a:	d847      	bhi.n	80026cc <TfLiteTypeGetName+0xa0>
 800263c:	a201      	add	r2, pc, #4	; (adr r2, 8002644 <TfLiteTypeGetName+0x18>)
 800263e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002642:	bf00      	nop
 8002644:	08002689 	.word	0x08002689
 8002648:	0800268d 	.word	0x0800268d
 800264c:	08002695 	.word	0x08002695
 8002650:	0800269d 	.word	0x0800269d
 8002654:	080026a5 	.word	0x080026a5
 8002658:	080026b9 	.word	0x080026b9
 800265c:	080026ad 	.word	0x080026ad
 8002660:	08002691 	.word	0x08002691
 8002664:	080026b1 	.word	0x080026b1
 8002668:	080026a1 	.word	0x080026a1
 800266c:	080026bd 	.word	0x080026bd
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080026b5 	.word	0x080026b5
 8002678:	080026a9 	.word	0x080026a9
 800267c:	080026c5 	.word	0x080026c5
 8002680:	080026c9 	.word	0x080026c9
 8002684:	08002699 	.word	0x08002699
    case kTfLiteNoType:
      return "NOTYPE";
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <TfLiteTypeGetName+0xb0>)
 800268a:	e020      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat32:
      return "FLOAT32";
 800268c:	4b14      	ldr	r3, [pc, #80]	; (80026e0 <TfLiteTypeGetName+0xb4>)
 800268e:	e01e      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteInt16:
      return "INT16";
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <TfLiteTypeGetName+0xb8>)
 8002692:	e01c      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteInt32:
      return "INT32";
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <TfLiteTypeGetName+0xbc>)
 8002696:	e01a      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt32:
      return "UINT32";
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <TfLiteTypeGetName+0xc0>)
 800269a:	e018      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt8:
      return "UINT8";
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <TfLiteTypeGetName+0xc4>)
 800269e:	e016      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteInt8:
      return "INT8";
 80026a0:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <TfLiteTypeGetName+0xc8>)
 80026a2:	e014      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteInt64:
      return "INT64";
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <TfLiteTypeGetName+0xcc>)
 80026a6:	e012      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteUInt64:
      return "UINT64";
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <TfLiteTypeGetName+0xd0>)
 80026aa:	e010      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteBool:
      return "BOOL";
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <TfLiteTypeGetName+0xd4>)
 80026ae:	e00e      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex64:
      return "COMPLEX64";
 80026b0:	4b14      	ldr	r3, [pc, #80]	; (8002704 <TfLiteTypeGetName+0xd8>)
 80026b2:	e00c      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteComplex128:
      return "COMPLEX128";
 80026b4:	4b14      	ldr	r3, [pc, #80]	; (8002708 <TfLiteTypeGetName+0xdc>)
 80026b6:	e00a      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteString:
      return "STRING";
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <TfLiteTypeGetName+0xe0>)
 80026ba:	e008      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat16:
      return "FLOAT16";
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <TfLiteTypeGetName+0xe4>)
 80026be:	e006      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteFloat64:
      return "FLOAT64";
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <TfLiteTypeGetName+0xe8>)
 80026c2:	e004      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteResource:
      return "RESOURCE";
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <TfLiteTypeGetName+0xec>)
 80026c6:	e002      	b.n	80026ce <TfLiteTypeGetName+0xa2>
    case kTfLiteVariant:
      return "VARIANT";
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <TfLiteTypeGetName+0xf0>)
 80026ca:	e000      	b.n	80026ce <TfLiteTypeGetName+0xa2>
  }
  return "Unknown type";
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <TfLiteTypeGetName+0xf4>)
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	080230c8 	.word	0x080230c8
 80026e0:	080230d0 	.word	0x080230d0
 80026e4:	080230d8 	.word	0x080230d8
 80026e8:	080230e0 	.word	0x080230e0
 80026ec:	080230e8 	.word	0x080230e8
 80026f0:	080230f0 	.word	0x080230f0
 80026f4:	080230f8 	.word	0x080230f8
 80026f8:	08023100 	.word	0x08023100
 80026fc:	08023108 	.word	0x08023108
 8002700:	08023110 	.word	0x08023110
 8002704:	08023118 	.word	0x08023118
 8002708:	08023124 	.word	0x08023124
 800270c:	08023130 	.word	0x08023130
 8002710:	08023138 	.word	0x08023138
 8002714:	08023140 	.word	0x08023140
 8002718:	08023148 	.word	0x08023148
 800271c:	08023154 	.word	0x08023154
 8002720:	0802315c 	.word	0x0802315c

08002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8002724:	b40e      	push	{r1, r2, r3}
 8002726:	b580      	push	{r7, lr}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800272e:	f107 0320 	add.w	r3, r7, #32
 8002732:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3308      	adds	r3, #8
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002752:	b003      	add	sp, #12
 8002754:	4770      	bx	lr

08002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8002756:	b40c      	push	{r2, r3}
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 8002762:	f107 031c 	add.w	r3, r7, #28
 8002766:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3308      	adds	r3, #8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	4798      	blx	r3
 8002778:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002786:	b002      	add	sp, #8
 8002788:	4770      	bx	lr

0800278a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80027aa:	687c      	ldr	r4, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fe79 	bl	80034a6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80027b4:	4603      	mov	r3, r0
 80027b6:	425b      	negs	r3, r3
 80027b8:	4423      	add	r3, r4
  }
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff ffe7 	bl	80027a2 <_ZNK11flatbuffers5Table9GetVTableEv>
 80027d4:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fe49 	bl	800346e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80027dc:	4603      	mov	r3, r0
 80027de:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80027e0:	887a      	ldrh	r2, [r7, #2]
 80027e2:	897b      	ldrh	r3, [r7, #10]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d207      	bcs.n	80027f8 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	4413      	add	r3, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fe3d 	bl	800346e <_ZN11flatbuffers10ReadScalarItEET_PKv>
 80027f4:	4603      	mov	r3, r0
 80027f6:	e000      	b.n	80027fa <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 80027f8:	2300      	movs	r3, #0
  }
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <_ZNK6tflite13Conv2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FUSED_ACTIVATION_FUNCTION = 10,
    VT_DILATION_W_FACTOR = 12,
    VT_DILATION_H_FACTOR = 14
  };
  tflite::Padding padding() const {
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	2104      	movs	r1, #4
 8002810:	4618      	mov	r0, r3
 8002812:	f000 fec1 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002816:	4603      	mov	r3, r0
 8002818:	b2db      	uxtb	r3, r3
  }
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <_ZNK6tflite13Conv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	2106      	movs	r1, #6
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fe83 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002836:	4603      	mov	r3, r0
  }
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <_ZNK6tflite13Conv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	2108      	movs	r1, #8
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fe74 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002854:	4603      	mov	r3, r0
  }
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	210a      	movs	r1, #10
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fe93 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002872:	4603      	mov	r3, r0
 8002874:	b2db      	uxtb	r3, r3
  }
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	210c      	movs	r1, #12
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fe55 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002892:	4603      	mov	r3, r0
  }
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	210e      	movs	r1, #14
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fe46 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80028b0:	4603      	mov	r3, r0
  }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNK6tflite13Pool2DOptions7paddingEv>:
    VT_STRIDE_H = 8,
    VT_FILTER_WIDTH = 10,
    VT_FILTER_HEIGHT = 12,
    VT_FUSED_ACTIVATION_FUNCTION = 14
  };
  tflite::Padding padding() const {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	2104      	movs	r1, #4
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fe65 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80028ce:	4603      	mov	r3, r0
 80028d0:	b2db      	uxtb	r3, r3
  }
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_ZNK6tflite13Pool2DOptions8stride_wEv>:
  int32_t stride_w() const {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2106      	movs	r1, #6
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe27 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80028ee:	4603      	mov	r3, r0
  }
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_ZNK6tflite13Pool2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	2108      	movs	r1, #8
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fe18 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800290c:	4603      	mov	r3, r0
  }
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZNK6tflite13Pool2DOptions12filter_widthEv>:
  int32_t filter_width() const {
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	210a      	movs	r1, #10
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fe09 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800292a:	4603      	mov	r3, r0
  }
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZNK6tflite13Pool2DOptions13filter_heightEv>:
  int32_t filter_height() const {
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	210c      	movs	r1, #12
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fdfa 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002948:	4603      	mov	r3, r0
  }
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	210e      	movs	r1, #14
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fe19 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002966:	4603      	mov	r3, r0
 8002968:	b2db      	uxtb	r3, r3
  }
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>:
    VT_DEPTH_MULTIPLIER = 10,
    VT_FUSED_ACTIVATION_FUNCTION = 12,
    VT_DILATION_W_FACTOR = 14,
    VT_DILATION_H_FACTOR = 16
  };
  tflite::Padding padding() const {
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	2104      	movs	r1, #4
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fe09 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002986:	4603      	mov	r3, r0
 8002988:	b2db      	uxtb	r3, r3
  }
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>:
  int32_t stride_w() const {
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_W, 0);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	2106      	movs	r1, #6
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fdcb 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80029a6:	4603      	mov	r3, r0
  }
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>:
  int32_t stride_h() const {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_STRIDE_H, 0);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2108      	movs	r1, #8
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fdbc 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80029c4:	4603      	mov	r3, r0
  }
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>:
  int32_t depth_multiplier() const {
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	210a      	movs	r1, #10
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fdad 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80029e2:	4603      	mov	r3, r0
  }
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	210c      	movs	r1, #12
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fdcc 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002a00:	4603      	mov	r3, r0
 8002a02:	b2db      	uxtb	r3, r3
  }
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>:
  int32_t dilation_w_factor() const {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	210e      	movs	r1, #14
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fd8e 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002a20:	4603      	mov	r3, r0
  }
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>:
  int32_t dilation_h_factor() const {
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	2110      	movs	r1, #16
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fd7f 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8002a3e:	4603      	mov	r3, r0
  }
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNK6tflite10AddOptions25fused_activation_functionEv>:
  typedef AddOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FUSED_ACTIVATION_FUNCTION = 4,
    VT_POT_SCALE_INT16 = 6
  };
  tflite::ActivationFunctionType fused_activation_function() const {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2104      	movs	r1, #4
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fd9e 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b2db      	uxtb	r3, r3
  }
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZNK6tflite10AddOptions15pot_scale_int16Ev>:
  bool pot_scale_int16() const {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_POT_SCALE_INT16, 1) != 0;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	2106      	movs	r1, #6
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fd31 	bl	80034de <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
  }
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <_ZNK6tflite14ReshapeOptions9new_shapeEv>:
struct ReshapeOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ReshapeOptionsT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NEW_SHAPE = 4
  };
  const flatbuffers::Vector<int32_t> *new_shape() const {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_NEW_SHAPE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fd6b 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8002aa2:	4603      	mov	r3, r0
  }
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_ZNK6tflite8Operator20builtin_options_typeEv>:
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
  }
  const flatbuffers::Vector<int32_t> *outputs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
  }
  tflite::BuiltinOptions builtin_options_type() const {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210a      	movs	r1, #10
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fd0f 	bl	80034de <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8002ac0:	4603      	mov	r3, r0
  }
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	210c      	movs	r1, #12
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fd20 	bl	800351c <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 8002adc:	4603      	mov	r3, r0
  }
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>:
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffdc 	bl	8002aac <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d104      	bne.n	8002b04 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x1e>
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffe5 	bl	8002aca <_ZNK6tflite8Operator15builtin_optionsEv>
 8002b00:	4603      	mov	r3, r0
 8002b02:	e000      	b.n	8002b06 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv+0x20>
 8002b04:	2300      	movs	r3, #0
  }
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>:
  const tflite::DepthwiseConv2DOptions *builtin_options_as_DepthwiseConv2DOptions() const {
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ffc8 	bl	8002aac <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d104      	bne.n	8002b2c <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x1e>
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ffd1 	bl	8002aca <_ZNK6tflite8Operator15builtin_optionsEv>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	e000      	b.n	8002b2e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv+0x20>
 8002b2c:	2300      	movs	r3, #0
  }
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ConcatEmbeddingsOptions ? static_cast<const tflite::ConcatEmbeddingsOptions *>(builtin_options()) : nullptr;
  }
  const tflite::LSHProjectionOptions *builtin_options_as_LSHProjectionOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_LSHProjectionOptions ? static_cast<const tflite::LSHProjectionOptions *>(builtin_options()) : nullptr;
  }
  const tflite::Pool2DOptions *builtin_options_as_Pool2DOptions() const {
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ffb4 	bl	8002aac <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d104      	bne.n	8002b54 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x1e>
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffbd 	bl	8002aca <_ZNK6tflite8Operator15builtin_optionsEv>
 8002b50:	4603      	mov	r3, r0
 8002b52:	e000      	b.n	8002b56 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv+0x20>
 8002b54:	2300      	movs	r3, #0
  }
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ConcatenationOptions *builtin_options_as_ConcatenationOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
  }
  const tflite::AddOptions *builtin_options_as_AddOptions() const {
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffa0 	bl	8002aac <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b0b      	cmp	r3, #11
 8002b70:	d104      	bne.n	8002b7c <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x1e>
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa9 	bl	8002aca <_ZNK6tflite8Operator15builtin_optionsEv>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	e000      	b.n	8002b7e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv+0x20>
 8002b7c:	2300      	movs	r3, #0
  }
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_ResizeBilinearOptions ? static_cast<const tflite::ResizeBilinearOptions *>(builtin_options()) : nullptr;
  }
  const tflite::CallOptions *builtin_options_as_CallOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_CallOptions ? static_cast<const tflite::CallOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReshapeOptions *builtin_options_as_ReshapeOptions() const {
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff8c 	bl	8002aac <_ZNK6tflite8Operator20builtin_options_typeEv>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b11      	cmp	r3, #17
 8002b98:	d104      	bne.n	8002ba4 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x1e>
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff95 	bl	8002aca <_ZNK6tflite8Operator15builtin_optionsEv>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	e000      	b.n	8002ba6 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv+0x20>
 8002ba4:	2300      	movs	r3, #0
  }
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	4610      	mov	r0, r2
 8002be8:	4798      	blx	r3
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8002c24:	f01e ff54 	bl	8021ad0 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8002c2e:	f01e ff4f 	bl	8021ad0 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8002c38:	f01e ff4a 	bl	8021ad0 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8002c42:	f01e ff45 	bl	8021ad0 <abort>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>:
// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  if (!flat_vector) {
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x22>
    TF_LITE_REPORT_ERROR(error_reporter,
 8002c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c66:	4917      	ldr	r1, [pc, #92]	; (8002cc4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x74>)
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f7ff fd5b 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input array not provided for operation '%s'.\n",
                         op_name);
    return kTfLiteError;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e024      	b.n	8002cbc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
  } else {
    size_t num_dimensions = flat_vector->size();
 8002c72:	68b8      	ldr	r0, [r7, #8]
 8002c74:	f000 fcb0 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8002c78:	6138      	str	r0, [r7, #16]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d906      	bls.n	8002c92 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x42>
      TF_LITE_REPORT_ERROR(
 8002c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c86:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x78>)
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f7ff fd4b 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e014      	b.n	8002cbc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6c>
    } else {
      for (size_t i = 0; i < num_dimensions; ++i) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20d      	bcs.n	8002cba <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x6a>
        buffer[i] = flat_vector->Get(i);
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	18d4      	adds	r4, r2, r3
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	68b8      	ldr	r0, [r7, #8]
 8002caa:	f000 fca3 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6023      	str	r3, [r4, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e7ed      	b.n	8002c96 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc+0x46>
      }
    }
  }
  return kTfLiteOk;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	08023180 	.word	0x08023180
 8002cc8:	080231b0 	.word	0x080231b0

08002ccc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d81b      	bhi.n	8002d14 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002d01 	.word	0x08002d01
 8002cec:	08002d05 	.word	0x08002d05
 8002cf0:	08002d09 	.word	0x08002d09
 8002cf4:	08002d0d 	.word	0x08002d0d
 8002cf8:	08002d11 	.word	0x08002d11
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e00a      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e008      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 8002d04:	2302      	movs	r3, #2
 8002d06:	e006      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e004      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e002      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 8002d10:	2305      	movs	r3, #5
 8002d12:	e000      	b.n	8002d16 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop

08002d24 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:

// Converts the flatbuffer padding enum to what is used at runtime.
TfLitePadding ConvertPadding(Padding padding) {
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x16>
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d002      	beq.n	8002d3e <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1a>
 8002d38:	e003      	b.n	8002d42 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x1e>
    case Padding_SAME:
      return kTfLitePaddingSame;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e002      	b.n	8002d44 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
    case Padding_VALID:
      return kTfLitePaddingValid;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e000      	b.n	8002d44 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0x20>
  }
  return kTfLitePaddingUnknown;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d873      	bhi.n	8002e4c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xfc>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002db7 	.word	0x08002db7
 8002d70:	08002dad 	.word	0x08002dad
 8002d74:	08002dd5 	.word	0x08002dd5
 8002d78:	08002de9 	.word	0x08002de9
 8002d7c:	08002dfd 	.word	0x08002dfd
 8002d80:	08002e11 	.word	0x08002e11
 8002d84:	08002e1b 	.word	0x08002e1b
 8002d88:	08002dcb 	.word	0x08002dcb
 8002d8c:	08002e25 	.word	0x08002e25
 8002d90:	08002df3 	.word	0x08002df3
 8002d94:	08002dc1 	.word	0x08002dc1
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e07 	.word	0x08002e07
 8002da0:	08002e39 	.word	0x08002e39
 8002da4:	08002e43 	.word	0x08002e43
 8002da8:	08002ddf 	.word	0x08002ddf
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	220a      	movs	r2, #10
 8002db0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002db2:	2300      	movs	r3, #0
 8002db4:	e054      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e04f      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	220b      	movs	r2, #11
 8002dc4:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e04a      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2207      	movs	r2, #7
 8002dce:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e045      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e040      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT32:
      *type = kTfLiteUInt32;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2210      	movs	r2, #16
 8002de2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e03b      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2203      	movs	r2, #3
 8002dec:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e036      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2209      	movs	r2, #9
 8002df6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e031      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2204      	movs	r2, #4
 8002e00:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e02c      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	220d      	movs	r2, #13
 8002e0a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e027      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_STRING:
      *type = kTfLiteString;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2205      	movs	r2, #5
 8002e14:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e022      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2206      	movs	r2, #6
 8002e1e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e01d      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2208      	movs	r2, #8
 8002e28:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e018      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	220c      	movs	r2, #12
 8002e32:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e013      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_RESOURCE:
      *type = kTfLiteResource;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	220e      	movs	r2, #14
 8002e3c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e00e      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    case TensorType_VARIANT:
      *type = kTfLiteVariant;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	220f      	movs	r2, #15
 8002e46:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e009      	b.n	8002e60 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x110>
    default:
      *type = kTfLiteNoType;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4904      	ldr	r1, [pc, #16]	; (8002e68 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x118>)
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fc63 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 8002e5e:	2301      	movs	r3, #1
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	080232cc 	.word	0x080232cc

08002e6c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseAdd(const Operator* op, ErrorReporter* error_reporter,
                      BuiltinDataAllocator* allocator, void** builtin_data) {
 8002e6c:	b5b0      	push	{r4, r5, r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fec5 	bl	8002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8002e86:	f107 0318 	add.w	r3, r7, #24
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff feb0 	bl	8002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteAddParams, SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteAddParams>();
 8002e92:	f107 0310 	add.w	r3, r7, #16
 8002e96:	f107 0218 	add.w	r2, r7, #24
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fbcf 	bl	8003640 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8002ea2:	f107 0310 	add.w	r3, r7, #16
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc09 	bl	80036c0 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f083 0301 	eor.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00c      	beq.n	8002ed4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8002eba:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>)
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	f240 338f 	movw	r3, #911	; 0x38f
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>)
 8002ec6:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>)
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	68b8      	ldr	r0, [r7, #8]
 8002ecc:	f7ff fc43 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8002ed0:	2401      	movs	r4, #1
 8002ed2:	e02a      	b.n	8002f2a <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>

  const AddOptions* schema_params = op->builtin_options_as_AddOptions();
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fe42 	bl	8002b5e <_ZNK6tflite8Operator29builtin_options_as_AddOptionsEv>
 8002eda:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01a      	beq.n	8002f18 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8002ee2:	69f8      	ldr	r0, [r7, #28]
 8002ee4:	f7ff fdb0 	bl	8002a48 <_ZNK6tflite10AddOptions25fused_activation_functionEv>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461d      	mov	r5, r3
    params->activation =
 8002eec:	f107 0310 	add.w	r3, r7, #16
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fbf2 	bl	80036da <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8002ef6:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f7ff fee7 	bl	8002ccc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8002efe:	4603      	mov	r3, r0
    params->activation =
 8002f00:	7023      	strb	r3, [r4, #0]
    params->pot_scale_int16 = schema_params->pot_scale_int16();
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fbe7 	bl	80036da <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	69f8      	ldr	r0, [r7, #28]
 8002f10:	f7ff fdaa 	bl	8002a68 <_ZNK6tflite10AddOptions15pot_scale_int16Ev>
 8002f14:	4603      	mov	r3, r0
 8002f16:	7063      	strb	r3, [r4, #1]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8002f18:	f107 0310 	add.w	r3, r7, #16
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fbe8 	bl	80036f2 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8002f22:	4602      	mov	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8002f28:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteAddParams>();
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fba4 	bl	800367c <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8002f34:	4623      	mov	r3, r4
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0802324c 	.word	0x0802324c
 8002f44:	080231f4 	.word	0x080231f4
 8002f48:	08023234 	.word	0x08023234

08002f4c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fe55 	bl	8002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8002f66:	f107 0318 	add.w	r3, r7, #24
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fe40 	bl	8002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteConvParams>();
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	f107 0218 	add.w	r2, r7, #24
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fbcc 	bl	800371a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8002f82:	f107 0310 	add.w	r3, r7, #16
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fc06 	bl	800379a <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f083 0301 	eor.w	r3, r3, #1
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	f240 4337 	movw	r3, #1079	; 0x437
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	4b37      	ldr	r3, [pc, #220]	; (8003084 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	68b8      	ldr	r0, [r7, #8]
 8002fac:	f7ff fbd3 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8002fb0:	2401      	movs	r4, #1
 8002fb2:	e05b      	b.n	800306c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fd96 	bl	8002ae6 <_ZNK6tflite8Operator32builtin_options_as_Conv2DOptionsEv>
 8002fba:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04b      	beq.n	800305a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8002fc2:	69f8      	ldr	r0, [r7, #28]
 8002fc4:	f7ff fc1d 	bl	8002802 <_ZNK6tflite13Conv2DOptions7paddingEv>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461d      	mov	r5, r3
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 fbef 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f7ff fea3 	bl	8002d24 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8002fe2:	f107 0310 	add.w	r3, r7, #16
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fbe4 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8002fec:	4604      	mov	r4, r0
 8002fee:	69f8      	ldr	r0, [r7, #28]
 8002ff0:	f7ff fc17 	bl	8002822 <_ZNK6tflite13Conv2DOptions8stride_wEv>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fbd9 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003002:	4604      	mov	r4, r0
 8003004:	69f8      	ldr	r0, [r7, #28]
 8003006:	f7ff fc1b 	bl	8002840 <_ZNK6tflite13Conv2DOptions8stride_hEv>
 800300a:	4603      	mov	r3, r0
 800300c:	60a3      	str	r3, [r4, #8]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800300e:	69f8      	ldr	r0, [r7, #28]
 8003010:	f7ff fc25 	bl	800285e <_ZNK6tflite13Conv2DOptions25fused_activation_functionEv>
 8003014:	4603      	mov	r3, r0
 8003016:	461d      	mov	r5, r3
    params->activation =
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fbc9 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003022:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003024:	4628      	mov	r0, r5
 8003026:	f7ff fe51 	bl	8002ccc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800302a:	4603      	mov	r3, r0
    params->activation =
 800302c:	7323      	strb	r3, [r4, #12]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fbbe 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003038:	4604      	mov	r4, r0
 800303a:	69f8      	ldr	r0, [r7, #28]
 800303c:	f7ff fc1f 	bl	800287e <_ZNK6tflite13Conv2DOptions17dilation_w_factorEv>
 8003040:	4603      	mov	r3, r0
 8003042:	6123      	str	r3, [r4, #16]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fbb3 	bl	80037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800304e:	4604      	mov	r4, r0
 8003050:	69f8      	ldr	r0, [r7, #28]
 8003052:	f7ff fc23 	bl	800289c <_ZNK6tflite13Conv2DOptions17dilation_h_factorEv>
 8003056:	4603      	mov	r3, r0
 8003058:	6163      	str	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800305a:	f107 0310 	add.w	r3, r7, #16
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fbb4 	bl	80037cc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003064:	4602      	mov	r2, r0
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800306a:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteConvParams>();
 800306c:	f107 0310 	add.w	r3, r7, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb70 	bl	8003756 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 8003076:	4623      	mov	r3, r4
}
 8003078:	4618      	mov	r0, r3
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bdb0      	pop	{r4, r5, r7, pc}
 8003080:	0802324c 	.word	0x0802324c
 8003084:	080231f4 	.word	0x080231f4
 8003088:	08023234 	.word	0x08023234

0800308c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseDepthwiseConv2D(const Operator* op,
                                  ErrorReporter* error_reporter,
                                  BuiltinDataAllocator* allocator,
                                  void** builtin_data) {
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af02      	add	r7, sp, #8
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f7ff fdb5 	bl	8002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fda0 	bl	8002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteDepthwiseConvParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	f107 0218 	add.w	r2, r7, #24
 80030ba:	4611      	mov	r1, r2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fb99 	bl	80037f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 80030c2:	f107 0310 	add.w	r3, r7, #16
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fbd3 	bl	8003874 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f083 0301 	eor.w	r3, r3, #1
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80030da:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x14c>)
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	f240 438c 	movw	r3, #1164	; 0x48c
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	4b3d      	ldr	r3, [pc, #244]	; (80031dc <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x150>)
 80030e6:	4a3e      	ldr	r2, [pc, #248]	; (80031e0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x154>)
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68b8      	ldr	r0, [r7, #8]
 80030ec:	f7ff fb33 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80030f0:	2401      	movs	r4, #1
 80030f2:	e066      	b.n	80031c2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x136>

  const DepthwiseConv2DOptions* schema_params =
      op->builtin_options_as_DepthwiseConv2DOptions();
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f7ff fd0a 	bl	8002b0e <_ZNK6tflite8Operator41builtin_options_as_DepthwiseConv2DOptionsEv>
 80030fa:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d056      	beq.n	80031b0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x124>
    params->padding = ConvertPadding(schema_params->padding());
 8003102:	69f8      	ldr	r0, [r7, #28]
 8003104:	f7ff fc35 	bl	8002972 <_ZNK6tflite22DepthwiseConv2DOptions7paddingEv>
 8003108:	4603      	mov	r3, r0
 800310a:	461d      	mov	r5, r3
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fbbc 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003116:	4604      	mov	r4, r0
 8003118:	4628      	mov	r0, r5
 800311a:	f7ff fe03 	bl	8002d24 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 800311e:	4603      	mov	r3, r0
 8003120:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fbb1 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800312c:	4604      	mov	r4, r0
 800312e:	69f8      	ldr	r0, [r7, #28]
 8003130:	f7ff fc2f 	bl	8002992 <_ZNK6tflite22DepthwiseConv2DOptions8stride_wEv>
 8003134:	4603      	mov	r3, r0
 8003136:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 8003138:	f107 0310 	add.w	r3, r7, #16
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fba6 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003142:	4604      	mov	r4, r0
 8003144:	69f8      	ldr	r0, [r7, #28]
 8003146:	f7ff fc33 	bl	80029b0 <_ZNK6tflite22DepthwiseConv2DOptions8stride_hEv>
 800314a:	4603      	mov	r3, r0
 800314c:	60a3      	str	r3, [r4, #8]
    params->depth_multiplier = schema_params->depth_multiplier();
 800314e:	f107 0310 	add.w	r3, r7, #16
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fb9b 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003158:	4604      	mov	r4, r0
 800315a:	69f8      	ldr	r0, [r7, #28]
 800315c:	f7ff fc37 	bl	80029ce <_ZNK6tflite22DepthwiseConv2DOptions16depth_multiplierEv>
 8003160:	4603      	mov	r3, r0
 8003162:	60e3      	str	r3, [r4, #12]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8003164:	69f8      	ldr	r0, [r7, #28]
 8003166:	f7ff fc41 	bl	80029ec <_ZNK6tflite22DepthwiseConv2DOptions25fused_activation_functionEv>
 800316a:	4603      	mov	r3, r0
 800316c:	461d      	mov	r5, r3
    params->activation =
 800316e:	f107 0310 	add.w	r3, r7, #16
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fb8b 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003178:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800317a:	4628      	mov	r0, r5
 800317c:	f7ff fda6 	bl	8002ccc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 8003180:	4603      	mov	r3, r0
    params->activation =
 8003182:	7423      	strb	r3, [r4, #16]

    params->dilation_width_factor = schema_params->dilation_w_factor();
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fb80 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800318e:	4604      	mov	r4, r0
 8003190:	69f8      	ldr	r0, [r7, #28]
 8003192:	f7ff fc3b 	bl	8002a0c <_ZNK6tflite22DepthwiseConv2DOptions17dilation_w_factorEv>
 8003196:	4603      	mov	r3, r0
 8003198:	6163      	str	r3, [r4, #20]
    params->dilation_height_factor = schema_params->dilation_h_factor();
 800319a:	f107 0310 	add.w	r3, r7, #16
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb75 	bl	800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80031a4:	4604      	mov	r4, r0
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f7ff fc3f 	bl	8002a2a <_ZNK6tflite22DepthwiseConv2DOptions17dilation_h_factorEv>
 80031ac:	4603      	mov	r3, r0
 80031ae:	61a3      	str	r3, [r4, #24]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb76 	bl	80038a6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80031ba:	4602      	mov	r2, r0
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80031c0:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteDepthwiseConvParams>();
 80031c2:	f107 0310 	add.w	r3, r7, #16
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 fb32 	bl	8003830 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80031cc:	4623      	mov	r3, r4
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bdb0      	pop	{r4, r5, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	0802324c 	.word	0x0802324c
 80031dc:	080231f4 	.word	0x080231f4
 80031e0:	08023234 	.word	0x08023234

080031e4 <_ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// We have this parse function instead of directly returning kTfLiteOk from the
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParsePad(const Operator*, ErrorReporter*, BuiltinDataAllocator*,
                      void**) {
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8003200:	b5b0      	push	{r4, r5, r7, lr}
 8003202:	b08a      	sub	sp, #40	; 0x28
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
 800320c:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	68b9      	ldr	r1, [r7, #8]
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f7ff fcfb 	bl	8002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800321a:	f107 0318 	add.w	r3, r7, #24
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fce6 	bl	8002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLitePoolParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8003226:	f107 0310 	add.w	r3, r7, #16
 800322a:	f107 0218 	add.w	r2, r7, #24
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f000 fb4c 	bl	80038ce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003236:	f107 0310 	add.w	r3, r7, #16
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fb86 	bl	800394e <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 8003242:	4603      	mov	r3, r0
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	f240 6333 	movw	r3, #1587	; 0x633
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4b37      	ldr	r3, [pc, #220]	; (8003338 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800325a:	4a38      	ldr	r2, [pc, #224]	; (800333c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68b8      	ldr	r0, [r7, #8]
 8003260:	f7ff fa79 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8003264:	2401      	movs	r4, #1
 8003266:	e05b      	b.n	8003320 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x120>

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f7ff fc64 	bl	8002b36 <_ZNK6tflite8Operator32builtin_options_as_Pool2DOptionsEv>
 800326e:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d04b      	beq.n	800330e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x10e>
    params->padding = ConvertPadding(schema_params->padding());
 8003276:	69f8      	ldr	r0, [r7, #28]
 8003278:	f7ff fb1f 	bl	80028ba <_ZNK6tflite13Pool2DOptions7paddingEv>
 800327c:	4603      	mov	r3, r0
 800327e:	461d      	mov	r5, r3
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fb6f 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800328a:	4604      	mov	r4, r0
 800328c:	4628      	mov	r0, r5
 800328e:	f7ff fd49 	bl	8002d24 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
 8003292:	4603      	mov	r3, r0
 8003294:	7023      	strb	r3, [r4, #0]
    params->stride_width = schema_params->stride_w();
 8003296:	f107 0310 	add.w	r3, r7, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fb64 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80032a0:	4604      	mov	r4, r0
 80032a2:	69f8      	ldr	r0, [r7, #28]
 80032a4:	f7ff fb19 	bl	80028da <_ZNK6tflite13Pool2DOptions8stride_wEv>
 80032a8:	4603      	mov	r3, r0
 80032aa:	6063      	str	r3, [r4, #4]
    params->stride_height = schema_params->stride_h();
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fb59 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80032b6:	4604      	mov	r4, r0
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f7ff fb1d 	bl	80028f8 <_ZNK6tflite13Pool2DOptions8stride_hEv>
 80032be:	4603      	mov	r3, r0
 80032c0:	60a3      	str	r3, [r4, #8]
    params->filter_width = schema_params->filter_width();
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb4e 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80032cc:	4604      	mov	r4, r0
 80032ce:	69f8      	ldr	r0, [r7, #28]
 80032d0:	f7ff fb21 	bl	8002916 <_ZNK6tflite13Pool2DOptions12filter_widthEv>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60e3      	str	r3, [r4, #12]
    params->filter_height = schema_params->filter_height();
 80032d8:	f107 0310 	add.w	r3, r7, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fb43 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80032e2:	4604      	mov	r4, r0
 80032e4:	69f8      	ldr	r0, [r7, #28]
 80032e6:	f7ff fb25 	bl	8002934 <_ZNK6tflite13Pool2DOptions13filter_heightEv>
 80032ea:	4603      	mov	r3, r0
 80032ec:	6123      	str	r3, [r4, #16]
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 80032ee:	69f8      	ldr	r0, [r7, #28]
 80032f0:	f7ff fb2f 	bl	8002952 <_ZNK6tflite13Pool2DOptions25fused_activation_functionEv>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461d      	mov	r5, r3
    params->activation =
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fb33 	bl	8003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8003302:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff fce1 	bl	8002ccc <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800330a:	4603      	mov	r3, r0
    params->activation =
 800330c:	7523      	strb	r3, [r4, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fb34 	bl	8003980 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 8003318:	4602      	mov	r2, r0
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800331e:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLitePoolParams>();
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4618      	mov	r0, r3
 8003326:	f000 faf0 	bl	800390a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800332a:	4623      	mov	r3, r4
}
 800332c:	4618      	mov	r0, r3
 800332e:	3720      	adds	r7, #32
 8003330:	46bd      	mov	sp, r7
 8003332:	bdb0      	pop	{r4, r5, r7, pc}
 8003334:	0802324c 	.word	0x0802324c
 8003338:	080231f4 	.word	0x080231f4
 800333c:	08023234 	.word	0x08023234

08003340 <_ZN6tflite10ParseRelu6EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// We have this parse function instead of directly returning kTfLiteOk from the
// switch-case in ParseOpData because this function is used as part of the
// selective registration for the OpResolver implementation in micro.
TfLiteStatus ParseRelu6(const Operator*, ErrorReporter*, BuiltinDataAllocator*,
                        void**) {
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  return kTfLiteOk;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b08d      	sub	sp, #52	; 0x34
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fc4d 	bl	8002c10 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8003376:	f107 0318 	add.w	r3, r7, #24
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fc38 	bl	8002bf2 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	f107 0218 	add.w	r2, r7, #24
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fb0b 	bl	80039a8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8003392:	f107 0310 	add.w	r3, r7, #16
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fb45 	bl	8003a28 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800339e:	4603      	mov	r3, r0
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 80033aa:	4b27      	ldr	r3, [pc, #156]	; (8003448 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xec>)
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	f240 6395 	movw	r3, #1685	; 0x695
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	4b25      	ldr	r3, [pc, #148]	; (800344c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf0>)
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf4>)
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f7ff f9cb 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80033c0:	2401      	movs	r4, #1
 80033c2:	e037      	b.n	8003434 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>

  const ReshapeOptions* schema_params = op->builtin_options_as_ReshapeOptions();
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7ff fbde 	bl	8002b86 <_ZNK6tflite8Operator33builtin_options_as_ReshapeOptionsEv>
 80033ca:	6278      	str	r0, [r7, #36]	; 0x24

  if (schema_params != nullptr) {
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d027      	beq.n	8003422 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
    const flatbuffers::Vector<int32_t>* new_shape = schema_params->new_shape();
 80033d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033d4:	f7ff fb5c 	bl	8002a90 <_ZNK6tflite14ReshapeOptions9new_shapeEv>
 80033d8:	6238      	str	r0, [r7, #32]
    if (new_shape != nullptr) {
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d020      	beq.n	8003422 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
      TF_LITE_ENSURE_STATUS(
 80033e0:	f107 0310 	add.w	r3, r7, #16
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fb2c 	bl	8003a42 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461a      	mov	r2, r3
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>)
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6a39      	ldr	r1, [r7, #32]
 80033f6:	2020      	movs	r0, #32
 80033f8:	f7ff fc2a 	bl	8002c50 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIlEEPiPNS_13ErrorReporterEPKc>
 80033fc:	4603      	mov	r3, r0
 80033fe:	77fb      	strb	r3, [r7, #31]
 8003400:	7ffb      	ldrb	r3, [r7, #31]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
 8003406:	7ffc      	ldrb	r4, [r7, #31]
 8003408:	e014      	b.n	8003434 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
          FlatBufferIntVectorToArray(sizeof(params->shape), new_shape,
                                     params->shape, error_reporter, "reshape"));
      params->num_dimensions = new_shape->size();
 800340a:	6a38      	ldr	r0, [r7, #32]
 800340c:	f000 f8e4 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003410:	4604      	mov	r4, r0
 8003412:	f107 0310 	add.w	r3, r7, #16
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fb13 	bl	8003a42 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800341c:	4603      	mov	r3, r0
 800341e:	4622      	mov	r2, r4
 8003420:	621a      	str	r2, [r3, #32]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	4618      	mov	r0, r3
 8003428:	f000 fb17 	bl	8003a5a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800342c:	4602      	mov	r2, r0
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8003432:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
 8003434:	f107 0310 	add.w	r3, r7, #16
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fad3 	bl	80039e4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800343e:	4623      	mov	r3, r4
}
 8003440:	4618      	mov	r0, r3
 8003442:	372c      	adds	r7, #44	; 0x2c
 8003444:	46bd      	mov	sp, r7
 8003446:	bd90      	pop	{r4, r7, pc}
 8003448:	0802324c 	.word	0x0802324c
 800344c:	080231f4 	.word	0x080231f4
 8003450:	08023234 	.word	0x08023234
 8003454:	0802331c 	.word	0x0802331c

08003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8003460:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fb0c 	bl	8003a98 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8003480:	4603      	mov	r3, r0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ffde 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800349c:	4603      	mov	r3, r0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fae5 	bl	8003a82 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 faee 	bl	8003ab0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 80034d4:	4603      	mov	r3, r0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80034de:	b580      	push	{r7, lr}
 80034e0:	b084      	sub	sp, #16
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	807b      	strh	r3, [r7, #2]
 80034ea:	4613      	mov	r3, r2
 80034ec:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff f965 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80034f8:	4603      	mov	r3, r0
 80034fa:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80034fc:	89fb      	ldrh	r3, [r7, #14]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d007      	beq.n	8003512 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	4413      	add	r3, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ffda 	bl	80034c2 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 800350e:	4603      	mov	r3, r0
 8003510:	e000      	b.n	8003514 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8003512:	787b      	ldrb	r3, [r7, #1]
  }
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003528:	887b      	ldrh	r3, [r7, #2]
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 facb 	bl	8003ac8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8003532:	4603      	mov	r3, r0
  }
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	460b      	mov	r3, r1
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800354a:	897b      	ldrh	r3, [r7, #10]
 800354c:	4619      	mov	r1, r3
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f7ff f937 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003554:	4603      	mov	r3, r0
 8003556:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003558:	8afb      	ldrh	r3, [r7, #22]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	8afb      	ldrh	r3, [r7, #22]
 8003562:	4413      	add	r3, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff9e 	bl	80034a6 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800356a:	4603      	mov	r3, r0
 800356c:	e000      	b.n	8003570 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800356e:	687b      	ldr	r3, [r7, #4]
  }
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fabd 	bl	8003b08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800358e:	4603      	mov	r3, r0
  }
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
 80035a4:	4613      	mov	r3, r2
 80035a6:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80035a8:	887b      	ldrh	r3, [r7, #2]
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff f908 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80035b2:	4603      	mov	r3, r0
 80035b4:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80035b6:	89fb      	ldrh	r3, [r7, #14]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	89fb      	ldrh	r3, [r7, #14]
 80035c0:	4413      	add	r3, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fac0 	bl	8003b48 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 80035c8:	4603      	mov	r3, r0
 80035ca:	e001      	b.n	80035d0 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 80035cc:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff37 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffea 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8003604:	4602      	mov	r2, r0
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4293      	cmp	r3, r2
 800360a:	d306      	bcc.n	800361a <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8003610:	f44f 7183 	mov.w	r1, #262	; 0x106
 8003614:	4809      	ldr	r0, [pc, #36]	; (800363c <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8003616:	f01e fa63 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fab5 	bl	8003b8a <_ZNK11flatbuffers6VectorIlE4DataEv>
 8003620:	4603      	mov	r3, r0
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fa9e 	bl	8003b66 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800362a:	4603      	mov	r3, r0
  }
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	0802332c 	.word	0x0802332c
 8003638:	08023338 	.word	0x08023338
 800363c:	08023408 	.word	0x08023408

08003640 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI15TfLiteAddParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fab2 	bl	8003bb8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>
 8003654:	4604      	mov	r4, r0
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	4611      	mov	r1, r2
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff faa4 	bl	8002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003666:	f107 030c 	add.w	r3, r7, #12
 800366a:	461a      	mov	r2, r3
 800366c:	4621      	mov	r1, r4
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fabc 	bl	8003bec <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	bd90      	pop	{r4, r7, pc}

0800367c <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fac5 	bl	8003c16 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800368c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 faca 	bl	8003c30 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800369c:	4604      	mov	r4, r0
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fad3 	bl	8003c4a <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>
 80036a4:	4603      	mov	r3, r0
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4619      	mov	r1, r3
 80036aa:	4620      	mov	r0, r4
 80036ac:	f7ff fa8e 	bl	8002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
      }
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <_ZStneI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    _GLIBCXX_NODISCARD inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fade 	bl	8003c8c <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
	return get();
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fae3 	bl	8003cae <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80036e8:	4603      	mov	r3, r0
      }
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fad7 	bl	8003cae <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003700:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fa86 	bl	8003c16 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800370a:	4603      	mov	r3, r0
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
	return __p;
 8003710:	68fb      	ldr	r3, [r7, #12]
      }
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLiteConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800371a:	b590      	push	{r4, r7, lr}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003728:	4618      	mov	r0, r3
 800372a:	f000 facd 	bl	8003cc8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>
 800372e:	4604      	mov	r4, r0
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fa37 	bl	8002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8003740:	f107 030c 	add.w	r3, r7, #12
 8003744:	461a      	mov	r2, r3
 8003746:	4621      	mov	r1, r4
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 fadc 	bl	8003d06 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	bd90      	pop	{r4, r7, pc}

08003756 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003756:	b590      	push	{r4, r7, lr}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fae5 	bl	8003d30 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003766:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 faea 	bl	8003d4a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003776:	4604      	mov	r4, r0
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 faf3 	bl	8003d64 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800377e:	4603      	mov	r3, r0
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4619      	mov	r1, r3
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff fa21 	bl	8002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
      }
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	bd90      	pop	{r4, r7, pc}

0800379a <_ZStneI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fafe 	bl	8003da6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	return get();
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb03 	bl	8003dc8 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80037c2:	4603      	mov	r3, r0
      }
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 faf7 	bl	8003dc8 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80037da:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 faa6 	bl	8003d30 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
	return __p;
 80037ea:	68fb      	ldr	r3, [r7, #12]
      }
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI25TfLiteDepthwiseConvParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8003802:	4618      	mov	r0, r3
 8003804:	f000 faed 	bl	8003de2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>
 8003808:	4604      	mov	r4, r0
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff f9ca 	bl	8002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800381a:	f107 030c 	add.w	r3, r7, #12
 800381e:	461a      	mov	r2, r3
 8003820:	4621      	mov	r1, r4
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fafd 	bl	8003e22 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bd90      	pop	{r4, r7, pc}

08003830 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fb06 	bl	8003e4c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003840:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fb0b 	bl	8003e66 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003850:	4604      	mov	r4, r0
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fb14 	bl	8003e80 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003858:	4603      	mov	r3, r0
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	4620      	mov	r0, r4
 8003860:	f7ff f9b4 	bl	8002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
      }
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}

08003874 <_ZStneI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fb1f 	bl	8003ec2 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003884:	4603      	mov	r3, r0
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
	return get();
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fb24 	bl	8003ee4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800389c:	4603      	mov	r3, r0
      }
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fb18 	bl	8003ee4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80038b4:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fac7 	bl	8003e4c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80038be:	4603      	mov	r3, r0
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
	return __p;
 80038c4:	68fb      	ldr	r3, [r7, #12]
      }
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI16TfLitePoolParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80038ce:	b590      	push	{r4, r7, lr}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fb0e 	bl	8003efe <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>
 80038e2:	4604      	mov	r4, r0
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	4611      	mov	r1, r2
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f95d 	bl	8002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	461a      	mov	r2, r3
 80038fa:	4621      	mov	r1, r4
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fb1b 	bl	8003f38 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	bd90      	pop	{r4, r7, pc}

0800390a <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800390a:	b590      	push	{r4, r7, lr}
 800390c:	b085      	sub	sp, #20
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fb24 	bl	8003f62 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800391a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00c      	beq.n	800393e <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fb29 	bl	8003f7c <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800392a:	4604      	mov	r4, r0
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 fb32 	bl	8003f96 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003932:	4603      	mov	r3, r0
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	4620      	mov	r0, r4
 800393a:	f7ff f947 	bl	8002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
      }
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}

0800394e <_ZStneI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fb3d 	bl	8003fd8 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800395e:	4603      	mov	r3, r0
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
	return get();
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fb42 	bl	8003ffa <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003976:	4603      	mov	r3, r0
      }
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fb36 	bl	8003ffa <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800398e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 fae5 	bl	8003f62 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003998:	4603      	mov	r3, r0
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
	return __p;
 800399e:	68fb      	ldr	r3, [r7, #12]
      }
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteReshapeParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fb2c 	bl	8004014 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>
 80039bc:	4604      	mov	r4, r0
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f107 030c 	add.w	r3, r7, #12
 80039c6:	4611      	mov	r1, r2
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff f8f0 	bl	8002bae <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 80039ce:	f107 030c 	add.w	r3, r7, #12
 80039d2:	461a      	mov	r2, r3
 80039d4:	4621      	mov	r1, r4
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fb39 	bl	800404e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>
  }
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd90      	pop	{r4, r7, pc}

080039e4 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fb42 	bl	8004078 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80039f4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00c      	beq.n	8003a18 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fb47 	bl	8004092 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8003a04:	4604      	mov	r4, r0
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fb50 	bl	80040ac <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	4620      	mov	r0, r4
 8003a14:	f7ff f8da 	bl	8002bcc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
      }
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd90      	pop	{r4, r7, pc}

08003a28 <_ZStneI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fb5b 	bl	80040ee <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
	return get();
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fb60 	bl	8004110 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003a50:	4603      	mov	r3, r0
      }
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fb54 	bl	8004110 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003a68:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fb03 	bl	8004078 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
	return __p;
 8003a78:	68fb      	ldr	r3, [r7, #12]
      }
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
    return t;
 8003a8a:	687b      	ldr	r3, [r7, #4]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
    return t;
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
    return t;
 8003aba:	79fb      	ldrb	r3, [r7, #7]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f7fe fe72 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	89fb      	ldrh	r3, [r7, #14]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003aea:	89fb      	ldrh	r3, [r7, #14]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8003af0:	68b8      	ldr	r0, [r7, #8]
 8003af2:	f7ff fcca 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8003af6:	4602      	mov	r2, r0
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4413      	add	r3, r2
                        : nullptr;
 8003afc:	e000      	b.n	8003b00 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003afe:	2300      	movs	r3, #0
  }
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fe fe52 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	89fb      	ldrh	r3, [r7, #14]
 8003b26:	4413      	add	r3, r2
 8003b28:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003b2a:	89fb      	ldrh	r3, [r7, #14]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8003b30:	68b8      	ldr	r0, [r7, #8]
 8003b32:	f7ff fcaa 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4413      	add	r3, r2
                        : nullptr;
 8003b3c:	e000      	b.n	8003b40 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003b3e:	2300      	movs	r3, #0
  }
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f993 3000 	ldrsb.w	r3, [r3]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fae7 	bl	800412a <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8003b5c:	4603      	mov	r3, r0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	4413      	add	r3, r2
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff81 	bl	8003a82 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8003b80:	4603      	mov	r3, r0
  }
 8003b82:	4618      	mov	r0, r3
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
  }
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI15TfLiteAddParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2102      	movs	r1, #2
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	4798      	blx	r3
 8003bce:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f7fe fdd8 	bl	800278a <_ZnwjPv>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2200      	movs	r2, #0
 8003bde:	701a      	strb	r2, [r3, #0]
 8003be0:	2200      	movs	r2, #0
 8003be2:	705a      	strb	r2, [r3, #1]
  }
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003bf8:	68fc      	ldr	r4, [r7, #12]
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fab1 	bl	8004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4620      	mov	r0, r4
 8003c08:	f000 f82a 	bl	8003c60 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}

08003c16 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 faa9 	bl	8004178 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_ZNSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 faa9 	bl	8004192 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZSt4moveIRP15TfLiteAddParamsEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8003c6c:	68fc      	ldr	r4, [r7, #12]
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff97 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f000 fa95 	bl	80041ac <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f80a 	bl	8003cae <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_ZNKSt10unique_ptrI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fa90 	bl	80041de <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLiteConvParamsEEPT_v>:
  T* AllocatePOD() {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	2118      	movs	r1, #24
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
 8003cde:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	2018      	movs	r0, #24
 8003ce6:	f7fe fd50 	bl	800278a <_ZnwjPv>
 8003cea:	4601      	mov	r1, r0
 8003cec:	460a      	mov	r2, r1
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	6053      	str	r3, [r2, #4]
 8003cf4:	6093      	str	r3, [r2, #8]
 8003cf6:	60d3      	str	r3, [r2, #12]
 8003cf8:	6113      	str	r3, [r2, #16]
 8003cfa:	6153      	str	r3, [r2, #20]
 8003cfc:	460b      	mov	r3, r1
  }
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8003d06:	b590      	push	{r4, r7, lr}
 8003d08:	b085      	sub	sp, #20
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003d12:	68fc      	ldr	r4, [r7, #12]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa24 	bl	8004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	4620      	mov	r0, r4
 8003d22:	f000 f82a 	bl	8003d7a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd90      	pop	{r4, r7, pc}

08003d30 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fa5d 	bl	80041fa <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8003d40:	4603      	mov	r3, r0
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <_ZNSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fa5d 	bl	8004214 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <_ZSt4moveIRP16TfLiteConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8003d86:	68fc      	ldr	r4, [r7, #12]
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff0a 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4619      	mov	r1, r3
 8003d96:	4620      	mov	r0, r4
 8003d98:	f000 fa49 	bl	800422e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}

08003da6 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f80a 	bl	8003dc8 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZNKSt10unique_ptrI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fa44 	bl	8004260 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI25TfLiteDepthwiseConvParamsEEPT_v>:
  T* AllocatePOD() {
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	211c      	movs	r1, #28
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
 8003df8:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	201c      	movs	r0, #28
 8003e00:	f7fe fcc3 	bl	800278a <_ZnwjPv>
 8003e04:	4601      	mov	r1, r0
 8003e06:	460a      	mov	r2, r1
 8003e08:	2300      	movs	r3, #0
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	6053      	str	r3, [r2, #4]
 8003e0e:	6093      	str	r3, [r2, #8]
 8003e10:	60d3      	str	r3, [r2, #12]
 8003e12:	6113      	str	r3, [r2, #16]
 8003e14:	6153      	str	r3, [r2, #20]
 8003e16:	6193      	str	r3, [r2, #24]
 8003e18:	460b      	mov	r3, r1
  }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8003e22:	b590      	push	{r4, r7, lr}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003e2e:	68fc      	ldr	r4, [r7, #12]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f996 	bl	8004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8003e36:	4603      	mov	r3, r0
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	f000 f82a 	bl	8003e96 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}

08003e4c <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fa10 	bl	800427c <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <_ZNSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fa10 	bl	8004296 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8003e76:	4603      	mov	r3, r0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZSt4moveIRP25TfLiteDepthwiseConvParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003e96:	b590      	push	{r4, r7, lr}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8003ea2:	68fc      	ldr	r4, [r7, #12]
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fe7c 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	f000 f9fc 	bl	80042b0 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f80a 	bl	8003ee4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZNKSt10unique_ptrI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f9f7 	bl	80042e2 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <_ZN6tflite20BuiltinDataAllocator11AllocatePODI16TfLitePoolParamsEEPT_v>:
  T* AllocatePOD() {
 8003efe:	b590      	push	{r4, r7, lr}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	2128      	movs	r1, #40	; 0x28
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	2028      	movs	r0, #40	; 0x28
 8003f1c:	f7fe fc35 	bl	800278a <_ZnwjPv>
 8003f20:	4604      	mov	r4, r0
 8003f22:	4620      	mov	r0, r4
 8003f24:	2328      	movs	r3, #40	; 0x28
 8003f26:	461a      	mov	r2, r3
 8003f28:	2100      	movs	r1, #0
 8003f2a:	f01d fe83 	bl	8021c34 <memset>
 8003f2e:	4623      	mov	r3, r4
  }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 8003f44:	68fc      	ldr	r4, [r7, #12]
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f90b 	bl	8004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 f82a 	bl	8003fac <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}

08003f62 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f9c6 	bl	80042fe <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8003f72:	4603      	mov	r3, r0
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZNSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f9c6 	bl	8004318 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <_ZSt4moveIRP16TfLitePoolParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8003fb8:	68fc      	ldr	r4, [r7, #12]
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fdf1 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 f9b2 	bl	8004332 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f80a 	bl	8003ffa <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZNKSt10unique_ptrI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4618      	mov	r0, r3
 8004006:	f000 f9ad 	bl	8004364 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800400a:	4603      	mov	r3, r0
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteReshapeParamsEEPT_v>:
  T* AllocatePOD() {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2204      	movs	r2, #4
 8004024:	2124      	movs	r1, #36	; 0x24
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	4798      	blx	r3
 800402a:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4619      	mov	r1, r3
 8004030:	2024      	movs	r0, #36	; 0x24
 8004032:	f7fe fbaa 	bl	800278a <_ZnwjPv>
 8004036:	4604      	mov	r4, r0
 8004038:	4620      	mov	r0, r4
 800403a:	2324      	movs	r3, #36	; 0x24
 800403c:	461a      	mov	r2, r3
 800403e:	2100      	movs	r1, #0
 8004040:	f01d fdf8 	bl	8021c34 <memset>
 8004044:	4623      	mov	r3, r4
  }
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}

0800404e <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_vEEPS0_NSt9enable_ifIXntsrSt19is_lvalue_referenceIT_E5valueEOSA_E4typeE>:
	unique_ptr(pointer __p,
 800404e:	b590      	push	{r4, r7, lr}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::move(__d))
 800405a:	68fc      	ldr	r4, [r7, #12]
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f880 	bl	8004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	68b9      	ldr	r1, [r7, #8]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f82a 	bl	80040c2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
	{ }
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	bd90      	pop	{r4, r7, pc}

08004078 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f97c 	bl	8004380 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004088:	4603      	mov	r3, r0
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <_ZNSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f97c 	bl	800439a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 80040a2:	4603      	mov	r3, r0
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZSt4moveIRP19TfLiteReshapeParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 80040c2:	b590      	push	{r4, r7, lr}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 80040ce:	68fc      	ldr	r4, [r7, #12]
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff fd66 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80040d6:	4602      	mov	r2, r0
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4619      	mov	r1, r3
 80040de:	4620      	mov	r0, r4
 80040e0:	f000 f968 	bl	80043b4 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd90      	pop	{r4, r7, pc}

080040ee <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f80a 	bl	8004110 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf14      	ite	ne
 8004102:	2301      	movne	r3, #1
 8004104:	2300      	moveq	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <_ZNKSt10unique_ptrI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f963 	bl	80043e6 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004120:	4603      	mov	r3, r0
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
    return t;
 8004134:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004138:	4618      	mov	r0, r3
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	ee07 3a90 	vmov	s15, r3
}
 8004154:	eeb0 0a67 	vmov.f32	s0, s15
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f93d 	bl	8004402 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004188:	4603      	mov	r3, r0
 800418a:	4618      	mov	r0, r3
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <_ZNSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 f93c 	bl	800441a <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80041a2:	4603      	mov	r3, r0
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <_ZNSt5tupleIJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80041ac:	b5b0      	push	{r4, r5, r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80041b8:	68fc      	ldr	r4, [r7, #12]
 80041ba:	68b8      	ldr	r0, [r7, #8]
 80041bc:	f000 f93a 	bl	8004434 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80041c0:	4605      	mov	r5, r0
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff fced 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	4629      	mov	r1, r5
 80041ce:	4620      	mov	r0, r4
 80041d0:	f000 f93b 	bl	800444a <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bdb0      	pop	{r4, r5, r7, pc}

080041de <_ZNKSt15__uniq_ptr_implI15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f94c 	bl	8004486 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80041ee:	4603      	mov	r3, r0
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 f94b 	bl	80044a0 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800420a:	4603      	mov	r3, r0
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZNSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f94a 	bl	80044b8 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004224:	4603      	mov	r3, r0
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZNSt5tupleIJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800422e:	b5b0      	push	{r4, r5, r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800423a:	68fc      	ldr	r4, [r7, #12]
 800423c:	68b8      	ldr	r0, [r7, #8]
 800423e:	f000 f948 	bl	80044d2 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004242:	4605      	mov	r5, r0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff fcac 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800424a:	4603      	mov	r3, r0
 800424c:	461a      	mov	r2, r3
 800424e:	4629      	mov	r1, r5
 8004250:	4620      	mov	r0, r4
 8004252:	f000 f949 	bl	80044e8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bdb0      	pop	{r4, r5, r7, pc}

08004260 <_ZNKSt15__uniq_ptr_implI16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f95a 	bl	8004524 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004270:	4603      	mov	r3, r0
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	f000 f959 	bl	800453e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800428c:	4603      	mov	r3, r0
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_ZNSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004296:	b580      	push	{r7, lr}
 8004298:	b082      	sub	sp, #8
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 f958 	bl	8004556 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80042a6:	4603      	mov	r3, r0
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZNSt5tupleIJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80042bc:	68fc      	ldr	r4, [r7, #12]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f000 f956 	bl	8004570 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80042c4:	4605      	mov	r5, r0
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff fc6b 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	4629      	mov	r1, r5
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 f957 	bl	8004586 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdb0      	pop	{r4, r5, r7, pc}

080042e2 <_ZNKSt15__uniq_ptr_implI25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 f968 	bl	80045c2 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80042f2:	4603      	mov	r3, r0
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f967 	bl	80045dc <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800430e:	4603      	mov	r3, r0
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <_ZNSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f966 	bl	80045f4 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004328:	4603      	mov	r3, r0
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt5tupleIJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004332:	b5b0      	push	{r4, r5, r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800433e:	68fc      	ldr	r4, [r7, #12]
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f000 f964 	bl	800460e <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004346:	4605      	mov	r5, r0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fc2a 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	4629      	mov	r1, r5
 8004354:	4620      	mov	r0, r4
 8004356:	f000 f965 	bl	8004624 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bdb0      	pop	{r4, r5, r7, pc}

08004364 <_ZNKSt15__uniq_ptr_implI16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f976 	bl	8004660 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004374:	4603      	mov	r3, r0
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f975 	bl	800467a <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004390:	4603      	mov	r3, r0
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_ZNSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 f974 	bl	8004692 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <_ZNSt5tupleIJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 80043c0:	68fc      	ldr	r4, [r7, #12]
 80043c2:	68b8      	ldr	r0, [r7, #8]
 80043c4:	f000 f972 	bl	80046ac <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80043c8:	4605      	mov	r5, r0
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fbe9 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80043d0:	4603      	mov	r3, r0
 80043d2:	461a      	mov	r2, r3
 80043d4:	4629      	mov	r1, r5
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 f973 	bl	80046c2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bdb0      	pop	{r4, r5, r7, pc}

080043e6 <_ZNKSt15__uniq_ptr_implI19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f984 	bl	80046fe <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 80043f6:	4603      	mov	r3, r0
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f9a3 	bl	8004756 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004410:	4603      	mov	r3, r0
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <_ZSt3getILj1EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800441a:	b580      	push	{r7, lr}
 800441c:	b082      	sub	sp, #8
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f977 	bl	8004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800444a:	b590      	push	{r4, r7, lr}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004456:	68fc      	ldr	r4, [r7, #12]
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7ff fba2 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800445e:	4603      	mov	r3, r0
 8004460:	4619      	mov	r1, r3
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f964 	bl	8004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1d1c      	adds	r4, r3, #4
 800446c:	68b8      	ldr	r0, [r7, #8]
 800446e:	f7ff ffe1 	bl	8004434 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004472:	4603      	mov	r3, r0
 8004474:	4619      	mov	r1, r3
 8004476:	4620      	mov	r0, r4
 8004478:	f000 f97b 	bl	8004772 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	bd90      	pop	{r4, r7, pc}

08004486 <_ZSt3getILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f97f 	bl	8004794 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f97f 	bl	80047ac <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4618      	mov	r0, r3
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt3getILj1EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 f928 	bl	8004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80044f4:	68fc      	ldr	r4, [r7, #12]
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff fb53 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80044fc:	4603      	mov	r3, r0
 80044fe:	4619      	mov	r1, r3
 8004500:	4620      	mov	r0, r4
 8004502:	f000 f915 	bl	8004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1d1c      	adds	r4, r3, #4
 800450a:	68b8      	ldr	r0, [r7, #8]
 800450c:	f7ff ffe1 	bl	80044d2 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004510:	4603      	mov	r3, r0
 8004512:	4619      	mov	r1, r3
 8004514:	4620      	mov	r0, r4
 8004516:	f000 f957 	bl	80047c8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	bd90      	pop	{r4, r7, pc}

08004524 <_ZSt3getILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f95b 	bl	80047ea <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004534:	4603      	mov	r3, r0
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f95b 	bl	8004802 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800454c:	4603      	mov	r3, r0
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_ZSt3getILj1EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f8d9 	bl	8004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004566:	4603      	mov	r3, r0
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4618      	mov	r0, r3
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr

08004586 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004586:	b590      	push	{r4, r7, lr}
 8004588:	b085      	sub	sp, #20
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004592:	68fc      	ldr	r4, [r7, #12]
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f7ff fb04 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800459a:	4603      	mov	r3, r0
 800459c:	4619      	mov	r1, r3
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 f8c6 	bl	8004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	1d1c      	adds	r4, r3, #4
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f7ff ffe1 	bl	8004570 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4619      	mov	r1, r3
 80045b2:	4620      	mov	r0, r4
 80045b4:	f000 f933 	bl	800481e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4618      	mov	r0, r3
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd90      	pop	{r4, r7, pc}

080045c2 <_ZSt3getILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 f937 	bl	8004840 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f937 	bl	8004858 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <_ZSt3getILj1EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f88a 	bl	8004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004604:	4603      	mov	r3, r0
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004624:	b590      	push	{r4, r7, lr}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004630:	68fc      	ldr	r4, [r7, #12]
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fab5 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004638:	4603      	mov	r3, r0
 800463a:	4619      	mov	r1, r3
 800463c:	4620      	mov	r0, r4
 800463e:	f000 f877 	bl	8004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1d1c      	adds	r4, r3, #4
 8004646:	68b8      	ldr	r0, [r7, #8]
 8004648:	f7ff ffe1 	bl	800460e <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800464c:	4603      	mov	r3, r0
 800464e:	4619      	mov	r1, r3
 8004650:	4620      	mov	r0, r4
 8004652:	f000 f90f 	bl	8004874 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bd90      	pop	{r4, r7, pc}

08004660 <_ZSt3getILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f913 	bl	8004896 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004670:	4603      	mov	r3, r0
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f913 	bl	80048ae <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004688:	4603      	mov	r3, r0
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <_ZSt3getILj1EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f83b 	bl	8004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80046a2:	4603      	mov	r3, r0
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 80046c2:	b590      	push	{r4, r7, lr}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 80046ce:	68fc      	ldr	r4, [r7, #12]
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fa66 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4619      	mov	r1, r3
 80046da:	4620      	mov	r0, r4
 80046dc:	f000 f828 	bl	8004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1d1c      	adds	r4, r3, #4
 80046e4:	68b8      	ldr	r0, [r7, #8]
 80046e6:	f7ff ffe1 	bl	80046ac <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4619      	mov	r1, r3
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f8eb 	bl	80048ca <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}

080046fe <_ZSt3getILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f8ef 	bl	80048ec <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800470e:	4603      	mov	r3, r0
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8ef 	bl	8004904 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8004726:	4603      	mov	r3, r0
 8004728:	4618      	mov	r0, r3
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004730:	b590      	push	{r4, r7, lr}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800473a:	687c      	ldr	r4, [r7, #4]
 800473c:	6838      	ldr	r0, [r7, #0]
 800473e:	f7ff fa30 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004742:	4603      	mov	r3, r0
 8004744:	4619      	mov	r1, r3
 8004746:	4620      	mov	r0, r4
 8004748:	f000 f8e9 	bl	800491e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bd90      	pop	{r4, r7, pc}

08004756 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f8ec 	bl	8004940 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>
 8004768:	4603      	mov	r3, r0
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004772:	b580      	push	{r7, lr}
 8004774:	b082      	sub	sp, #8
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
 800477a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800477c:	6838      	ldr	r0, [r7, #0]
 800477e:	f7ff fe59 	bl	8004434 <_ZSt7forwardIRP15TfLiteAddParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004782:	4603      	mov	r3, r0
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <_ZSt12__get_helperILj0EP15TfLiteAddParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8da 	bl	8004956 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80047a2:	4603      	mov	r3, r0
 80047a4:	4618      	mov	r0, r3
 80047a6:	3708      	adds	r7, #8
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 f8da 	bl	8004972 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>
 80047be:	4603      	mov	r3, r0
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80047d2:	6838      	ldr	r0, [r7, #0]
 80047d4:	f7ff fe7d 	bl	80044d2 <_ZSt7forwardIRP16TfLiteConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80047d8:	4603      	mov	r3, r0
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <_ZSt12__get_helperILj0EP16TfLiteConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b082      	sub	sp, #8
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f8c8 	bl	8004988 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f8c8 	bl	80049a4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>
 8004814:	4603      	mov	r3, r0
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004828:	6838      	ldr	r0, [r7, #0]
 800482a:	f7ff fea1 	bl	8004570 <_ZSt7forwardIRP25TfLiteDepthwiseConvParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800482e:	4603      	mov	r3, r0
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <_ZSt12__get_helperILj0EP25TfLiteDepthwiseConvParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8b6 	bl	80049ba <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800484e:	4603      	mov	r3, r0
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f8b6 	bl	80049d6 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>
 800486a:	4603      	mov	r3, r0
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800487e:	6838      	ldr	r0, [r7, #0]
 8004880:	f7ff fec5 	bl	800460e <_ZSt7forwardIRP16TfLitePoolParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004884:	4603      	mov	r3, r0
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <_ZSt12__get_helperILj0EP16TfLitePoolParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004896:	b580      	push	{r7, lr}
 8004898:	b082      	sub	sp, #8
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8a4 	bl	80049ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80048a4:	4603      	mov	r3, r0
 80048a6:	4618      	mov	r0, r3
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}

080048ae <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b082      	sub	sp, #8
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f8a4 	bl	8004a08 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>
 80048c0:	4603      	mov	r3, r0
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80048d4:	6838      	ldr	r0, [r7, #0]
 80048d6:	f7ff fee9 	bl	80046ac <_ZSt7forwardIRP19TfLiteReshapeParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 80048da:	4603      	mov	r3, r0
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZSt12__get_helperILj0EP19TfLiteReshapeParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f892 	bl	8004a1e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f893 	bl	8004a3a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004914:	4603      	mov	r3, r0
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004928:	6838      	ldr	r0, [r7, #0]
 800492a:	f7ff f93a 	bl	8003ba2 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800492e:	4602      	mov	r2, r0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4618      	mov	r0, r3
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_ZNSt11_Tuple_implILj0EJP15TfLiteAddParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f874 	bl	8004a50 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>
 8004968:	4603      	mov	r3, r0
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_ZNSt11_Tuple_implILj0EJP16TfLiteConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f000 f866 	bl	8004a66 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>
 800499a:	4603      	mov	r3, r0
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <_ZNSt11_Tuple_implILj0EJP25TfLiteDepthwiseConvParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b082      	sub	sp, #8
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f858 	bl	8004a7c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>
 80049cc:	4603      	mov	r3, r0
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <_ZNSt11_Tuple_implILj0EJP16TfLitePoolParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f84a 	bl	8004a92 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <_ZNSt11_Tuple_implILj0EJP19TfLiteReshapeParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 f83c 	bl	8004aa8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>
 8004a30:	4603      	mov	r3, r0
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <_ZNSt10_Head_baseILj0EP15TfLiteAddParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <_ZNSt10_Head_baseILj0EP16TfLiteConvParamsLb0EE7_M_headERKS2_>:
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4618      	mov	r0, r3
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <_ZNSt10_Head_baseILj0EP25TfLiteDepthwiseConvParamsLb0EE7_M_headERKS2_>:
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <_ZNSt10_Head_baseILj0EP16TfLitePoolParamsLb0EE7_M_headERKS2_>:
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_ZNSt10_Head_baseILj0EP19TfLiteReshapeParamsLb0EE7_M_headERKS2_>:
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f8c9 	bl	8004c60 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return names;
 8004adc:	4b02      	ldr	r3, [pc, #8]	; (8004ae8 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	080284c0 	.word	0x080284c0

08004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_HASHTABLE_SIZE)) return "";
 8004af6:	2300      	movs	r3, #0
 8004af8:	72bb      	strb	r3, [r7, #10]
 8004afa:	238b      	movs	r3, #139	; 0x8b
 8004afc:	72fb      	strb	r3, [r7, #11]
 8004afe:	f107 020b 	add.w	r2, r7, #11
 8004b02:	f107 010a 	add.w	r1, r7, #10
 8004b06:	1dfb      	adds	r3, r7, #7
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 f8b5 	bl	8004c78 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8004b16:	e008      	b.n	8004b2a <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8004b1c:	f7ff ffdc 	bl	8004ad8 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	681b      	ldr	r3, [r3, #0]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	08023b18 	.word	0x08023b18

08004b38 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2106      	movs	r1, #6
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 f8b2 	bl	8004cae <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8004b4a:	4603      	mov	r3, r0
  }
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	2108      	movs	r1, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fcea 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8004b68:	4603      	mov	r3, r0
  }
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f019 fa01 	bl	801df94 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8004b92:	4603      	mov	r3, r0
 8004b94:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ffdc 	bl	8004b54 <_ZNK6tflite12OperatorCode7versionEv>
 8004b9c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 8004b9e:	7fbb      	ldrb	r3, [r7, #30]
 8004ba0:	2b8b      	cmp	r3, #139	; 0x8b
 8004ba2:	d908      	bls.n	8004bb6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	492a      	ldr	r1, [pc, #168]	; (8004c54 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fd fdba 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77fb      	strb	r3, [r7, #31]
 8004bb4:	e048      	b.n	8004c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8004bb6:	7fbb      	ldrb	r3, [r7, #30]
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d01a      	beq.n	8004bf2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	7fb9      	ldrb	r1, [r7, #30]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	68b8      	ldr	r0, [r7, #8]
 8004bc8:	4798      	blx	r3
 8004bca:	4602      	mov	r2, r0
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d137      	bne.n	8004c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8004bd8:	7fbb      	ldrb	r3, [r7, #30]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff86 	bl	8004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8004be0:	4602      	mov	r2, r0
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	491c      	ldr	r1, [pc, #112]	; (8004c58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fd fd9c 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'. "
          "An older version of this builtin might be supported. "
          "Are you using an old TFLite binary with a newer model?\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8004bec:	2301      	movs	r3, #1
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e02a      	b.n	8004c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ffa0 	bl	8004b38 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d006      	beq.n	8004c16 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8004c08:	4914      	ldr	r1, [pc, #80]	; (8004c5c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fd fd8a 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8004c10:	2301      	movs	r3, #1
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e018      	b.n	8004c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff ff8e 	bl	8004b38 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff4d 	bl	8004abe <_ZNK11flatbuffers6String5c_strEv>
 8004c24:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	4798      	blx	r3
 8004c36:	4602      	mov	r2, r0
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8004c44:	2301      	movs	r3, #1
 8004c46:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	08023b1c 	.word	0x08023b1c
 8004c58:	08023b70 	.word	0x08023b70
 8004c5c:	08023c14 	.word	0x08023c14

08004c60 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
  }
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	781a      	ldrb	r2, [r3, #0]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d305      	bcc.n	8004c9c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d201      	bcs.n	8004ca0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f805 	bl	8004cce <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8004cc4:	4603      	mov	r3, r0
  }
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004cda:	887b      	ldrh	r3, [r7, #2]
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fd fd6f 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	4413      	add	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004cf0:	89fb      	ldrh	r3, [r7, #14]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8004cf6:	68b8      	ldr	r0, [r7, #8]
 8004cf8:	f7fe fbc7 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4413      	add	r3, r2
                        : nullptr;
 8004d02:	e000      	b.n	8004d06 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d04:	2300      	movs	r3, #0
  }
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	ed87 0a01 	vstr	s0, [r7, #4]
 8004d18:	ed97 0a01 	vldr	s0, [r7, #4]
 8004d1c:	f01c feb2 	bl	8021a84 <roundf>
 8004d20:	eef0 7a40 	vmov.f32	s15, s0
 8004d24:	eeb0 0a67 	vmov.f32	s0, s15
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 8004d2e:	b480      	push	{r7}
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8004d36:	4618      	mov	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8004d40:	b5b0      	push	{r4, r5, r7, lr}
 8004d42:	b088      	sub	sp, #32
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d5a:	f7fb fecf 	bl	8000afc <__aeabi_dcmpeq>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d006      	beq.n	8004d72 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
    *shift = 0;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    return;
 8004d70:	e06b      	b.n	8004e4a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	ed97 0b02 	vldr	d0, [r7, #8]
 8004d78:	f01c fe06 	bl	8021988 <frexp>
 8004d7c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 8004d86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d8a:	f7fb fc4f 	bl	800062c <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	ec43 2b17 	vmov	d7, r2, r3
 8004d96:	eeb0 0a47 	vmov.f32	s0, s14
 8004d9a:	eef0 0a67 	vmov.f32	s1, s15
 8004d9e:	f000 f8c1 	bl	8004f24 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8004da2:	ec53 2b10 	vmov	r2, r3, d0
 8004da6:	4610      	mov	r0, r2
 8004da8:	4619      	mov	r1, r3
 8004daa:	f7fb ff69 	bl	8000c80 <__aeabi_d2lz>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8004db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004dbe:	f04f 0100 	mov.w	r1, #0
 8004dc2:	4290      	cmp	r0, r2
 8004dc4:	eb71 0303 	sbcs.w	r3, r1, r3
 8004dc8:	da01      	bge.n	8004dce <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 8004dca:	f01c fe81 	bl	8021ad0 <abort>
  if (q_fixed == (1ll << 31)) {
 8004dce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf08      	it	eq
 8004dd6:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 8004dda:	d117      	bne.n	8004e0c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 8004ddc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de0:	0fd9      	lsrs	r1, r3, #31
 8004de2:	4608      	mov	r0, r1
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	1884      	adds	r4, r0, r2
 8004dea:	eb41 0503 	adc.w	r5, r1, r3
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	0862      	lsrs	r2, r4, #1
 8004df8:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 8004dfc:	106b      	asrs	r3, r5, #1
 8004dfe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8004e0c:	f7ff ff8f 	bl	8004d2e <_ZNSt14numeric_limitsIlE3maxEv>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4618      	mov	r0, r3
 8004e14:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8004e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e1c:	4290      	cmp	r0, r2
 8004e1e:	eb71 0303 	sbcs.w	r3, r1, r3
 8004e22:	da01      	bge.n	8004e28 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 8004e24:	f01c fe54 	bl	8021ad0 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f113 0f1f 	cmn.w	r3, #31
 8004e30:	da08      	bge.n	8004e44 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	3720      	adds	r7, #32
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e50:	41e00000 	.word	0x41e00000

08004e54 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:
  TFLITE_CHECK_GE(*left_shift, 0);
}

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_LT(double_multiplier, 1.);
 8004e62:	f04f 0200 	mov.w	r2, #0
 8004e66:	4b15      	ldr	r3, [pc, #84]	; (8004ebc <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x68>)
 8004e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e6c:	f7fb fe50 	bl	8000b10 <__aeabi_dcmplt>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x26>
 8004e76:	f01c fe2b 	bl	8021ad0 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e86:	f7fb fe61 	bl	8000b4c <__aeabi_dcmpgt>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
 8004e90:	f01c fe1e 	bl	8021ad0 <abort>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
 8004e94:	f107 0314 	add.w	r3, r7, #20
 8004e98:	4619      	mov	r1, r3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004ea0:	f7ff ff4e 	bl	8004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	dd01      	ble.n	8004eae <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x5a>
 8004eaa:	f01c fe11 	bl	8021ad0 <abort>
  *left_shift = shift;
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	601a      	str	r2, [r3, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	3ff00000 	.word	0x3ff00000

08004ec0 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	ed93 7a00 	vldr	s14, [r3]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d501      	bpl.n	8004ee4 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	e000      	b.n	8004ee6 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8004ee4:	687b      	ldr	r3, [r7, #4]
    }
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	ed93 7a00 	vldr	s14, [r3]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	edd3 7a00 	vldr	s15, [r3]
 8004f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f10:	d501      	bpl.n	8004f16 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	e000      	b.n	8004f18 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8004f16:	687b      	ldr	r3, [r7, #4]
    }
 8004f18:	4618      	mov	r0, r3
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	ed87 0b00 	vstr	d0, [r7]
 8004f2e:	ed97 0b00 	vldr	d0, [r7]
 8004f32:	f01c fd61 	bl	80219f8 <round>
 8004f36:	eeb0 7a40 	vmov.f32	s14, s0
 8004f3a:	eef0 7a60 	vmov.f32	s15, s1
 8004f3e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f42:	eef0 0a67 	vmov.f32	s1, s15
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	ed87 0a01 	vstr	s0, [r7, #4]
 8004f56:	ed97 0a01 	vldr	s0, [r7, #4]
 8004f5a:	f7ff fed8 	bl	8004d0e <_ZSt5roundf>
 8004f5e:	eef0 7a40 	vmov.f32	s15, s0
 8004f62:	eeb0 0a67 	vmov.f32	s0, s15
 8004f66:	3708      	adds	r7, #8
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	237f      	movs	r3, #127	; 0x7f
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8004f9e:	b480      	push	{r7}
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	23ff      	movs	r3, #255	; 0xff
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4b02      	ldr	r3, [pc, #8]	; (8004fc0 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	ffff8000 	.word	0xffff8000

08004fc4 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
TfLiteStatus GetIntermediatesSafe(const TfLiteContext* context,
                                  const TfLiteNode* node, int index,
                                  TfLiteTensor** tensor);
#endif  // TF_LITE_STATIC_MEMORY

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	685b      	ldr	r3, [r3, #4]
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}
#endif  // TF_LITE_STATIC_MEMORY

inline int64_t NumElements(const TfLiteIntArray* dims) {
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800501a:	f04f 0201 	mov.w	r2, #1
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8005026:	2300      	movs	r3, #0
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	429a      	cmp	r2, r3
 8005032:	da1b      	bge.n	800506c <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	461a      	mov	r2, r3
 8005040:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8005044:	6979      	ldr	r1, [r7, #20]
 8005046:	fb02 f001 	mul.w	r0, r2, r1
 800504a:	6939      	ldr	r1, [r7, #16]
 800504c:	fb03 f101 	mul.w	r1, r3, r1
 8005050:	4401      	add	r1, r0
 8005052:	6938      	ldr	r0, [r7, #16]
 8005054:	fba0 2302 	umull	r2, r3, r0, r2
 8005058:	4419      	add	r1, r3
 800505a:	460b      	mov	r3, r1
 800505c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005060:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3301      	adds	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e7de      	b.n	800502a <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800506c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff ffc1 	bl	8005012 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
}
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	ed87 0b00 	vstr	d0, [r7]
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80050b0:	ec43 2b17 	vmov	d7, r2, r3
 80050b4:	eeb0 0a47 	vmov.f32	s0, s14
 80050b8:	eef0 0a67 	vmov.f32	s1, s15
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689a      	ldr	r2, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	019b      	lsls	r3, r3, #6
 80050e0:	4413      	add	r3, r2
 80050e2:	e006      	b.n	80050f2 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2c>
  } else {
    return context->GetTensor(context, tensor_index);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4798      	blx	r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	bf00      	nop
  }
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 80050fa:	b480      	push	{r7}
 80050fc:	b087      	sub	sp, #28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	db0f      	blt.n	800512e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	da0b      	bge.n	800512e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	4413      	add	r3, r2
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d001      	beq.n	800512e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	e001      	b.n	8005132 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800512e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800514e:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f7ff ffce 	bl	80050fa <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 800515e:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da01      	bge.n	800516a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8005166:	2300      	movs	r3, #0
 8005168:	e005      	b.n	8005176 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff ffaa 	bl	80050c6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 8005172:	4603      	mov	r3, r0
 8005174:	bf00      	nop
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ffd5 	bl	800513e <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 800519e:	b580      	push	{r7, lr}
 80051a0:	b086      	sub	sp, #24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80051ae:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	3304      	adds	r3, #4
  const int tensor_index = ValidateTensorIndexing(
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff9e 	bl	80050fa <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80051be:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da01      	bge.n	80051ca <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e005      	b.n	80051d6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x38>
  }
  return GetTensorAtIndex(context, tensor_index);
 80051ca:	6979      	ldr	r1, [r7, #20]
 80051cc:	68f8      	ldr	r0, [r7, #12]
 80051ce:	f7ff ff7a 	bl	80050c6 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80051d2:	4603      	mov	r3, r0
 80051d4:	bf00      	nop
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	60f8      	str	r0, [r7, #12]
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f7ff ffc5 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8005200:	b5b0      	push	{r4, r5, r7, lr}
 8005202:	b09c      	sub	sp, #112	; 0x70
 8005204:	af04      	add	r7, sp, #16
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005214:	2b01      	cmp	r3, #1
 8005216:	d013      	beq.n	8005240 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	695c      	ldr	r4, [r3, #20]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005222:	461a      	mov	r2, r3
 8005224:	2301      	movs	r3, #1
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	9202      	str	r2, [sp, #8]
 800522a:	4b98      	ldr	r3, [pc, #608]	; (800548c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	4b98      	ldr	r3, [pc, #608]	; (8005490 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	23d8      	movs	r3, #216	; 0xd8
 8005234:	4a97      	ldr	r2, [pc, #604]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8005236:	4998      	ldr	r1, [pc, #608]	; (8005498 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	47a0      	blx	r4
 800523c:	2301      	movs	r3, #1
 800523e:	e173      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005246:	2b01      	cmp	r3, #1
 8005248:	d013      	beq.n	8005272 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	695c      	ldr	r4, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005254:	461a      	mov	r2, r3
 8005256:	2301      	movs	r3, #1
 8005258:	9303      	str	r3, [sp, #12]
 800525a:	9202      	str	r2, [sp, #8]
 800525c:	4b8b      	ldr	r3, [pc, #556]	; (800548c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	4b8e      	ldr	r3, [pc, #568]	; (800549c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	23da      	movs	r3, #218	; 0xda
 8005266:	4a8b      	ldr	r2, [pc, #556]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8005268:	498b      	ldr	r1, [pc, #556]	; (8005498 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	47a0      	blx	r4
 800526e:	2301      	movs	r3, #1
 8005270:	e15a      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005276:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 8005278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	695c      	ldr	r4, [r3, #20]
 8005282:	4b87      	ldr	r3, [pc, #540]	; (80054a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	23e5      	movs	r3, #229	; 0xe5
 8005288:	4a82      	ldr	r2, [pc, #520]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800528a:	4986      	ldr	r1, [pc, #536]	; (80054a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	47a0      	blx	r4
 8005290:	2301      	movs	r3, #1
 8005292:	e149      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 8005294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	695c      	ldr	r4, [r3, #20]
 80052a0:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	23e6      	movs	r3, #230	; 0xe6
 80052a6:	4a7b      	ldr	r2, [pc, #492]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80052a8:	497e      	ldr	r1, [pc, #504]	; (80054a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	47a0      	blx	r4
 80052ae:	2301      	movs	r3, #1
 80052b0:	e13a      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80052b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	bfcc      	ite	gt
 80052bc:	2301      	movgt	r3, #1
 80052be:	2300      	movle	r3, #0
 80052c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 80052c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d067      	beq.n	800539c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b09      	cmp	r3, #9
 80052d2:	d00e      	beq.n	80052f2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	2b07      	cmp	r3, #7
 80052da:	d00a      	beq.n	80052f2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	695c      	ldr	r4, [r3, #20]
 80052e0:	4b72      	ldr	r3, [pc, #456]	; (80054ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	23ea      	movs	r3, #234	; 0xea
 80052e6:	4a6b      	ldr	r2, [pc, #428]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 80052e8:	496e      	ldr	r1, [pc, #440]	; (80054a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	47a0      	blx	r4
 80052ee:	2301      	movs	r3, #1
 80052f0:	e11a      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b09      	cmp	r3, #9
 80052f8:	d012      	beq.n	8005320 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	695c      	ldr	r4, [r3, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	2309      	movs	r3, #9
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	9202      	str	r2, [sp, #8]
 800530a:	4b69      	ldr	r3, [pc, #420]	; (80054b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	4b69      	ldr	r3, [pc, #420]	; (80054b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	23ec      	movs	r3, #236	; 0xec
 8005314:	4a5f      	ldr	r2, [pc, #380]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8005316:	4960      	ldr	r1, [pc, #384]	; (8005498 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	47a0      	blx	r4
 800531c:	2301      	movs	r3, #1
 800531e:	e103      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8005320:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800532a:	429a      	cmp	r2, r3
 800532c:	d013      	beq.n	8005356 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	695c      	ldr	r4, [r3, #20]
 8005332:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800533c:	9203      	str	r2, [sp, #12]
 800533e:	9302      	str	r3, [sp, #8]
 8005340:	4b5d      	ldr	r3, [pc, #372]	; (80054b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	4b5d      	ldr	r3, [pc, #372]	; (80054bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	23ed      	movs	r3, #237	; 0xed
 800534a:	4a52      	ldr	r2, [pc, #328]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800534c:	4952      	ldr	r1, [pc, #328]	; (8005498 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	47a0      	blx	r4
 8005352:	2301      	movs	r3, #1
 8005354:	e0e8      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689a      	ldr	r2, [r3, #8]
 800535a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005368:	429a      	cmp	r2, r3
 800536a:	d017      	beq.n	800539c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	695c      	ldr	r4, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005384:	9302      	str	r3, [sp, #8]
 8005386:	4b4e      	ldr	r3, [pc, #312]	; (80054c0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	23ee      	movs	r3, #238	; 0xee
 8005390:	4a40      	ldr	r2, [pc, #256]	; (8005494 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 8005392:	4941      	ldr	r1, [pc, #260]	; (8005498 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	47a0      	blx	r4
 8005398:	2301      	movs	r3, #1
 800539a:	e0c5      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 80053a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 80053a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3304      	adds	r3, #4
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 80053b0:	2300      	movs	r3, #0
 80053b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053ba:	429a      	cmp	r2, r3
 80053bc:	da47      	bge.n	800544e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 80053be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053cc:	4413      	add	r3, r2
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	e001      	b.n	80053d6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 80053d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 80053d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053da:	f7fb f8cf 	bl	800057c <__aeabi_f2d>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 80053e6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80053e8:	f7fb f8c8 	bl	800057c <__aeabi_f2d>
 80053ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f0:	f7fb f91c 	bl	800062c <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4614      	mov	r4, r2
 80053fa:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 80053fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80053fe:	f7fb f8bd 	bl	800057c <__aeabi_f2d>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 8005406:	4620      	mov	r0, r4
 8005408:	4629      	mov	r1, r5
 800540a:	f7fb fa39 	bl	8000880 <__aeabi_ddiv>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8005416:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800541a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800541e:	4611      	mov	r1, r2
 8005420:	4618      	mov	r0, r3
 8005422:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8005426:	f7ff fc8b 	bl	8004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800542a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005432:	4413      	add	r3, r2
 8005434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005436:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 8005438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005440:	4413      	add	r3, r2
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 8005446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005448:	3301      	adds	r3, #1
 800544a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800544c:	e7b2      	b.n	80053b4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b03      	cmp	r3, #3
 8005454:	d146      	bne.n	80054e4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8005462:	f107 0318 	add.w	r3, r7, #24
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f000 f85c 	bl	8005530 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8005478:	4603      	mov	r3, r0
 800547a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800547e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005482:	2b00      	cmp	r3, #0
 8005484:	d01e      	beq.n	80054c4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 8005486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800548a:	e04d      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800548c:	08023d00 	.word	0x08023d00
 8005490:	08023d1c 	.word	0x08023d1c
 8005494:	08023cb0 	.word	0x08023cb0
 8005498:	08023ce4 	.word	0x08023ce4
 800549c:	08023d38 	.word	0x08023d38
 80054a0:	08023d6c 	.word	0x08023d6c
 80054a4:	08023d54 	.word	0x08023d54
 80054a8:	08023d80 	.word	0x08023d80
 80054ac:	08023d9c 	.word	0x08023d9c
 80054b0:	08023dd8 	.word	0x08023dd8
 80054b4:	08023de4 	.word	0x08023de4
 80054b8:	08023df4 	.word	0x08023df4
 80054bc:	08023e04 	.word	0x08023e04
 80054c0:	08023e28 	.word	0x08023e28
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 80054c4:	ed97 7b06 	vldr	d7, [r7, #24]
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4619      	mov	r1, r3
 80054ce:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80054d0:	eeb0 0a47 	vmov.f32	s0, s14
 80054d4:	eef0 0a67 	vmov.f32	s1, s15
 80054d8:	f7ff fc32 	bl	8004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	425a      	negs	r2, r3
 80054e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054e2:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d007      	beq.n	80054fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d003      	beq.n	80054fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80054f8:	2b07      	cmp	r3, #7
 80054fa:	d114      	bne.n	8005526 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80054fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fe:	7819      	ldrb	r1, [r3, #0]
 8005500:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800550a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f99b 	bl	8005848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005518:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 8005520:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005524:	e000      	b.n	8005528 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3760      	adds	r7, #96	; 0x60
 800552c:	46bd      	mov	sp, r7
 800552e:	bdb0      	pop	{r4, r5, r7, pc}

08005530 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	4618      	mov	r0, r3
 8005544:	f7fb f81a 	bl	800057c <__aeabi_f2d>
 8005548:	4604      	mov	r4, r0
 800554a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	4618      	mov	r0, r3
 8005552:	f7fb f813 	bl	800057c <__aeabi_f2d>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800555a:	4620      	mov	r0, r4
 800555c:	4629      	mov	r1, r5
 800555e:	f7fb f865 	bl	800062c <__aeabi_dmul>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d04b      	beq.n	8005608 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	4618      	mov	r0, r3
 8005576:	f7fb f801 	bl	800057c <__aeabi_f2d>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8005582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005586:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800558a:	f7fa fe97 	bl	80002bc <__aeabi_dsub>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	ec43 2b17 	vmov	d7, r2, r3
 8005596:	eeb0 0a47 	vmov.f32	s0, s14
 800559a:	eef0 0a67 	vmov.f32	s1, s15
 800559e:	f7ff fd7e 	bl	800509e <_ZSt3absd>
 80055a2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80055a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fa ffe6 	bl	800057c <__aeabi_f2d>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80055b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055c0:	f7fb f95e 	bl	8000880 <__aeabi_ddiv>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4610      	mov	r0, r2
 80055ca:	4619      	mov	r1, r3
 80055cc:	2301      	movs	r3, #1
 80055ce:	461c      	mov	r4, r3
 80055d0:	a318      	add	r3, pc, #96	; (adr r3, 8005634 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80055d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d6:	f7fb faa5 	bl	8000b24 <__aeabi_dcmple>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80055e0:	2300      	movs	r3, #0
 80055e2:	461c      	mov	r4, r3
 80055e4:	b2e3      	uxtb	r3, r4
 80055e6:	f083 0301 	eor.w	r3, r3, #1
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00b      	beq.n	8005608 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	695c      	ldr	r4, [r3, #20]
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 80055fc:	4a0b      	ldr	r2, [pc, #44]	; (800562c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 80055fe:	490c      	ldr	r1, [pc, #48]	; (8005630 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	47a0      	blx	r4
 8005604:	2301      	movs	r3, #1
 8005606:	e009      	b.n	800561c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xec>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f812 	bl	800563c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8005618:	4603      	mov	r3, r0
                                          multiplier);
 800561a:	bf00      	nop
}
 800561c:	4618      	mov	r0, r3
 800561e:	3730      	adds	r7, #48	; 0x30
 8005620:	46bd      	mov	sp, r7
 8005622:	bdb0      	pop	{r4, r5, r7, pc}
 8005624:	f3af 8000 	nop.w
 8005628:	08023e68 	.word	0x08023e68
 800562c:	08023cb0 	.word	0x08023cb0
 8005630:	08023d54 	.word	0x08023d54
 8005634:	47ae147b 	.word	0x47ae147b
 8005638:	3f947ae1 	.word	0x3f947ae1

0800563c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
 8005648:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	edd3 7a03 	vldr	s15, [r3, #12]
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800565a:	ee17 0a90 	vmov	r0, s15
 800565e:	f7fa ff8d 	bl	800057c <__aeabi_f2d>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800566a:	2301      	movs	r3, #1
 800566c:	461c      	mov	r4, r3
 800566e:	f04f 0200 	mov.w	r2, #0
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800567a:	f7fb fa5d 	bl	8000b38 <__aeabi_dcmpge>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 8005684:	2300      	movs	r3, #0
 8005686:	461c      	mov	r4, r3
 8005688:	b2e3      	uxtb	r3, r4
 800568a:	f083 0301 	eor.w	r3, r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	695c      	ldr	r4, [r3, #20]
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	f240 1349 	movw	r3, #329	; 0x149
 80056a0:	4a0e      	ldr	r2, [pc, #56]	; (80056dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80056a2:	490f      	ldr	r1, [pc, #60]	; (80056e0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	47a0      	blx	r4
 80056a8:	2301      	movs	r3, #1
 80056aa:	e010      	b.n	80056ce <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x92>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fa ff63 	bl	800057c <__aeabi_f2d>
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80056be:	f7fb f8df 	bl	8000880 <__aeabi_ddiv>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c8:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08023e8c 	.word	0x08023e8c
 80056dc:	08023cb0 	.word	0x08023cb0
 80056e0:	08023d54 	.word	0x08023d54

080056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	ed87 0a00 	vstr	s0, [r7]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80056f6:	ed97 7a00 	vldr	s14, [r7]
 80056fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80056fe:	eeb0 0a66 	vmov.f32	s0, s13
 8005702:	f7ff fc23 	bl	8004f4c <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8005706:	eef0 7a40 	vmov.f32	s15, s0
 800570a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800570e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005716:	4413      	add	r3, r2
  };
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b08e      	sub	sp, #56	; 0x38
 8005724:	af00      	add	r7, sp, #0
 8005726:	60b9      	str	r1, [r7, #8]
 8005728:	607a      	str	r2, [r7, #4]
 800572a:	603b      	str	r3, [r7, #0]
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800573c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d118      	bne.n	800577c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005844 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff ffc6 	bl	80056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005758:	4603      	mov	r3, r0
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	f107 021c 	add.w	r2, r7, #28
 8005760:	f107 0308 	add.w	r3, r7, #8
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f901 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800576c:	4603      	mov	r3, r0
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005778:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800577a:	e05f      	b.n	800583c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d129      	bne.n	80057d6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 8005782:	f107 0314 	add.w	r3, r7, #20
 8005786:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005844 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800578a:	4618      	mov	r0, r3
 800578c:	f7ff ffaa 	bl	80056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005790:	4603      	mov	r3, r0
 8005792:	623b      	str	r3, [r7, #32]
 8005794:	f107 0220 	add.w	r2, r7, #32
 8005798:	f107 0308 	add.w	r3, r7, #8
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f8e5 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 80057a4:	4603      	mov	r3, r0
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80057ac:	f107 0314 	add.w	r3, r7, #20
 80057b0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff95 	bl	80056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80057ba:	4603      	mov	r3, r0
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f8bd 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 80057cc:	4603      	mov	r3, r0
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057d2:	601a      	str	r2, [r3, #0]
}
 80057d4:	e032      	b.n	800583c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d129      	bne.n	8005830 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80057dc:	f107 0314 	add.w	r3, r7, #20
 80057e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff ff7d 	bl	80056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80057ea:	4603      	mov	r3, r0
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057f2:	f107 0308 	add.w	r3, r7, #8
 80057f6:	4611      	mov	r1, r2
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f8b8 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 80057fe:	4603      	mov	r3, r0
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800580e:	4618      	mov	r0, r3
 8005810:	f7ff ff68 	bl	80056e4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005814:	4603      	mov	r3, r0
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005818:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	4611      	mov	r1, r2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f890 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 8005826:	4603      	mov	r3, r0
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	e005      	b.n	800583c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005834:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583a:	601a      	str	r2, [r3, #0]
}
 800583c:	bf00      	nop
 800583e:	3738      	adds	r7, #56	; 0x38
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	00000000 	.word	0x00000000

08005848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8005848:	b590      	push	{r4, r7, lr}
 800584a:	b089      	sub	sp, #36	; 0x24
 800584c:	af02      	add	r7, sp, #8
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	607a      	str	r2, [r7, #4]
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	460b      	mov	r3, r1
 8005856:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b03      	cmp	r3, #3
 8005866:	d108      	bne.n	800587a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005868:	f7ff fb91 	bl	8004f8e <_ZNSt14numeric_limitsIhE3minEv>
 800586c:	4603      	mov	r3, r0
 800586e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 8005870:	f7ff fb95 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 8005874:	4603      	mov	r3, r0
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	e025      	b.n	80058c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b09      	cmp	r3, #9
 8005880:	d108      	bne.n	8005894 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 8005882:	f7ff fb73 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 8005886:	4603      	mov	r3, r0
 8005888:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800588a:	f7ff fb78 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800588e:	4603      	mov	r3, r0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	e018      	b.n	80058c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b07      	cmp	r3, #7
 800589a:	d108      	bne.n	80058ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800589c:	f7ff fb88 	bl	8004fb0 <_ZNSt14numeric_limitsIsE3minEv>
 80058a0:	4603      	mov	r3, r0
 80058a2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80058a4:	f7ff fb8e 	bl	8004fc4 <_ZNSt14numeric_limitsIsE3maxEv>
 80058a8:	4603      	mov	r3, r0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e00b      	b.n	80058c6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	695c      	ldr	r4, [r3, #20]
 80058b2:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	f44f 73be 	mov.w	r3, #380	; 0x17c
 80058ba:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80058bc:	490b      	ldr	r1, [pc, #44]	; (80058ec <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	47a0      	blx	r4
 80058c2:	2301      	movs	r3, #1
 80058c4:	e00a      	b.n	80058dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80058c6:	7af8      	ldrb	r0, [r7, #11]
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	9301      	str	r3, [sp, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	9300      	str	r3, [sp, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	6979      	ldr	r1, [r7, #20]
 80058d6:	f7ff ff23 	bl	8005720 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	371c      	adds	r7, #28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd90      	pop	{r4, r7, pc}
 80058e4:	08023ea8 	.word	0x08023ea8
 80058e8:	08023cb0 	.word	0x08023cb0
 80058ec:	08023d54 	.word	0x08023d54

080058f0 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f7fc fe3a 	bl	800257e <TfLiteIntArrayEqual>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2db      	uxtb	r3, r3
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	da01      	bge.n	8005938 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	e000      	b.n	800593a <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 8005938:	687b      	ldr	r3, [r7, #4]
    }
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	da01      	bge.n	8005960 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	e000      	b.n	8005962 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8005960:	687b      	ldr	r3, [r7, #4]
    }
 8005962:	4618      	mov	r0, r3
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
 8005976:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	da01      	bge.n	8005988 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	e000      	b.n	800598a <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8005988:	687b      	ldr	r3, [r7, #4]
    }
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005996:	b580      	push	{r7, lr}
 8005998:	b082      	sub	sp, #8
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 f891 	bl	8005ac8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff ffeb 	bl	8005996 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff ffe1 	bl	80059b0 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	4a04      	ldr	r2, [pc, #16]	; (8005a14 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	08028724 	.word	0x08028724

08005a18 <_ZN6tflite10OpResolverD0Ev>:
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ffe9 	bl	80059f8 <_ZN6tflite10OpResolverD1Ev>
 8005a26:	2104      	movs	r1, #4
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f01b ff69 	bl	8021900 <_ZdlPvj>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	460b      	mov	r3, r1
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	7afa      	ldrb	r2, [r7, #11]
 8005a50:	4611      	mov	r1, r2
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	4798      	blx	r3
 8005a56:	4603      	mov	r3, r0
  }
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3318      	adds	r3, #24
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	4798      	blx	r3
 8005a7a:	4603      	mov	r3, r0
  }
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ffaf 	bl	80059f8 <_ZN6tflite10OpResolverD1Ev>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	080286fc 	.word	0x080286fc

08005aa8 <_ZN6tflite15MicroOpResolverD0Ev>:
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ffe7 	bl	8005a84 <_ZN6tflite15MicroOpResolverD1Ev>
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f01b ff21 	bl	8021900 <_ZdlPvj>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f82b 	bl	8005b2c <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f833 	bl	8005b44 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>
	{ }
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	4a04      	ldr	r2, [pc, #16]	; (8005b04 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	08028724 	.word	0x08028724

08005b08 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff ffe8 	bl	8005ae8 <_ZN6tflite10OpResolverC1Ev>
 8005b18:	4a03      	ldr	r2, [pc, #12]	; (8005b28 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	080286fc 	.word	0x080286fc

08005b2c <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f819 	bl	8005b6c <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	605a      	str	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	609a      	str	r2, [r3, #8]
	{ }
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2104      	movs	r1, #4
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7fd fcf2 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005b94:	4603      	mov	r3, r0
  }
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2106      	movs	r1, #6
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fd fcf3 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	b2db      	uxtb	r3, r3
  }
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f866 	bl	8005cc2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b05      	cmp	r3, #5
 8005c0e:	dd08      	ble.n	8005c22 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f01b fe71 	bl	8021904 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b05      	cmp	r3, #5
 8005c52:	dd02      	ble.n	8005c5a <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	e001      	b.n	8005c5e <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
  }
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b082      	sub	sp, #8
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2b05      	cmp	r3, #5
 8005c7a:	dd08      	ble.n	8005c8e <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f01b fe3b 	bl	8021904 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	dd0f      	ble.n	8005cba <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d201      	bcs.n	8005ca8 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	e001      	b.n	8005cac <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 8005ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cac:	4618      	mov	r0, r3
 8005cae:	f01b fe4b 	bl	8021948 <_Znaj>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8005cce:	68b9      	ldr	r1, [r7, #8]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ffca 	bl	8005c6a <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff ffb4 	bl	8005c44 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8005cdc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	6978      	ldr	r0, [r7, #20]
 8005ce8:	f01b ff7c 	bl	8021be4 <memcpy>
  }
 8005cec:	bf00      	nop
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff5a 	bl	8005bbe <_ZN6tflite12RuntimeShapeC1Ev>
 8005d0a:	e00d      	b.n	8005d28 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	6939      	ldr	r1, [r7, #16]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff ff59 	bl	8005bda <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8005d52:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005d54:	68bb      	ldr	r3, [r7, #8]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8005d7e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005d80:	68bb      	ldr	r3, [r7, #8]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8005d8e:	b480      	push	{r7}
 8005d90:	b085      	sub	sp, #20
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
 8005d96:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	1e5a      	subs	r2, r3, #1
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	fb02 f303 	mul.w	r3, r2, r3
 8005dac:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8005dc8:	79fb      	ldrb	r3, [r7, #7]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d857      	bhi.n	8005e80 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc4>
 8005dd0:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8005dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd6:	bf00      	nop
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005e49 	.word	0x08005e49
 8005de4:	08005e59 	.word	0x08005e59
 8005de8:	08005e81 	.word	0x08005e81
 8005dec:	08005e69 	.word	0x08005e69
 8005df0:	08005e31 	.word	0x08005e31
 8005df4:	08005e71 	.word	0x08005e71
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	08005e29 	.word	0x08005e29
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e61 	.word	0x08005e61
 8005e0c:	08005e81 	.word	0x08005e81
 8005e10:	08005e81 	.word	0x08005e81
 8005e14:	08005e41 	.word	0x08005e41
    case kTfLiteFloat16:
      *size = sizeof(int16_t);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	601a      	str	r2, [r3, #0]
      break;
 8005e1e:	e031      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat32:
      *size = sizeof(float);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2204      	movs	r2, #4
 8005e24:	601a      	str	r2, [r3, #0]
      break;
 8005e26:	e02d      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteFloat64:
      *size = sizeof(double);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2208      	movs	r2, #8
 8005e2c:	601a      	str	r2, [r3, #0]
      break;
 8005e2e:	e029      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2202      	movs	r2, #2
 8005e34:	601a      	str	r2, [r3, #0]
      break;
 8005e36:	e025      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	601a      	str	r2, [r3, #0]
      break;
 8005e3e:	e021      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt32:
      *size = sizeof(uint32_t);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2204      	movs	r2, #4
 8005e44:	601a      	str	r2, [r3, #0]
      break;
 8005e46:	e01d      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
      break;
 8005e4e:	e019      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
      break;
 8005e56:	e015      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	601a      	str	r2, [r3, #0]
      break;
 8005e5e:	e011      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	2208      	movs	r2, #8
 8005e64:	601a      	str	r2, [r3, #0]
      break;
 8005e66:	e00d      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteBool:
      *size = sizeof(bool);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]
      break;
 8005e6e:	e009      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2208      	movs	r2, #8
 8005e74:	601a      	str	r2, [r3, #0]
      break;
 8005e76:	e005      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	601a      	str	r2, [r3, #0]
      break;
 8005e7e:	e001      	b.n	8005e84 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xc8>
    default:
      return kTfLiteError;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xca>
  }
  return kTfLiteOk;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fe6b 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d022      	beq.n	8005f02 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff fe5e 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f000 f884 	bl	8005fd6 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	bf34      	ite	cc
 8005ed6:	2301      	movcc	r3, #1
 8005ed8:	2300      	movcs	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff fe4e 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	69b9      	ldr	r1, [r7, #24]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fd fb82 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	fb02 f303 	mul.w	r3, r2, r3
 8005ef8:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	3301      	adds	r3, #1
 8005efe:	61bb      	str	r3, [r7, #24]
 8005f00:	e7de      	b.n	8005ec0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fe4b 	bl	8005b9e <_ZNK6tflite6Tensor4typeEv>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f107 0315 	add.w	r3, r7, #21
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	f7fc ff1c 	bl	8002d50 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	e013      	b.n	8005f4e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8005f26:	7d7b      	ldrb	r3, [r7, #21]
 8005f28:	6879      	ldr	r1, [r7, #4]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff ff46 	bl	8005dbc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005f30:	4603      	mov	r3, r0
 8005f32:	75bb      	strb	r3, [r7, #22]
 8005f34:	7dbb      	ldrb	r3, [r7, #22]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8005f3a:	7dbb      	ldrb	r3, [r7, #22]
 8005f3c:	e007      	b.n	8005f4e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	fb02 f203 	mul.w	r2, r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8005f66:	f01b fdb3 	bl	8021ad0 <abort>

  int element_count = 1;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d015      	beq.n	8005fa2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	da0d      	bge.n	8005fa2 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	613b      	str	r3, [r7, #16]
 8005fa0:	e7eb      	b.n	8005f7a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7a1b      	ldrb	r3, [r3, #8]
 8005fa6:	f107 0208 	add.w	r2, r7, #8
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff ff05 	bl	8005dbc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	73fb      	strb	r3, [r7, #15]
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	e006      	b.n	8005fce <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	fb02 f203 	mul.w	r2, r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7fd fafa 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2108      	movs	r1, #8
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 fdf8 	bl	8007bf0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8006000:	4603      	mov	r3, r0
  }
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	210a      	movs	r1, #10
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fdfa 	bl	8007c10 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800601c:	4603      	mov	r3, r0
  }
 800601e:	4618      	mov	r0, r3
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	2110      	movs	r1, #16
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd fa81 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800603a:	4603      	mov	r3, r0
  }
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	2108      	movs	r1, #8
 8006052:	4618      	mov	r0, r3
 8006054:	f001 fdec 	bl	8007c30 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006058:	4603      	mov	r3, r0
  }
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006062:	b580      	push	{r7, lr}
 8006064:	b082      	sub	sp, #8
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	210c      	movs	r1, #12
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fdfc 	bl	8007c6c <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006074:	4603      	mov	r3, r0
  }
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	210e      	movs	r1, #14
 800608c:	4618      	mov	r0, r3
 800608e:	f7fd fa26 	bl	80034de <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
  }
 800609e:	4618      	mov	r0, r3
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2104      	movs	r1, #4
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fdbb 	bl	8007c30 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80060ba:	4603      	mov	r3, r0
  }
 80060bc:	4618      	mov	r0, r3
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2106      	movs	r1, #6
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd fa51 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80060d6:	4603      	mov	r3, r0
  }
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2108      	movs	r1, #8
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fd fa43 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80060f2:	4603      	mov	r3, r0
  }
 80060f4:	4618      	mov	r0, r3
 80060f6:	3708      	adds	r7, #8
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <_ZNK6tflite8Operator14custom_optionsEv>:
    return builtin_options_type() == tflite::BuiltinOptions_HashtableImportOptions ? static_cast<const tflite::HashtableImportOptions *>(builtin_options()) : nullptr;
  }
  const tflite::HashtableSizeOptions *builtin_options_as_HashtableSizeOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_HashtableSizeOptions ? static_cast<const tflite::HashtableSizeOptions *>(builtin_options()) : nullptr;
  }
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	210e      	movs	r1, #14
 8006108:	4618      	mov	r0, r3
 800610a:	f001 fd61 	bl	8007bd0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800610e:	4603      	mov	r3, r0
  }
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <_ZNK6tflite8SubGraph7tensorsEv>:
    VT_INPUTS = 6,
    VT_OUTPUTS = 8,
    VT_OPERATORS = 10,
    VT_NAME = 12
  };
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2104      	movs	r1, #4
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fdb1 	bl	8007c8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800612a:	4603      	mov	r3, r0
  }
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2106      	movs	r1, #6
 8006140:	4618      	mov	r0, r3
 8006142:	f7fd fa19 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006146:	4603      	mov	r3, r0
  }
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2108      	movs	r1, #8
 800615c:	4618      	mov	r0, r3
 800615e:	f7fd fa0b 	bl	8003578 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006162:	4603      	mov	r3, r0
  }
 8006164:	4618      	mov	r0, r3
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	210a      	movs	r1, #10
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fd97 	bl	8007cac <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800617e:	4603      	mov	r3, r0
  }
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <_ZNK6tflite6Buffer4dataEv>:
struct Buffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BufferT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2104      	movs	r1, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fd1b 	bl	8007bd0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800619a:	4603      	mov	r3, r0
  }
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <_ZNK6tflite8Metadata4nameEv>:
  typedef MetadataT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BUFFER = 6
  };
  const flatbuffers::String *name() const {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2104      	movs	r1, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fd7c 	bl	8004cae <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80061b6:	4603      	mov	r3, r0
  }
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	2106      	movs	r1, #6
 80061ce:	4618      	mov	r0, r3
 80061d0:	f001 fd2e 	bl	8007c30 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 80061d4:	4603      	mov	r3, r0
  }
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <_ZNK6tflite5Model14operator_codesEv>:
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
    return GetField<uint32_t>(VT_VERSION, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2106      	movs	r1, #6
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 fd6e 	bl	8007ccc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80061f0:	4603      	mov	r3, r0
  }
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2108      	movs	r1, #8
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fd70 	bl	8007cec <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800620c:	4603      	mov	r3, r0
  }
 800620e:	4618      	mov	r0, r3
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	210c      	movs	r1, #12
 8006222:	4618      	mov	r0, r3
 8006224:	f001 fd72 	bl	8007d0c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8006228:	4603      	mov	r3, r0
  }
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<int32_t> *metadata_buffer() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_METADATA_BUFFER);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2110      	movs	r1, #16
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fd74 	bl	8007d2c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8006244:	4603      	mov	r3, r0
  }
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
	...

08006250 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	4a04      	ldr	r2, [pc, #16]	; (800626c <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	080287b4 	.word	0x080287b4

08006270 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff ffe9 	bl	8006250 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800627e:	2104      	movs	r1, #4
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f01b fb3d 	bl	8021900 <_ZdlPvj>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4618      	mov	r0, r3
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	4a04      	ldr	r2, [pc, #16]	; (80062ac <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	080287b4 	.word	0x080287b4

080062b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff ffe7 	bl	8006290 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 80062c2:	4a05      	ldr	r2, [pc, #20]	; (80062d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	0802875c 	.word	0x0802875c

080062dc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6858      	ldr	r0, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4798      	blx	r3
 80062fc:	4603      	mov	r3, r0
  }
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	609a      	str	r2, [r3, #8]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	60da      	str	r2, [r3, #12]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4618      	mov	r0, r3
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b09a      	sub	sp, #104	; 0x68
 8006354:	af02      	add	r7, sp, #8
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
 800635c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8006364:	f01b fbb4 	bl	8021ad0 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006368:	2300      	movs	r3, #0
 800636a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006372:	429a      	cmp	r2, r3
 8006374:	d267      	bcs.n	8006446 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	00db      	lsls	r3, r3, #3
 8006384:	440b      	add	r3, r1
 8006386:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 8006388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800638a:	4613      	mov	r3, r2
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	461a      	mov	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	4413      	add	r3, r2
 8006398:	461a      	mov	r2, r3
 800639a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639c:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800639e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	461a      	mov	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	4413      	add	r3, r2
 80063ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fdcf 	bl	8005f56 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80063be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 80063c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063ca:	e170      	b.n	80066ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	f04f 32ff 	mov.w	r2, #4294967295
 80063d2:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 80063d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d6:	f04f 32ff 	mov.w	r2, #4294967295
 80063da:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80063dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	461a      	mov	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4413      	add	r3, r2
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d113      	bne.n	800641a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80063f2:	68b8      	ldr	r0, [r7, #8]
 80063f4:	f7ff fe90 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fd2d 	bl	8007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006402:	4603      	mov	r3, r0
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff fe3a 	bl	800607e <_ZNK6tflite6Tensor11is_variableEv>
 800640a:	4603      	mov	r3, r0
 800640c:	f083 0301 	eor.w	r3, r3, #1
 8006410:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 8006416:	2201      	movs	r2, #1
 8006418:	e000      	b.n	800641c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 800641a:	2200      	movs	r2, #0
 800641c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800641e:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d007      	beq.n	8006436 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 8006426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006432:	611a      	str	r2, [r3, #16]
 8006434:	e003      	b.n	800643e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8006436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006438:	f04f 32ff 	mov.w	r2, #4294967295
 800643c:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800643e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006440:	3301      	adds	r3, #1
 8006442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006444:	e792      	b.n	800636c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006446:	2300      	movs	r3, #0
 8006448:	65bb      	str	r3, [r7, #88]	; 0x58
 800644a:	68b8      	ldr	r0, [r7, #8]
 800644c:	f7ff fe72 	bl	8006134 <_ZNK6tflite8SubGraph6inputsEv>
 8006450:	4603      	mov	r3, r0
 8006452:	4618      	mov	r0, r3
 8006454:	f7fd f8c0 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006458:	4602      	mov	r2, r0
 800645a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800645c:	4293      	cmp	r3, r2
 800645e:	bf34      	ite	cc
 8006460:	2301      	movcc	r3, #1
 8006462:	2300      	movcs	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d018      	beq.n	800649c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 800646a:	68b8      	ldr	r0, [r7, #8]
 800646c:	f7ff fe62 	bl	8006134 <_ZNK6tflite8SubGraph6inputsEv>
 8006470:	4603      	mov	r3, r0
 8006472:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006474:	4618      	mov	r0, r3
 8006476:	f7fd f8bd 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800647a:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6819      	ldr	r1, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	440b      	add	r3, r1
 800648c:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	2200      	movs	r2, #0
 8006492:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006496:	3301      	adds	r3, #1
 8006498:	65bb      	str	r3, [r7, #88]	; 0x58
 800649a:	e7d6      	b.n	800644a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800649c:	2300      	movs	r3, #0
 800649e:	657b      	str	r3, [r7, #84]	; 0x54
 80064a0:	68b8      	ldr	r0, [r7, #8]
 80064a2:	f7ff fe55 	bl	8006150 <_ZNK6tflite8SubGraph7outputsEv>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fd f895 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064b2:	4293      	cmp	r3, r2
 80064b4:	bf34      	ite	cc
 80064b6:	2301      	movcc	r3, #1
 80064b8:	2300      	movcs	r3, #0
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d021      	beq.n	8006504 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 80064c0:	68b8      	ldr	r0, [r7, #8]
 80064c2:	f7ff fe45 	bl	8006150 <_ZNK6tflite8SubGraph7outputsEv>
 80064c6:	4603      	mov	r3, r0
 80064c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fd f892 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80064d0:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6819      	ldr	r1, [r3, #0]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	4613      	mov	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	4413      	add	r3, r2
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	440b      	add	r3, r1
 80064e2:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 80064e4:	68b8      	ldr	r0, [r7, #8]
 80064e6:	f7ff fe41 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 80064ea:	4603      	mov	r3, r0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fcdb 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80064f2:	4603      	mov	r3, r0
 80064f4:	3b01      	subs	r3, #1
 80064f6:	461a      	mov	r2, r3
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80064fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064fe:	3301      	adds	r3, #1
 8006500:	657b      	str	r3, [r7, #84]	; 0x54
 8006502:	e7cd      	b.n	80064a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8006504:	68b8      	ldr	r0, [r7, #8]
 8006506:	f7ff fe31 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 800650a:	4603      	mov	r3, r0
 800650c:	4618      	mov	r0, r3
 800650e:	f001 fccb 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006512:	4603      	mov	r3, r0
 8006514:	3b01      	subs	r3, #1
 8006516:	653b      	str	r3, [r7, #80]	; 0x50
 8006518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800651a:	2b00      	cmp	r3, #0
 800651c:	db77      	blt.n	800660e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 800651e:	68b8      	ldr	r0, [r7, #8]
 8006520:	f7ff fe24 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8006524:	4602      	mov	r2, r0
 8006526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006528:	4619      	mov	r1, r3
 800652a:	4610      	mov	r0, r2
 800652c:	f001 fcca 	bl	8007ec4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8006530:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006532:	2300      	movs	r3, #0
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006536:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006538:	f7ff fdc4 	bl	80060c4 <_ZNK6tflite8Operator6inputsEv>
 800653c:	4603      	mov	r3, r0
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd f84a 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006544:	4602      	mov	r2, r0
 8006546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006548:	4293      	cmp	r3, r2
 800654a:	bf34      	ite	cc
 800654c:	2301      	movcc	r3, #1
 800654e:	2300      	movcs	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d022      	beq.n	800659c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 8006556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006558:	f7ff fdb4 	bl	80060c4 <_ZNK6tflite8Operator6inputsEv>
 800655c:	4603      	mov	r3, r0
 800655e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006560:	4618      	mov	r0, r3
 8006562:	f7fd f847 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006566:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	4413      	add	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	440b      	add	r3, r1
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d004      	beq.n	800658e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800658a:	429a      	cmp	r2, r3
 800658c:	dd02      	ble.n	8006594 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006592:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	3301      	adds	r3, #1
 8006598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800659a:	e7cc      	b.n	8006536 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800659c:	2300      	movs	r3, #0
 800659e:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065a2:	f7ff fd9d 	bl	80060e0 <_ZNK6tflite8Operator7outputsEv>
 80065a6:	4603      	mov	r3, r0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fd f815 	bl	80035d8 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80065ae:	4602      	mov	r2, r0
 80065b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b2:	4293      	cmp	r3, r2
 80065b4:	bf34      	ite	cc
 80065b6:	2301      	movcc	r3, #1
 80065b8:	2300      	movcs	r3, #0
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d022      	beq.n	8006606 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 80065c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065c2:	f7ff fd8d 	bl	80060e0 <_ZNK6tflite8Operator7outputsEv>
 80065c6:	4603      	mov	r3, r0
 80065c8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fd f812 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 80065d0:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065d8:	4613      	mov	r3, r2
 80065da:	005b      	lsls	r3, r3, #1
 80065dc:	4413      	add	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	440b      	add	r3, r1
 80065e2:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d004      	beq.n	80065f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065f4:	429a      	cmp	r2, r3
 80065f6:	da02      	bge.n	80065fe <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065fc:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80065fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006600:	3301      	adds	r3, #1
 8006602:	64bb      	str	r3, [r7, #72]	; 0x48
 8006604:	e7cc      	b.n	80065a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	3b01      	subs	r3, #1
 800660a:	653b      	str	r3, [r7, #80]	; 0x50
 800660c:	e784      	b.n	8006518 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Sanity check for valid tensor lifetime.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800660e:	2300      	movs	r3, #0
 8006610:	647b      	str	r3, [r7, #68]	; 0x44
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006618:	429a      	cmp	r2, r3
 800661a:	d247      	bcs.n	80066ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35c>
    AllocationInfo* current = &info_[i];
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6819      	ldr	r1, [r3, #0]
 8006620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006622:	4613      	mov	r3, r2
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	4413      	add	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	440b      	add	r3, r1
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
    // Even though tensor appears to be read only it may still need to be
    // allocated.
    const bool appears_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d106      	bne.n	8006646 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d001      	beq.n	8006646 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 8006646:	2300      	movs	r3, #0
    const bool appears_read_only =
 8006648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const bool has_partial_lifetime =
        !appears_read_only &&
 800664c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        ((current->first_created == -1) || (current->last_used == -1));
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	689b      	ldr	r3, [r3, #8]
        !appears_read_only &&
 800665e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006662:	d004      	beq.n	800666e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x31e>
        ((current->first_created == -1) || (current->last_used == -1));
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d101      	bne.n	8006672 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        !appears_read_only &&
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x324>
 8006672:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8006674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 8006678:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	7d1b      	ldrb	r3, [r3, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00d      	beq.n	80066a4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
      TF_LITE_REPORT_ERROR(
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68d8      	ldr	r0, [r3, #12]
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	689a      	ldr	r2, [r3, #8]
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800669a:	4907      	ldr	r1, [pc, #28]	; (80066b8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x368>)
 800669c:	f7fc f842 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e004      	b.n	80066ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80066a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a6:	3301      	adds	r3, #1
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
 80066aa:	e7b2      	b.n	8006612 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3760      	adds	r7, #96	; 0x60
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	08024718 	.word	0x08024718

080066bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08c      	sub	sp, #48	; 0x30
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 80066c8:	68b8      	ldr	r0, [r7, #8]
 80066ca:	f7ff fdb2 	bl	8006232 <_ZNK6tflite5Model8metadataEv>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bf14      	ite	ne
 80066d4:	2301      	movne	r3, #1
 80066d6:	2300      	moveq	r3, #0
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d060      	beq.n	80067a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80066de:	2300      	movs	r3, #0
 80066e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f7ff fda5 	bl	8006232 <_ZNK6tflite5Model8metadataEv>
 80066e8:	4603      	mov	r3, r0
 80066ea:	4618      	mov	r0, r3
 80066ec:	f001 fcac 	bl	8008048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f4:	4293      	cmp	r3, r2
 80066f6:	bf34      	ite	cc
 80066f8:	2301      	movcc	r3, #1
 80066fa:	2300      	movcs	r3, #0
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04e      	beq.n	80067a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8006702:	68b8      	ldr	r0, [r7, #8]
 8006704:	f7ff fd95 	bl	8006232 <_ZNK6tflite5Model8metadataEv>
 8006708:	4603      	mov	r3, r0
 800670a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800670c:	4618      	mov	r0, r3
 800670e:	f001 fca9 	bl	8008064 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8006712:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8006714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006716:	f7ff fd45 	bl	80061a4 <_ZNK6tflite8Metadata4nameEv>
 800671a:	4603      	mov	r3, r0
 800671c:	4618      	mov	r0, r3
 800671e:	f7fe f9ce 	bl	8004abe <_ZNK11flatbuffers6String5c_strEv>
 8006722:	4603      	mov	r3, r0
 8006724:	2217      	movs	r2, #23
 8006726:	4921      	ldr	r1, [pc, #132]	; (80067ac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 8006728:	4618      	mov	r0, r3
 800672a:	f01b fe97 	bl	802245c <strncmp>
 800672e:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf0c      	ite	eq
 8006734:	2301      	moveq	r3, #1
 8006736:	2300      	movne	r3, #0
 8006738:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800673a:	2b00      	cmp	r3, #0
 800673c:	d02c      	beq.n	8006798 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800673e:	68b8      	ldr	r0, [r7, #8]
 8006740:	f7ff fd69 	bl	8006216 <_ZNK6tflite5Model7buffersEv>
 8006744:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8006746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006748:	f7ff fd3a 	bl	80061c0 <_ZNK6tflite8Metadata6bufferEv>
 800674c:	4603      	mov	r3, r0
 800674e:	4619      	mov	r1, r3
 8006750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006752:	f001 fcbb 	bl	80080cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006756:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8006758:	6a38      	ldr	r0, [r7, #32]
 800675a:	f7ff fd15 	bl	8006188 <_ZNK6tflite6Buffer4dataEv>
 800675e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 8006760:	69f8      	ldr	r0, [r7, #28]
 8006762:	f001 fcc1 	bl	80080e8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006766:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	3308      	adds	r3, #8
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	429a      	cmp	r2, r3
 8006782:	d009      	beq.n	8006798 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68d8      	ldr	r0, [r3, #12]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4908      	ldr	r1, [pc, #32]	; (80067b0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8006790:	f7fb ffc8 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8006794:	2301      	movs	r3, #1
 8006796:	e004      	b.n	80067a2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	3301      	adds	r3, #1
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800679e:	e7a0      	b.n	80066e2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3730      	adds	r7, #48	; 0x30
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	08028738 	.word	0x08028738
 80067b0:	080246cc 	.word	0x080246cc

080067b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4413      	add	r3, r2
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d232      	bcs.n	800683c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4413      	add	r3, r2
 80067e4:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	440b      	add	r3, r1
 8006806:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	f04f 32ff 	mov.w	r2, #4294967295
 800682c:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	2201      	movs	r2, #1
 8006832:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	3301      	adds	r3, #1
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e7c4      	b.n	80067c6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3724      	adds	r7, #36	; 0x24
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800684a:	b590      	push	{r4, r7, lr}
 800684c:	b08b      	sub	sp, #44	; 0x2c
 800684e:	af02      	add	r7, sp, #8
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006858:	2300      	movs	r3, #0
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d247      	bcs.n	80068f4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	4613      	mov	r3, r2
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	4413      	add	r3, r2
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	461a      	mov	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4413      	add	r3, r2
 8006874:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	7d1b      	ldrb	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d036      	beq.n	80068ec <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2110      	movs	r1, #16
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fa82 	bl	8005d8e <_ZN6tflite11AlignSizeUpEjj>
 800688a:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d114      	bne.n	80068c0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3308      	adds	r3, #8
 800689c:	681c      	ldr	r4, [r3, #0]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	6899      	ldr	r1, [r3, #8]
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	460b      	mov	r3, r1
 80068ac:	68f9      	ldr	r1, [r7, #12]
 80068ae:	68b8      	ldr	r0, [r7, #8]
 80068b0:	47a0      	blx	r4
 80068b2:	4603      	mov	r3, r0
 80068b4:	74bb      	strb	r3, [r7, #18]
 80068b6:	7cbb      	ldrb	r3, [r7, #18]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80068bc:	7cbb      	ldrb	r3, [r7, #18]
 80068be:	e01a      	b.n	80068f6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 80068c0:	6979      	ldr	r1, [r7, #20]
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	6898      	ldr	r0, [r3, #8]
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	6912      	ldr	r2, [r2, #16]
 80068ce:	9201      	str	r2, [sp, #4]
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	4603      	mov	r3, r0
 80068d4:	460a      	mov	r2, r1
 80068d6:	68f9      	ldr	r1, [r7, #12]
 80068d8:	68b8      	ldr	r0, [r7, #8]
 80068da:	f00c fb71 	bl	8012fc0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 80068de:	4603      	mov	r3, r0
 80068e0:	74fb      	strb	r3, [r7, #19]
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	e004      	b.n	80068f6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
 80068f2:	e7b3      	b.n	800685c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3724      	adds	r7, #36	; 0x24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}

080068fe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80068fe:	b590      	push	{r4, r7, lr}
 8006900:	b08b      	sub	sp, #44	; 0x2c
 8006902:	af00      	add	r7, sp, #0
 8006904:	60f8      	str	r0, [r7, #12]
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800690c:	2300      	movs	r3, #0
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006910:	2300      	movs	r3, #0
 8006912:	623b      	str	r3, [r7, #32]
 8006914:	6a3a      	ldr	r2, [r7, #32]
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	429a      	cmp	r2, r3
 800691a:	d22e      	bcs.n	800697a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	4613      	mov	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4413      	add	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	461a      	mov	r2, r3
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	4413      	add	r3, r2
 800692c:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	7d1b      	ldrb	r3, [r3, #20]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01d      	beq.n	8006972 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 8006936:	f04f 33ff 	mov.w	r3, #4294967295
 800693a:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	3314      	adds	r3, #20
 8006942:	681c      	ldr	r4, [r3, #0]
 8006944:	f107 0314 	add.w	r3, r7, #20
 8006948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	68b8      	ldr	r0, [r7, #8]
 800694e:	47a0      	blx	r4
 8006950:	4603      	mov	r3, r0
 8006952:	76fb      	strb	r3, [r7, #27]
 8006954:	7efb      	ldrb	r3, [r7, #27]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800695a:	7efb      	ldrb	r3, [r7, #27]
 800695c:	e00e      	b.n	800697c <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	4619      	mov	r1, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	440a      	add	r2, r1
 800696a:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	3301      	adds	r3, #1
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	3301      	adds	r3, #1
 8006976:	623b      	str	r3, [r7, #32]
 8006978:	e7cc      	b.n	8006914 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	372c      	adds	r7, #44	; 0x2c
 8006980:	46bd      	mov	sp, r7
 8006982:	bd90      	pop	{r4, r7, pc}

08006984 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fb56 	bl	8006044 <_ZNK6tflite6Tensor6bufferEv>
 8006998:	4603      	mov	r3, r0
 800699a:	4619      	mov	r1, r3
 800699c:	6838      	ldr	r0, [r7, #0]
 800699e:	f001 fb95 	bl	80080cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80069a2:	6138      	str	r0, [r7, #16]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d015      	beq.n	80069d6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f7ff fbec 	bl	8006188 <_ZNK6tflite6Buffer4dataEv>
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f001 f9c7 	bl	8007d4c <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 fb8a 	bl	80080e8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80069d4:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 80069e0:	b590      	push	{r4, r7, lr}
 80069e2:	b08d      	sub	sp, #52	; 0x34
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	460b      	mov	r3, r1
 80069ee:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 80069f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 80069f6:	f01b f86b 	bl	8021ad0 <abort>

  *result = {};
 80069fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fc:	4618      	mov	r0, r3
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	461a      	mov	r2, r3
 8006a02:	2100      	movs	r1, #0
 8006a04:	f01b f916 	bl	8021c34 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f8c8 	bl	8005b9e <_ZNK6tflite6Tensor4typeEv>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	4618      	mov	r0, r3
 8006a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a16:	4619      	mov	r1, r3
 8006a18:	f7fc f99a 	bl	8002d50 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 8006a2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a2e:	e127      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff fb24 	bl	800607e <_ZNK6tflite6Tensor11is_variableEv>
 8006a36:	4603      	mov	r3, r0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7ff ff9e 	bl	8006984 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4c:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a58:	2202      	movs	r2, #2
 8006a5a:	751a      	strb	r2, [r3, #20]
 8006a5c:	e002      	b.n	8006a64 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a60:	2201      	movs	r2, #1
 8006a62:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8006a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a66:	f103 0118 	add.w	r1, r3, #24
 8006a6a:	f107 0210 	add.w	r2, r7, #16
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff fa0f 	bl	8005e94 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8006a76:	4603      	mov	r3, r0
 8006a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a7c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d002      	beq.n	8006a8a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8006a84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006a88:	e0fa      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f7ff f879 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aa2:	4a79      	ldr	r2, [pc, #484]	; (8006c88 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a8>)
 8006aa4:	609a      	str	r2, [r3, #8]
 8006aa6:	e013      	b.n	8006ad0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f7ff f86a 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f001 fb22 	bl	8008100 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8006ac2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d002      	beq.n	8006ad0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8006aca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006ace:	e0d7      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fac6 	bl	8006062 <_ZNK6tflite6Tensor12quantizationEv>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d021      	beq.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 8006ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae0:	f7ff fa85 	bl	8005fee <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01b      	beq.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 8006aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aec:	f7ff fa7f 	bl	8005fee <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006af0:	4603      	mov	r3, r0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 f938 	bl	8007d68 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006af8:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d011      	beq.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 8006afe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b00:	f7ff fa83 	bl	800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006b04:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 8006b0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b0c:	f7ff fa7d 	bl	800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006b10:	4603      	mov	r3, r0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 f95e 	bl	8007dd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8006b18:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 8006b22:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80aa 	beq.w	8006c7e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8006b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b2c:	f7ff fa5f 	bl	8005fee <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2100      	movs	r1, #0
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 f925 	bl	8007d84 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8006b3a:	eef0 7a40 	vmov.f32	s15, s0
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8006b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b46:	f7ff fa60 	bl	800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f001 f94e 	bl	8007df0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
    result->params.zero_point =
 8006b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5a:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8006b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b5e:	f7ff fa46 	bl	8005fee <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 f8ff 	bl	8007d68 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8006b6e:	7afb      	ldrb	r3, [r7, #11]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d009      	beq.n	8006b88 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a8>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3310      	adds	r3, #16
 8006b7a:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	210c      	movs	r1, #12
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	4798      	blx	r3
 8006b84:	4603      	mov	r3, r0
 8006b86:	e008      	b.n	8006b9a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ba>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	330c      	adds	r3, #12
 8006b8e:	681b      	ldr	r3, [r3, #0]
                  allocator->AllocateFromTail(
 8006b90:	2204      	movs	r2, #4
 8006b92:	210c      	movs	r1, #12
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	4798      	blx	r3
 8006b98:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8006b9a:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d105      	bne.n	8006bae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1ce>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006ba2:	493a      	ldr	r1, [pc, #232]	; (8006c8c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8006ba4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006ba6:	f7fb fdbd 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e068      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00d      	beq.n	8006bd0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f0>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3310      	adds	r3, #16
 8006bba:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006bbc:	6a38      	ldr	r0, [r7, #32]
 8006bbe:	f7fb fcd1 	bl	8002564 <TfLiteIntArrayGetSizeInBytes>
 8006bc2:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	47a0      	blx	r4
 8006bcc:	4603      	mov	r3, r0
 8006bce:	e00c      	b.n	8006bea <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20a>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006bd8:	6a38      	ldr	r0, [r7, #32]
 8006bda:	f7fb fcc3 	bl	8002564 <TfLiteIntArrayGetSizeInBytes>
 8006bde:	4603      	mov	r3, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8006be0:	2204      	movs	r2, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	47a0      	blx	r4
 8006be8:	4603      	mov	r3, r0
    quantization->zero_point =
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	6053      	str	r3, [r2, #4]
    if (quantization->zero_point == nullptr) {
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d105      	bne.n	8006c02 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x222>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006bf6:	4926      	ldr	r1, [pc, #152]	; (8006c90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8006bf8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006bfa:	f7fb fd93 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e03e      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006c02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c04:	f7ff f9f3 	bl	8005fee <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f001 fa8f 	bl	8008132 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006c14:	4603      	mov	r3, r0
 8006c16:	76fb      	strb	r3, [r7, #27]
 8006c18:	7efb      	ldrb	r3, [r7, #27]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x242>
 8006c1e:	7efb      	ldrb	r3, [r7, #27]
 8006c20:	e02e      	b.n	8006c80 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	3304      	adds	r3, #4
 8006c30:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8006c32:	2300      	movs	r3, #0
 8006c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c38:	6a3b      	ldr	r3, [r7, #32]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	da12      	bge.n	8006c64 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x284>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8006c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c40:	f7ff f9e3 	bl	800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006c44:	4602      	mov	r2, r0
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	f001 f8d0 	bl	8007df0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	4413      	add	r3, r2
 8006c58:	4602      	mov	r2, r0
 8006c5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	3301      	adds	r3, #1
 8006c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c62:	e7e8      	b.n	8006c36 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x256>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8006c64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c66:	f7ff f9de 	bl	8006026 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8006c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3734      	adds	r7, #52	; 0x34
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd90      	pop	{r4, r7, pc}
 8006c88:	08028750 	.word	0x08028750
 8006c8c:	0802477c 	.word	0x0802477c
 8006c90:	080247ac 	.word	0x080247ac

08006c94 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  *result = {};
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	6013      	str	r3, [r2, #0]
 8006caa:	6053      	str	r3, [r2, #4]
 8006cac:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006cae:	68b8      	ldr	r0, [r7, #8]
 8006cb0:	f7fe ff75 	bl	8005b9e <_ZNK6tflite6Tensor4typeEv>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f7fc f846 	bl	8002d50 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
 8006cd0:	e027      	b.n	8006d22 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006cd2:	6879      	ldr	r1, [r7, #4]
 8006cd4:	68b8      	ldr	r0, [r7, #8]
 8006cd6:	f7ff fe55 	bl	8006984 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8006ce0:	68b8      	ldr	r0, [r7, #8]
 8006ce2:	f7fe ff4e 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	4a0c      	ldr	r2, [pc, #48]	; (8006d2c <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	e010      	b.n	8006d20 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006cfe:	68b8      	ldr	r0, [r7, #8]
 8006d00:	f7fe ff3f 	bl	8005b82 <_ZNK6tflite6Tensor5shapeEv>
 8006d04:	4602      	mov	r2, r0
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f001 f9f7 	bl	8008100 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75bb      	strb	r3, [r7, #22]
 8006d16:	7dbb      	ldrb	r3, [r7, #22]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8006d1c:	7dbb      	ldrb	r3, [r7, #22]
 8006d1e:	e000      	b.n	8006d22 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	08028750 	.word	0x08028750

08006d30 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8006d3c:	4a0c      	ldr	r2, [pc, #48]	; (8006d70 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	605a      	str	r2, [r3, #4]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	609a      	str	r2, [r3, #8]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	731a      	strb	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	615a      	str	r2, [r3, #20]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4618      	mov	r0, r3
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	08028774 	.word	0x08028774

08006d74 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	4a04      	ldr	r2, [pc, #16]	; (8006d90 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	08028774 	.word	0x08028774

08006d94 <_ZN6tflite14MicroAllocatorD0Ev>:
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ffe9 	bl	8006d74 <_ZN6tflite14MicroAllocatorD1Ev>
 8006da2:	2118      	movs	r1, #24
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f01a fdab 	bl	8021900 <_ZdlPvj>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006dc0:	2110      	movs	r1, #16
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7fe ffb4 	bl	8005d30 <_ZN6tflite14AlignPointerUpEPhj>
 8006dc8:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	441a      	add	r2, r3
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fe64 	bl	8009aa8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8006de0:	4603      	mov	r3, r0
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 f805 	bl	8006df4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006dea:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8006df4:	b590      	push	{r4, r7, lr}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8006e04:	f01a fe64 	bl	8021ad0 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8006e0e:	f01a fe5f 	bl	8021ad0 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	681b      	ldr	r3, [r3, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 8006e1a:	2204      	movs	r2, #4
 8006e1c:	2118      	movs	r1, #24
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
 8006e22:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4619      	mov	r1, r3
 8006e28:	2018      	movs	r0, #24
 8006e2a:	f7fb fcae 	bl	800278a <_ZnwjPv>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff ff7b 	bl	8006d30 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006e3a:	60bc      	str	r4, [r7, #8]
  return allocator;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd90      	pop	{r4, r7, pc}
	...

08006e48 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 8006e48:	b590      	push	{r4, r7, lr}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 8006e5c:	f01a fe38 	bl	8021ad0 <abort>

  if (model_is_allocating_) {
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	7b1b      	ldrb	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4923      	ldr	r1, [pc, #140]	; (8006efc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xb4>)
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fb fc58 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e03c      	b.n	8006ef2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  }

  model_is_allocating_ = true;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 fe76 	bl	8007b70 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8006e84:	4603      	mov	r3, r0
 8006e86:	75fb      	strb	r3, [r7, #23]
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x4a>
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	e02f      	b.n	8006ef2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3320      	adds	r3, #32
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e9c:	68b9      	ldr	r1, [r7, #8]
 8006e9e:	68f8      	ldr	r0, [r7, #12]
 8006ea0:	4798      	blx	r3
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75bb      	strb	r3, [r7, #22]
 8006ea6:	7dbb      	ldrb	r3, [r7, #22]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x68>
 8006eac:	7dbb      	ldrb	r3, [r7, #22]
 8006eae:	e020      	b.n	8006ef2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3318      	adds	r3, #24
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	68b9      	ldr	r1, [r7, #8]
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	4798      	blx	r3
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	757b      	strb	r3, [r7, #21]
 8006ec4:	7d7b      	ldrb	r3, [r7, #21]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x86>
 8006eca:	7d7b      	ldrb	r3, [r7, #21]
 8006ecc:	e011      	b.n	8006ef2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	331c      	adds	r3, #28
 8006ed4:	681c      	ldr	r4, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	47a0      	blx	r4
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	753b      	strb	r3, [r7, #20]
 8006ee6:	7d3b      	ldrb	r3, [r7, #20]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa8>
 8006eec:	7d3b      	ldrb	r3, [r7, #20]
 8006eee:	e000      	b.n	8006ef2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd90      	pop	{r4, r7, pc}
 8006efa:	bf00      	nop
 8006efc:	080247dc 	.word	0x080247dc

08006f00 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle** scratch_buffer_handles) {
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b089      	sub	sp, #36	; 0x24
 8006f04:	af02      	add	r7, sp, #8
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	7b1b      	ldrb	r3, [r3, #12]
 8006f12:	f083 0301 	eor.w	r3, r3, #1
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4924      	ldr	r1, [pc, #144]	; (8006fb4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb4>)
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fb fbfe 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e03f      	b.n	8006fac <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 fc94 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8006f34:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x40>
 8006f3c:	f01a fdc8 	bl	8021ad0 <abort>

  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3334      	adds	r3, #52	; 0x34
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	6912      	ldr	r2, [r2, #16]
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	74fb      	strb	r3, [r7, #19]
 8006f56:	7cfb      	ldrb	r3, [r7, #19]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x60>
 8006f5c:	7cfb      	ldrb	r3, [r7, #19]
 8006f5e:	e025      	b.n	8006fac <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
      scratch_buffer_handles, scratch_buffer_request_count_));
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	3330      	adds	r3, #48	; 0x30
 8006f66:	681c      	ldr	r4, [r3, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	47a0      	blx	r4
 8006f78:	4603      	mov	r3, r0
 8006f7a:	74bb      	strb	r3, [r7, #18]
 8006f7c:	7cbb      	ldrb	r3, [r7, #18]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
 8006f82:	7cbb      	ldrb	r3, [r7, #18]
 8006f84:	e012      	b.n	8006fac <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
                                               *scratch_buffer_handles));
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3324      	adds	r3, #36	; 0x24
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	4798      	blx	r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	747b      	strb	r3, [r7, #17]
 8006f9a:	7c7b      	ldrb	r3, [r7, #17]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa4>
 8006fa0:	7c7b      	ldrb	r3, [r7, #17]
 8006fa2:	e003      	b.n	8006fac <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>

  model_is_allocating_ = false;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	371c      	adds	r7, #28
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd90      	pop	{r4, r7, pc}
 8006fb4:	08024834 	.word	0x08024834

08006fb8 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6858      	ldr	r0, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	4798      	blx	r3
 8006fd6:	4603      	mov	r3, r0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int* buffer_idx) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fddc 	bl	8007baa <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006ff2:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	61bb      	str	r3, [r7, #24]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	429a      	cmp	r2, r3
 8007004:	d20e      	bcs.n	8007024 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	00db      	lsls	r3, r3, #3
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	4413      	add	r3, r2
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d102      	bne.n	800701c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x3c>
      ++current_node_request_count;
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3301      	adds	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e7eb      	b.n	8006ffc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x1c>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8007024:	69fb      	ldr	r3, [r7, #28]
 8007026:	2b0b      	cmp	r3, #11
 8007028:	d908      	bls.n	800703c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>
    TF_LITE_REPORT_ERROR(
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	220c      	movs	r2, #12
 8007030:	4913      	ldr	r1, [pc, #76]	; (8007080 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0xa0>)
 8007032:	4618      	mov	r0, r3
 8007034:	f7fb fb76 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8007038:	2301      	movs	r3, #1
 800703a:	e01c      	b.n	8007076 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x96>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	4413      	add	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	461a      	mov	r2, r3
 800704c:	2300      	movs	r3, #0
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	1c5a      	adds	r2, r3, #1
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	08024880 	.word	0x08024880

08007084 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fd85 	bl	8007baa <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 80070a0:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80070a2:	2300      	movs	r3, #0
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d211      	bcs.n	80070d4 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4413      	add	r3, r2
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d105      	bne.n	80070cc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4413      	add	r3, r2
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3301      	adds	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e7e8      	b.n	80070a6 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6858      	ldr	r0, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	3308      	adds	r3, #8
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6912      	ldr	r2, [r2, #16]
 80070e6:	320c      	adds	r2, #12
 80070e8:	00d1      	lsls	r1, r2, #3
 80070ea:	2204      	movs	r2, #4
 80070ec:	4798      	blx	r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	e000      	b.n	80070fe <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <_ZNK6tflite14MicroAllocator10used_bytesEv>:

size_t MicroAllocator::used_bytes() const {
 8007106:	b580      	push	{r7, lr}
 8007108:	b082      	sub	sp, #8
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  return memory_allocator_->GetUsedBytes();
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4618      	mov	r0, r3
 8007114:	f002 fdf8 	bl	8009d08 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>
 8007118:	4603      	mov	r3, r0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 8007124:	b5b0      	push	{r4, r5, r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 8007136:	f01a fccb 	bl	8021ad0 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 fb8d 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007142:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 800714a:	f01a fcc1 	bl	8021ad0 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685d      	ldr	r5, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f7ff f805 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8007162:	4603      	mov	r3, r0
 8007164:	4618      	mov	r0, r3
 8007166:	f000 fe9f 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800716a:	4602      	mov	r2, r0
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
      memory_allocator_->AllocateFromTail(
 8007174:	2204      	movs	r2, #4
 8007176:	4619      	mov	r1, r3
 8007178:	4628      	mov	r0, r5
 800717a:	47a0      	blx	r4
 800717c:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d107      	bne.n	8007194 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4906      	ldr	r1, [pc, #24]	; (80071a4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 800718a:	4618      	mov	r0, r3
 800718c:	f7fb faca 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8007190:	2301      	movs	r3, #1
 8007192:	e003      	b.n	800719c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bdb0      	pop	{r4, r5, r7, pc}
 80071a4:	080248b8 	.word	0x080248b8

080071a8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 80071a8:	b5b0      	push	{r4, r5, r7, lr}
 80071aa:	b098      	sub	sp, #96	; 0x60
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 80071bc:	f01a fc88 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 80071c6:	f01a fc83 	bl	8021ad0 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fb45 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80071d2:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 80071d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 80071da:	f01a fc79 	bl	8021ad0 <abort>

  TfLiteStatus status = kTfLiteOk;
 80071de:	2300      	movs	r3, #0
 80071e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 80071e4:	68b8      	ldr	r0, [r7, #8]
 80071e6:	f7fe fffa 	bl	80061de <_ZNK6tflite5Model14operator_codesEv>
 80071ea:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	f107 0320 	add.w	r3, r7, #32
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff f85a 	bl	80062b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80071fc:	2300      	movs	r3, #0
 80071fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007200:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007202:	f7fe ffb3 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8007206:	4603      	mov	r3, r0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fe4d 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800720e:	4602      	mov	r2, r0
 8007210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007212:	4293      	cmp	r3, r2
 8007214:	bf34      	ite	cc
 8007216:	2301      	movcc	r3, #1
 8007218:	2300      	movcs	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 812c 	beq.w	800747a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 8007222:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007224:	f7fe ffa2 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8007228:	4603      	mov	r3, r0
 800722a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fe49 	bl	8007ec4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8007232:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 8007234:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007236:	f7fe ff36 	bl	80060a6 <_ZNK6tflite8Operator12opcode_indexEv>
 800723a:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 800723c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800723e:	f000 fe67 	bl	8007f10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007242:	4602      	mov	r2, r0
 8007244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007246:	4293      	cmp	r3, r2
 8007248:	bf2c      	ite	cs
 800724a:	2301      	movcs	r3, #1
 800724c:	2300      	movcc	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800725a:	498d      	ldr	r1, [pc, #564]	; (8007490 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 800725c:	4618      	mov	r0, r3
 800725e:	f7fb fa61 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8007262:	2401      	movs	r4, #1
 8007264:	e10a      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 8007266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007268:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800726a:	f000 ff7b 	bl	8008164 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800726e:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007270:	6879      	ldr	r1, [r7, #4]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8007276:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	461a      	mov	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	4602      	mov	r2, r0
 800728a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800728c:	f7fd fc72 	bl	8004b74 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8007290:	4603      	mov	r3, r0
 8007292:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 8007296:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800729a:	2b00      	cmp	r3, #0
 800729c:	d011      	beq.n	80072c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689c      	ldr	r4, [r3, #8]
 80072a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80072a4:	f016 fe76 	bl	801df94 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 80072a8:	4603      	mov	r3, r0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fd fc1e 	bl	8004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80072b0:	4603      	mov	r3, r0
 80072b2:	461a      	mov	r2, r3
 80072b4:	4977      	ldr	r1, [pc, #476]	; (8007494 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 80072b6:	4620      	mov	r0, r4
 80072b8:	f7fb fa34 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
      return status;
 80072bc:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 80072c0:	e0dc      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 80072c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072c4:	4613      	mov	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4413      	add	r3, r2
 80072ca:	00db      	lsls	r3, r3, #3
 80072cc:	461a      	mov	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	4413      	add	r3, r2
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d108      	bne.n	80072ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072e2:	496d      	ldr	r1, [pc, #436]	; (8007498 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fb fa1d 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 80072ea:	2401      	movs	r4, #1
 80072ec:	e0c6      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 80072f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 80072f6:	2300      	movs	r3, #0
 80072f8:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 80072fe:	2300      	movs	r3, #0
 8007300:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 8007302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007306:	2b20      	cmp	r3, #32
 8007308:	d11b      	bne.n	8007342 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 800730a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800730c:	f7fe fef6 	bl	80060fc <_ZNK6tflite8Operator14custom_optionsEv>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	bf14      	ite	ne
 8007316:	2301      	movne	r3, #1
 8007318:	2300      	moveq	r3, #0
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d059      	beq.n	80073d4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 8007320:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007322:	f7fe feeb 	bl	80060fc <_ZNK6tflite8Operator14custom_optionsEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fedd 	bl	80080e8 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800732e:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 8007330:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007332:	f7fe fee3 	bl	80060fc <_ZNK6tflite8Operator14custom_optionsEv>
 8007336:	4603      	mov	r3, r0
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fd07 	bl	8007d4c <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800733e:	6578      	str	r0, [r7, #84]	; 0x54
 8007340:	e048      	b.n	80073d4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 8007342:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007344:	f7fe feda 	bl	80060fc <_ZNK6tflite8Operator14custom_optionsEv>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	bf14      	ite	ne
 800734e:	2301      	movne	r3, #1
 8007350:	2300      	moveq	r3, #0
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00e      	beq.n	8007376 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689c      	ldr	r4, [r3, #8]
 800735c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007360:	4618      	mov	r0, r3
 8007362:	f7fd fbc3 	bl	8004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	494c      	ldr	r1, [pc, #304]	; (800749c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 800736c:	4620      	mov	r0, r4
 800736e:	f7fb f9d9 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8007372:	2401      	movs	r4, #1
 8007374:	e082      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	331c      	adds	r3, #28
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007382:	4611      	mov	r1, r2
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	4798      	blx	r3
 8007388:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 800738a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10e      	bne.n	80073ae <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689c      	ldr	r4, [r3, #8]
 8007394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007398:	4618      	mov	r0, r3
 800739a:	f7fd fba7 	bl	8004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800739e:	4603      	mov	r3, r0
 80073a0:	461a      	mov	r2, r3
 80073a2:	493f      	ldr	r1, [pc, #252]	; (80074a0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7fb f9bd 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 80073aa:	2401      	movs	r4, #1
 80073ac:	e066      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6899      	ldr	r1, [r3, #8]
 80073b2:	f107 031c 	add.w	r3, r7, #28
 80073b6:	f107 0220 	add.w	r2, r7, #32
 80073ba:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80073bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80073be:	47a0      	blx	r4
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80073c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 80073ce:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80073d2:	e053      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685c      	ldr	r4, [r3, #4]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689d      	ldr	r5, [r3, #8]
 80073dc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80073de:	f7fe fe71 	bl	80060c4 <_ZNK6tflite8Operator6inputsEv>
 80073e2:	4602      	mov	r2, r0
 80073e4:	f107 0318 	add.w	r3, r7, #24
 80073e8:	4629      	mov	r1, r5
 80073ea:	4620      	mov	r0, r4
 80073ec:	f000 fe88 	bl	8008100 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80073f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 80073fe:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8007402:	e03b      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685c      	ldr	r4, [r3, #4]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689d      	ldr	r5, [r3, #8]
 800740c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800740e:	f7fe fe67 	bl	80060e0 <_ZNK6tflite8Operator7outputsEv>
 8007412:	4602      	mov	r2, r0
 8007414:	f107 0314 	add.w	r3, r7, #20
 8007418:	4629      	mov	r1, r5
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fe70 	bl	8008100 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 800742e:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 8007432:	e023      	b.n	800747c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8007434:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	00db      	lsls	r3, r3, #3
 800743e:	461a      	mov	r2, r3
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	4413      	add	r3, r2
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	4618      	mov	r0, r3
 800744a:	2324      	movs	r3, #36	; 0x24
 800744c:	461a      	mov	r2, r3
 800744e:	2100      	movs	r1, #0
 8007450:	f01a fbf0 	bl	8021c34 <memset>
    node->inputs = inputs_array;
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745e:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8007460:	69fa      	ldr	r2, [r7, #28]
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746a:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 800746c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800746e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007470:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8007472:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007474:	3301      	adds	r3, #1
 8007476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007478:	e6c2      	b.n	8007200 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 800747a:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800747c:	f107 0320 	add.w	r3, r7, #32
 8007480:	4618      	mov	r0, r3
 8007482:	f001 f8db 	bl	800863c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8007486:	4623      	mov	r3, r4
}
 8007488:	4618      	mov	r0, r3
 800748a:	3760      	adds	r7, #96	; 0x60
 800748c:	46bd      	mov	sp, r7
 800748e:	bdb0      	pop	{r4, r5, r7, pc}
 8007490:	080248f0 	.word	0x080248f0
 8007494:	0802491c 	.word	0x0802491c
 8007498:	0802494c 	.word	0x0802494c
 800749c:	08024970 	.word	0x08024970
 80074a0:	080249b8 	.word	0x080249b8

080074a4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80074a4:	b590      	push	{r4, r7, lr}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f9d1 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80074ba:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 80074c2:	f01a fb05 	bl	8021ad0 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3328      	adds	r3, #40	; 0x28
 80074cc:	681c      	ldr	r4, [r3, #0]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	47a0      	blx	r4
 80074d8:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	332c      	adds	r3, #44	; 0x2c
 80074e0:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80074e2:	2300      	movs	r3, #0
 80074e4:	9301      	str	r3, [sp, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	47a0      	blx	r4
 80074f4:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	490c      	ldr	r1, [pc, #48]	; (800753c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 800750a:	4618      	mov	r0, r3
 800750c:	f7fb f90a 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 8007510:	2300      	movs	r3, #0
 8007512:	e00e      	b.n	8007532 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4613      	mov	r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	461a      	mov	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 8007530:	693b      	ldr	r3, [r7, #16]
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}
 800753a:	bf00      	nop
 800753c:	080249d8 	.word	0x080249d8

08007540 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8007540:	b590      	push	{r4, r7, lr}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af02      	add	r7, sp, #8
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f983 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007556:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800755e:	f01a fab7 	bl	8021ad0 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6858      	ldr	r0, [r3, #4]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	3310      	adds	r3, #16
 800756e:	681b      	ldr	r3, [r3, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8007570:	2204      	movs	r2, #4
 8007572:	2140      	movs	r1, #64	; 0x40
 8007574:	4798      	blx	r3
 8007576:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	332c      	adds	r3, #44	; 0x2c
 800757e:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8007580:	2301      	movs	r3, #1
 8007582:	9301      	str	r3, [sp, #4]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	68b9      	ldr	r1, [r7, #8]
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	47a0      	blx	r4
 8007592:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	490c      	ldr	r1, [pc, #48]	; (80075d8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fb f8bb 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e00e      	b.n	80075d0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	461a      	mov	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 80075ce:	693b      	ldr	r3, [r7, #16]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd90      	pop	{r4, r7, pc}
 80075d8:	08024a24 	.word	0x08024a24

080075dc <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3314      	adds	r3, #20
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4610      	mov	r0, r2
 80075f4:	4798      	blx	r3
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 8007600:	b5b0      	push	{r4, r5, r7, lr}
 8007602:	b08c      	sub	sp, #48	; 0x30
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 8007612:	f01a fa5d 	bl	8021ad0 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f91f 	bl	800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800761e:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 8007626:	f01a fa53 	bl	8021ad0 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 800762a:	6a38      	ldr	r0, [r7, #32]
 800762c:	f7fe fd74 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007630:	4603      	mov	r3, r0
 8007632:	4618      	mov	r0, r3
 8007634:	f000 fc04 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007638:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6858      	ldr	r0, [r3, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	330c      	adds	r3, #12
 8007646:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8007648:	69fa      	ldr	r2, [r7, #28]
 800764a:	4613      	mov	r3, r2
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	2204      	movs	r2, #4
 8007654:	4619      	mov	r1, r3
 8007656:	47a0      	blx	r4
 8007658:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10c      	bne.n	800767a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6898      	ldr	r0, [r3, #8]
 8007664:	69fa      	ldr	r2, [r7, #28]
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	461a      	mov	r2, r3
 8007670:	4921      	ldr	r1, [pc, #132]	; (80076f8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 8007672:	f7fb f857 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 8007676:	2301      	movs	r3, #1
 8007678:	e03a      	b.n	80076f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 800767a:	2300      	movs	r3, #0
 800767c:	627b      	str	r3, [r7, #36]	; 0x24
 800767e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	429a      	cmp	r2, r3
 8007684:	d230      	bcs.n	80076e8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800768a:	6a38      	ldr	r0, [r7, #32]
 800768c:	f7fe fd44 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007690:	4603      	mov	r3, r0
 8007692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fbe1 	bl	8007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800769a:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800769c:	68b8      	ldr	r0, [r7, #8]
 800769e:	f7fe fdba 	bl	8006216 <_ZNK6tflite5Model7buffersEv>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 80076a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a8:	4613      	mov	r3, r2
 80076aa:	005b      	lsls	r3, r3, #1
 80076ac:	4413      	add	r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	4413      	add	r3, r2
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	460b      	mov	r3, r1
 80076ba:	4602      	mov	r2, r0
 80076bc:	4629      	mov	r1, r5
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff fae8 	bl	8006c94 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d4:	4909      	ldr	r1, [pc, #36]	; (80076fc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fb f824 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 80076dc:	2301      	movs	r3, #1
 80076de:	e007      	b.n	80076f0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	3301      	adds	r3, #1
 80076e4:	627b      	str	r3, [r7, #36]	; 0x24
 80076e6:	e7ca      	b.n	800767e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	69ba      	ldr	r2, [r7, #24]
 80076ec:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3728      	adds	r7, #40	; 0x28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bdb0      	pop	{r4, r5, r7, pc}
 80076f8:	08024a68 	.word	0x08024a68
 80076fc:	08024ab0 	.word	0x08024ab0

08007700 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 8007700:	b5b0      	push	{r4, r5, r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 800770c:	2300      	movs	r3, #0
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	68b8      	ldr	r0, [r7, #8]
 8007712:	f7fe fd01 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007716:	4603      	mov	r3, r0
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fb91 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800771e:	4602      	mov	r2, r0
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4293      	cmp	r3, r2
 8007724:	bf34      	ite	cc
 8007726:	2301      	movcc	r3, #1
 8007728:	2300      	movcs	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d04f      	beq.n	80077d0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 8007730:	68b8      	ldr	r0, [r7, #8]
 8007732:	f7fe fcf1 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007736:	4603      	mov	r3, r0
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	4618      	mov	r0, r3
 800773c:	f000 fb8e 	bl	8007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007740:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 8007742:	69b8      	ldr	r0, [r7, #24]
 8007744:	f7fe fc9b 	bl	800607e <_ZNK6tflite6Tensor11is_variableEv>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d03c      	beq.n	80077c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 800774e:	69fa      	ldr	r2, [r7, #28]
 8007750:	4613      	mov	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	f107 0210 	add.w	r2, r7, #16
 8007762:	4611      	mov	r1, r2
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fbf6 	bl	8005f56 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800776a:	4603      	mov	r3, r0
 800776c:	75fb      	strb	r3, [r7, #23]
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8007774:	7dfb      	ldrb	r3, [r7, #23]
 8007776:	e02c      	b.n	80077d2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6858      	ldr	r0, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	330c      	adds	r3, #12
 8007784:	681d      	ldr	r5, [r3, #0]
 8007786:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8007798:	2210      	movs	r2, #16
 800779a:	47a8      	blx	r5
 800779c:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800779e:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	461a      	mov	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d108      	bne.n	80077c8 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4907      	ldr	r1, [pc, #28]	; (80077dc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fa ffb0 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e004      	b.n	80077d2 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	3301      	adds	r3, #1
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e79f      	b.n	8007710 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}
 80077da:	bf00      	nop
 80077dc:	08024ad0 	.word	0x08024ad0

080077e0 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6858      	ldr	r0, [r3, #4]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	330c      	adds	r3, #12
 80077fa:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80077fc:	2204      	movs	r2, #4
 80077fe:	2140      	movs	r1, #64	; 0x40
 8007800:	4798      	blx	r3
 8007802:	4603      	mov	r3, r0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 800780c:	b5b0      	push	{r4, r5, r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fe fc7a 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007824:	4602      	mov	r2, r0
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f000 fb16 	bl	8007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007830:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8007832:	68b8      	ldr	r0, [r7, #8]
 8007834:	f7fe fcef 	bl	8006216 <_ZNK6tflite5Model7buffersEv>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	9201      	str	r2, [sp, #4]
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4603      	mov	r3, r0
 8007848:	462a      	mov	r2, r5
 800784a:	4620      	mov	r0, r4
 800784c:	f7ff f8c8 	bl	80069e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8007850:	4603      	mov	r3, r0
      model->buffers(), error_reporter_, tensor);
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800785c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 8007866:	6838      	ldr	r0, [r7, #0]
 8007868:	f7fe fcc7 	bl	80061fa <_ZNK6tflite5Model9subgraphsEv>
 800786c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 fb82 	bl	8007f78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	bf14      	ite	ne
 800787a:	2301      	movne	r3, #1
 800787c:	2300      	moveq	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	4907      	ldr	r1, [pc, #28]	; (80078a8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800788a:	4618      	mov	r0, r3
 800788c:	f7fa ff4a 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 8007890:	2300      	movs	r3, #0
 8007892:	e005      	b.n	80078a0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x44>
  }
  return (*subgraphs)[0];
 8007894:	2100      	movs	r1, #0
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fc0a 	bl	80080b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800789c:	4603      	mov	r3, r0
 800789e:	bf00      	nop
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	08024b00 	.word	0x08024b00

080078ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles) {
 80078ac:	b590      	push	{r4, r7, lr}
 80078ae:	b0a3      	sub	sp, #140	; 0x8c
 80078b0:	af02      	add	r7, sp, #8
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fe fc2a 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 80078c4:	4603      	mov	r3, r0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 faba 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80078d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078d8:	4613      	mov	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4413      	add	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	677b      	str	r3, [r7, #116]	; 0x74

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6858      	ldr	r0, [r3, #4]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3310      	adds	r3, #16
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2204      	movs	r2, #4
 80078f2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80078f4:	4798      	blx	r3
 80078f6:	6738      	str	r0, [r7, #112]	; 0x70
  if (allocation_info == nullptr) {
 80078f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d108      	bne.n	8007910 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64>
    TF_LITE_REPORT_ERROR(
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007904:	4983      	ldr	r1, [pc, #524]	; (8007b14 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x268>)
 8007906:	4618      	mov	r0, r3
 8007908:	f7fa ff0c 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800790c:	2401      	movs	r4, #1
 800790e:	e0fb      	b.n	8007b08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f7fe fc01 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8007916:	4603      	mov	r3, r0
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fa91 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800791e:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	691a      	ldr	r2, [r3, #16]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4613      	mov	r3, r2
 8007930:	460a      	mov	r2, r1
 8007932:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007934:	f7fe fcf2 	bl	800631c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 8007938:	2300      	movs	r3, #0
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 800793c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8007940:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe feb8 	bl	80066bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 800794c:	4603      	mov	r3, r0
 800794e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007952:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xb4>
 800795a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800795e:	e0d3      	b.n	8007b08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8007960:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007962:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	f7fe fcf1 	bl	8006350 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800796e:	4603      	mov	r3, r0
 8007970:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8007974:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd6>
 800797c:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8007980:	e0c2      	b.n	8007b08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f911 	bl	8007baa <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007988:	66b8      	str	r0, [r7, #104]	; 0x68

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800798a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800798e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007992:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe ff0d 	bl	80067b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800799a:	4603      	mov	r3, r0
 800799c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80079a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x102>
 80079a8:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 80079ac:	e0ac      	b.n	8007b08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2110      	movs	r1, #16
 80079b4:	4618      	mov	r0, r3
 80079b6:	f002 f98d 	bl	8009cd4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80079ba:	6638      	str	r0, [r7, #96]	; 0x60
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6858      	ldr	r0, [r3, #4]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3310      	adds	r3, #16
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2210      	movs	r2, #16
 80079cc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80079ce:	4798      	blx	r3
 80079d0:	65f8      	str	r0, [r7, #92]	; 0x5c
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80079d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d10e      	bne.n	80079f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x14a>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6898      	ldr	r0, [r3, #8]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6899      	ldr	r1, [r3, #8]
 80079e0:	4b4d      	ldr	r3, [pc, #308]	; (8007b18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>)
 80079e2:	9301      	str	r3, [sp, #4]
 80079e4:	f240 4333 	movw	r3, #1075	; 0x433
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4b4c      	ldr	r3, [pc, #304]	; (8007b1c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x270>)
 80079ec:	4a4c      	ldr	r2, [pc, #304]	; (8007b20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x274>)
 80079ee:	f7fa feb2 	bl	8002756 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80079f2:	2401      	movs	r4, #1
 80079f4:	e088      	b.n	8007b08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80079f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079f8:	f107 0310 	add.w	r3, r7, #16
 80079fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80079fe:	4618      	mov	r0, r3
 8007a00:	f00b fa30 	bl	8012e64 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6898      	ldr	r0, [r3, #8]
 8007a08:	f107 0110 	add.w	r1, r7, #16
 8007a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007a10:	f7fe ff1b 	bl	800684a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8007a1a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x17c>
 8007a22:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 8007a26:	e06a      	b.n	8007afe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3314      	adds	r3, #20
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4610      	mov	r0, r2
 8007a38:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2110      	movs	r1, #16
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 f947 	bl	8009cd4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8007a46:	6578      	str	r0, [r7, #84]	; 0x54

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8007a48:	f107 0310 	add.w	r3, r7, #16
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f00b fcc2 	bl	80133d6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007a52:	4602      	mov	r2, r0
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	4293      	cmp	r3, r2
 8007a58:	bf34      	ite	cc
 8007a5a:	2301      	movcc	r3, #1
 8007a5c:	2300      	movcs	r3, #0
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00e      	beq.n	8007a82 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    TF_LITE_REPORT_ERROR(
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689c      	ldr	r4, [r3, #8]
 8007a68:	f107 0310 	add.w	r3, r7, #16
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f00b fcb2 	bl	80133d6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a76:	492b      	ldr	r1, [pc, #172]	; (8007b24 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x278>)
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7fa fe53 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 8007a7e:	2401      	movs	r4, #1
 8007a80:	e03d      	b.n	8007afe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	689c      	ldr	r4, [r3, #8]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 f916 	bl	8009cbc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007a90:	4602      	mov	r2, r0
 8007a92:	f107 0110 	add.w	r1, r7, #16
 8007a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f7fe ff2e 	bl	80068fe <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8007aa8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x20a>
 8007ab0:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 8007ab4:	e023      	b.n	8007afe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
  head_usage = planner.GetMaximumMemorySize();
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	4618      	mov	r0, r3
 8007abc:	f00b fc8b 	bl	80133d6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007ac0:	67f8      	str	r0, [r7, #124]	; 0x7c
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d902      	bls.n	8007ad2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x226>
    max_head_buffer_usage_ = head_usage;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ad0:	615a      	str	r2, [r3, #20]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6858      	ldr	r0, [r3, #4]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3308      	adds	r3, #8
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	6951      	ldr	r1, [r2, #20]
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	4798      	blx	r3
 8007ae8:	4603      	mov	r3, r0
 8007aea:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8007aee:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d002      	beq.n	8007afc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
 8007af6:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 8007afa:	e000      	b.n	8007afe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 8007afc:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8007afe:	f107 0310 	add.w	r3, r7, #16
 8007b02:	4618      	mov	r0, r3
 8007b04:	f00b fa00 	bl	8012f08 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8007b08:	4623      	mov	r3, r4
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3784      	adds	r7, #132	; 0x84
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd90      	pop	{r4, r7, pc}
 8007b12:	bf00      	nop
 8007b14:	08024b2c 	.word	0x08024b2c
 8007b18:	08024bc0 	.word	0x08024bc0
 8007b1c:	08024b70 	.word	0x08024b70
 8007b20:	08024ba8 	.word	0x08024ba8
 8007b24:	08024bdc 	.word	0x08024bdc

08007b28 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 8007b3a:	f019 ffc9 	bl	8021ad0 <abort>

  if (scratch_buffer_request_count_ == 0) {
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e00e      	b.n	8007b68 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6858      	ldr	r0, [r3, #4]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	330c      	adds	r3, #12
 8007b56:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	0091      	lsls	r1, r2, #2
 8007b5c:	2204      	movs	r2, #4
 8007b5e:	4798      	blx	r3
 8007b60:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	611a      	str	r2, [r3, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6858      	ldr	r0, [r3, #4]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2204      	movs	r2, #4
 8007b8e:	2160      	movs	r1, #96	; 0x60
 8007b90:	4798      	blx	r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	e000      	b.n	8007ba2 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f002 f880 	bl	8009cbc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2104      	movs	r1, #4
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe f8b5 	bl	8005d30 <_ZN6tflite14AlignPointerUpEPhj>
 8007bc6:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007bdc:	887b      	ldrh	r3, [r7, #2]
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 facd 	bl	8008180 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8007be6:	4603      	mov	r3, r0
  }
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fadd 	bl	80081c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8007c06:	4603      	mov	r3, r0
  }
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3708      	adds	r7, #8
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c1c:	887b      	ldrh	r3, [r7, #2]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 faed 	bl	8008200 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8007c26:	4603      	mov	r3, r0
  }
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8007c3e:	897b      	ldrh	r3, [r7, #10]
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7fa fdbd 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8007c4c:	8afb      	ldrh	r3, [r7, #22]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d007      	beq.n	8007c62 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	8afb      	ldrh	r3, [r7, #22]
 8007c56:	4413      	add	r3, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fb fc16 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	e000      	b.n	8007c64 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8007c62:	687b      	ldr	r3, [r7, #4]
  }
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c78:	887b      	ldrh	r3, [r7, #2]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fadf 	bl	8008240 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8007c82:	4603      	mov	r3, r0
  }
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007c98:	887b      	ldrh	r3, [r7, #2]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 faef 	bl	8008280 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007ca2:	4603      	mov	r3, r0
  }
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007cb8:	887b      	ldrh	r3, [r7, #2]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 faff 	bl	80082c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8007cc2:	4603      	mov	r3, r0
  }
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007cd8:	887b      	ldrh	r3, [r7, #2]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fb0f 	bl	8008300 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8007ce2:	4603      	mov	r3, r0
  }
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007cf8:	887b      	ldrh	r3, [r7, #2]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb1f 	bl	8008340 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8007d02:	4603      	mov	r3, r0
  }
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fb2f 	bl	8008380 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8007d22:	4603      	mov	r3, r0
  }
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fb3f 	bl	80083c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007d42:	4603      	mov	r3, r0
  }
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fb fb7d 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fb fb6f 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7ff ffea 	bl	8007d68 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007d94:	4602      	mov	r2, r0
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d306      	bcc.n	8007daa <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8007d9e:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8007da0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007da4:	480a      	ldr	r0, [pc, #40]	; (8007dd0 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8007da6:	f019 fe9b 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb4a 	bl	8008444 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8007db0:	4603      	mov	r3, r0
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fb2f 	bl	8008418 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8007dba:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	08024c2c 	.word	0x08024c2c
 8007dcc:	08024c38 	.word	0x08024c38
 8007dd0:	08024d00 	.word	0x08024d00

08007dd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fb fb39 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007de6:	4603      	mov	r3, r0
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7ff ffea 	bl	8007dd4 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007e00:	4602      	mov	r2, r0
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d306      	bcc.n	8007e16 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8007e0a:	4a0b      	ldr	r2, [pc, #44]	; (8007e38 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8007e0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007e10:	480a      	ldr	r0, [pc, #40]	; (8007e3c <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8007e12:	f019 fe65 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fb36 	bl	8008488 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fb1b 	bl	800845c <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007e26:	4602      	mov	r2, r0
 8007e28:	460b      	mov	r3, r1
  }
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	08024c2c 	.word	0x08024c2c
 8007e38:	08024d88 	.word	0x08024d88
 8007e3c:	08024d00 	.word	0x08024d00

08007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fb fb03 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007e52:	4603      	mov	r3, r0
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ffea 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d306      	bcc.n	8007e82 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8007e76:	4a0a      	ldr	r2, [pc, #40]	; (8007ea0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8007e78:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007e7c:	4809      	ldr	r0, [pc, #36]	; (8007ea4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8007e7e:	f019 fe2f 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fb20 	bl	80084c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	6839      	ldr	r1, [r7, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb07 	bl	80084a0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007e92:	4603      	mov	r3, r0
  }
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	08024c2c 	.word	0x08024c2c
 8007ea0:	08024f30 	.word	0x08024f30
 8007ea4:	08024d00 	.word	0x08024d00

08007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fb facf 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7ff ffea 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d306      	bcc.n	8007eea <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8007edc:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8007ede:	4a0a      	ldr	r2, [pc, #40]	; (8007f08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8007ee0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007ee4:	4809      	ldr	r0, [pc, #36]	; (8007f0c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8007ee6:	f019 fdfb 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb0c 	bl	8008508 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 faf3 	bl	80084e0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8007efa:	4603      	mov	r3, r0
  }
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	08024c2c 	.word	0x08024c2c
 8007f08:	08025028 	.word	0x08025028
 8007f0c:	08024d00 	.word	0x08024d00

08007f10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fb fa9b 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007f22:	4603      	mov	r3, r0
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ffea 	bl	8007f10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d306      	bcc.n	8007f52 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8007f46:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8007f48:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007f4c:	4809      	ldr	r0, [pc, #36]	; (8007f74 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8007f4e:	f019 fdc7 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 faf8 	bl	8008548 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fadf 	bl	8008520 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8007f62:	4603      	mov	r3, r0
  }
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	08024c2c 	.word	0x08024c2c
 8007f70:	08025124 	.word	0x08025124
 8007f74:	08024d00 	.word	0x08024d00

08007f78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fb fa67 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff ffea 	bl	8007f78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d306      	bcc.n	8007fba <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8007fac:	4b09      	ldr	r3, [pc, #36]	; (8007fd4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8007fb0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007fb4:	4809      	ldr	r0, [pc, #36]	; (8007fdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8007fb6:	f019 fd93 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fae4 	bl	8008588 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 facb 	bl	8008560 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8007fca:	4603      	mov	r3, r0
  }
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	08024c2c 	.word	0x08024c2c
 8007fd8:	08025228 	.word	0x08025228
 8007fdc:	08024d00 	.word	0x08024d00

08007fe0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fb fa33 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7ff ffea 	bl	8007fe0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 800800c:	4602      	mov	r2, r0
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	4293      	cmp	r3, r2
 8008012:	d306      	bcc.n	8008022 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8008016:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8008018:	f44f 7183 	mov.w	r1, #262	; 0x106
 800801c:	4809      	ldr	r0, [pc, #36]	; (8008044 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 800801e:	f019 fd5f 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fad0 	bl	80085c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8008028:	4603      	mov	r3, r0
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fab7 	bl	80085a0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8008032:	4603      	mov	r3, r0
  }
 8008034:	4618      	mov	r0, r3
 8008036:	3708      	adds	r7, #8
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	08024c2c 	.word	0x08024c2c
 8008040:	08025324 	.word	0x08025324
 8008044:	08024d00 	.word	0x08024d00

08008048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f7fb f9ff 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800805a:	4603      	mov	r3, r0
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff ffea 	bl	8008048 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008074:	4602      	mov	r2, r0
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	4293      	cmp	r3, r2
 800807a:	d306      	bcc.n	800808a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800807e:	4a0a      	ldr	r2, [pc, #40]	; (80080a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8008080:	f44f 7183 	mov.w	r1, #262	; 0x106
 8008084:	4809      	ldr	r0, [pc, #36]	; (80080ac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008086:	f019 fd2b 	bl	8021ae0 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fabc 	bl	8008608 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8008090:	4603      	mov	r3, r0
 8008092:	6839      	ldr	r1, [r7, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f000 faa3 	bl	80085e0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 800809a:	4603      	mov	r3, r0
  }
 800809c:	4618      	mov	r0, r3
 800809e:	3708      	adds	r7, #8
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	08024c2c 	.word	0x08024c2c
 80080a8:	0802541c 	.word	0x0802541c
 80080ac:	08024d00 	.word	0x08024d00

080080b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff ff69 	bl	8007f94 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 80080c2:	4603      	mov	r3, r0
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
 80080d6:	6839      	ldr	r1, [r7, #0]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff8f 	bl	8007ffc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 80080de:	4603      	mov	r3, r0
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f985 	bl	8008400 <_ZNK11flatbuffers6VectorIhE4DataEv>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008114:	f019 fcdc 	bl	8021ad0 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800811e:	f019 fcd7 	bl	8021ad0 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	60f8      	str	r0, [r7, #12]
 800813a:	60b9      	str	r1, [r7, #8]
 800813c:	607a      	str	r2, [r7, #4]
 800813e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008146:	f019 fcc3 	bl	8021ad0 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8008150:	f019 fcbe 	bl	8021ad0 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fedb 	bl	8007f2c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8008176:	4603      	mov	r3, r0
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800818c:	887b      	ldrh	r3, [r7, #2]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fa fb16 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008196:	4603      	mov	r3, r0
 8008198:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	89fb      	ldrh	r3, [r7, #14]
 800819e:	4413      	add	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081a2:	89fb      	ldrh	r3, [r7, #14]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d006      	beq.n	80081b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f7fb f96e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081ae:	4602      	mov	r2, r0
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4413      	add	r3, r2
                        : nullptr;
 80081b4:	e000      	b.n	80081b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081b6:	2300      	movs	r3, #0
  }
 80081b8:	4618      	mov	r0, r3
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80081cc:	887b      	ldrh	r3, [r7, #2]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fa faf6 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80081d6:	4603      	mov	r3, r0
 80081d8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	89fb      	ldrh	r3, [r7, #14]
 80081de:	4413      	add	r3, r2
 80081e0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081e2:	89fb      	ldrh	r3, [r7, #14]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d006      	beq.n	80081f6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	f7fb f94e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081ee:	4602      	mov	r2, r0
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	4413      	add	r3, r2
                        : nullptr;
 80081f4:	e000      	b.n	80081f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081f6:	2300      	movs	r3, #0
  }
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7fa fad6 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008216:	4603      	mov	r3, r0
 8008218:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	4413      	add	r3, r2
 8008220:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008222:	89fb      	ldrh	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d006      	beq.n	8008236 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8008228:	68b8      	ldr	r0, [r7, #8]
 800822a:	f7fb f92e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800822e:	4602      	mov	r2, r0
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4413      	add	r3, r2
                        : nullptr;
 8008234:	e000      	b.n	8008238 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008236:	2300      	movs	r3, #0
  }
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800824c:	887b      	ldrh	r3, [r7, #2]
 800824e:	4619      	mov	r1, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fa fab6 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008256:	4603      	mov	r3, r0
 8008258:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	89fb      	ldrh	r3, [r7, #14]
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008262:	89fb      	ldrh	r3, [r7, #14]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d006      	beq.n	8008276 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008268:	68b8      	ldr	r0, [r7, #8]
 800826a:	f7fb f90e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800826e:	4602      	mov	r2, r0
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4413      	add	r3, r2
                        : nullptr;
 8008274:	e000      	b.n	8008278 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008276:	2300      	movs	r3, #0
  }
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800828c:	887b      	ldrh	r3, [r7, #2]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7fa fa96 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008296:	4603      	mov	r3, r0
 8008298:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	89fb      	ldrh	r3, [r7, #14]
 800829e:	4413      	add	r3, r2
 80082a0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082a2:	89fb      	ldrh	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 80082a8:	68b8      	ldr	r0, [r7, #8]
 80082aa:	f7fb f8ee 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80082ae:	4602      	mov	r2, r0
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	4413      	add	r3, r2
                        : nullptr;
 80082b4:	e000      	b.n	80082b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082b6:	2300      	movs	r3, #0
  }
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	460b      	mov	r3, r1
 80082ca:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80082cc:	887b      	ldrh	r3, [r7, #2]
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7fa fa76 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80082d6:	4603      	mov	r3, r0
 80082d8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	89fb      	ldrh	r3, [r7, #14]
 80082de:	4413      	add	r3, r2
 80082e0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082e2:	89fb      	ldrh	r3, [r7, #14]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d006      	beq.n	80082f6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 80082e8:	68b8      	ldr	r0, [r7, #8]
 80082ea:	f7fb f8ce 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80082ee:	4602      	mov	r2, r0
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	4413      	add	r3, r2
                        : nullptr;
 80082f4:	e000      	b.n	80082f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80082f6:	2300      	movs	r3, #0
  }
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800830c:	887b      	ldrh	r3, [r7, #2]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7fa fa56 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008316:	4603      	mov	r3, r0
 8008318:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	89fb      	ldrh	r3, [r7, #14]
 800831e:	4413      	add	r3, r2
 8008320:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008322:	89fb      	ldrh	r3, [r7, #14]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d006      	beq.n	8008336 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8008328:	68b8      	ldr	r0, [r7, #8]
 800832a:	f7fb f8ae 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800832e:	4602      	mov	r2, r0
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4413      	add	r3, r2
                        : nullptr;
 8008334:	e000      	b.n	8008338 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008336:	2300      	movs	r3, #0
  }
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	460b      	mov	r3, r1
 800834a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fa fa36 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008356:	4603      	mov	r3, r0
 8008358:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	4413      	add	r3, r2
 8008360:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008362:	89fb      	ldrh	r3, [r7, #14]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d006      	beq.n	8008376 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8008368:	68b8      	ldr	r0, [r7, #8]
 800836a:	f7fb f88e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800836e:	4602      	mov	r2, r0
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	4413      	add	r3, r2
                        : nullptr;
 8008374:	e000      	b.n	8008378 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008376:	2300      	movs	r3, #0
  }
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800838c:	887b      	ldrh	r3, [r7, #2]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fa fa16 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008396:	4603      	mov	r3, r0
 8008398:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	89fb      	ldrh	r3, [r7, #14]
 800839e:	4413      	add	r3, r2
 80083a0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80083a2:	89fb      	ldrh	r3, [r7, #14]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 80083a8:	68b8      	ldr	r0, [r7, #8]
 80083aa:	f7fb f86e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80083ae:	4602      	mov	r2, r0
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4413      	add	r3, r2
                        : nullptr;
 80083b4:	e000      	b.n	80083b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80083b6:	2300      	movs	r3, #0
  }
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7fa f9f6 	bl	80027c2 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80083d6:	4603      	mov	r3, r0
 80083d8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	4413      	add	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80083e2:	89fb      	ldrh	r3, [r7, #14]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 80083e8:	68b8      	ldr	r0, [r7, #8]
 80083ea:	f7fb f84e 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80083ee:	4602      	mov	r2, r0
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	4413      	add	r3, r2
                        : nullptr;
 80083f4:	e000      	b.n	80083f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80083f6:	2300      	movs	r3, #0
  }
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
  }
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	edd3 7a00 	vldr	s15, [r3]
 800842e:	eeb0 0a67 	vmov.f32	s0, s15
 8008432:	f7fb fe87 	bl	8004144 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008436:	eef0 7a40 	vmov.f32	s15, s0
  }
 800843a:	eeb0 0a67 	vmov.f32	s0, s15
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
  }
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	f000 f8d3 	bl	8008620 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
  }
 800847e:	4610      	mov	r0, r2
 8008480:	4619      	mov	r1, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3304      	adds	r3, #4
  }
 8008494:	4618      	mov	r0, r3
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fa ffe8 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80084ba:	4602      	mov	r2, r0
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4413      	add	r3, r2
  }
 80084c0:	4618      	mov	r0, r3
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
  }
 80084d4:	4618      	mov	r0, r3
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	4413      	add	r3, r2
 80084f2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f7fa ffc8 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80084fa:	4602      	mov	r2, r0
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4413      	add	r3, r2
  }
 8008500:	4618      	mov	r0, r3
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3304      	adds	r3, #4
  }
 8008514:	4618      	mov	r0, r3
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fa ffa8 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800853a:	4602      	mov	r2, r0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4413      	add	r3, r2
  }
 8008540:	4618      	mov	r0, r3
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
  }
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	4413      	add	r3, r2
 8008572:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fa ff88 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800857a:	4602      	mov	r2, r0
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4413      	add	r3, r2
  }
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	3304      	adds	r3, #4
  }
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7fa ff68 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80085ba:	4602      	mov	r2, r0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4413      	add	r3, r2
  }
 80085c0:	4618      	mov	r0, r3
 80085c2:	3708      	adds	r7, #8
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
  }
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	4413      	add	r3, r2
 80085f2:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fa ff48 	bl	800348a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4413      	add	r3, r2
  }
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
  }
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800862a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	4a05      	ldr	r2, [pc, #20]	; (800865c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	601a      	str	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fdff 	bl	8006250 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	0802875c 	.word	0x0802875c

08008660 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f7ff ffe7 	bl	800863c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 800866e:	2108      	movs	r1, #8
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f019 f945 	bl	8021900 <_ZdlPvj>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	4a04      	ldr	r2, [pc, #16]	; (800869c <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4618      	mov	r0, r3
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr
 800869c:	080287e0 	.word	0x080287e0

080086a0 <_ZN6tflite13ErrorReporterD0Ev>:
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ffe9 	bl	8008680 <_ZN6tflite13ErrorReporterD1Ev>
 80086ae:	2104      	movs	r1, #4
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f019 f925 	bl	8021900 <_ZdlPvj>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <_ZN6tflite18MicroErrorReporterD1Ev>:
// Get a pointer to a singleton global error reporter.
ErrorReporter* GetMicroErrorReporter();

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	4a05      	ldr	r2, [pc, #20]	; (80086e0 <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7ff ffd5 	bl	8008680 <_ZN6tflite13ErrorReporterD1Ev>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	080287cc 	.word	0x080287cc

080086e4 <_ZN6tflite18MicroErrorReporterD0Ev>:
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7ff ffe7 	bl	80086c0 <_ZN6tflite18MicroErrorReporterD1Ev>
 80086f2:	2104      	movs	r1, #4
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f019 f903 	bl	8021900 <_ZdlPvj>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>:

namespace {
uint8_t micro_error_reporter_buffer[sizeof(tflite::MicroErrorReporter)];
tflite::MicroErrorReporter* error_reporter_ = nullptr;

void Log(const char* format, va_list args) {
 8008704:	b580      	push	{r7, lr}
 8008706:	b0c2      	sub	sp, #264	; 0x108
 8008708:	af00      	add	r7, sp, #0
 800870a:	1d3b      	adds	r3, r7, #4
 800870c:	6018      	str	r0, [r3, #0]
 800870e:	463b      	mov	r3, r7
 8008710:	6019      	str	r1, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008712:	463b      	mov	r3, r7
 8008714:	1d3a      	adds	r2, r7, #4
 8008716:	f107 0008 	add.w	r0, r7, #8
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6812      	ldr	r2, [r2, #0]
 800871e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008722:	f000 ffeb 	bl	80096fc <MicroVsnprintf>
  DebugLog(log_buffer);
 8008726:	f107 0308 	add.w	r3, r7, #8
 800872a:	4618      	mov	r0, r3
 800872c:	f00a fade 	bl	8012cec <DebugLog>
  DebugLog("\r\n");
 8008730:	4803      	ldr	r0, [pc, #12]	; (8008740 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list+0x3c>)
 8008732:	f00a fadb 	bl	8012cec <DebugLog>
#endif
}
 8008736:	bf00      	nop
 8008738:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	08025518 	.word	0x08025518

08008744 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
    error_reporter_ = new (micro_error_reporter_buffer) MicroErrorReporter();
  }
  return error_reporter_;
}

int MicroErrorReporter::Report(const char* format, va_list args) {
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
  Log(format, args);
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	68b8      	ldr	r0, [r7, #8]
 8008754:	f7ff ffd6 	bl	8008704 <_ZN12_GLOBAL__N_13LogEPKcSt9__va_list>
  return 0;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>:
//   ScopedMicroProfiler scoped_profiler("custom_tag", profiler);
//   work_to_profile();
// }
class ScopedMicroProfiler {
 public:
  explicit ScopedMicroProfiler(const char* tag, MicroProfiler* profiler)
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
      : profiler_(profiler) {
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	605a      	str	r2, [r3, #4]
    if (profiler_ != nullptr) {
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE+0x3a>
      event_handle_ = profiler_->BeginEvent(tag);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3308      	adds	r3, #8
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68b9      	ldr	r1, [r7, #8]
 8008792:	4610      	mov	r0, r2
 8008794:	4798      	blx	r3
 8008796:	4602      	mov	r2, r0
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	601a      	str	r2, [r3, #0]
    }
  }
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4618      	mov	r0, r3
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <_ZN6tflite19ScopedMicroProfilerD1Ev>:

  ~ScopedMicroProfiler() {
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
    if (profiler_ != nullptr) {
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00a      	beq.n	80087cc <_ZN6tflite19ScopedMicroProfilerD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6858      	ldr	r0, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	330c      	adds	r3, #12
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	4611      	mov	r1, r2
 80087ca:	4798      	blx	r3
    }
  }
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7fd fca6 	bl	8006134 <_ZNK6tflite8SubGraph6inputsEv>
 80087e8:	4603      	mov	r3, r0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd fbf3 	bl	8005fd6 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 80087f0:	4603      	mov	r3, r0
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b082      	sub	sp, #8
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	4618      	mov	r0, r3
 8008808:	f7fd fc94 	bl	8006134 <_ZNK6tflite8SubGraph6inputsEv>
 800880c:	4603      	mov	r3, r0
  }
 800880e:	4618      	mov	r0, r3
 8008810:	3708      	adds	r7, #8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008822:	4618      	mov	r0, r3
 8008824:	f7fd fc94 	bl	8006150 <_ZNK6tflite8SubGraph7outputsEv>
 8008828:	4603      	mov	r3, r0
 800882a:	4618      	mov	r0, r3
 800882c:	f7fd fbd3 	bl	8005fd6 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008830:	4603      	mov	r3, r0
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd fc82 	bl	8006150 <_ZNK6tflite8SubGraph7outputsEv>
 800884c:	4603      	mov	r3, r0
  }
 800884e:	4618      	mov	r0, r3
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b20      	cmp	r3, #32
 8008864:	d102      	bne.n	800886c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	e007      	b.n	800887c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x26>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	b2db      	uxtb	r3, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f7fc f93a 	bl	8004aec <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8008878:	4603      	mov	r3, r0
 800887a:	bf00      	nop
  }
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	605a      	str	r2, [r3, #4]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	609a      	str	r2, [r3, #8]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	60da      	str	r2, [r3, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	611a      	str	r2, [r3, #16]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 80088cc:	681a      	ldr	r2, [r3, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	330c      	adds	r3, #12
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	4610      	mov	r0, r2
 80088de:	4798      	blx	r3
 80088e0:	4603      	mov	r3, r0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3708      	adds	r7, #8
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}

080088ea <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b086      	sub	sp, #24
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	60f8      	str	r0, [r7, #12]
 80088f2:	60b9      	str	r1, [r7, #8]
 80088f4:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe fb6b 	bl	8006fe0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>
 800890a:	4603      	mov	r3, r0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	60fb      	str	r3, [r7, #12]
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691a      	ldr	r2, [r3, #16]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	681b      	ldr	r3, [r3, #0]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	b580      	push	{r7, lr}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 8008950:	f107 0320 	add.w	r3, r7, #32
 8008954:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6858      	ldr	r0, [r3, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3308      	adds	r3, #8
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	69f9      	ldr	r1, [r7, #28]
 8008968:	4798      	blx	r3
  va_end(args);
#endif
}
 800896a:	bf00      	nop
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr

08008978 <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	3304      	adds	r3, #4
 8008994:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6899      	ldr	r1, [r3, #8]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68da      	ldr	r2, [r3, #12]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	47a0      	blx	r4
 80089a2:	4603      	mov	r3, r0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3714      	adds	r7, #20
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd90      	pop	{r4, r7, pc}

080089ac <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	68d9      	ldr	r1, [r3, #12]
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	60da      	str	r2, [r3, #12]
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void ContextHelper::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	611a      	str	r2, [r3, #16]
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	605a      	str	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	609a      	str	r2, [r3, #8]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	60da      	str	r2, [r3, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3310      	adds	r3, #16
 8008a3a:	2258      	movs	r2, #88	; 0x58
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f019 f8f8 	bl	8021c34 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	69b9      	ldr	r1, [r7, #24]
 8008a48:	6838      	ldr	r0, [r7, #0]
 8008a4a:	f7fe f9b3 	bl	8006db4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8008a4e:	4602      	mov	r2, r0
      output_tensors_(nullptr) {
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	669a      	str	r2, [r3, #104]	; 0x68
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	671a      	str	r2, [r3, #112]	; 0x70
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	675a      	str	r2, [r3, #116]	; 0x74
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	679a      	str	r2, [r3, #120]	; 0x78
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensors_(nullptr) {
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f7ff fefd 	bl	8008884 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 8008a9a:	6a39      	ldr	r1, [r7, #32]
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f84d 	bl	8008b3c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>
}
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensors_(nullptr),
      output_tensors_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d03a      	beq.n	8008b32 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008abc:	2300      	movs	r3, #0
 8008abe:	617b      	str	r3, [r7, #20]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fd fb51 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff f9eb 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	bf34      	ite	cc
 8008ada:	2301      	movcc	r3, #1
 8008adc:	2300      	movcs	r3, #0
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d026      	beq.n	8008b32 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6819      	ldr	r1, [r3, #0]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4613      	mov	r3, r2
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	440b      	add	r3, r1
 8008af4:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6819      	ldr	r1, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	00db      	lsls	r3, r3, #3
 8008b04:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00c      	beq.n	8008b2a <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	f102 0010 	add.w	r0, r2, #16
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	6912      	ldr	r2, [r2, #16]
 8008b26:	4611      	mov	r1, r2
 8008b28:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e7c6      	b.n	8008ac0 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE>:

void MicroInterpreter::Init(MicroProfiler* profiler) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd fb55 	bl	80061fa <_ZNK6tflite5Model9subgraphsEv>
 8008b50:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fa10 	bl	8007f78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	bf14      	ite	ne
 8008b5e:	2301      	movne	r3, #1
 8008b60:	2300      	moveq	r3, #0
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	4915      	ldr	r1, [pc, #84]	; (8008bc4 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x88>)
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7f9 fdd8 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 8008b7c:	e01e      	b.n	8008bbc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 8008b7e:	2100      	movs	r1, #0
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fa95 	bl	80080b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8008b86:	4602      	mov	r2, r0
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a0b      	ldr	r2, [pc, #44]	; (8008bc8 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x8c>)
 8008b9a:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a0b      	ldr	r2, [pc, #44]	; (8008bcc <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x90>)
 8008ba0:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a0a      	ldr	r2, [pc, #40]	; (8008bd0 <_ZN6tflite16MicroInterpreter4InitEPNS_13MicroProfilerE+0x94>)
 8008ba6:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	08025ba8 	.word	0x08025ba8
 8008bc8:	08008941 	.word	0x08008941
 8008bcc:	08008979 	.word	0x08008979
 8008bd0:	080089ad 	.word	0x080089ad

08008bd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bd6:	b093      	sub	sp, #76	; 0x4c
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]

  int uart_buf_len;
//  char debugPrintPtr[50];

  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6859      	ldr	r1, [r3, #4]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	68fc      	ldr	r4, [r7, #12]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3374      	adds	r3, #116	; 0x74
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	f7fe f929 	bl	8006e48 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 8008bf6:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bf14      	ite	ne
 8008bfc:	2301      	movne	r3, #1
 8008bfe:	2300      	moveq	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00b      	beq.n	8008c1e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	4989      	ldr	r1, [pc, #548]	; (8008e30 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x25c>)
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7f9 fd89 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e1d8      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7ff fed4 	bl	80089d8 <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
  context_.tensors_size = subgraph_->tensors()->size();
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fd fa6f 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff f8ff 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008c42:	4602      	mov	r2, r0
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	611a      	str	r2, [r3, #16]

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4a7a      	ldr	r2, [pc, #488]	; (8008e34 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x260>)
 8008c4c:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fd fa82 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff f91c 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008c70:	4602      	mov	r2, r0
 8008c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c74:	4293      	cmp	r3, r2
 8008c76:	bf34      	ite	cc
 8008c78:	2301      	movcc	r3, #1
 8008c7a:	2300      	movcs	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d035      	beq.n	8008cee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    auto* node = &(node_and_registrations_[i].node);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6819      	ldr	r1, [r3, #0]
 8008c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	440b      	add	r3, r1
 8008c92:	617b      	str	r3, [r7, #20]
    auto* registration = node_and_registrations_[i].registration;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6819      	ldr	r1, [r3, #0]
 8008c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	00db      	lsls	r3, r3, #3
 8008ca2:	440b      	add	r3, r1
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	613b      	str	r3, [r7, #16]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d106      	bne.n	8008cbe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	699b      	ldr	r3, [r3, #24]
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
      init_data_size = node->custom_initial_data_size;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	69db      	ldr	r3, [r3, #28]
 8008cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cbc:	e004      	b.n	8008cc8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	695b      	ldr	r3, [r3, #20]
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
      init_data_size = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63bb      	str	r3, [r7, #56]	; 0x38
    }
    if (registration->init) {
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00a      	beq.n	8008ce6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x112>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	f102 0010 	add.w	r0, r2, #16
 8008cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cdc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008cde:	4798      	blx	r3
 8008ce0:	4602      	mov	r2, r0
      node->user_data =
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	3301      	adds	r3, #1
 8008cea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cec:	e7b7      	b.n	8008c5e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x8a>
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//  debugPrintPtr += 32;

	// Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a51      	ldr	r2, [pc, #324]	; (8008e38 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x264>)
 8008cf2:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7fd fa35 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8008d02:	4603      	mov	r3, r0
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff f8cf 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	bf34      	ite	cc
 8008d12:	2301      	movcc	r3, #1
 8008d14:	2300      	movcs	r3, #0
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d03c      	beq.n	8008d96 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
//	TF_LITE_REPORT_ERROR(error_reporter_, "loop iter: %u", i);
//	uart_buf_len = sprintf((char *)debugPrintPtr, "%u \n", i);
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//	debugPrintPtr += 32;
    auto* node = &(node_and_registrations_[i].node);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6819      	ldr	r1, [r3, #0]
 8008d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	00db      	lsls	r3, r3, #3
 8008d2a:	440b      	add	r3, r1
 8008d2c:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	00db      	lsls	r3, r3, #3
 8008d3c:	440b      	add	r3, r1
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	61fb      	str	r3, [r7, #28]
    if (registration->prepare) {
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d01a      	beq.n	8008d80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	3210      	adds	r2, #16
 8008d52:	6a39      	ldr	r1, [r7, #32]
 8008d54:	4610      	mov	r0, r2
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	76fb      	strb	r3, [r7, #27]
      if (prepare_status != kTfLiteOk) {
 8008d5c:	7efb      	ldrb	r3, [r7, #27]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00e      	beq.n	8008d80 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
        TF_LITE_REPORT_ERROR(
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	68dc      	ldr	r4, [r3, #12]
 8008d66:	69f8      	ldr	r0, [r7, #28]
 8008d68:	f7ff fd75 	bl	8008856 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	7efb      	ldrb	r3, [r7, #27]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d74:	4931      	ldr	r1, [pc, #196]	; (8008e3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x268>)
 8008d76:	4620      	mov	r0, r4
 8008d78:	f7f9 fcd4 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e127      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
      }
    }
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d86:	4611      	mov	r1, r2
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe f97b 	bl	8007084 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	3301      	adds	r3, #1
 8008d92:	633b      	str	r3, [r7, #48]	; 0x30
 8008d94:	e7b0      	b.n	8008cf8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//  debugPrintPtr += 32;

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x26c>)
 8008da6:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6859      	ldr	r1, [r3, #4]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3378      	adds	r3, #120	; 0x78
 8008db8:	f7fe f8a2 	bl	8006f00 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1fc>
 8008dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dce:	e0ff      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
                    allocator_.FinishModelAllocation(model_, eval_tensors_,
                                                     &scratch_buffer_handles_));
  // TODO(b/16157777): Remove this when ContextHelper is rolled into this class.
  context_helper_.SetScratchBufferHandles(scratch_buffer_handles_);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7ff fe09 	bl	80089f4 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  input_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * inputs_size()));
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	681c      	ldr	r4, [r3, #0]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fcf0 	bl	80087d6 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008df6:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	47a0      	blx	r4
 8008e00:	4602      	mov	r2, r0
  input_tensors_ =
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  if (input_tensors_ == nullptr) {
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d11a      	bne.n	8008e48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x274>
    TF_LITE_REPORT_ERROR(
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	68dc      	ldr	r4, [r3, #12]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f7ff fcdd 	bl	80087d6 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	461a      	mov	r2, r3
 8008e22:	4908      	ldr	r1, [pc, #32]	; (8008e44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x270>)
 8008e24:	4620      	mov	r0, r4
 8008e26:	f7f9 fc7d 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->input_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * inputs_size());
    return kTfLiteError;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e0d0      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
 8008e2e:	bf00      	nop
 8008e30:	08025bd4 	.word	0x08025bd4
 8008e34:	080088bf 	.word	0x080088bf
 8008e38:	080088eb 	.word	0x080088eb
 8008e3c:	08025bf8 	.word	0x08025bf8
 8008e40:	08008915 	.word	0x08008915
 8008e44:	08025c30 	.word	0x08025c30

//	uart_buf_len = sprintf((char *)debugPrintPtr, "3 \n");
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//  debugPrintPtr += 32;

  for (size_t i = 0; i < inputs_size(); ++i) {
 8008e48:	2300      	movs	r3, #0
 8008e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f7ff fcc2 	bl	80087d6 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bf34      	ite	cc
 8008e5a:	2301      	movcc	r3, #1
 8008e5c:	2300      	movcs	r3, #0
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d037      	beq.n	8008ed4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x300>
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(i));
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681d      	ldr	r5, [r3, #0]
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	60bb      	str	r3, [r7, #8]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008e7a:	607a      	str	r2, [r7, #4]
        model_, eval_tensors_, inputs().Get(i));
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f7ff fcbc 	bl	80087fa <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008e82:	4603      	mov	r3, r0
 8008e84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fa fbb4 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e8c:	4601      	mov	r1, r0
    input_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	18d4      	adds	r4, r2, r3
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	47a8      	blx	r5
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	6023      	str	r3, [r4, #0]
    if (input_tensors_[i] == nullptr) {
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d108      	bne.n	8008ecc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2f8>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec0:	4945      	ldr	r1, [pc, #276]	; (8008fd8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x404>)
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7f9 fc2e 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize input tensor %d", i);
      return kTfLiteError;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e081      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
  for (size_t i = 0; i < inputs_size(); ++i) {
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	3301      	adds	r3, #1
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed2:	e7bb      	b.n	8008e4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x278>
  }

  // TODO(b/162311891): Drop these allocations when the interpreter supports
  // handling buffers from TfLiteEvalTensor.
  output_tensors_ =
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
          sizeof(TfLiteTensor*) * outputs_size()));
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	330c      	adds	r3, #12
 8008ee0:	681c      	ldr	r4, [r3, #0]
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f7ff fc97 	bl	8008816 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008ee8:	4603      	mov	r3, r0
      reinterpret_cast<TfLiteTensor**>(allocator_.AllocatePersistentBuffer(
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4619      	mov	r1, r3
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47a0      	blx	r4
 8008ef2:	4602      	mov	r2, r0
  output_tensors_ =
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  if (output_tensors_ == nullptr) {
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x34c>
    TF_LITE_REPORT_ERROR(
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	68dc      	ldr	r4, [r3, #12]
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f7ff fc84 	bl	8008816 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	461a      	mov	r2, r3
 8008f14:	4931      	ldr	r1, [pc, #196]	; (8008fdc <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x408>)
 8008f16:	4620      	mov	r0, r4
 8008f18:	f7f9 fc04 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->output_tensors_, "
        "%d bytes required",
        sizeof(TfLiteTensor*) * outputs_size());
    return kTfLiteError;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e057      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
  }

  for (size_t i = 0; i < outputs_size(); ++i) {
 8008f20:	2300      	movs	r3, #0
 8008f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f7ff fc76 	bl	8008816 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	bf34      	ite	cc
 8008f32:	2301      	movcc	r3, #1
 8008f34:	2300      	movcs	r3, #0
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d037      	beq.n	8008fac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d8>
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(i));
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681d      	ldr	r5, [r3, #0]
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	60bb      	str	r3, [r7, #8]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008f52:	607a      	str	r2, [r7, #4]
        model_, eval_tensors_, outputs().Get(i));
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fc70 	bl	800883a <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fa fb48 	bl	80035f4 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008f64:	4601      	mov	r1, r0
    output_tensors_[i] = allocator_.AllocatePersistentTfLiteTensor(
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	18d4      	adds	r4, r2, r3
 8008f72:	460b      	mov	r3, r1
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	4630      	mov	r0, r6
 8008f7a:	47a8      	blx	r5
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	6023      	str	r3, [r4, #0]
    if (output_tensors_[i] == nullptr) {
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d108      	bne.n	8008fa4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3d0>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f98:	4911      	ldr	r1, [pc, #68]	; (8008fe0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x40c>)
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f9 fbc2 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to initialize output tensor %d", i);
      return kTfLiteError;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e015      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>
  for (size_t i = 0; i < outputs_size(); ++i) {
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008faa:	e7bb      	b.n	8008f24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x350>
    }
  }

	TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f000 f921 	bl	80091f4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3f2>
 8008fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fc4:	e004      	b.n	8008fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3fc>

	tensors_allocated_ = true;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

	#endif

	// function to compute sizes needed

	return kTfLiteOk;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3744      	adds	r7, #68	; 0x44
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fd8:	08025c7c 	.word	0x08025c7c
 8008fdc:	08025ca4 	.word	0x08025ca4
 8008fe0:	08025cf0 	.word	0x08025cf0

08008fe4 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008fe4:	b5b0      	push	{r4, r5, r7, lr}
 8008fe6:	b08c      	sub	sp, #48	; 0x30
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	2400      	movs	r4, #0

  uint16_t timer_val;
  int uart_buf_len;
//  char debugPrintPtr[50];

  if (initialization_status_ != kTfLiteOk) {
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d007      	beq.n	8009008 <_ZN6tflite16MicroInterpreter6InvokeEv+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	4954      	ldr	r1, [pc, #336]	; (8009150 <_ZN6tflite16MicroInterpreter6InvokeEv+0x16c>)
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7f9 fb90 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8009004:	2401      	movs	r4, #1
 8009006:	e09d      	b.n	8009144 <_ZN6tflite16MicroInterpreter6InvokeEv+0x160>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800900e:	f083 0301 	eor.w	r3, r3, #1
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00c      	beq.n	8009032 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fddb 	bl	8008bd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800901e:	4603      	mov	r3, r0
 8009020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009024:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009028:	2b00      	cmp	r3, #0
 800902a:	d002      	beq.n	8009032 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4e>
 800902c:	f897 4023 	ldrb.w	r4, [r7, #35]	; 0x23
 8009030:	e088      	b.n	8009144 <_ZN6tflite16MicroInterpreter6InvokeEv+0x160>
//		DMA_CopyTensor( &DMAQue[1], op_part_info->filter, &oc_input2_tensors[0] );
//	if ( op_part_info->bias )
//		DMA_CopyTensor( &DMAQue[1], op_part_info->bias,  &oc_input2_tensors[1] );
	#endif

	for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8009032:	2300      	movs	r3, #0
 8009034:	627b      	str	r3, [r7, #36]	; 0x24
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd f896 	bl	800616c <_ZNK6tflite8SubGraph9operatorsEv>
 8009040:	4603      	mov	r3, r0
 8009042:	4618      	mov	r0, r3
 8009044:	f7fe ff30 	bl	8007ea8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009048:	4602      	mov	r2, r0
 800904a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904c:	4293      	cmp	r3, r2
 800904e:	bf34      	ite	cc
 8009050:	2301      	movcc	r3, #1
 8009052:	2300      	movcs	r3, #0
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d073      	beq.n	8009142 <_ZN6tflite16MicroInterpreter6InvokeEv+0x15e>

//	uart_buf_len = sprintf((char *)debugPrintPtr, "operator %u \r\n", i);
//	debugPrintPtr += 32;

	timer_val = HAL_GetTick();
 800905a:	f015 f851 	bl	801e100 <HAL_GetTick>
 800905e:	4603      	mov	r3, r0
 8009060:	843b      	strh	r3, [r7, #32]

    auto* node = &(node_and_registrations_[i].node);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6819      	ldr	r1, [r3, #0]
 8009066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	440b      	add	r3, r1
 8009072:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6819      	ldr	r1, [r3, #0]
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	4613      	mov	r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	4413      	add	r3, r2
 8009080:	00db      	lsls	r3, r3, #3
 8009082:	440b      	add	r3, r1
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	61bb      	str	r3, [r7, #24]
// -DTF_LITE_STRIP_ERROR_STRINGS) because the function OpNameFromRegistration is
// only defined for builds with the error strings.
#if !defined(TF_LITE_STRIP_ERROR_STRINGS)
    ScopedMicroProfiler scoped_profiler(
        OpNameFromRegistration(registration),
        reinterpret_cast<MicroProfiler*>(context_.profiler));
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f7ff fbe4 	bl	8008856 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 800908e:	4601      	mov	r1, r0
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009094:	f107 0308 	add.w	r3, r7, #8
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fb62 	bl	8008762 <_ZN6tflite19ScopedMicroProfilerC1EPKcPNS_13MicroProfilerE>

  if (i == 120 )
	  uint32_t kk = 34;
    #endif

    TFLITE_DCHECK(registration->invoke);
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <_ZN6tflite16MicroInterpreter6InvokeEv+0xc6>
 80090a6:	f018 fd13 	bl	8021ad0 <abort>
    TfLiteStatus invoke_status = registration->invoke(&context_, node);
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	3210      	adds	r2, #16
 80090b2:	69f9      	ldr	r1, [r7, #28]
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]
	#endif
    // All TfLiteTensor structs used in the kernel are allocated from temp
    // memory in the allocator. This creates a chain of allocations in the
    // temp section. The call below resets the chain of allocations to
    // prepare for the next call.
    allocator_.ResetTempAllocations();
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4610      	mov	r0, r2
 80090cc:	4798      	blx	r3

    if (invoke_status == kTfLiteError) {
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d116      	bne.n	8009102 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
    	uart_buf_len = sprintf((char *)debugPrintPtr, "kTfLiteError \r\n");
 80090d4:	4b1f      	ldr	r3, [pc, #124]	; (8009154 <_ZN6tflite16MicroInterpreter6InvokeEv+0x170>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	491f      	ldr	r1, [pc, #124]	; (8009158 <_ZN6tflite16MicroInterpreter6InvokeEv+0x174>)
 80090da:	4618      	mov	r0, r3
 80090dc:	f019 f99e 	bl	802241c <siprintf>
 80090e0:	6138      	str	r0, [r7, #16]
//    	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//        debugPrintPtr += 32;

      TF_LITE_REPORT_ERROR(
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68dc      	ldr	r4, [r3, #12]
 80090e6:	69b8      	ldr	r0, [r7, #24]
 80090e8:	f7ff fbb5 	bl	8008856 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 80090ec:	4602      	mov	r2, r0
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	4919      	ldr	r1, [pc, #100]	; (800915c <_ZN6tflite16MicroInterpreter6InvokeEv+0x178>)
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7f9 fb14 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Node %s (number %d) failed to invoke with status %d",
          OpNameFromRegistration(registration), i, invoke_status);
      return kTfLiteError;
 80090fc:	2401      	movs	r4, #1
 80090fe:	2500      	movs	r5, #0
 8009100:	e014      	b.n	800912c <_ZN6tflite16MicroInterpreter6InvokeEv+0x148>
    } else if (invoke_status != kTfLiteOk) {
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d009      	beq.n	800911c <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>
    	uart_buf_len = sprintf((char *)debugPrintPtr, "!= kTfLiteOk \r\n");
 8009108:	4b12      	ldr	r3, [pc, #72]	; (8009154 <_ZN6tflite16MicroInterpreter6InvokeEv+0x170>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4914      	ldr	r1, [pc, #80]	; (8009160 <_ZN6tflite16MicroInterpreter6InvokeEv+0x17c>)
 800910e:	4618      	mov	r0, r3
 8009110:	f019 f984 	bl	802241c <siprintf>
 8009114:	6138      	str	r0, [r7, #16]
//    	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//        debugPrintPtr += 32;

      return invoke_status;
 8009116:	7dfc      	ldrb	r4, [r7, #23]
 8009118:	2500      	movs	r5, #0
 800911a:	e007      	b.n	800912c <_ZN6tflite16MicroInterpreter6InvokeEv+0x148>
    }

    timer_val = HAL_GetTick() - timer_val;
 800911c:	f014 fff0 	bl	801e100 <HAL_GetTick>
 8009120:	4603      	mov	r3, r0
 8009122:	b29a      	uxth	r2, r3
 8009124:	8c3b      	ldrh	r3, [r7, #32]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	843b      	strh	r3, [r7, #32]
        reinterpret_cast<MicroProfiler*>(context_.profiler));
 800912a:	2501      	movs	r5, #1
 800912c:	f107 0308 	add.w	r3, r7, #8
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff fb38 	bl	80087a6 <_ZN6tflite19ScopedMicroProfilerD1Ev>
 8009136:	2d01      	cmp	r5, #1
 8009138:	d104      	bne.n	8009144 <_ZN6tflite16MicroInterpreter6InvokeEv+0x160>
	for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	3301      	adds	r3, #1
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
 8009140:	e779      	b.n	8009036 <_ZN6tflite16MicroInterpreter6InvokeEv+0x52>
//	uart_buf_len = sprintf((char *)debugPrintPtr, "debug_dump_dma_waiting_convp0_time: %X us \r\n", debug_dump_dma_waiting_convp0_time);
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//    debugPrintPtr += 32;
//	#endif

	return kTfLiteOk;
 8009142:	2400      	movs	r4, #0
 8009144:	4623      	mov	r3, r4
}
 8009146:	4618      	mov	r0, r3
 8009148:	3728      	adds	r7, #40	; 0x28
 800914a:	46bd      	mov	sp, r7
 800914c:	bdb0      	pop	{r4, r5, r7, pc}
 800914e:	bf00      	nop
 8009150:	08025d18 	.word	0x08025d18
 8009154:	20000000 	.word	0x20000000
 8009158:	08025d48 	.word	0x08025d48
 800915c:	08025d58 	.word	0x08025d58
 8009160:	08025d8c 	.word	0x08025d8c

08009164 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff fb31 	bl	80087d6 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009174:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	429a      	cmp	r2, r3
 800917c:	d308      	bcc.n	8009190 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68d8      	ldr	r0, [r3, #12]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	4908      	ldr	r1, [pc, #32]	; (80091a8 <_ZN6tflite16MicroInterpreter5inputEj+0x44>)
 8009188:	f7f9 facc 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800918c:	2300      	movs	r3, #0
 800918e:	e006      	b.n	800919e <_ZN6tflite16MicroInterpreter5inputEj+0x3a>
  }
  return input_tensors_[index];
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	4413      	add	r3, r2
 800919c:	681b      	ldr	r3, [r3, #0]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	08025d9c 	.word	0x08025d9c

080091ac <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f7ff fb2d 	bl	8008816 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 80091bc:	60f8      	str	r0, [r7, #12]
  if (index >= length) {
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d308      	bcc.n	80091d8 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68d8      	ldr	r0, [r3, #12]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	4908      	ldr	r1, [pc, #32]	; (80091f0 <_ZN6tflite16MicroInterpreter6outputEj+0x44>)
 80091d0:	f7f9 faa8 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e006      	b.n	80091e6 <_ZN6tflite16MicroInterpreter6outputEj+0x3a>
  }
  return output_tensors_[index];
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	681b      	ldr	r3, [r3, #0]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	08025dc8 	.word	0x08025dc8

080091f4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 80091fc:	2300      	movs	r3, #0
 80091fe:	61fb      	str	r3, [r7, #28]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009204:	4618      	mov	r0, r3
 8009206:	f7fc ff87 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 800920a:	4603      	mov	r3, r0
 800920c:	4618      	mov	r0, r3
 800920e:	f7fe fe17 	bl	8007e40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8009212:	4602      	mov	r2, r0
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4293      	cmp	r3, r2
 8009218:	bf34      	ite	cc
 800921a:	2301      	movcc	r3, #1
 800921c:	2300      	movcs	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	d054      	beq.n	80092ce <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
    auto* tensor = subgraph_->tensors()->Get(i);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009228:	4618      	mov	r0, r3
 800922a:	f7fc ff75 	bl	8006118 <_ZNK6tflite8SubGraph7tensorsEv>
 800922e:	4603      	mov	r3, r0
 8009230:	69f9      	ldr	r1, [r7, #28]
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fe12 	bl	8007e5c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8009238:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 800923a:	6978      	ldr	r0, [r7, #20]
 800923c:	f7fc ff1f 	bl	800607e <_ZNK6tflite6Tensor11is_variableEv>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d03f      	beq.n	80092c6 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd2>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	4613      	mov	r3, r2
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	f107 020c 	add.w	r2, r7, #12
 800925a:	4611      	mov	r1, r2
 800925c:	4618      	mov	r0, r3
 800925e:	f7fc fe7a 	bl	8005f56 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8009262:	4603      	mov	r3, r0
 8009264:	74fb      	strb	r3, [r7, #19]
 8009266:	7cfb      	ldrb	r3, [r7, #19]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 800926c:	7cfb      	ldrb	r3, [r7, #19]
 800926e:	e02f      	b.n	80092d0 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xdc>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 8009270:	2300      	movs	r3, #0
 8009272:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 8009274:	6978      	ldr	r0, [r7, #20]
 8009276:	f7fc fc92 	bl	8005b9e <_ZNK6tflite6Tensor4typeEv>
 800927a:	4603      	mov	r3, r0
 800927c:	2b09      	cmp	r3, #9
 800927e:	bf0c      	ite	eq
 8009280:	2301      	moveq	r3, #1
 8009282:	2300      	movne	r3, #0
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00f      	beq.n	80092aa <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb6>
        value = tensor->quantization()->zero_point()->Get(0);
 800928a:	6978      	ldr	r0, [r7, #20]
 800928c:	f7fc fee9 	bl	8006062 <_ZNK6tflite6Tensor12quantizationEv>
 8009290:	4603      	mov	r3, r0
 8009292:	4618      	mov	r0, r3
 8009294:	f7fc feb9 	bl	800600a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8009298:	4603      	mov	r3, r0
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f7fe fda7 	bl	8007df0 <_ZNK11flatbuffers6VectorIxE3GetEm>
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	4613      	mov	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80092ae:	69fa      	ldr	r2, [r7, #28]
 80092b0:	4613      	mov	r3, r2
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	4413      	add	r3, r2
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	440b      	add	r3, r1
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68fa      	ldr	r2, [r7, #12]
 80092be:	69b9      	ldr	r1, [r7, #24]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f018 fcb7 	bl	8021c34 <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	3301      	adds	r3, #1
 80092ca:	61fb      	str	r3, [r7, #28]
 80092cc:	e798      	b.n	8009200 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3720      	adds	r7, #32
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	3b01      	subs	r3, #1
 80092ea:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d20e      	bcs.n	8009312 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	617a      	str	r2, [r7, #20]
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	7812      	ldrb	r2, [r2, #0]
 8009304:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1e5a      	subs	r2, r3, #1
 800930a:	613a      	str	r2, [r7, #16]
 800930c:	7bfa      	ldrb	r2, [r7, #15]
 800930e:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8009310:	e7ec      	b.n	80092ec <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8009312:	687b      	ldr	r3, [r7, #4]
}
 8009314:	4618      	mov	r0, r3
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8009320:	b480      	push	{r7}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  char* current = main;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d003      	beq.n	8009340 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	3301      	adds	r3, #1
 800933c:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800933e:	e7f7      	b.n	8009330 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	3b01      	subs	r3, #1
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00e      	beq.n	8009370 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	429a      	cmp	r2, r3
 8009358:	d20a      	bcs.n	8009370 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	701a      	strb	r2, [r3, #0]
    ++current;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	3301      	adds	r3, #1
 8009366:	617b      	str	r3, [r7, #20]
    ++to_append;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3301      	adds	r3, #1
 800936c:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 800936e:	e7ec      	b.n	800934a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2200      	movs	r2, #0
 8009374:	701a      	strb	r2, [r3, #0]
  return current;
 8009376:	697b      	ldr	r3, [r7, #20]
}
 8009378:	4618      	mov	r0, r3
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	fbb3 f1f2 	udiv	r1, r3, r2
 800939c:	fb02 f201 	mul.w	r2, r2, r1
 80093a0:	1a9b      	subs	r3, r3, r2
 80093a2:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b09      	cmp	r3, #9
 80093a8:	dc04      	bgt.n	80093b4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	3330      	adds	r3, #48	; 0x30
 80093b0:	77fb      	strb	r3, [r7, #31]
 80093b2:	e003      	b.n	80093bc <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	3357      	adds	r3, #87	; 0x57
 80093ba:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	1c5a      	adds	r2, r3, #1
 80093c0:	60ba      	str	r2, [r7, #8]
 80093c2:	7ffa      	ldrb	r2, [r7, #31]
 80093c4:	701a      	strb	r2, [r3, #0]
    i /= base;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68fa      	ldr	r2, [r7, #12]
 80093ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ce:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d000      	beq.n	80093d8 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 80093d6:	e7dd      	b.n	8009394 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	69b8      	ldr	r0, [r7, #24]
 80093e2:	f7ff ff79 	bl	80092d8 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 80093e6:	68bb      	ldr	r3, [r7, #8]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2b00      	cmp	r3, #0
 8009402:	da07      	bge.n	8009414 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	1c5a      	adds	r2, r3, #1
 8009408:	603a      	str	r2, [r7, #0]
 800940a:	222d      	movs	r2, #45	; 0x2d
 800940c:	701a      	strb	r2, [r3, #0]
    u = -u;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	425b      	negs	r3, r3
 8009412:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8009414:	220a      	movs	r2, #10
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff ffb3 	bl	8009384 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800941e:	4603      	mov	r3, r0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8009428:	b580      	push	{r7, lr}
 800942a:	b090      	sub	sp, #64	; 0x40
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 8009434:	f107 0310 	add.w	r3, r7, #16
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7ff ffd8 	bl	80093f0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8009440:	f107 0310 	add.w	r3, r7, #16
 8009444:	461a      	mov	r2, r3
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f7ff ff69 	bl	8009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800944e:	4603      	mov	r3, r0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3740      	adds	r7, #64	; 0x40
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 8009458:	b580      	push	{r7, lr}
 800945a:	b090      	sub	sp, #64	; 0x40
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 8009466:	f107 0310 	add.w	r3, r7, #16
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7ff ff88 	bl	8009384 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8009474:	f107 0310 	add.w	r3, r7, #16
 8009478:	461a      	mov	r2, r3
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f7ff ff4f 	bl	8009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3740      	adds	r7, #64	; 0x40
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b09b      	sub	sp, #108	; 0x6c
 8009490:	af00      	add	r7, sp, #0
 8009492:	ed87 0a01 	vstr	s0, [r7, #4]
 8009496:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	332f      	adds	r3, #47	; 0x2f
 80094a0:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 80094a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 80094a8:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80094ac:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 80094ae:	2317      	movs	r3, #23
 80094b0:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 80094b2:	237f      	movs	r3, #127	; 0x7f
 80094b4:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 80094b6:	4b6a      	ldr	r3, [pc, #424]	; (8009660 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 80094b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ba:	687b      	ldr	r3, [r7, #4]
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 80094bc:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	0ddb      	lsrs	r3, r3, #23
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80094ce:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	da05      	bge.n	80094e2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 80094d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094d8:	222d      	movs	r2, #45	; 0x2d
 80094da:	701a      	strb	r2, [r3, #0]
    current += 1;
 80094dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094de:	3301      	adds	r3, #1
 80094e0:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 80094e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094e4:	2200      	movs	r2, #0
 80094e6:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 80094e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ea:	2b80      	cmp	r3, #128	; 0x80
 80094ec:	d118      	bne.n	8009520 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 80094ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 80094f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	4a5a      	ldr	r2, [pc, #360]	; (8009664 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 80094fc:	4619      	mov	r1, r3
 80094fe:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009500:	f7ff ff0e 	bl	8009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009504:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8009506:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009508:	e0a5      	b.n	8009656 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 800950a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800950c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	4a55      	ldr	r2, [pc, #340]	; (8009668 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 8009512:	4619      	mov	r1, r3
 8009514:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009516:	f7ff ff03 	bl	8009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800951a:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 800951c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800951e:	e09a      	b.n	8009656 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 8009520:	230d      	movs	r3, #13
 8009522:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8009524:	4b51      	ldr	r3, [pc, #324]	; (800966c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 8009526:	f107 040c 	add.w	r4, r7, #12
 800952a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800952c:	c407      	stmia	r4!, {r0, r1, r2}
 800952e:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8009534:	2300      	movs	r3, #0
 8009536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953a:	2b0c      	cmp	r3, #12
 800953c:	dc0f      	bgt.n	800955e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800953e:	f107 020c 	add.w	r2, r7, #12
 8009542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009544:	4413      	add	r3, r2
 8009546:	f993 3000 	ldrsb.w	r3, [r3]
 800954a:	461a      	mov	r2, r3
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	40d3      	lsrs	r3, r2
 8009550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009552:	4413      	add	r3, r2
 8009554:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8009556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009558:	3301      	adds	r3, #1
 800955a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800955c:	e7ec      	b.n	8009538 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 800955e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009560:	2231      	movs	r2, #49	; 0x31
 8009562:	701a      	strb	r2, [r3, #0]
  current += 1;
 8009564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009566:	3301      	adds	r3, #1
 8009568:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 800956a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800956c:	222e      	movs	r2, #46	; 0x2e
 800956e:	701a      	strb	r2, [r3, #0]
  current += 1;
 8009570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009572:	3301      	adds	r3, #1
 8009574:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 8009576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009578:	2200      	movs	r2, #0
 800957a:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 800957c:	2307      	movs	r3, #7
 800957e:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 8009580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009582:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b07      	cmp	r3, #7
 8009588:	dc01      	bgt.n	800958e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 800958a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800958c:	e063      	b.n	8009656 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 800958e:	2301      	movs	r3, #1
 8009590:	65bb      	str	r3, [r7, #88]	; 0x58
 8009592:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009594:	2b06      	cmp	r3, #6
 8009596:	dc08      	bgt.n	80095aa <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 8009598:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800959a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800959c:	4413      	add	r3, r2
 800959e:	2230      	movs	r2, #48	; 0x30
 80095a0:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 80095a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095a4:	3301      	adds	r3, #1
 80095a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80095a8:	e7f3      	b.n	8009592 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 80095aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ac:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 80095ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095b2:	1ad1      	subs	r1, r2, r3
 80095b4:	230a      	movs	r3, #10
 80095b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80095ba:	f7ff ff4d 	bl	8009458 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 80095be:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 80095c0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	f1c3 0307 	rsb	r3, r3, #7
 80095ce:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 80095d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d2:	2230      	movs	r2, #48	; 0x30
 80095d4:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d018      	beq.n	800960e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 80095dc:	2300      	movs	r3, #0
 80095de:	657b      	str	r3, [r7, #84]	; 0x54
 80095e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e4:	429a      	cmp	r2, r3
 80095e6:	da0f      	bge.n	8009608 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 80095e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ea:	3b01      	subs	r3, #1
 80095ec:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095f2:	4413      	add	r3, r2
 80095f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80095f6:	7812      	ldrb	r2, [r2, #0]
 80095f8:	701a      	strb	r2, [r3, #0]
      *current = '0';
 80095fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fc:	2230      	movs	r2, #48	; 0x30
 80095fe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 8009600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009602:	3301      	adds	r3, #1
 8009604:	657b      	str	r3, [r7, #84]	; 0x54
 8009606:	e7eb      	b.n	80095e0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 8009608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800960a:	3307      	adds	r3, #7
 800960c:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800960e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009610:	3b01      	subs	r3, #1
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	2b30      	cmp	r3, #48	; 0x30
 8009616:	d108      	bne.n	800962a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 8009618:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800961a:	3b01      	subs	r3, #1
 800961c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800961e:	429a      	cmp	r2, r3
 8009620:	d203      	bcs.n	800962a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 8009622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009624:	3b01      	subs	r3, #1
 8009626:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8009628:	e7f1      	b.n	800960e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 800962a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 8009630:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009634:	1ad3      	subs	r3, r2, r3
 8009636:	4a0e      	ldr	r2, [pc, #56]	; (8009670 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 8009638:	4619      	mov	r1, r3
 800963a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800963c:	f7ff fe70 	bl	8009320 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009640:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 8009642:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800964a:	4619      	mov	r1, r3
 800964c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800964e:	f7ff feeb 	bl	8009428 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 8009652:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 8009654:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 8009656:	4618      	mov	r0, r3
 8009658:	376c      	adds	r7, #108	; 0x6c
 800965a:	46bd      	mov	sp, r7
 800965c:	bd90      	pop	{r4, r7, pc}
 800965e:	bf00      	nop
 8009660:	007fffff 	.word	0x007fffff
 8009664:	08026250 	.word	0x08026250
 8009668:	08026254 	.word	0x08026254
 800966c:	0802625c 	.word	0x0802625c
 8009670:	08026258 	.word	0x08026258

08009674 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	6838      	ldr	r0, [r7, #0]
 8009682:	f7ff feb5 	bl	80093f0 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 8009686:	4602      	mov	r2, r0
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	1ad3      	subs	r3, r2, r3
}
 800968c:	4618      	mov	r0, r3
 800968e:	3708      	adds	r7, #8
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800969e:	220a      	movs	r2, #10
 80096a0:	6879      	ldr	r1, [r7, #4]
 80096a2:	6838      	ldr	r0, [r7, #0]
 80096a4:	f7ff fe6e 	bl	8009384 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80096a8:	4602      	mov	r2, r0
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	1ad3      	subs	r3, r2, r3
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 80096c0:	2210      	movs	r2, #16
 80096c2:	6879      	ldr	r1, [r7, #4]
 80096c4:	6838      	ldr	r0, [r7, #0]
 80096c6:	f7ff fe5d 	bl	8009384 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80096ca:	4602      	mov	r2, r0
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	1ad3      	subs	r3, r2, r3
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	ed97 0a00 	vldr	s0, [r7]
 80096ea:	f7ff fecf 	bl	800948c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 80096ee:	4602      	mov	r2, r0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	1ad3      	subs	r3, r2, r3
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80096fc:	b590      	push	{r4, r7, lr}
 80096fe:	b08b      	sub	sp, #44	; 0x2c
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3b01      	subs	r3, #1
 8009716:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 8130 	beq.w	8009982 <MicroVsnprintf+0x286>
 8009722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	429a      	cmp	r2, r3
 8009728:	f280 812b 	bge.w	8009982 <MicroVsnprintf+0x286>
    if (*current == '%') {
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b25      	cmp	r3, #37	; 0x25
 8009732:	f040 811a 	bne.w	800996a <MicroVsnprintf+0x26e>
      current++;
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	3301      	adds	r3, #1
 800973a:	623b      	str	r3, [r7, #32]
      switch (*current) {
 800973c:	6a3b      	ldr	r3, [r7, #32]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	2b25      	cmp	r3, #37	; 0x25
 8009742:	f000 80e0 	beq.w	8009906 <MicroVsnprintf+0x20a>
 8009746:	2b25      	cmp	r3, #37	; 0x25
 8009748:	dbe6      	blt.n	8009718 <MicroVsnprintf+0x1c>
 800974a:	2b78      	cmp	r3, #120	; 0x78
 800974c:	dce4      	bgt.n	8009718 <MicroVsnprintf+0x1c>
 800974e:	2b64      	cmp	r3, #100	; 0x64
 8009750:	dbe2      	blt.n	8009718 <MicroVsnprintf+0x1c>
 8009752:	3b64      	subs	r3, #100	; 0x64
 8009754:	2b14      	cmp	r3, #20
 8009756:	d8df      	bhi.n	8009718 <MicroVsnprintf+0x1c>
 8009758:	a201      	add	r2, pc, #4	; (adr r2, 8009760 <MicroVsnprintf+0x64>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	080097b5 	.word	0x080097b5
 8009764:	08009719 	.word	0x08009719
 8009768:	0800989b 	.word	0x0800989b
 800976c:	08009719 	.word	0x08009719
 8009770:	08009719 	.word	0x08009719
 8009774:	08009719 	.word	0x08009719
 8009778:	08009719 	.word	0x08009719
 800977c:	08009719 	.word	0x08009719
 8009780:	08009719 	.word	0x08009719
 8009784:	08009719 	.word	0x08009719
 8009788:	08009719 	.word	0x08009719
 800978c:	08009719 	.word	0x08009719
 8009790:	08009719 	.word	0x08009719
 8009794:	08009719 	.word	0x08009719
 8009798:	08009719 	.word	0x08009719
 800979c:	0800991f 	.word	0x0800991f
 80097a0:	08009719 	.word	0x08009719
 80097a4:	080097f7 	.word	0x080097f7
 80097a8:	08009719 	.word	0x08009719
 80097ac:	08009719 	.word	0x08009719
 80097b0:	08009839 	.word	0x08009839
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b0a      	cmp	r3, #10
 80097bc:	dc09      	bgt.n	80097d2 <MicroVsnprintf+0xd6>
            output[output_index++] = '\0';
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	627a      	str	r2, [r7, #36]	; 0x24
 80097c4:	461a      	mov	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	4413      	add	r3, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
            return output_index;
 80097ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d0:	e0e0      	b.n	8009994 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	18d0      	adds	r0, r2, r3
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	1d1a      	adds	r2, r3, #4
 80097dc:	603a      	str	r2, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4619      	mov	r1, r3
 80097e2:	f7ff ff47 	bl	8009674 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 80097e6:	4602      	mov	r2, r0
          output_index +=
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	4413      	add	r3, r2
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	3301      	adds	r3, #1
 80097f2:	623b      	str	r3, [r7, #32]
          break;
 80097f4:	e0c4      	b.n	8009980 <MicroVsnprintf+0x284>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	1ad3      	subs	r3, r2, r3
 80097fc:	2b0a      	cmp	r3, #10
 80097fe:	dc09      	bgt.n	8009814 <MicroVsnprintf+0x118>
            output[output_index++] = '\0';
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	627a      	str	r2, [r7, #36]	; 0x24
 8009806:	461a      	mov	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4413      	add	r3, r2
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	e0bf      	b.n	8009994 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	18d0      	adds	r0, r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	1d1a      	adds	r2, r3, #4
 800981e:	603a      	str	r2, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4619      	mov	r1, r3
 8009824:	f7ff ff36 	bl	8009694 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8009828:	4602      	mov	r2, r0
          output_index +=
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	4413      	add	r3, r2
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	3301      	adds	r3, #1
 8009834:	623b      	str	r3, [r7, #32]
          break;
 8009836:	e0a3      	b.n	8009980 <MicroVsnprintf+0x284>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	2b09      	cmp	r3, #9
 8009840:	dc09      	bgt.n	8009856 <MicroVsnprintf+0x15a>
            output[output_index++] = '\0';
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	1c5a      	adds	r2, r3, #1
 8009846:	627a      	str	r2, [r7, #36]	; 0x24
 8009848:	461a      	mov	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	2200      	movs	r2, #0
 8009850:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009854:	e09e      	b.n	8009994 <MicroVsnprintf+0x298>
          }
          output[output_index++] = '0';
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	627a      	str	r2, [r7, #36]	; 0x24
 800985c:	461a      	mov	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	2230      	movs	r2, #48	; 0x30
 8009864:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8009866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	627a      	str	r2, [r7, #36]	; 0x24
 800986c:	461a      	mov	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4413      	add	r3, r2
 8009872:	2278      	movs	r2, #120	; 0x78
 8009874:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	18d0      	adds	r0, r2, r3
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	1d1a      	adds	r2, r3, #4
 8009880:	603a      	str	r2, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	f7ff ff16 	bl	80096b6 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 800988a:	4602      	mov	r2, r0
          output_index +=
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	4413      	add	r3, r2
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	3301      	adds	r3, #1
 8009896:	623b      	str	r3, [r7, #32]
          break;
 8009898:	e072      	b.n	8009980 <MicroVsnprintf+0x284>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	ee07 3a90 	vmov	s15, r3
 80098a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098a8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80098ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80098b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b4:	d509      	bpl.n	80098ca <MicroVsnprintf+0x1ce>
            output[output_index++] = '\0';
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	627a      	str	r2, [r7, #36]	; 0x24
 80098bc:	461a      	mov	r2, r3
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
            return output_index;
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	e064      	b.n	8009994 <MicroVsnprintf+0x298>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	18d4      	adds	r4, r2, r3
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	3307      	adds	r3, #7
 80098d4:	f023 0307 	bic.w	r3, r3, #7
 80098d8:	f103 0208 	add.w	r2, r3, #8
 80098dc:	603a      	str	r2, [r7, #0]
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	4610      	mov	r0, r2
 80098e4:	4619      	mov	r1, r3
 80098e6:	f7f7 f963 	bl	8000bb0 <__aeabi_d2f>
 80098ea:	4603      	mov	r3, r0
 80098ec:	ee00 3a10 	vmov	s0, r3
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7ff fef1 	bl	80096d8 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 80098f6:	4602      	mov	r2, r0
          output_index +=
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	4413      	add	r3, r2
 80098fc:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	3301      	adds	r3, #1
 8009902:	623b      	str	r3, [r7, #32]
          break;
 8009904:	e03c      	b.n	8009980 <MicroVsnprintf+0x284>
        case '%':
          output[output_index++] = *current++;
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	623a      	str	r2, [r7, #32]
 800990c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800990e:	1c51      	adds	r1, r2, #1
 8009910:	6279      	str	r1, [r7, #36]	; 0x24
 8009912:	4611      	mov	r1, r2
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	440a      	add	r2, r1
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	7013      	strb	r3, [r2, #0]
          break;
 800991c:	e030      	b.n	8009980 <MicroVsnprintf+0x284>
        case 's':
          char* string = va_arg(args, char*);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	1d1a      	adds	r2, r3, #4
 8009922:	603a      	str	r2, [r7, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	4413      	add	r3, r2
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	429a      	cmp	r2, r3
 8009936:	dd14      	ble.n	8009962 <MicroVsnprintf+0x266>
                 string[string_idx] != '\0') {
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4413      	add	r3, r2
 800993e:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00e      	beq.n	8009962 <MicroVsnprintf+0x266>
            output[output_index++] = string[string_idx++];
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	1c5a      	adds	r2, r3, #1
 8009948:	61fa      	str	r2, [r7, #28]
 800994a:	461a      	mov	r2, r3
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	441a      	add	r2, r3
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	1c59      	adds	r1, r3, #1
 8009954:	6279      	str	r1, [r7, #36]	; 0x24
 8009956:	4619      	mov	r1, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	440b      	add	r3, r1
 800995c:	7812      	ldrb	r2, [r2, #0]
 800995e:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8009960:	e7e4      	b.n	800992c <MicroVsnprintf+0x230>
          }
          current++;
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	3301      	adds	r3, #1
 8009966:	623b      	str	r3, [r7, #32]
 8009968:	e6d6      	b.n	8009718 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	623a      	str	r2, [r7, #32]
 8009970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009972:	1c51      	adds	r1, r2, #1
 8009974:	6279      	str	r1, [r7, #36]	; 0x24
 8009976:	4611      	mov	r1, r2
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	440a      	add	r2, r1
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8009980:	e6ca      	b.n	8009718 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	1c5a      	adds	r2, r3, #1
 8009986:	627a      	str	r2, [r7, #36]	; 0x24
 8009988:	461a      	mov	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4413      	add	r3, r2
 800998e:	2200      	movs	r2, #0
 8009990:	701a      	strb	r2, [r3, #0]
  return output_index;
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009994:	4618      	mov	r0, r3
 8009996:	372c      	adds	r7, #44	; 0x2c
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}

0800999c <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  int result = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 80099a8:	2300      	movs	r3, #0
 80099aa:	60bb      	str	r3, [r7, #8]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	da0c      	bge.n	80099d0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x34>
    result *= dims.data[i];
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
 80099c6:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < dims.size; ++i) {
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	3301      	adds	r3, #1
 80099cc:	60bb      	str	r3, [r7, #8]
 80099ce:	e7ed      	b.n	80099ac <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x10>
  }
  return result;
 80099d0:	68fb      	ldr	r3, [r7, #12]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	4a11      	ldr	r2, [pc, #68]	; (8009a30 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	605a      	str	r2, [r3, #4]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	609a      	str	r2, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	60da      	str	r2, [r3, #12]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	611a      	str	r2, [r3, #16]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	695a      	ldr	r2, [r3, #20]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	615a      	str	r2, [r3, #20]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	699a      	ldr	r2, [r3, #24]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	619a      	str	r2, [r3, #24]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	080287f4 	.word	0x080287f4

08009a34 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
 8009a40:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8009a42:	4a0e      	ldr	r2, [pc, #56]	; (8009a7c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	601a      	str	r2, [r3, #0]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	609a      	str	r2, [r3, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	60da      	str	r2, [r3, #12]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	611a      	str	r2, [r3, #16]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	615a      	str	r2, [r3, #20]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	619a      	str	r2, [r3, #24]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	080287f4 	.word	0x080287f4

08009a80 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	4413      	add	r3, r2
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7ff ffcb 	bl	8009a34 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8009aa8:	b590      	push	{r4, r7, lr}
 8009aaa:	b08d      	sub	sp, #52	; 0x34
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d101      	bne.n	8009abe <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8009aba:	f018 f809 	bl	8021ad0 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d101      	bne.n	8009ac8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009ac4:	f018 f804 	bl	8021ad0 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009ac8:	f107 0010 	add.w	r0, r7, #16
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	68f9      	ldr	r1, [r7, #12]
 8009ad2:	f7ff ffd5 	bl	8009a80 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
 8009ad6:	f107 0310 	add.w	r3, r7, #16
 8009ada:	2204      	movs	r2, #4
 8009adc:	211c      	movs	r1, #28
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 f87c 	bl	8009bdc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8009ae4:	62f8      	str	r0, [r7, #44]	; 0x2c
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	4619      	mov	r1, r3
 8009aea:	201c      	movs	r0, #28
 8009aec:	f7f8 fe4d 	bl	800278a <_ZnwjPv>
 8009af0:	4604      	mov	r4, r0
 8009af2:	f107 0310 	add.w	r3, r7, #16
 8009af6:	4619      	mov	r1, r3
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7ff ff71 	bl	80099e0 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009afe:	f107 0310 	add.w	r3, r7, #16
 8009b02:	4618      	mov	r0, r3
 8009b04:	f000 f806 	bl	8009b14 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009b08:	4623      	mov	r3, r4
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3734      	adds	r7, #52	; 0x34
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd90      	pop	{r4, r7, pc}
	...

08009b14 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	4a04      	ldr	r2, [pc, #16]	; (8009b30 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	080287f4 	.word	0x080287f4

08009b34 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f7ff ffe9 	bl	8009b14 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009b42:	211c      	movs	r1, #28
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f017 fedb 	bl	8021900 <_ZdlPvj>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b088      	sub	sp, #32
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d007      	beq.n	8009b7c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	4918      	ldr	r1, [pc, #96]	; (8009bd4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7f8 fdd6 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e026      	b.n	8009bca <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	6879      	ldr	r1, [r7, #4]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fc f8d4 	bl	8005d30 <_ZN6tflite14AlignPointerUpEPhj>
 8009b88:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	695a      	ldr	r2, [r3, #20]
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	1ad3      	subs	r3, r2, r3
 8009b92:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d20c      	bcs.n	8009bb6 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x62>
    TF_LITE_REPORT_ERROR(
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	6858      	ldr	r0, [r3, #4]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	490a      	ldr	r1, [pc, #40]	; (8009bd8 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 8009bae:	f7f8 fdb9 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e009      	b.n	8009bca <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x76>
  }
  head_ = aligned_result + size;
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	441a      	add	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	691a      	ldr	r2, [r3, #16]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08026280 	.word	0x08026280
 8009bd8:	080262d8 	.word	0x080262d8

08009bdc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	695a      	ldr	r2, [r3, #20]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	425b      	negs	r3, r3
 8009bf0:	4413      	add	r3, r2
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fc f8b4 	bl	8005d62 <_ZN6tflite16AlignPointerDownEPhj>
 8009bfa:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d212      	bcs.n	8009c2c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x50>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	691a      	ldr	r2, [r3, #16]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6858      	ldr	r0, [r3, #4]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	1ad2      	subs	r2, r2, r3
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4906      	ldr	r1, [pc, #24]	; (8009c3c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x60>)
 8009c24:	f7f8 fd7e 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	e003      	b.n	8009c34 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x58>
  }
  tail_ = aligned_result;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8009c32:	697b      	ldr	r3, [r7, #20]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	0802631c 	.word	0x0802631c

08009c40 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b088      	sub	sp, #32
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	699b      	ldr	r3, [r3, #24]
 8009c50:	6879      	ldr	r1, [r7, #4]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7fc f86c 	bl	8005d30 <_ZN6tflite14AlignPointerUpEPhj>
 8009c58:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	695a      	ldr	r2, [r3, #20]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d20c      	bcs.n	8009c86 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x46>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6858      	ldr	r0, [r3, #4]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	9300      	str	r3, [sp, #0]
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	4907      	ldr	r1, [pc, #28]	; (8009c9c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 8009c7e:	f7f8 fd51 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e005      	b.n	8009c92 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x52>
  }
  temp_ = aligned_result + size;
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	441a      	add	r2, r3
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	619a      	str	r2, [r3, #24]
  return aligned_result;
 8009c90:	697b      	ldr	r3, [r7, #20]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	08026368 	.word	0x08026368

08009ca0 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	619a      	str	r2, [r3, #24]
 8009cb0:	bf00      	nop
 8009cb2:	370c      	adds	r7, #12
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8009cbc:	b480      	push	{r7}
 8009cbe:	b083      	sub	sp, #12
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fc f823 	bl	8005d30 <_ZN6tflite14AlignPointerUpEPhj>
 8009cea:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7fc f835 	bl	8005d62 <_ZN6tflite16AlignPointerDownEPhj>
 8009cf8:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	1ad3      	subs	r3, r2, r3
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <_ZNK6tflite21SimpleMemoryAllocator12GetUsedBytesEv>:

size_t SimpleMemoryAllocator::GetUsedBytes() const {
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  return GetBufferSize() - (tail_ - temp_);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f80b 	bl	8009d2c <_ZNK6tflite21SimpleMemoryAllocator13GetBufferSizeEv>
 8009d16:	4601      	mov	r1, r0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	695a      	ldr	r2, [r3, #20]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	1acb      	subs	r3, r1, r3
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <_ZNK6tflite21SimpleMemoryAllocator13GetBufferSizeEv>:

size_t SimpleMemoryAllocator::GetBufferSize() const {
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  return buffer_tail_ - buffer_head_;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68da      	ldr	r2, [r3, #12]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	1ad3      	subs	r3, r2, r3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <_ZN6tflite16InitializeTargetEv>:
namespace tflite {

// To add an equivalent function for your own platform, create your own
// implementation file, and place it in a subfolder named after the target. See
// tensorflow/lite/micro/debug_log.cc for a similar example.
void InitializeTarget() {}
 8009d4a:	b480      	push	{r7}
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	bf00      	nop
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d60:	4618      	mov	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
	...

08009d6c <_ZN11flatbuffers11EndianCheckEv>:
inline void EndianCheck() {
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	607b      	str	r3, [r7, #4]
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8009d76:	1d3b      	adds	r3, r7, #4
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d005      	beq.n	8009d8a <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8009d80:	4a05      	ldr	r2, [pc, #20]	; (8009d98 <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8009d82:	214e      	movs	r1, #78	; 0x4e
 8009d84:	4805      	ldr	r0, [pc, #20]	; (8009d9c <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8009d86:	f017 feab 	bl	8021ae0 <__assert_func>
}
 8009d8a:	bf00      	nop
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	080263b4 	.word	0x080263b4
 8009d98:	080263f8 	.word	0x080263f8
 8009d9c:	08026418 	.word	0x08026418

08009da0 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f805 	bl	8009db8 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8009dae:	4603      	mov	r3, r0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8009dc0:	f7ff ffd4 	bl	8009d6c <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f9 fb45 	bl	8003458 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4413      	add	r3, r2
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <_ZNK6tflite5Model7versionEv>:
  uint32_t version() const {
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	2104      	movs	r1, #4
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd ff20 	bl	8007c30 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8009df0:	4603      	mov	r3, r0
  }
 8009df2:	4618      	mov	r0, r3
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff ffcc 	bl	8009da0 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8009e08:	4603      	mov	r3, r0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <_ZNK6tflite16MicroInterpreter16arena_used_bytesEv>:
  // Returns the actual used arena in bytes. This method gives the optimal arena
  // size. It's only available after `AllocateTensors` has been called.
  // Note that normally `tensor_arena` requires 16 bytes alignment to fully
  // utilize the space. If it's not the case, the optimial arena size would be
  // arena_used_bytes() + 16.
  size_t arena_used_bytes() const { return allocator_.used_bytes(); }
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fd f971 	bl	8007106 <_ZNK6tflite14MicroAllocator10used_bytesEv>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <__tcf_0>:
  tflite::InitializeTarget();

  // Set up logging. Google style is to avoid globals or statics because of
  // lifetime uncertainty, but since this has a trivial destructor it's okay.
  // NOLINTNEXTLINE(runtime-global-variables)
  static tflite::MicroErrorReporter micro_error_reporter;
 8009e30:	b580      	push	{r7, lr}
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	4801      	ldr	r0, [pc, #4]	; (8009e3c <__tcf_0+0xc>)
 8009e36:	f7fe fc43 	bl	80086c0 <_ZN6tflite18MicroErrorReporterD1Ev>
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	20000008 	.word	0x20000008

08009e40 <__tcf_1>:
////  resolver.AddPadV2();
//  resolver.AddRelu6();
//  resolver.AddReshape();
////  resolver.AddSoftmax();

  static tflite::MicroMutableOpResolver<15> resolver;
 8009e40:	b580      	push	{r7, lr}
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	4801      	ldr	r0, [pc, #4]	; (8009e4c <__tcf_1+0xc>)
 8009e46:	f000 fb65 	bl	800a514 <_ZN6tflite22MicroMutableOpResolverILj15EED1Ev>
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	20000184 	.word	0x20000184

08009e50 <__tcf_2>:

//  static tflite::AllOpsResolver resolver;

  // Build an interpreter to run the model with.
  static tflite::MicroInterpreter static_interpreter(
      model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	4801      	ldr	r0, [pc, #4]	; (8009e5c <__tcf_2+0xc>)
 8009e56:	f7fe fe29 	bl	8008aac <_ZN6tflite16MicroInterpreterD1Ev>
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	200003c4 	.word	0x200003c4

08009e60 <setup>:
void setup() {
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b089      	sub	sp, #36	; 0x24
 8009e64:	af04      	add	r7, sp, #16
  tflite::InitializeTarget();
 8009e66:	f7ff ff70 	bl	8009d4a <_ZN6tflite16InitializeTargetEv>
  static tflite::MicroErrorReporter micro_error_reporter;
 8009e6a:	4b82      	ldr	r3, [pc, #520]	; (800a074 <setup+0x214>)
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	f3bf 8f5b 	dmb	ish
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	bf0c      	ite	eq
 8009e7c:	2301      	moveq	r3, #1
 8009e7e:	2300      	movne	r3, #0
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d010      	beq.n	8009ea8 <setup+0x48>
 8009e86:	487b      	ldr	r0, [pc, #492]	; (800a074 <setup+0x214>)
 8009e88:	f017 fd3e 	bl	8021908 <__cxa_guard_acquire>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bf14      	ite	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	2300      	moveq	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d005      	beq.n	8009ea8 <setup+0x48>
 8009e9c:	4875      	ldr	r0, [pc, #468]	; (800a074 <setup+0x214>)
 8009e9e:	f017 fd3f 	bl	8021920 <__cxa_guard_release>
 8009ea2:	4875      	ldr	r0, [pc, #468]	; (800a078 <setup+0x218>)
 8009ea4:	f017 fe3a 	bl	8021b1c <atexit>
  error_reporter = &micro_error_reporter;
 8009ea8:	4b74      	ldr	r3, [pc, #464]	; (800a07c <setup+0x21c>)
 8009eaa:	4a75      	ldr	r2, [pc, #468]	; (800a080 <setup+0x220>)
 8009eac:	601a      	str	r2, [r3, #0]
  for (int i=0; i<g_model_len; i++)
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	4b74      	ldr	r3, [pc, #464]	; (800a084 <setup+0x224>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	da0c      	bge.n	8009ed6 <setup+0x76>
	  g_model_sdram[i]=g_model[i];
 8009ebc:	4a72      	ldr	r2, [pc, #456]	; (800a088 <setup+0x228>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	7819      	ldrb	r1, [r3, #0]
 8009ec4:	4a71      	ldr	r2, [pc, #452]	; (800a08c <setup+0x22c>)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	460a      	mov	r2, r1
 8009ecc:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<g_model_len; i++)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	e7ed      	b.n	8009eb2 <setup+0x52>
  model = tflite::GetModel(g_model_sdram);
 8009ed6:	486d      	ldr	r0, [pc, #436]	; (800a08c <setup+0x22c>)
 8009ed8:	f7ff ff8f 	bl	8009dfa <_ZN6tflite8GetModelEPKv>
 8009edc:	4603      	mov	r3, r0
 8009ede:	4a6c      	ldr	r2, [pc, #432]	; (800a090 <setup+0x230>)
 8009ee0:	6013      	str	r3, [r2, #0]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
 8009ee2:	4b6b      	ldr	r3, [pc, #428]	; (800a090 <setup+0x230>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff ff78 	bl	8009ddc <_ZNK6tflite5Model7versionEv>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	bf14      	ite	ne
 8009ef2:	2301      	movne	r3, #1
 8009ef4:	2300      	moveq	r3, #0
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00d      	beq.n	8009f18 <setup+0xb8>
    TF_LITE_REPORT_ERROR(error_reporter,
 8009efc:	4b5f      	ldr	r3, [pc, #380]	; (800a07c <setup+0x21c>)
 8009efe:	681c      	ldr	r4, [r3, #0]
 8009f00:	4b63      	ldr	r3, [pc, #396]	; (800a090 <setup+0x230>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7ff ff69 	bl	8009ddc <_ZNK6tflite5Model7versionEv>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	4961      	ldr	r1, [pc, #388]	; (800a094 <setup+0x234>)
 8009f10:	4620      	mov	r0, r4
 8009f12:	f7f8 fc07 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 8009f16:	e0aa      	b.n	800a06e <setup+0x20e>
  static tflite::MicroMutableOpResolver<15> resolver;
 8009f18:	4b5f      	ldr	r3, [pc, #380]	; (800a098 <setup+0x238>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	f3bf 8f5b 	dmb	ish
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bf0c      	ite	eq
 8009f2a:	2301      	moveq	r3, #1
 8009f2c:	2300      	movne	r3, #0
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d014      	beq.n	8009f5e <setup+0xfe>
 8009f34:	4858      	ldr	r0, [pc, #352]	; (800a098 <setup+0x238>)
 8009f36:	f017 fce7 	bl	8021908 <__cxa_guard_acquire>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	bf14      	ite	ne
 8009f40:	2301      	movne	r3, #1
 8009f42:	2300      	moveq	r3, #0
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d009      	beq.n	8009f5e <setup+0xfe>
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4853      	ldr	r0, [pc, #332]	; (800a09c <setup+0x23c>)
 8009f4e:	f000 f95f 	bl	800a210 <_ZN6tflite22MicroMutableOpResolverILj15EEC1EPNS_13ErrorReporterE>
 8009f52:	4851      	ldr	r0, [pc, #324]	; (800a098 <setup+0x238>)
 8009f54:	f017 fce4 	bl	8021920 <__cxa_guard_release>
 8009f58:	4851      	ldr	r0, [pc, #324]	; (800a0a0 <setup+0x240>)
 8009f5a:	f017 fddf 	bl	8021b1c <atexit>
  resolver.AddAdd();
 8009f5e:	484f      	ldr	r0, [pc, #316]	; (800a09c <setup+0x23c>)
 8009f60:	f000 f976 	bl	800a250 <_ZN6tflite22MicroMutableOpResolverILj15EE6AddAddEv>
  resolver.AddAveragePool2D();
 8009f64:	484d      	ldr	r0, [pc, #308]	; (800a09c <setup+0x23c>)
 8009f66:	f000 f98b 	bl	800a280 <_ZN6tflite22MicroMutableOpResolverILj15EE16AddAveragePool2DEv>
  resolver.AddConv2D();
 8009f6a:	484c      	ldr	r0, [pc, #304]	; (800a09c <setup+0x23c>)
 8009f6c:	f000 f9a0 	bl	800a2b0 <_ZN6tflite22MicroMutableOpResolverILj15EE9AddConv2DEv>
  resolver.AddDepthwiseConv2D();
 8009f70:	484a      	ldr	r0, [pc, #296]	; (800a09c <setup+0x23c>)
 8009f72:	f000 f9b5 	bl	800a2e0 <_ZN6tflite22MicroMutableOpResolverILj15EE18AddDepthwiseConv2DEv>
  resolver.AddPad();
 8009f76:	4849      	ldr	r0, [pc, #292]	; (800a09c <setup+0x23c>)
 8009f78:	f000 f9ca 	bl	800a310 <_ZN6tflite22MicroMutableOpResolverILj15EE6AddPadEv>
  resolver.AddRelu6();
 8009f7c:	4847      	ldr	r0, [pc, #284]	; (800a09c <setup+0x23c>)
 8009f7e:	f000 f9df 	bl	800a340 <_ZN6tflite22MicroMutableOpResolverILj15EE8AddRelu6Ev>
  resolver.AddReshape();
 8009f82:	4846      	ldr	r0, [pc, #280]	; (800a09c <setup+0x23c>)
 8009f84:	f000 f9f4 	bl	800a370 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddReshapeEv>
      model, resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8009f88:	4b46      	ldr	r3, [pc, #280]	; (800a0a4 <setup+0x244>)
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	f3bf 8f5b 	dmb	ish
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	f003 0301 	and.w	r3, r3, #1
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf0c      	ite	eq
 8009f9a:	2301      	moveq	r3, #1
 8009f9c:	2300      	movne	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d01e      	beq.n	8009fe2 <setup+0x182>
 8009fa4:	483f      	ldr	r0, [pc, #252]	; (800a0a4 <setup+0x244>)
 8009fa6:	f017 fcaf 	bl	8021908 <__cxa_guard_acquire>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	bf14      	ite	ne
 8009fb0:	2301      	movne	r3, #1
 8009fb2:	2300      	moveq	r3, #0
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d013      	beq.n	8009fe2 <setup+0x182>
 8009fba:	4b35      	ldr	r3, [pc, #212]	; (800a090 <setup+0x230>)
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	4b2f      	ldr	r3, [pc, #188]	; (800a07c <setup+0x21c>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	9202      	str	r2, [sp, #8]
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	4b37      	ldr	r3, [pc, #220]	; (800a0a8 <setup+0x248>)
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	4b37      	ldr	r3, [pc, #220]	; (800a0ac <setup+0x24c>)
 8009fce:	4a33      	ldr	r2, [pc, #204]	; (800a09c <setup+0x23c>)
 8009fd0:	4837      	ldr	r0, [pc, #220]	; (800a0b0 <setup+0x250>)
 8009fd2:	f7fe fd1d 	bl	8008a10 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_13MicroProfilerE>
 8009fd6:	4833      	ldr	r0, [pc, #204]	; (800a0a4 <setup+0x244>)
 8009fd8:	f017 fca2 	bl	8021920 <__cxa_guard_release>
 8009fdc:	4835      	ldr	r0, [pc, #212]	; (800a0b4 <setup+0x254>)
 8009fde:	f017 fd9d 	bl	8021b1c <atexit>
  interpreter = &static_interpreter;
 8009fe2:	4b35      	ldr	r3, [pc, #212]	; (800a0b8 <setup+0x258>)
 8009fe4:	4a32      	ldr	r2, [pc, #200]	; (800a0b0 <setup+0x250>)
 8009fe6:	601a      	str	r2, [r3, #0]

  // Allocate memory from the tensor_arena for the model's tensors.
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8009fe8:	4b33      	ldr	r3, [pc, #204]	; (800a0b8 <setup+0x258>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f7fe fdf1 	bl	8008bd4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	72fb      	strb	r3, [r7, #11]
  if (allocate_status != kTfLiteOk) {
 8009ff6:	7afb      	ldrb	r3, [r7, #11]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d006      	beq.n	800a00a <setup+0x1aa>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
 8009ffc:	4b1f      	ldr	r3, [pc, #124]	; (800a07c <setup+0x21c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	492e      	ldr	r1, [pc, #184]	; (800a0bc <setup+0x25c>)
 800a002:	4618      	mov	r0, r3
 800a004:	f7f8 fb8e 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
 800a008:	e031      	b.n	800a06e <setup+0x20e>
  }


#ifdef DEBUG_PRINTS
  uart_buf_len = sprintf((char *)debugPrintPtr, "Allocated Tensors\n");
 800a00a:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <setup+0x260>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	492d      	ldr	r1, [pc, #180]	; (800a0c4 <setup+0x264>)
 800a010:	4618      	mov	r0, r3
 800a012:	f018 fa03 	bl	802241c <siprintf>
 800a016:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
  debugPrintPtr += 32;
 800a018:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <setup+0x260>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3320      	adds	r3, #32
 800a01e:	4a28      	ldr	r2, [pc, #160]	; (800a0c0 <setup+0x260>)
 800a020:	6013      	str	r3, [r2, #0]
#endif

#ifdef DEBUG_PRINTS
  uart_buf_len = sprintf((char *)debugPrintPtr, "Arena Used Bytes: %u\n", static_interpreter.arena_used_bytes());
 800a022:	4b27      	ldr	r3, [pc, #156]	; (800a0c0 <setup+0x260>)
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	4822      	ldr	r0, [pc, #136]	; (800a0b0 <setup+0x250>)
 800a028:	f7ff fef3 	bl	8009e12 <_ZNK6tflite16MicroInterpreter16arena_used_bytesEv>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	4925      	ldr	r1, [pc, #148]	; (800a0c8 <setup+0x268>)
 800a032:	4620      	mov	r0, r4
 800a034:	f018 f9f2 	bl	802241c <siprintf>
 800a038:	6078      	str	r0, [r7, #4]
//  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
  debugPrintPtr += 32;
 800a03a:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <setup+0x260>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3320      	adds	r3, #32
 800a040:	4a1f      	ldr	r2, [pc, #124]	; (800a0c0 <setup+0x260>)
 800a042:	6013      	str	r3, [r2, #0]
#endif

  // Obtain pointers to the model's input and output tensors.
  input = interpreter->input(0);
 800a044:	4b1c      	ldr	r3, [pc, #112]	; (800a0b8 <setup+0x258>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2100      	movs	r1, #0
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff f88a 	bl	8009164 <_ZN6tflite16MicroInterpreter5inputEj>
 800a050:	4603      	mov	r3, r0
 800a052:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <setup+0x26c>)
 800a054:	6013      	str	r3, [r2, #0]
  output = interpreter->output(0);
 800a056:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <setup+0x258>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2100      	movs	r1, #0
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7ff f8a5 	bl	80091ac <_ZN6tflite16MicroInterpreter6outputEj>
 800a062:	4603      	mov	r3, r0
 800a064:	4a1a      	ldr	r2, [pc, #104]	; (800a0d0 <setup+0x270>)
 800a066:	6013      	str	r3, [r2, #0]

  // Keep track of how many inferences we have performed.
  inference_count = 0;
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <setup+0x274>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	601a      	str	r2, [r3, #0]
}
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	bd90      	pop	{r4, r7, pc}
 800a074:	20000180 	.word	0x20000180
 800a078:	08009e31 	.word	0x08009e31
 800a07c:	20000168 	.word	0x20000168
 800a080:	20000008 	.word	0x20000008
 800a084:	0802880c 	.word	0x0802880c
 800a088:	90000000 	.word	0x90000000
 800a08c:	c0000000 	.word	0xc0000000
 800a090:	2000016c 	.word	0x2000016c
 800a094:	08026e18 	.word	0x08026e18
 800a098:	200003c0 	.word	0x200003c0
 800a09c:	20000184 	.word	0x20000184
 800a0a0:	08009e41 	.word	0x08009e41
 800a0a4:	2000045c 	.word	0x2000045c
 800a0a8:	0016e360 	.word	0x0016e360
 800a0ac:	c00e2ff8 	.word	0xc00e2ff8
 800a0b0:	200003c4 	.word	0x200003c4
 800a0b4:	08009e51 	.word	0x08009e51
 800a0b8:	20000170 	.word	0x20000170
 800a0bc:	08026e60 	.word	0x08026e60
 800a0c0:	20000000 	.word	0x20000000
 800a0c4:	08026e7c 	.word	0x08026e7c
 800a0c8:	08026e90 	.word	0x08026e90
 800a0cc:	20000174 	.word	0x20000174
 800a0d0:	20000178 	.word	0x20000178
 800a0d4:	2000017c 	.word	0x2000017c

0800a0d8 <loop>:

// The name of this function is important for Arduino compatibility.
void loop() {
 800a0d8:	b590      	push	{r4, r7, lr}
 800a0da:	b089      	sub	sp, #36	; 0x24
 800a0dc:	af00      	add	r7, sp, #0
  // Calculate an x value to feed into the model. We compare the current
  // inference_count to the number of inferences per cycle to determine
  // our position within the range of possible x values the model was
  // trained on, and use this to calculate a value.
  float position = static_cast<float>(inference_count) /
 800a0de:	4b41      	ldr	r3, [pc, #260]	; (800a1e4 <loop+0x10c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	ee07 3a90 	vmov	s15, r3
 800a0e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                   static_cast<float>(kInferencesPerCycle);
 800a0ea:	4b3f      	ldr	r3, [pc, #252]	; (800a1e8 <loop+0x110>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	ee07 3a90 	vmov	s15, r3
 800a0f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  float position = static_cast<float>(inference_count) /
 800a0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0fa:	edc7 7a05 	vstr	s15, [r7, #20]
  float x = position * kXrange;
 800a0fe:	edd7 7a05 	vldr	s15, [r7, #20]
 800a102:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800a1ec <loop+0x114>
 800a106:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a10a:	edc7 7a04 	vstr	s15, [r7, #16]
//	  for (int i = 0; i < (112*112*3); i++ )
	uint16_t timer_val;
//	char debugPrintPtr[50];
	int uart_buf_len;

	char j = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	77fb      	strb	r3, [r7, #31]

	for (unsigned int i = 0; i < input->bytes; i++) {
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
 800a116:	4b36      	ldr	r3, [pc, #216]	; (800a1f0 <loop+0x118>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	69ba      	ldr	r2, [r7, #24]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d20e      	bcs.n	800a140 <loop+0x68>
		input->data.int8[i] = j;
 800a122:	4b33      	ldr	r3, [pc, #204]	; (800a1f0 <loop+0x118>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	4413      	add	r3, r2
 800a12c:	f997 201f 	ldrsb.w	r2, [r7, #31]
 800a130:	701a      	strb	r2, [r3, #0]
		j++;
 800a132:	7ffb      	ldrb	r3, [r7, #31]
 800a134:	3301      	adds	r3, #1
 800a136:	77fb      	strb	r3, [r7, #31]
	for (unsigned int i = 0; i < input->bytes; i++) {
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	3301      	adds	r3, #1
 800a13c:	61bb      	str	r3, [r7, #24]
 800a13e:	e7ea      	b.n	800a116 <loop+0x3e>
	}

	timer_val = HAL_GetTick();
 800a140:	f013 ffde 	bl	801e100 <HAL_GetTick>
 800a144:	4603      	mov	r3, r0
 800a146:	81fb      	strh	r3, [r7, #14]

	// Run inference, and report any error
	TfLiteStatus invoke_status = interpreter->Invoke();
 800a148:	4b2a      	ldr	r3, [pc, #168]	; (800a1f4 <loop+0x11c>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fe ff49 	bl	8008fe4 <_ZN6tflite16MicroInterpreter6InvokeEv>
 800a152:	4603      	mov	r3, r0
 800a154:	737b      	strb	r3, [r7, #13]
	if (invoke_status != kTfLiteOk) {
 800a156:	7b7b      	ldrb	r3, [r7, #13]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <loop+0x9c>
	TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed on x: %f\n",
 800a15c:	4b26      	ldr	r3, [pc, #152]	; (800a1f8 <loop+0x120>)
 800a15e:	681c      	ldr	r4, [r3, #0]
 800a160:	6938      	ldr	r0, [r7, #16]
 800a162:	f7f6 fa0b 	bl	800057c <__aeabi_f2d>
 800a166:	4602      	mov	r2, r0
 800a168:	460b      	mov	r3, r1
 800a16a:	4924      	ldr	r1, [pc, #144]	; (800a1fc <loop+0x124>)
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7f8 fad9 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
						 static_cast<double>(x));
	return;
 800a172:	e034      	b.n	800a1de <loop+0x106>
	}

	#ifdef DEBUG_PRINTS
	timer_val = HAL_GetTick() - timer_val;
 800a174:	f013 ffc4 	bl	801e100 <HAL_GetTick>
 800a178:	4603      	mov	r3, r0
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	89fb      	ldrh	r3, [r7, #14]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	81fb      	strh	r3, [r7, #14]
	uart_buf_len = sprintf((char *)debugPrintPtr, "Inference Time: %u/10ms\n", timer_val);
 800a182:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <loop+0x128>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	89fa      	ldrh	r2, [r7, #14]
 800a188:	491e      	ldr	r1, [pc, #120]	; (800a204 <loop+0x12c>)
 800a18a:	4618      	mov	r0, r3
 800a18c:	f018 f946 	bl	802241c <siprintf>
 800a190:	60b8      	str	r0, [r7, #8]
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
    debugPrintPtr += 32;
 800a192:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <loop+0x128>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3320      	adds	r3, #32
 800a198:	4a19      	ldr	r2, [pc, #100]	; (800a200 <loop+0x128>)
 800a19a:	6013      	str	r3, [r2, #0]
	#endif

	void * temp = output->data.data;
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <loop+0x130>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	607b      	str	r3, [r7, #4]

	#ifdef DEBUG_PRINTS
	uart_buf_len = sprintf((char *)debugPrintPtr, "Output Ptr: %X \n", output->data.data);
 800a1a4:	4b16      	ldr	r3, [pc, #88]	; (800a200 <loop+0x128>)
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	4b17      	ldr	r3, [pc, #92]	; (800a208 <loop+0x130>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	4916      	ldr	r1, [pc, #88]	; (800a20c <loop+0x134>)
 800a1b2:	f018 f933 	bl	802241c <siprintf>
 800a1b6:	60b8      	str	r0, [r7, #8]
	debugPrintPtr += 32;
 800a1b8:	4b11      	ldr	r3, [pc, #68]	; (800a200 <loop+0x128>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3320      	adds	r3, #32
 800a1be:	4a10      	ldr	r2, [pc, #64]	; (800a200 <loop+0x128>)
 800a1c0:	6013      	str	r3, [r2, #0]
//  // for each supported hardware target.
//  HandleOutput(error_reporter, x, y);

  // Increment the inference_counter, and reset it if we have reached
  // the total number per cycle
  inference_count += 1;
 800a1c2:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <loop+0x10c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	4a06      	ldr	r2, [pc, #24]	; (800a1e4 <loop+0x10c>)
 800a1ca:	6013      	str	r3, [r2, #0]
  if (inference_count >= kInferencesPerCycle) inference_count = 0;
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <loop+0x10c>)
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <loop+0x110>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	db02      	blt.n	800a1de <loop+0x106>
 800a1d8:	4b02      	ldr	r3, [pc, #8]	; (800a1e4 <loop+0x10c>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
}
 800a1de:	3724      	adds	r7, #36	; 0x24
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd90      	pop	{r4, r7, pc}
 800a1e4:	2000017c 	.word	0x2000017c
 800a1e8:	08028810 	.word	0x08028810
 800a1ec:	40c90fdb 	.word	0x40c90fdb
 800a1f0:	20000174 	.word	0x20000174
 800a1f4:	20000170 	.word	0x20000170
 800a1f8:	20000168 	.word	0x20000168
 800a1fc:	08026ea8 	.word	0x08026ea8
 800a200:	20000000 	.word	0x20000000
 800a204:	08026ec0 	.word	0x08026ec0
 800a208:	20000178 	.word	0x20000178
 800a20c:	08026edc 	.word	0x08026edc

0800a210 <_ZN6tflite22MicroMutableOpResolverILj15EEC1EPNS_13ErrorReporterE>:
template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fb fc73 	bl	8005b08 <_ZN6tflite15MicroOpResolverC1Ev>
 800a222:	4a0a      	ldr	r2, [pc, #40]	; (800a24c <_ZN6tflite22MicroMutableOpResolverILj15EEC1EPNS_13ErrorReporterE+0x3c>)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	0802881c 	.word	0x0802881c

0800a250 <_ZN6tflite22MicroMutableOpResolverILj15EE6AddAddEv>:
  TfLiteStatus AddAbs() {
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
                      ParseAbs);
  }

  TfLiteStatus AddAdd() {
 800a250:	b580      	push	{r7, lr}
 800a252:	b08a      	sub	sp, #40	; 0x28
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
 800a258:	f107 0308 	add.w	r3, r7, #8
 800a25c:	4618      	mov	r0, r3
 800a25e:	f005 f87b 	bl	800f358 <_ZN6tflite3ops5micro12Register_ADDEv>
                      ParseAdd);
 800a262:	f107 0208 	add.w	r2, r7, #8
 800a266:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_ZN6tflite22MicroMutableOpResolverILj15EE6AddAddEv+0x2c>)
 800a268:	2100      	movs	r1, #0
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f898 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a270:	4603      	mov	r3, r0
  }
 800a272:	4618      	mov	r0, r3
 800a274:	3728      	adds	r7, #40	; 0x28
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08002e6d 	.word	0x08002e6d

0800a280 <_ZN6tflite22MicroMutableOpResolverILj15EE16AddAveragePool2DEv>:
  TfLiteStatus AddArgMin() {
    return AddBuiltin(BuiltinOperator_ARG_MIN,
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
  }

  TfLiteStatus AddAveragePool2D() {
 800a280:	b580      	push	{r7, lr}
 800a282:	b08a      	sub	sp, #40	; 0x28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_AVERAGE_POOL_2D,
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
 800a288:	f107 0308 	add.w	r3, r7, #8
 800a28c:	4618      	mov	r0, r3
 800a28e:	f008 fcef 	bl	8012c70 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
 800a292:	f107 0208 	add.w	r2, r7, #8
 800a296:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <_ZN6tflite22MicroMutableOpResolverILj15EE16AddAveragePool2DEv+0x2c>)
 800a298:	2101      	movs	r1, #1
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f880 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a2a0:	4603      	mov	r3, r0
  }
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3728      	adds	r7, #40	; 0x28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	08003201 	.word	0x08003201

0800a2b0 <_ZN6tflite22MicroMutableOpResolverILj15EE9AddConv2DEv>:
    return AddBuiltin(BuiltinOperator_CONCATENATION,
                      tflite::ops::micro::Register_CONCATENATION(),
                      ParseConcatenation);
  }

  TfLiteStatus AddConv2D() {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 800a2b8:	f107 0308 	add.w	r3, r7, #8
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f006 fa27 	bl	8010710 <_ZN6tflite16Register_CONV_2DEv>
 800a2c2:	f107 0208 	add.w	r2, r7, #8
 800a2c6:	4b05      	ldr	r3, [pc, #20]	; (800a2dc <_ZN6tflite22MicroMutableOpResolverILj15EE9AddConv2DEv+0x2c>)
 800a2c8:	2103      	movs	r1, #3
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f868 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a2d0:	4603      	mov	r3, r0
  }
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3728      	adds	r7, #40	; 0x28
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	08002f4d 	.word	0x08002f4d

0800a2e0 <_ZN6tflite22MicroMutableOpResolverILj15EE18AddDepthwiseConv2DEv>:
  TfLiteStatus AddCos() {
    return AddBuiltin(BuiltinOperator_COS, tflite::ops::micro::Register_COS(),
                      ParseCos);
  }

  TfLiteStatus AddDepthwiseConv2D() {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08a      	sub	sp, #40	; 0x28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_DEPTHWISE_CONV_2D,
                      Register_DEPTHWISE_CONV_2D(), ParseDepthwiseConv2D);
 800a2e8:	f107 0308 	add.w	r3, r7, #8
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f007 facd 	bl	801188c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>
 800a2f2:	f107 0208 	add.w	r2, r7, #8
 800a2f6:	4b05      	ldr	r3, [pc, #20]	; (800a30c <_ZN6tflite22MicroMutableOpResolverILj15EE18AddDepthwiseConv2DEv+0x2c>)
 800a2f8:	2104      	movs	r1, #4
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f850 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a300:	4603      	mov	r3, r0
  }
 800a302:	4618      	mov	r0, r3
 800a304:	3728      	adds	r7, #40	; 0x28
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	0800308d 	.word	0x0800308d

0800a310 <_ZN6tflite22MicroMutableOpResolverILj15EE6AddPadEv>:
  TfLiteStatus AddPack() {
    return AddBuiltin(BuiltinOperator_PACK, tflite::ops::micro::Register_PACK(),
                      ParsePack);
  }

  TfLiteStatus AddPad() {
 800a310:	b580      	push	{r7, lr}
 800a312:	b08a      	sub	sp, #40	; 0x28
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_PAD, tflite::ops::micro::Register_PAD(),
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4618      	mov	r0, r3
 800a31e:	f003 f8ab 	bl	800d478 <_ZN6tflite3ops5micro12Register_PADEv>
                      ParsePad);
 800a322:	f107 0208 	add.w	r2, r7, #8
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <_ZN6tflite22MicroMutableOpResolverILj15EE6AddPadEv+0x2c>)
 800a328:	2122      	movs	r1, #34	; 0x22
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f838 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a330:	4603      	mov	r3, r0
  }
 800a332:	4618      	mov	r0, r3
 800a334:	3728      	adds	r7, #40	; 0x28
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	080031e5 	.word	0x080031e5

0800a340 <_ZN6tflite22MicroMutableOpResolverILj15EE8AddRelu6Ev>:
  TfLiteStatus AddRelu() {
    return AddBuiltin(BuiltinOperator_RELU, tflite::ops::micro::Register_RELU(),
                      ParseRelu);
  }

  TfLiteStatus AddRelu6() {
 800a340:	b580      	push	{r7, lr}
 800a342:	b08a      	sub	sp, #40	; 0x28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RELU6,
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
 800a348:	f107 0308 	add.w	r3, r7, #8
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fdd3 	bl	800aef8 <_ZN6tflite3ops5micro14Register_RELU6Ev>
 800a352:	f107 0208 	add.w	r2, r7, #8
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <_ZN6tflite22MicroMutableOpResolverILj15EE8AddRelu6Ev+0x2c>)
 800a358:	2115      	movs	r1, #21
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f820 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a360:	4603      	mov	r3, r0
  }
 800a362:	4618      	mov	r0, r3
 800a364:	3728      	adds	r7, #40	; 0x28
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	08003341 	.word	0x08003341

0800a370 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddReshapeEv>:

  TfLiteStatus AddReshape() {
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	; 0x28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_RESHAPE,
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 800a378:	f107 0308 	add.w	r3, r7, #8
 800a37c:	4618      	mov	r0, r3
 800a37e:	f004 f8ed 	bl	800e55c <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 800a382:	f107 0208 	add.w	r2, r7, #8
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <_ZN6tflite22MicroMutableOpResolverILj15EE10AddReshapeEv+0x2c>)
 800a388:	2116      	movs	r1, #22
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f808 	bl	800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 800a390:	4603      	mov	r3, r0
  }
 800a392:	4618      	mov	r0, r3
 800a394:	3728      	adds	r7, #40	; 0x28
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	0800335d 	.word	0x0800335d

0800a3a0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 800a3a0:	b5b0      	push	{r4, r5, r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	607a      	str	r2, [r7, #4]
 800a3aa:	603b      	str	r3, [r7, #0]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800a3b0:	7afb      	ldrb	r3, [r7, #11]
 800a3b2:	2b20      	cmp	r3, #32
 800a3b4:	d10d      	bne.n	800a3d2 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x32>
      if (error_reporter_ != nullptr) {
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800a3c6:	493a      	ldr	r1, [pc, #232]	; (800a4b0 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x110>)
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7f8 f9ab 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e069      	b.n	800a4a6 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (FindOp(op) != nullptr) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	3314      	adds	r3, #20
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	7afa      	ldrb	r2, [r7, #11]
 800a3dc:	4611      	mov	r1, r2
 800a3de:	68f8      	ldr	r0, [r7, #12]
 800a3e0:	4798      	blx	r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf14      	ite	ne
 800a3e8:	2301      	movne	r3, #1
 800a3ea:	2300      	moveq	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00e      	beq.n	800a410 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x70>
      if (error_reporter_ != nullptr) {
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d007      	beq.n	800a40c <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x6c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800a402:	7afa      	ldrb	r2, [r7, #11]
 800a404:	492b      	ldr	r1, [pc, #172]	; (800a4b4 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x114>)
 800a406:	4618      	mov	r0, r3
 800a408:	f7f8 f98c 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e04a      	b.n	800a4a6 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    if (registrations_len_ >= tOpCount) {
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a416:	2b0e      	cmp	r3, #14
 800a418:	d90e      	bls.n	800a438 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x98>
      if (error_reporter_) {
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800a420:	2b00      	cmp	r3, #0
 800a422:	d007      	beq.n	800a434 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x94>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 0238 	ldr.w	r0, [r3, #568]	; 0x238
 800a42a:	7afa      	ldrb	r2, [r7, #11]
 800a42c:	230f      	movs	r3, #15
 800a42e:	4922      	ldr	r1, [pc, #136]	; (800a4b8 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x118>)
 800a430:	f7f8 f978 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 800a434:	2301      	movs	r3, #1
 800a436:	e036      	b.n	800a4a6 <_ZN6tflite22MicroMutableOpResolverILj15EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x106>
    }

    registrations_[registrations_len_] = registration;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	015b      	lsls	r3, r3, #5
 800a442:	4413      	add	r3, r2
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	1d1c      	adds	r4, r3, #4
 800a448:	4615      	mov	r5, r2
 800a44a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a44c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a44e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a45c:	7afa      	ldrb	r2, [r7, #11]
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	015b      	lsls	r3, r3, #5
 800a462:	440b      	add	r3, r1
 800a464:	3318      	adds	r3, #24
 800a466:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a46e:	1c5a      	adds	r2, r3, #1
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4

    builtin_codes_[num_buitin_ops_] = op;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	7afa      	ldrb	r2, [r7, #11]
 800a482:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
    builtin_parsers_[num_buitin_ops_] = parser;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	327e      	adds	r2, #126	; 0x7e
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    num_buitin_ops_++;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234

    return kTfLiteOk;
 800a4a4:	2300      	movs	r3, #0
  }
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bdb0      	pop	{r4, r5, r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	08026ef0 	.word	0x08026ef0
 800a4b4:	08026f38 	.word	0x08026f38
 800a4b8:	08026f88 	.word	0x08026f88

0800a4bc <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	2b20      	cmp	r3, #32
 800a4cc:	d101      	bne.n	800a4d2 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x16>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e019      	b.n	800a506 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d210      	bcs.n	800a504 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x48>
      const TfLiteRegistration& registration = registrations_[i];
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	015b      	lsls	r3, r3, #5
 800a4e6:	687a      	ldr	r2, [r7, #4]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	3304      	adds	r3, #4
 800a4ec:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d101      	bne.n	800a4fc <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x40>
        return &registration;
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	e004      	b.n	800a506 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x4a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]
 800a502:	e7e8      	b.n	800a4d6 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 800a504:	2300      	movs	r3, #0
  }
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
	...

0800a514 <_ZN6tflite22MicroMutableOpResolverILj15EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	4a05      	ldr	r2, [pc, #20]	; (800a534 <_ZN6tflite22MicroMutableOpResolverILj15EED1Ev+0x20>)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4618      	mov	r0, r3
 800a526:	f7fb faad 	bl	8005a84 <_ZN6tflite15MicroOpResolverD1Ev>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	0802881c 	.word	0x0802881c

0800a538 <_ZN6tflite22MicroMutableOpResolverILj15EED0Ev>:
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff ffe7 	bl	800a514 <_ZN6tflite22MicroMutableOpResolverILj15EED1Ev>
 800a546:	f44f 710f 	mov.w	r1, #572	; 0x23c
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f017 f9d8 	bl	8021900 <_ZdlPvj>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
 800a562:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	429a      	cmp	r2, r3
 800a572:	d218      	bcs.n	800a5a6 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc+0x4c>
      const TfLiteRegistration& registration = registrations_[i];
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	015b      	lsls	r3, r3, #5
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	4413      	add	r3, r2
 800a57c:	3304      	adds	r3, #4
 800a57e:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	2b20      	cmp	r3, #32
 800a586:	d10a      	bne.n	800a59e <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc+0x44>
          (strcmp(registration.custom_name, op) == 0)) {
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	699b      	ldr	r3, [r3, #24]
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7f5 fe86 	bl	80002a0 <strcmp>
 800a594:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc+0x44>
        return &registration;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	e004      	b.n	800a5a8 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	e7e0      	b.n	800a568 <_ZNK6tflite22MicroMutableOpResolverILj15EE6FindOpEPKc+0xe>
    return nullptr;
 800a5a6:	2300      	movs	r3, #0
  }
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800a5c2:	2b0f      	cmp	r3, #15
 800a5c4:	d901      	bls.n	800a5ca <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE+0x1a>
 800a5c6:	f017 fa83 	bl	8021ad0 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d212      	bcs.n	800a600 <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE+0x50>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	78fa      	ldrb	r2, [r7, #3]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d105      	bne.n	800a5f8 <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE+0x48>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	327e      	adds	r2, #126	; 0x7e
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	e004      	b.n	800a602 <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE+0x52>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	e7e6      	b.n	800a5ce <_ZNK6tflite22MicroMutableOpResolverILj15EE15GetOpDataParserENS_15BuiltinOperatorE+0x1e>
    return nullptr;
 800a600:	2300      	movs	r3, #0
  }
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 800a60a:	b480      	push	{r7}
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eeb0 0a67 	vmov.f32	s0, s15
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
	...

0800a624 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800a624:	b5b0      	push	{r4, r5, r7, lr}
 800a626:	b08c      	sub	sp, #48	; 0x30
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d107      	bne.n	800a646 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800a636:	f7ff fb8f 	bl	8009d58 <_ZNSt14numeric_limitsIlE3minEv>
 800a63a:	4602      	mov	r2, r0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4293      	cmp	r3, r2
 800a640:	d101      	bne.n	800a646 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800a642:	2301      	movs	r3, #1
 800a644:	e000      	b.n	800a648 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800a646:	2300      	movs	r3, #0
 800a648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	461a      	mov	r2, r3
 800a650:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800a654:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	461a      	mov	r2, r3
 800a65c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800a660:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	fb02 f203 	mul.w	r2, r2, r3
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	6a39      	ldr	r1, [r7, #32]
 800a670:	fb01 f303 	mul.w	r3, r1, r3
 800a674:	18d1      	adds	r1, r2, r3
 800a676:	6a3a      	ldr	r2, [r7, #32]
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	fba2 2303 	umull	r2, r3, r2, r3
 800a67e:	4419      	add	r1, r3
 800a680:	460b      	mov	r3, r1
 800a682:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800a686:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800a68a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a68e:	2a00      	cmp	r2, #0
 800a690:	f173 0300 	sbcs.w	r3, r3, #0
 800a694:	db02      	blt.n	800a69c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800a696:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a69a:	e000      	b.n	800a69e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800a69c:	4b18      	ldr	r3, [pc, #96]	; (800a700 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800a69e:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800a6a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a6ac:	1884      	adds	r4, r0, r2
 800a6ae:	eb41 0503 	adc.w	r5, r1, r3
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	462b      	mov	r3, r5
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	f173 0100 	sbcs.w	r1, r3, #0
 800a6bc:	da06      	bge.n	800a6cc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800a6be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800a6c2:	f04f 0100 	mov.w	r1, #0
 800a6c6:	1812      	adds	r2, r2, r0
 800a6c8:	eb41 0303 	adc.w	r3, r1, r3
 800a6cc:	f04f 0000 	mov.w	r0, #0
 800a6d0:	f04f 0100 	mov.w	r1, #0
 800a6d4:	0fd0      	lsrs	r0, r2, #31
 800a6d6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800a6da:	17d9      	asrs	r1, r3, #31
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800a6e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800a6ec:	f7fa fb1f 	bl	8004d2e <_ZNSt14numeric_limitsIlE3maxEv>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	e000      	b.n	800a6f6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3730      	adds	r7, #48	; 0x30
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a6fe:	bf00      	nop
 800a700:	c0000001 	.word	0xc0000001

0800a704 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	da01      	bge.n	800a718 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800a714:	f017 f9dc 	bl	8021ad0 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	429a      	cmp	r2, r3
 800a720:	db01      	blt.n	800a726 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800a722:	f017 f9d5 	bl	8021ad0 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	dd06      	ble.n	800a73c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	4413      	add	r3, r2
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	e004      	b.n	800a746 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
  }
 800a746:	4618      	mov	r0, r3
 800a748:	3708      	adds	r7, #8
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	dd02      	ble.n	800a764 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	e001      	b.n	800a768 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	3304      	adds	r3, #4
  }
 800a768:	4618      	mov	r0, r3
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800a77c:	2301      	movs	r3, #1
 800a77e:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff ffe4 	bl	800a74e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800a786:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	429a      	cmp	r2, r3
 800a794:	da0c      	bge.n	800a7b0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	4413      	add	r3, r2
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	fb02 f303 	mul.w	r3, r2, r3
 800a7a6:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	e7ed      	b.n	800a78c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800a7b0:	697b      	ldr	r3, [r7, #20]
  }
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 800a7ba:	b590      	push	{r4, r7, lr}
 800a7bc:	b085      	sub	sp, #20
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f7fb fa31 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	6838      	ldr	r0, [r7, #0]
 800a7ce:	f7fb fa2d 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	429c      	cmp	r4, r3
 800a7d6:	d001      	beq.n	800a7dc <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 800a7d8:	f017 f97a 	bl	8021ad0 <abort>
  const int dims_count = shape.DimensionsCount();
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f7fb fa25 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a7e2:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	da11      	bge.n	800a814 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800a7f0:	68f9      	ldr	r1, [r7, #12]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f7ff ff86 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	6838      	ldr	r0, [r7, #0]
 800a7fe:	f7ff ff81 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800a802:	4603      	mov	r3, r0
 800a804:	429c      	cmp	r4, r3
 800a806:	d001      	beq.n	800a80c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 800a808:	f017 f962 	bl	8021ad0 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3301      	adds	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e7e9      	b.n	800a7e8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff ffad 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800a81a:	4603      	mov	r3, r0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	bd90      	pop	{r4, r7, pc}

0800a824 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a836:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	dc02      	bgt.n	800a844 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	425b      	negs	r3, r3
 800a842:	e000      	b.n	800a846 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800a844:	2300      	movs	r3, #0
 800a846:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	fa02 f303 	lsl.w	r3, r2, r3
 800a850:	68b9      	ldr	r1, [r7, #8]
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fee6 	bl	800a624 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800a858:	4603      	mov	r3, r0
 800a85a:	6939      	ldr	r1, [r7, #16]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f000 fb61 	bl	800af24 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800a862:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800a87e:	f017 f927 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node != nullptr);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800a888:	f017 f922 	bl	8021ad0 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	6819      	ldr	r1, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	440b      	add	r3, r1
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4619      	mov	r1, r3
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	4790      	blx	r2
 800a8a2:	4603      	mov	r3, r0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	68b9      	ldr	r1, [r7, #8]
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f7ff ffd5 	bl	800a86c <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a8c2:	4603      	mov	r3, r0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 800a8de:	f017 f8f7 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node != nullptr);
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 800a8e8:	f017 f8f2 	bl	8021ad0 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	6859      	ldr	r1, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	440b      	add	r3, r1
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	4619      	mov	r1, r3
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	4790      	blx	r2
 800a902:	4603      	mov	r3, r0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3710      	adds	r7, #16
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08a      	sub	sp, #40	; 0x28
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f7ff ff4c 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a922:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 800a924:	2300      	movs	r3, #0
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
 800a928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92a:	6a3b      	ldr	r3, [r7, #32]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	da1d      	bge.n	800a96c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 800a930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	4413      	add	r3, r2
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 800a93c:	f04f 0300 	mov.w	r3, #0
 800a940:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 800a942:	edd7 7a07 	vldr	s15, [r7, #28]
 800a946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a94e:	d501      	bpl.n	800a954 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	e000      	b.n	800a956 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	4413      	add	r3, r2
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	; 0x24
 800a96a:	e7dd      	b.n	800a928 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 800a96c:	bf00      	nop
 800a96e:	3728      	adds	r7, #40	; 0x28
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 800a974:	b580      	push	{r7, lr}
 800a976:	b08a      	sub	sp, #40	; 0x28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
 800a980:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a982:	6879      	ldr	r1, [r7, #4]
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f7ff ff18 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a98a:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 800a98c:	2300      	movs	r3, #0
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
 800a990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	429a      	cmp	r2, r3
 800a996:	da2a      	bge.n	800a9ee <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 800a998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	4413      	add	r3, r2
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 800a9a4:	4b14      	ldr	r3, [pc, #80]	; (800a9f8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 800a9a6:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 800a9a8:	f04f 0300 	mov.w	r3, #0
 800a9ac:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 800a9ae:	edd7 7a07 	vldr	s15, [r7, #28]
 800a9b2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800a9b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9be:	dd01      	ble.n	800a9c4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	e009      	b.n	800a9d8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 800a9c4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a9c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d0:	d501      	bpl.n	800a9d6 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	e000      	b.n	800a9d8 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	693a      	ldr	r2, [r7, #16]
 800a9e4:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ec:	e7d0      	b.n	800a990 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3728      	adds	r7, #40	; 0x28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40c00000 	.word	0x40c00000

0800a9fc <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d101      	bne.n	800aa14 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 800aa10:	f017 f85e 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa18:	211c      	movs	r1, #28
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	4798      	blx	r3
 800aa1e:	4603      	mov	r3, r0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af02      	add	r7, sp, #8
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800aa3a:	f017 f849 	bl	8021ad0 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800aa44:	2200      	movs	r2, #0
 800aa46:	6839      	ldr	r1, [r7, #0]
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7fa fb98 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800aa4e:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d10a      	bne.n	800aa6c <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x44>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695c      	ldr	r4, [r3, #20]
 800aa5a:	4b1a      	ldr	r3, [pc, #104]	; (800aac4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x9c>)
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	238e      	movs	r3, #142	; 0x8e
 800aa60:	4a19      	ldr	r2, [pc, #100]	; (800aac8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 800aa62:	491a      	ldr	r1, [pc, #104]	; (800aacc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	47a0      	blx	r4
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e027      	b.n	800aabc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f7fa fb94 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800aa76:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d10a      	bne.n	800aa94 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	695c      	ldr	r4, [r3, #20]
 800aa82:	4b13      	ldr	r3, [pc, #76]	; (800aad0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	2390      	movs	r3, #144	; 0x90
 800aa88:	4a0f      	ldr	r2, [pc, #60]	; (800aac8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 800aa8a:	4910      	ldr	r1, [pc, #64]	; (800aacc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	47a0      	blx	r4
 800aa90:	2301      	movs	r3, #1
 800aa92:	e013      	b.n	800aabc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x94>

  if (input->type == kTfLiteInt8) {
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	2b09      	cmp	r3, #9
 800aa9a:	d105      	bne.n	800aaa8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x80>
    CalculateReluOpData<int8_t>(input, output, data);
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	6938      	ldr	r0, [r7, #16]
 800aaa2:	f000 fab3 	bl	800b00c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 800aaa6:	e008      	b.n	800aaba <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
  } else if (input->type == kTfLiteUInt8) {
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	781b      	ldrb	r3, [r3, #0]
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d104      	bne.n	800aaba <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x92>
    CalculateReluOpData<uint8_t>(input, output, data);
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	68f9      	ldr	r1, [r7, #12]
 800aab4:	6938      	ldr	r0, [r7, #16]
 800aab6:	f000 fb4b 	bl	800b150 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	371c      	adds	r7, #28
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd90      	pop	{r4, r7, pc}
 800aac4:	08027020 	.word	0x08027020
 800aac8:	08026fcc 	.word	0x08026fcc
 800aacc:	08027008 	.word	0x08027008
 800aad0:	08027034 	.word	0x08027034

0800aad4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 800aad4:	b590      	push	{r4, r7, lr}
 800aad6:	b0ad      	sub	sp, #180	; 0xb4
 800aad8:	af02      	add	r7, sp, #8
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 800aae6:	f016 fff3 	bl	8021ad0 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	691b      	ldr	r3, [r3, #16]
 800aaee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f7ff fed8 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800aafc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800ab00:	2200      	movs	r2, #0
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fee1 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800ab0a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800ab0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab12:	7a1b      	ldrb	r3, [r3, #8]
 800ab14:	2b09      	cmp	r3, #9
 800ab16:	d032      	beq.n	800ab7e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800ab18:	2b09      	cmp	r3, #9
 800ab1a:	f300 808c 	bgt.w	800ac36 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d002      	beq.n	800ab28 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x54>
 800ab22:	2b03      	cmp	r3, #3
 800ab24:	d059      	beq.n	800abda <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x106>
 800ab26:	e086      	b.n	800ac36 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x162>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 800ab28:	f107 030c 	add.w	r3, r7, #12
 800ab2c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ab30:	4618      	mov	r0, r3
 800ab32:	f001 ff15 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ab36:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800ab3a:	f000 fbab 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ab3e:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 800ab40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab44:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 ff09 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 800ab4e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ab52:	f000 fbae 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab5c:	f107 000c 	add.w	r0, r7, #12
 800ab60:	4621      	mov	r1, r4
 800ab62:	f7ff fed3 	bl	800a90c <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 800ab66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fb f848 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 800ab70:	f107 030c 	add.w	r3, r7, #12
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fb f843 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	e069      	b.n	800ac52 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800ab7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ab82:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ab86:	4618      	mov	r0, r3
 800ab88:	f001 feea 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 800ab8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ab90:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 fee3 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800ab9a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800ab9e:	f000 fb99 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800aba2:	4604      	mov	r4, r0
 800aba4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800aba8:	f000 fba3 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800abac:	4603      	mov	r3, r0
 800abae:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800abb2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	4623      	mov	r3, r4
 800abba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800abbe:	f000 fba9 	bl	800b314 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 800abc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fb f81a 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 800abcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7fb f815 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800abd6:	2300      	movs	r3, #0
 800abd8:	e03b      	b.n	800ac52 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800abda:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800abde:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 febc 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 800abe8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800abec:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800abf0:	4618      	mov	r0, r3
 800abf2:	f001 feb5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800abf6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800abfa:	f000 fbd7 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800abfe:	4604      	mov	r4, r0
 800ac00:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ac04:	f000 fbe1 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800ac0e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4623      	mov	r3, r4
 800ac16:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800ac1a:	f000 fbe7 	bl	800b3ec <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 800ac1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fa ffec 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800ac28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fa ffe7 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800ac32:	2300      	movs	r3, #0
 800ac34:	e00d      	b.n	800ac52 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	695c      	ldr	r4, [r3, #20]
 800ac3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac3e:	7a1b      	ldrb	r3, [r3, #8]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7f7 fcf3 	bl	800262c <TfLiteTypeGetName>
 800ac46:	4603      	mov	r3, r0
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4904      	ldr	r1, [pc, #16]	; (800ac5c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800ac50:	2301      	movs	r3, #1
    }
  }
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	37ac      	adds	r7, #172	; 0xac
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd90      	pop	{r4, r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	08027048 	.word	0x08027048

0800ac60 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d101      	bne.n	800ac78 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 800ac74:	f016 ff2c 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	2104      	movs	r1, #4
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	4798      	blx	r3
 800ac82:	4603      	mov	r3, r0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ac8c:	b590      	push	{r4, r7, lr}
 800ac8e:	b087      	sub	sp, #28
 800ac90:	af02      	add	r7, sp, #8
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d101      	bne.n	800aca2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ac9e:	f016 ff17 	bl	8021ad0 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800aca8:	2200      	movs	r2, #0
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f7fa fa66 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800acb2:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d10a      	bne.n	800acd0 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x44>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	695c      	ldr	r4, [r3, #20]
 800acbe:	4b20      	ldr	r3, [pc, #128]	; (800ad40 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	23cd      	movs	r3, #205	; 0xcd
 800acc4:	4a1f      	ldr	r2, [pc, #124]	; (800ad44 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 800acc6:	4920      	ldr	r1, [pc, #128]	; (800ad48 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	47a0      	blx	r4
 800accc:	2301      	movs	r3, #1
 800acce:	e033      	b.n	800ad38 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>

  if (input->type == kTfLiteInt8) {
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b09      	cmp	r3, #9
 800acd6:	d115      	bne.n	800ad04 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800ace2:	4618      	mov	r0, r3
 800ace4:	eef0 0a67 	vmov.f32	s1, s15
 800ace8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800acec:	f000 fbc9 	bl	800b482 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 800acf0:	4603      	mov	r3, r0
 800acf2:	461a      	mov	r2, r3
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	b25a      	sxtb	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	705a      	strb	r2, [r3, #1]
 800ad02:	e018      	b.n	800ad36 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
  } else if (input->type == kTfLiteUInt8) {
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d114      	bne.n	800ad36 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800ad16:	4618      	mov	r0, r3
 800ad18:	eef0 0a67 	vmov.f32	s1, s15
 800ad1c:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800ad20:	f000 fbfe 	bl	800b520 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	b2da      	uxtb	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 800ad36:	2300      	movs	r3, #0
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3714      	adds	r7, #20
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd90      	pop	{r4, r7, pc}
 800ad40:	08027020 	.word	0x08027020
 800ad44:	08026fcc 	.word	0x08026fcc
 800ad48:	08027008 	.word	0x08027008

0800ad4c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 800ad4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad4e:	b0ad      	sub	sp, #180	; 0xb4
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800ad5e:	f016 feb7 	bl	8021ad0 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fd9c 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800ad74:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800ad78:	2200      	movs	r2, #0
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff fda5 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800ad82:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800ad86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad8a:	7a1b      	ldrb	r3, [r3, #8]
 800ad8c:	2b09      	cmp	r3, #9
 800ad8e:	d032      	beq.n	800adf6 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xaa>
 800ad90:	2b09      	cmp	r3, #9
 800ad92:	f300 809c 	bgt.w	800aece <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d002      	beq.n	800ada0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x54>
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d062      	beq.n	800ae64 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x118>
 800ad9e:	e096      	b.n	800aece <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x182>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 800ada0:	f107 030c 	add.w	r3, r7, #12
 800ada4:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f001 fdd9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800adae:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800adb2:	f000 fa6f 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800adb6:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 800adb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adbc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fdcd 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800adc6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800adca:	f000 fa72 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800adce:	4603      	mov	r3, r0
 800add0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800add4:	f107 000c 	add.w	r0, r7, #12
 800add8:	4621      	mov	r1, r4
 800adda:	f7ff fdcb 	bl	800a974 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 800adde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fa ff0c 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800ade8:	f107 030c 	add.w	r3, r7, #12
 800adec:	4618      	mov	r0, r3
 800adee:	f7fa ff07 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800adf2:	2300      	movs	r3, #0
 800adf4:	e079      	b.n	800aeea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800adf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800adfa:	f993 4001 	ldrsb.w	r4, [r3, #1]
 800adfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae02:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 800ae06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ae0a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 fda6 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800ae14:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800ae18:	f000 fa5c 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ae1c:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 800ae1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae22:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ae26:	4618      	mov	r0, r3
 800ae28:	f001 fd9a 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800ae2c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ae30:	f000 fa5f 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae40:	9300      	str	r3, [sp, #0]
 800ae42:	4633      	mov	r3, r6
 800ae44:	4629      	mov	r1, r5
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 fbb9 	bl	800b5be <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 800ae4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fa fed5 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 800ae56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fa fed0 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800ae60:	2300      	movs	r3, #0
 800ae62:	e042      	b.n	800aeea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800ae64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae68:	78dc      	ldrb	r4, [r3, #3]
 800ae6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae6e:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 800ae70:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae74:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f001 fd71 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800ae7e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800ae82:	f000 fa93 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800ae86:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 800ae88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ae8c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ae90:	4618      	mov	r0, r3
 800ae92:	f001 fd65 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800ae96:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800ae9a:	f000 fa96 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	4633      	mov	r3, r6
 800aeae:	4629      	mov	r1, r5
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fbc3 	bl	800b63c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 800aeb6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fa fea0 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 800aec0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fa fe9b 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e00d      	b.n	800aeea <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	695c      	ldr	r4, [r3, #20]
 800aed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aed6:	7a1b      	ldrb	r3, [r3, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f7 fba7 	bl	800262c <TfLiteTypeGetName>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	4904      	ldr	r1, [pc, #16]	; (800aef4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800aee8:	2301      	movs	r3, #1
    }
  }
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	37ac      	adds	r7, #172	; 0xac
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef2:	bf00      	nop
 800aef4:	08027048 	.word	0x08027048

0800aef8 <_ZN6tflite3ops5micro14Register_RELU6Ev>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_RELU6() {
 800aef8:	b4b0      	push	{r4, r5, r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
          /*prepare=*/activations::Relu6Prepare,
          /*invoke=*/activations::Relu6Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a07      	ldr	r2, [pc, #28]	; (800af20 <_ZN6tflite3ops5micro14Register_RELU6Ev+0x28>)
 800af04:	461c      	mov	r4, r3
 800af06:	4615      	mov	r5, r2
 800af08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800af10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	bcb0      	pop	{r4, r5, r7}
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	08027094 	.word	0x08027094

0800af24 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800af24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af26:	b089      	sub	sp, #36	; 0x24
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	2900      	cmp	r1, #0
 800af32:	da06      	bge.n	800af42 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800af34:	4b31      	ldr	r3, [pc, #196]	; (800affc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800af36:	4a32      	ldr	r2, [pc, #200]	; (800b000 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800af38:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800af3c:	4831      	ldr	r0, [pc, #196]	; (800b004 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800af3e:	f016 fdcf 	bl	8021ae0 <__assert_func>
  assert(exponent <= 31);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	291f      	cmp	r1, #31
 800af46:	dd06      	ble.n	800af56 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800af48:	4b2f      	ldr	r3, [pc, #188]	; (800b008 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 800af4a:	4a2d      	ldr	r2, [pc, #180]	; (800b000 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800af4c:	f240 1167 	movw	r1, #359	; 0x167
 800af50:	482c      	ldr	r0, [pc, #176]	; (800b004 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800af52:	f016 fdc5 	bl	8021ae0 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800af56:	f04f 0001 	mov.w	r0, #1
 800af5a:	f04f 0100 	mov.w	r1, #0
 800af5e:	683c      	ldr	r4, [r7, #0]
 800af60:	f1a4 0620 	sub.w	r6, r4, #32
 800af64:	f1c4 0520 	rsb	r5, r4, #32
 800af68:	fa01 f304 	lsl.w	r3, r1, r4
 800af6c:	fa00 f606 	lsl.w	r6, r0, r6
 800af70:	4333      	orrs	r3, r6
 800af72:	fa20 f505 	lsr.w	r5, r0, r5
 800af76:	432b      	orrs	r3, r5
 800af78:	fa00 f204 	lsl.w	r2, r0, r4
 800af7c:	4613      	mov	r3, r2
 800af7e:	3b01      	subs	r3, #1
 800af80:	4618      	mov	r0, r3
 800af82:	f000 fb93 	bl	800b6ac <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800af86:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800af88:	2000      	movs	r0, #0
 800af8a:	f000 fb8f 	bl	800b6ac <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800af8e:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800af90:	2001      	movs	r0, #1
 800af92:	f000 fb8b 	bl	800b6ac <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800af96:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800af98:	69f9      	ldr	r1, [r7, #28]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fb91 	bl	800b6c2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800afa0:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800afa2:	2101      	movs	r1, #1
 800afa4:	69f8      	ldr	r0, [r7, #28]
 800afa6:	f000 fb9a 	bl	800b6de <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800afaa:	4604      	mov	r4, r0
 800afac:	69b9      	ldr	r1, [r7, #24]
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 fba4 	bl	800b6fc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800afb4:	4603      	mov	r3, r0
 800afb6:	6979      	ldr	r1, [r7, #20]
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fb82 	bl	800b6c2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800afbe:	4603      	mov	r3, r0
 800afc0:	4619      	mov	r1, r3
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fbae 	bl	800b724 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800afc8:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fb86 	bl	800b6de <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800afd2:	4604      	mov	r4, r0
 800afd4:	68f9      	ldr	r1, [r7, #12]
 800afd6:	6938      	ldr	r0, [r7, #16]
 800afd8:	f000 fbb2 	bl	800b740 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800afdc:	4603      	mov	r3, r0
 800afde:	6979      	ldr	r1, [r7, #20]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f000 fb6e 	bl	800b6c2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800afe6:	4603      	mov	r3, r0
 800afe8:	4619      	mov	r1, r3
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fb9a 	bl	800b724 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800aff0:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3724      	adds	r7, #36	; 0x24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800affa:	bf00      	nop
 800affc:	080270b4 	.word	0x080270b4
 800b000:	080270c4 	.word	0x080270c4
 800b004:	08027120 	.word	0x08027120
 800b008:	0802719c 	.word	0x0802719c

0800b00c <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b099      	sub	sp, #100	; 0x64
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800b018:	f04f 0300 	mov.w	r3, #0
 800b01c:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800b01e:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800b022:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	ed93 7a03 	vldr	s14, [r3, #12]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b030:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800b034:	ee16 0a90 	vmov	r0, s13
 800b038:	f7f5 faa0 	bl	800057c <__aeabi_f2d>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800b044:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b048:	68f9      	ldr	r1, [r7, #12]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fa fe52 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800b050:	f107 0310 	add.w	r3, r7, #16
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	4618      	mov	r0, r3
 800b058:	f7fa fe4c 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f103 0214 	add.w	r2, r3, #20
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	3318      	adds	r3, #24
 800b066:	4619      	mov	r1, r3
 800b068:	4610      	mov	r0, r2
 800b06a:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800b06e:	f7f9 fe67 	bl	8004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800b072:	f7f9 ff7b 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 800b076:	4603      	mov	r3, r0
 800b078:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	edd3 7a03 	vldr	s15, [r3, #12]
 800b084:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b088:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b08c:	eeb0 0a66 	vmov.f32	s0, s13
 800b090:	f016 fcf8 	bl	8021a84 <roundf>
 800b094:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800b098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b09c:	ee17 3a90 	vmov	r3, s15
 800b0a0:	4423      	add	r3, r4
 800b0a2:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800b0a4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b0a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7fa fc5d 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b0b4:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800b0bc:	f7ff faa5 	bl	800a60a <_ZNSt14numeric_limitsIfE8infinityEv>
 800b0c0:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800b0c4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800b0c8:	eef4 7a47 	vcmp.f32	s15, s14
 800b0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0d0:	d103      	bne.n	800b0da <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800b0d2:	f7f9 ff54 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	e022      	b.n	800b120 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800b0da:	f7f9 ff50 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	edd3 7a03 	vldr	s15, [r3, #12]
 800b0ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b0f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b0f4:	eeb0 0a66 	vmov.f32	s0, s13
 800b0f8:	f016 fcc4 	bl	8021a84 <roundf>
 800b0fc:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800b100:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b104:	ee17 3a90 	vmov	r3, s15
 800b108:	4423      	add	r3, r4
 800b10a:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800b10c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b110:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b114:	4611      	mov	r1, r2
 800b116:	4618      	mov	r0, r3
 800b118:	f7fa fc15 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b11c:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	691a      	ldr	r2, [r3, #16]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800b134:	f107 0310 	add.w	r3, r7, #16
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fa fd61 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800b13e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b142:	4618      	mov	r0, r3
 800b144:	f7fa fd5c 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800b148:	bf00      	nop
 800b14a:	3764      	adds	r7, #100	; 0x64
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd90      	pop	{r4, r7, pc}

0800b150 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800b150:	b590      	push	{r4, r7, lr}
 800b152:	b099      	sub	sp, #100	; 0x64
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800b15c:	f04f 0300 	mov.w	r3, #0
 800b160:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800b162:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800b166:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	ed93 7a03 	vldr	s14, [r3, #12]
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	edd3 7a03 	vldr	s15, [r3, #12]
 800b174:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800b178:	ee16 0a90 	vmov	r0, s13
 800b17c:	f7f5 f9fe 	bl	800057c <__aeabi_f2d>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800b188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b18c:	68f9      	ldr	r1, [r7, #12]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fa fdb0 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800b194:	f107 0310 	add.w	r3, r7, #16
 800b198:	68b9      	ldr	r1, [r7, #8]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fa fdaa 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f103 0214 	add.w	r2, r3, #20
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	3318      	adds	r3, #24
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800b1b2:	f7f9 fdc5 	bl	8004d40 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800b1b6:	f7f9 feea 	bl	8004f8e <_ZNSt14numeric_limitsIhE3minEv>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	edd3 7a03 	vldr	s15, [r3, #12]
 800b1c8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800b1cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b1d0:	eeb0 0a66 	vmov.f32	s0, s13
 800b1d4:	f016 fc56 	bl	8021a84 <roundf>
 800b1d8:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800b1dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1e0:	ee17 3a90 	vmov	r3, s15
 800b1e4:	4423      	add	r3, r4
 800b1e6:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800b1e8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800b1ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1f0:	4611      	mov	r1, r2
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fa fbbb 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b1f8:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800b200:	f7ff fa03 	bl	800a60a <_ZNSt14numeric_limitsIfE8infinityEv>
 800b204:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800b208:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800b20c:	eef4 7a47 	vcmp.f32	s15, s14
 800b210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b214:	d103      	bne.n	800b21e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800b216:	f7f9 fec2 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	e022      	b.n	800b264 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800b21e:	f7f9 febe 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800b222:	4603      	mov	r3, r0
 800b224:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	edd3 7a03 	vldr	s15, [r3, #12]
 800b230:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b234:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b238:	eeb0 0a66 	vmov.f32	s0, s13
 800b23c:	f016 fc22 	bl	8021a84 <roundf>
 800b240:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800b244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b248:	ee17 3a90 	vmov	r3, s15
 800b24c:	4423      	add	r3, r4
 800b24e:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800b250:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800b254:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b258:	4611      	mov	r1, r2
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fa fb73 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b260:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	687a      	ldr	r2, [r7, #4]
 800b266:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	691a      	ldr	r2, [r3, #16]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	691a      	ldr	r2, [r3, #16]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800b278:	f107 0310 	add.w	r3, r7, #16
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fa fcbf 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800b282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b286:	4618      	mov	r0, r3
 800b288:	f7fa fcba 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800b28c:	bf00      	nop
 800b28e:	3764      	adds	r7, #100	; 0x64
 800b290:	46bd      	mov	sp, r7
 800b292:	bd90      	pop	{r4, r7, pc}

0800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800b2a2:	f016 fc15 	bl	8021ad0 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	e000      	b.n	800b2c8 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800b2e2:	f016 fbf5 	bl	8021ad0 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3708      	adds	r7, #8
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	e000      	b.n	800b308 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	370c      	adds	r7, #12
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800b314:	b590      	push	{r4, r7, lr}
 800b316:	b089      	sub	sp, #36	; 0x24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]
 800b320:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800b322:	6879      	ldr	r1, [r7, #4]
 800b324:	68b8      	ldr	r0, [r7, #8]
 800b326:	f7ff fa48 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800b32a:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800b32c:	2300      	movs	r3, #0
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	429a      	cmp	r2, r3
 800b336:	da35      	bge.n	800b3a4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	4413      	add	r3, r2
 800b33e:	f993 3000 	ldrsb.w	r3, [r3]
 800b342:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	697a      	ldr	r2, [r7, #20]
 800b34e:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800b358:	461a      	mov	r2, r3
 800b35a:	f7ff fa63 	bl	800a824 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800b35e:	4603      	mov	r3, r0
        data.params.output_offset +
 800b360:	4423      	add	r3, r4
    int32_t clamped =
 800b362:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3304      	adds	r3, #4
 800b368:	f107 0210 	add.w	r2, r7, #16
 800b36c:	4611      	mov	r1, r2
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fa fafd 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b374:	4603      	mov	r3, r0
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	3308      	adds	r3, #8
 800b37e:	f107 0210 	add.w	r2, r7, #16
 800b382:	4611      	mov	r1, r2
 800b384:	4618      	mov	r0, r3
 800b386:	f7fa fade 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b38a:	4603      	mov	r3, r0
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800b390:	6939      	ldr	r1, [r7, #16]
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b396:	4413      	add	r3, r2
 800b398:	b24a      	sxtb	r2, r1
 800b39a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	61fb      	str	r3, [r7, #28]
 800b3a2:	e7c5      	b.n	800b330 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800b3a4:	bf00      	nop
 800b3a6:	3724      	adds	r7, #36	; 0x24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd90      	pop	{r4, r7, pc}

0800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d101      	bne.n	800b3be <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 800b3ba:	f016 fb89 	bl	8021ad0 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	e000      	b.n	800b3e0 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 800b3de:	2300      	movs	r3, #0
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800b3ec:	b590      	push	{r4, r7, lr}
 800b3ee:	b089      	sub	sp, #36	; 0x24
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
 800b3f8:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800b3fa:	6879      	ldr	r1, [r7, #4]
 800b3fc:	68b8      	ldr	r0, [r7, #8]
 800b3fe:	f7ff f9dc 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800b402:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800b404:	2300      	movs	r3, #0
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	da34      	bge.n	800b47a <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	4413      	add	r3, r2
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800b42e:	461a      	mov	r2, r3
 800b430:	f7ff f9f8 	bl	800a824 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800b434:	4603      	mov	r3, r0
        data.params.output_offset +
 800b436:	4423      	add	r3, r4
    int32_t clamped =
 800b438:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3304      	adds	r3, #4
 800b43e:	f107 0210 	add.w	r2, r7, #16
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f7fa fa92 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b44a:	4603      	mov	r3, r0
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3308      	adds	r3, #8
 800b454:	f107 0210 	add.w	r2, r7, #16
 800b458:	4611      	mov	r1, r2
 800b45a:	4618      	mov	r0, r3
 800b45c:	f7fa fa73 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b460:	4603      	mov	r3, r0
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800b466:	6939      	ldr	r1, [r7, #16]
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b46c:	4413      	add	r3, r2
 800b46e:	b2ca      	uxtb	r2, r1
 800b470:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	3301      	adds	r3, #1
 800b476:	61fb      	str	r3, [r7, #28]
 800b478:	e7c6      	b.n	800b408 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800b47a:	bf00      	nop
 800b47c:	3724      	adds	r7, #36	; 0x24
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd90      	pop	{r4, r7, pc}

0800b482 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800b482:	b5b0      	push	{r4, r5, r7, lr}
 800b484:	b088      	sub	sp, #32
 800b486:	af00      	add	r7, sp, #0
 800b488:	ed87 0a03 	vstr	s0, [r7, #12]
 800b48c:	edc7 0a02 	vstr	s1, [r7, #8]
 800b490:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800b492:	ed97 7a03 	vldr	s14, [r7, #12]
 800b496:	edd7 7a02 	vldr	s15, [r7, #8]
 800b49a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b49e:	ee16 0a90 	vmov	r0, s13
 800b4a2:	f7f5 f86b 	bl	800057c <__aeabi_f2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	ec43 2b10 	vmov	d0, r2, r3
 800b4ae:	f016 faa3 	bl	80219f8 <round>
 800b4b2:	ec55 4b10 	vmov	r4, r5, d0
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f7f5 f84e 	bl	8000558 <__aeabi_i2d>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f4 fefc 	bl	80002c0 <__adddf3>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f7f5 fb46 	bl	8000b60 <__aeabi_d2iz>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800b4d8:	f7f9 fd48 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	61bb      	str	r3, [r7, #24]
 800b4e0:	f107 0214 	add.w	r2, r7, #20
 800b4e4:	f107 0318 	add.w	r3, r7, #24
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fa fa3f 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b4f0:	4603      	mov	r3, r0
  result =
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800b4f6:	f7f9 fd42 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	61fb      	str	r3, [r7, #28]
 800b4fe:	f107 0214 	add.w	r2, r7, #20
 800b502:	f107 031c 	add.w	r3, r7, #28
 800b506:	4611      	mov	r1, r2
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fa fa1c 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b50e:	4603      	mov	r3, r0
  result =
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	617b      	str	r3, [r7, #20]
  return result;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	b25b      	sxtb	r3, r3
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3720      	adds	r7, #32
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bdb0      	pop	{r4, r5, r7, pc}

0800b520 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800b520:	b5b0      	push	{r4, r5, r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af00      	add	r7, sp, #0
 800b526:	ed87 0a03 	vstr	s0, [r7, #12]
 800b52a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b52e:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800b530:	ed97 7a03 	vldr	s14, [r7, #12]
 800b534:	edd7 7a02 	vldr	s15, [r7, #8]
 800b538:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b53c:	ee16 0a90 	vmov	r0, s13
 800b540:	f7f5 f81c 	bl	800057c <__aeabi_f2d>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	ec43 2b10 	vmov	d0, r2, r3
 800b54c:	f016 fa54 	bl	80219f8 <round>
 800b550:	ec55 4b10 	vmov	r4, r5, d0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7f4 ffff 	bl	8000558 <__aeabi_i2d>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4620      	mov	r0, r4
 800b560:	4629      	mov	r1, r5
 800b562:	f7f4 fead 	bl	80002c0 <__adddf3>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	4610      	mov	r0, r2
 800b56c:	4619      	mov	r1, r3
 800b56e:	f7f5 faf7 	bl	8000b60 <__aeabi_d2iz>
 800b572:	4603      	mov	r3, r0
 800b574:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800b576:	f7f9 fd0a 	bl	8004f8e <_ZNSt14numeric_limitsIhE3minEv>
 800b57a:	4603      	mov	r3, r0
 800b57c:	61bb      	str	r3, [r7, #24]
 800b57e:	f107 0214 	add.w	r2, r7, #20
 800b582:	f107 0318 	add.w	r3, r7, #24
 800b586:	4611      	mov	r1, r2
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fa f9f0 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800b58e:	4603      	mov	r3, r0
  result =
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800b594:	f7f9 fd03 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800b598:	4603      	mov	r3, r0
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	f107 0214 	add.w	r2, r7, #20
 800b5a0:	f107 031c 	add.w	r3, r7, #28
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fa f9cd 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800b5ac:	4603      	mov	r3, r0
  result =
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	617b      	str	r3, [r7, #20]
  return result;
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	b2db      	uxtb	r3, r3
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3720      	adds	r7, #32
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bdb0      	pop	{r4, r5, r7, pc}

0800b5be <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b088      	sub	sp, #32
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	60ba      	str	r2, [r7, #8]
 800b5c6:	607b      	str	r3, [r7, #4]
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800b5d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5d2:	68b8      	ldr	r0, [r7, #8]
 800b5d4:	f7ff f8f1 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800b5d8:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800b5da:	2300      	movs	r3, #0
 800b5dc:	61fb      	str	r3, [r7, #28]
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	da26      	bge.n	800b634 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800b5f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	dd04      	ble.n	800b606 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 800b5fc:	f107 030e 	add.w	r3, r7, #14
 800b600:	f993 3000 	ldrsb.w	r3, [r3]
 800b604:	e00c      	b.n	800b620 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800b606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b60a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b60e:	429a      	cmp	r2, r3
 800b610:	da04      	bge.n	800b61c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 800b612:	f107 030f 	add.w	r3, r7, #15
 800b616:	f993 3000 	ldrsb.w	r3, [r3]
 800b61a:	e001      	b.n	800b620 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800b61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b620:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b626:	4413      	add	r3, r2
 800b628:	7dba      	ldrb	r2, [r7, #22]
 800b62a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	3301      	adds	r3, #1
 800b630:	61fb      	str	r3, [r7, #28]
 800b632:	e7d4      	b.n	800b5de <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800b634:	bf00      	nop
 800b636:	3720      	adds	r7, #32
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	60ba      	str	r2, [r7, #8]
 800b644:	607b      	str	r3, [r7, #4]
 800b646:	4603      	mov	r3, r0
 800b648:	73fb      	strb	r3, [r7, #15]
 800b64a:	460b      	mov	r3, r1
 800b64c:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800b64e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b650:	68b8      	ldr	r0, [r7, #8]
 800b652:	f7ff f8b2 	bl	800a7ba <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800b656:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]
 800b65c:	69fa      	ldr	r2, [r7, #28]
 800b65e:	69bb      	ldr	r3, [r7, #24]
 800b660:	429a      	cmp	r2, r3
 800b662:	da1f      	bge.n	800b6a4 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	4413      	add	r3, r2
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	7dfa      	ldrb	r2, [r7, #23]
 800b672:	429a      	cmp	r2, r3
 800b674:	d903      	bls.n	800b67e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 800b676:	f107 030e 	add.w	r3, r7, #14
 800b67a:	781b      	ldrb	r3, [r3, #0]
 800b67c:	e008      	b.n	800b690 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	7dfa      	ldrb	r2, [r7, #23]
 800b682:	429a      	cmp	r2, r3
 800b684:	d203      	bcs.n	800b68e <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 800b686:	f107 030f 	add.w	r3, r7, #15
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	e000      	b.n	800b690 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b696:	4413      	add	r3, r2
 800b698:	7dba      	ldrb	r2, [r7, #22]
 800b69a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	61fb      	str	r3, [r7, #28]
 800b6a2:	e7db      	b.n	800b65c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800b6a4:	bf00      	nop
 800b6a6:	3720      	adds	r7, #32
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  return x;
 800b6b4:	687b      	ldr	r3, [r7, #4]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  return a & b;
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	4013      	ands	r3, r2
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	370c      	adds	r7, #12
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
 800b6e6:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	fa42 f303 	asr.w	r3, r2, r3
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr

0800b6fc <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	bfb4      	ite	lt
 800b70e:	2301      	movlt	r3, #1
 800b710:	2300      	movge	r3, #0
 800b712:	b2db      	uxtb	r3, r3
 800b714:	4618      	mov	r0, r3
 800b716:	f000 f827 	bl	800b768 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b71a:	4603      	mov	r3, r0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  return a + b;
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	4413      	add	r3, r2
}
 800b734:	4618      	mov	r0, r3
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	bfcc      	ite	gt
 800b752:	2301      	movgt	r3, #1
 800b754:	2300      	movle	r3, #0
 800b756:	b2db      	uxtb	r3, r3
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f805 	bl	800b768 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800b75e:	4603      	mov	r3, r0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3708      	adds	r7, #8
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d004      	beq.n	800b780 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800b776:	2000      	movs	r0, #0
 800b778:	f000 f807 	bl	800b78a <_ZN8gemmlowp6BitNotIlEET_S1_>
 800b77c:	4603      	mov	r3, r0
 800b77e:	e000      	b.n	800b782 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800b78a:	b480      	push	{r7}
 800b78c:	b083      	sub	sp, #12
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  return ~a;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	43db      	mvns	r3, r3
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800b7a2:	b480      	push	{r7}
 800b7a4:	b083      	sub	sp, #12
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	370c      	adds	r7, #12
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d4:	4770      	bx	lr

0800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b082      	sub	sp, #8
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800b7e4:	f016 f974 	bl	8021ad0 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <_ZN6tflite5micro13GetTensorDataIlEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d002      	beq.n	800b808 <_ZN6tflite5micro13GetTensorDataIlEEPT_P16TfLiteEvalTensor+0x14>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	e000      	b.n	800b80a <_ZN6tflite5micro13GetTensorDataIlEEPT_P16TfLiteEvalTensor+0x16>
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <_ZN6tflite12RuntimeShapeC1Eil>:
  RuntimeShape(int shape_size, int32_t value) : size_(0) {
 800b816:	b580      	push	{r7, lr}
 800b818:	b086      	sub	sp, #24
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	60f8      	str	r0, [r7, #12]
 800b81e:	60b9      	str	r1, [r7, #8]
 800b820:	607a      	str	r2, [r7, #4]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	601a      	str	r2, [r3, #0]
    Resize(shape_size);
 800b828:	68b9      	ldr	r1, [r7, #8]
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7fa fa1d 	bl	8005c6a <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
 800b830:	2300      	movs	r3, #0
 800b832:	617b      	str	r3, [r7, #20]
 800b834:	697a      	ldr	r2, [r7, #20]
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	429a      	cmp	r2, r3
 800b83a:	da08      	bge.n	800b84e <_ZN6tflite12RuntimeShapeC1Eil+0x38>
      SetDim(i, value);
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6979      	ldr	r1, [r7, #20]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 f809 	bl	800b858 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	3301      	adds	r3, #1
 800b84a:	617b      	str	r3, [r7, #20]
 800b84c:	e7f2      	b.n	800b834 <_ZN6tflite12RuntimeShapeC1Eil+0x1e>
  }
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32_t val) {
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_GE(i, 0);
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	2b00      	cmp	r3, #0
 800b868:	da01      	bge.n	800b86e <_ZN6tflite12RuntimeShape6SetDimEil+0x16>
 800b86a:	f016 f931 	bl	8021ad0 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	429a      	cmp	r2, r3
 800b876:	db01      	blt.n	800b87c <_ZN6tflite12RuntimeShape6SetDimEil+0x24>
 800b878:	f016 f92a 	bl	8021ad0 <abort>
    if (size_ > kMaxSmallSize) {
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b05      	cmp	r3, #5
 800b882:	dd07      	ble.n	800b894 <_ZN6tflite12RuntimeShape6SetDimEil+0x3c>
      dims_pointer_[i] = val;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685a      	ldr	r2, [r3, #4]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	601a      	str	r2, [r3, #0]
  }
 800b892:	e005      	b.n	800b8a0 <_ZN6tflite12RuntimeShape6SetDimEil+0x48>
      dims_[i] = val;
 800b894:	68fa      	ldr	r2, [r7, #12]
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	4413      	add	r3, r2
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	605a      	str	r2, [r3, #4]
  }
 800b8a0:	bf00      	nop
 800b8a2:	3710      	adds	r7, #16
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f7fa f9ac 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b04      	cmp	r3, #4
 800b8d8:	d001      	beq.n	800b8de <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800b8da:	f016 f8f9 	bl	8021ad0 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff ffe2 	bl	800b8a8 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800b8e4:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	db04      	blt.n	800b8f6 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68ba      	ldr	r2, [r7, #8]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	db01      	blt.n	800b8fa <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800b8f6:	f016 f8eb 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	db05      	blt.n	800b90c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	3304      	adds	r3, #4
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	429a      	cmp	r2, r3
 800b90a:	db01      	blt.n	800b910 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800b90c:	f016 f8e0 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	2b00      	cmp	r3, #0
 800b914:	db05      	blt.n	800b922 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	3308      	adds	r3, #8
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	429a      	cmp	r2, r3
 800b920:	db01      	blt.n	800b926 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800b922:	f016 f8d5 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	db05      	blt.n	800b938 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	330c      	adds	r3, #12
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	6a3a      	ldr	r2, [r7, #32]
 800b934:	429a      	cmp	r2, r3
 800b936:	db01      	blt.n	800b93c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800b938:	f016 f8ca 	bl	8021ad0 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	3304      	adds	r3, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	fb02 f203 	mul.w	r2, r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4413      	add	r3, r2
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	3208      	adds	r2, #8
 800b950:	6812      	ldr	r2, [r2, #0]
 800b952:	fb02 f203 	mul.w	r2, r2, r3
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	4413      	add	r3, r2
 800b95a:	697a      	ldr	r2, [r7, #20]
 800b95c:	320c      	adds	r2, #12
 800b95e:	6812      	ldr	r2, [r2, #0]
 800b960:	fb02 f203 	mul.w	r2, r2, r3
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	4413      	add	r3, r2
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>:
  inline static RuntimeShape ExtendedShape(int new_shape_size,
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
    return RuntimeShape(new_shape_size, shape, 1);
 800b97c:	2301      	movs	r3, #1
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 f804 	bl	800b990 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  }
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 800b990:	b5b0      	push	{r4, r5, r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	603b      	str	r3, [r7, #0]
      : size_(0) {
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7fa f941 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	da01      	bge.n	800b9b6 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x26>
 800b9b2:	f016 f88d 	bl	8021ad0 <abort>
    Resize(new_shape_size);
 800b9b6:	68b9      	ldr	r1, [r7, #8]
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7fa f956 	bl	8005c6a <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f7fa f934 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size_increase; ++i) {
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	617b      	str	r3, [r7, #20]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	da08      	bge.n	800b9ea <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x5a>
      SetDim(i, pad_value);
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	6979      	ldr	r1, [r7, #20]
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f7ff ff3b 	bl	800b858 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	617b      	str	r3, [r7, #20]
 800b9e8:	e7f2      	b.n	800b9d0 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x40>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f7fa f92a 	bl	8005c44 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	18d4      	adds	r4, r2, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7fe fea8 	bl	800a74e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800b9fe:	4605      	mov	r5, r0
                sizeof(int32_t) * shape.DimensionsCount());
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7fa f913 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ba06:	4603      	mov	r3, r0
 800ba08:	009b      	lsls	r3, r3, #2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	4629      	mov	r1, r5
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f016 f8e8 	bl	8021be4 <memcpy>
  }
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	4618      	mov	r0, r3
 800ba18:	3718      	adds	r7, #24
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bdb0      	pop	{r4, r5, r7, pc}

0800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
    int32_t x, int32_t quantized_multiplier, int left_shift) {
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b084      	sub	sp, #16
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	607a      	str	r2, [r7, #4]
  return RoundingDivideByPOT(
 800ba2a:	68b9      	ldr	r1, [r7, #8]
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	f7fe fdf9 	bl	800a624 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ba32:	4602      	mov	r2, r0
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	425b      	negs	r3, r3
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7ff fa72 	bl	800af24 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	db04      	blt.n	800ba68 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x1e>
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	db01      	blt.n	800ba6c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x22>
 800ba68:	f016 f832 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	db04      	blt.n	800ba7c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x32>
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	db01      	blt.n	800ba80 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x36>
 800ba7c:	f016 f828 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db04      	blt.n	800ba90 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x46>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	db01      	blt.n	800ba94 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x4a>
 800ba90:	f016 f81e 	bl	8021ad0 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	db04      	blt.n	800baa4 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5a>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	69ba      	ldr	r2, [r7, #24]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	db01      	blt.n	800baa8 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5e>
 800baa4:	f016 f814 	bl	8021ad0 <abort>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	fb02 f203 	mul.w	r2, r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	6879      	ldr	r1, [r7, #4]
 800bab8:	fb01 f303 	mul.w	r3, r1, r3
 800babc:	441a      	add	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	699b      	ldr	r3, [r3, #24]
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	fb01 f303 	mul.w	r3, r1, r3
 800bac8:	441a      	add	r2, r3
         i3 * desc.strides[3];
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	69b9      	ldr	r1, [r7, #24]
 800bad0:	fb01 f303 	mul.w	r3, r1, r3
 800bad4:	4413      	add	r3, r2
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
 800bade:	b580      	push	{r7, lr}
 800bae0:	b094      	sub	sp, #80	; 0x50
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	60f8      	str	r0, [r7, #12]
 800bae6:	60b9      	str	r1, [r7, #8]
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	603b      	str	r3, [r7, #0]
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x18>
 800baf2:	f015 ffed 	bl	8021ad0 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x22>
 800bafc:	f015 ffe8 	bl	8021ad0 <abort>

  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 800bb00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	2104      	movs	r1, #4
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7ff ff31 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 800bb0e:	f107 0314 	add.w	r3, r7, #20
 800bb12:	68ba      	ldr	r2, [r7, #8]
 800bb14:	2104      	movs	r1, #4
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff ff2a 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Copy dims to desc, calculating strides.
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
 800bb1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb20:	6879      	ldr	r1, [r7, #4]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 f84e 	bl	800bbc4 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
 800bb28:	f107 0314 	add.w	r3, r7, #20
 800bb2c:	6839      	ldr	r1, [r7, #0]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f000 f848 	bl	800bbc4 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
 800bb34:	2300      	movs	r3, #0
 800bb36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	dc34      	bgt.n	800bba8 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xca>
    const int extent0 = extended_input0_shape.Dims(i);
 800bb3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7fe fddd 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb4a:	64b8      	str	r0, [r7, #72]	; 0x48
    const int extent1 = extended_input1_shape.Dims(i);
 800bb4c:	f107 0314 	add.w	r3, r7, #20
 800bb50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fe fdd6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bb58:	6478      	str	r0, [r7, #68]	; 0x44
    if (extent0 != extent1) {
 800bb5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d01e      	beq.n	800bba0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      if (extent0 == 1) {
 800bb62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d10b      	bne.n	800bb80 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa2>
        desc0_out->strides[i] = 0;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb6c:	3204      	adds	r2, #4
 800bb6e:	2100      	movs	r1, #0
 800bb70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc0_out->extents[i] = extent1;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb7e:	e00f      	b.n	800bba0 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
 800bb80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d001      	beq.n	800bb8a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xac>
 800bb86:	f015 ffa3 	bl	8021ad0 <abort>
        desc1_out->strides[i] = 0;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb8e:	3204      	adds	r2, #4
 800bb90:	2100      	movs	r1, #0
 800bb92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc1_out->extents[i] = extent0;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bb9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < N; ++i) {
 800bba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba2:	3301      	adds	r3, #1
 800bba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bba6:	e7c7      	b.n	800bb38 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x5a>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 800bba8:	f107 0314 	add.w	r3, r7, #20
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fa f827 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 800bbb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fa f822 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
  }
}
 800bbbc:	bf00      	nop
 800bbbe:	3750      	adds	r7, #80	; 0x50
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
 800bbcc:	6039      	str	r1, [r7, #0]
  int desc_stride = 1;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	60bb      	str	r3, [r7, #8]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	db1b      	blt.n	800bc14 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x50>
    desc_out->extents[i] = input_shape.Dims(i);
 800bbdc:	68b9      	ldr	r1, [r7, #8]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7fe fd90 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bbe4:	4601      	mov	r1, r0
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	68ba      	ldr	r2, [r7, #8]
 800bbea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_out->strides[i] = desc_stride;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	3204      	adds	r2, #4
 800bbf4:	68f9      	ldr	r1, [r7, #12]
 800bbf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_stride *= input_shape.Dims(i);
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7fe fd81 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc02:	4602      	mov	r2, r0
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	fb02 f303 	mul.w	r3, r2, r3
 800bc0a:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	60bb      	str	r3, [r7, #8]
 800bc12:	e7e0      	b.n	800bbd6 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x12>
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	607a      	str	r2, [r7, #4]
 800bc28:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f7fe fd69 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc32:	4604      	mov	r4, r0
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7fe fd64 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	429c      	cmp	r4, r3
 800bc40:	d001      	beq.n	800bc46 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800bc42:	f015 ff45 	bl	8021ad0 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800bc46:	68b9      	ldr	r1, [r7, #8]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f7fe fd5b 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	613b      	str	r3, [r7, #16]
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7fe fd55 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	617b      	str	r3, [r7, #20]
 800bc5e:	f107 0214 	add.w	r2, r7, #20
 800bc62:	f107 0310 	add.w	r3, r7, #16
 800bc66:	4611      	mov	r1, r2
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7f9 fe6c 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	681b      	ldr	r3, [r3, #0]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd90      	pop	{r4, r7, pc}
	...

0800bc7c <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eeb0 0a67 	vmov.f32	s0, s15
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	7f7fffff 	.word	0x7f7fffff

0800bc98 <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eeb0 0a67 	vmov.f32	s0, s15
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 800bcb0:	b480      	push	{r7}
 800bcb2:	b087      	sub	sp, #28
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	fb02 f303 	mul.w	r3, r2, r3
 800bcc8:	3301      	adds	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800bccc:	6a3b      	ldr	r3, [r7, #32]
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	fb02 f203 	mul.w	r2, r2, r3
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	441a      	add	r2, r3
  int total_padding =
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bce6:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	bfb8      	it	lt
 800bcf2:	425b      	neglt	r3, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	0fda      	lsrs	r2, r3, #31
 800bcfe:	4413      	add	r3, r2
 800bd00:	105b      	asrs	r3, r3, #1
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 800bd0e:	b480      	push	{r7}
 800bd10:	b087      	sub	sp, #28
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	6a3a      	ldr	r2, [r7, #32]
 800bd24:	fb02 f303 	mul.w	r3, r2, r3
 800bd28:	3301      	adds	r3, #1
 800bd2a:	617b      	str	r3, [r7, #20]
  switch (padding) {
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	d002      	beq.n	800bd38 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d008      	beq.n	800bd48 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 800bd36:	e010      	b.n	800bd5a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	4413      	add	r3, r2
 800bd3e:	1e5a      	subs	r2, r3, #1
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd46:	e009      	b.n	800bd5c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	441a      	add	r2, r3
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	1ad2      	subs	r2, r2, r3
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	fb92 f3f3 	sdiv	r3, r2, r3
 800bd58:	e000      	b.n	800bd5c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 800bd5a:	2300      	movs	r3, #0
  }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 800bd76:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	9300      	str	r3, [sp, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd84:	f7ff ffc3 	bl	800bd0e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd8c:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 800bd8e:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd9c:	f7ff ffb7 	bl	800bd0e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 800bda0:	4602      	mov	r2, r0
 800bda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda4:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 800bdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f107 0214 	add.w	r2, r7, #20
 800bdb2:	9201      	str	r2, [sp, #4]
 800bdb4:	9300      	str	r3, [sp, #0]
 800bdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	68b8      	ldr	r0, [r7, #8]
 800bdbe:	f7ff ff77 	bl	800bcb0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800bdc2:	4602      	mov	r2, r0
  padding_values.height =
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 800bdce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f107 0214 	add.w	r2, r7, #20
 800bdd6:	9201      	str	r2, [sp, #4]
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdde:	6a39      	ldr	r1, [r7, #32]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff ff65 	bl	800bcb0 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 800bde6:	4602      	mov	r2, r0
  padding_values.width =
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	609a      	str	r2, [r3, #8]
  return padding_values;
 800bdf2:	bf00      	nop
}
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}

0800bdfc <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>:
const int kConvQuantizedDimension = 0;

// Returns a ConvParams struct with all the parameters needed for a
// float computation.
ConvParams ConvParamsFloat(const TfLiteConvParams& params,
                           const OpDataConv& data) {
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	b084      	sub	sp, #16
 800be00:	af00      	add	r7, sp, #0
 800be02:	60f8      	str	r0, [r7, #12]
 800be04:	60b9      	str	r1, [r7, #8]
 800be06:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	7b18      	ldrb	r0, [r3, #12]
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	3330      	adds	r3, #48	; 0x30
 800be16:	4619      	mov	r1, r3
 800be18:	f000 f980 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	4618      	mov	r0, r3
 800be22:	f000 fdbf 	bl	800c9a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800be26:	4603      	mov	r3, r0
 800be28:	461a      	mov	r2, r3
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	b21a      	sxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	b21a      	sxth	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	b21a      	sxth	r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	b21a      	sxth	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	b21a      	sxth	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	b21a      	sxth	r2, r3
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	821a      	strh	r2, [r3, #16]
  return op_params;
 800be6a:	bf00      	nop
}
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>:

// Returns a ConvParams struct with all the parameters needed for a
// quantized computation.
ConvParams ConvParamsQuantized(const TfLiteConvParams& params,
                               const OpDataConv& data) {
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
  ConvParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	425a      	negs	r2, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	695b      	ldr	r3, [r3, #20]
 800be8e:	425a      	negs	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	699a      	ldr	r2, [r3, #24]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	69da      	ldr	r2, [r3, #28]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a1b      	ldr	r3, [r3, #32]
 800bea8:	425a      	negs	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f000 fd76 	bl	800c9a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	b21a      	sxth	r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	b21a      	sxth	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	b21a      	sxth	r2, r3
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	b21a      	sxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	695b      	ldr	r3, [r3, #20]
 800beec:	b21a      	sxth	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	b21a      	sxth	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	81da      	strh	r2, [r3, #14]
  op_params.quantized_activation_min = data.output_activation_min;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800bf0c:	bf00      	nop
}
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:
TfLiteStatus CalculateOpDataConv(TfLiteContext* context, TfLiteNode* node,
                                 const TfLiteConvParams& params, int width,
                                 int height, int filter_width,
                                 int filter_height, int out_width,
                                 int out_height, const TfLiteType data_type,
                                 OpDataConv* data) {
 800bf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf1a:	b09d      	sub	sp, #116	; 0x74
 800bf1c:	af0a      	add	r7, sp, #40	; 0x28
 800bf1e:	6278      	str	r0, [r7, #36]	; 0x24
 800bf20:	6239      	str	r1, [r7, #32]
 800bf22:	61fa      	str	r2, [r7, #28]
 800bf24:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800bf26:	6a3b      	ldr	r3, [r7, #32]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	bf0c      	ite	eq
 800bf30:	2301      	moveq	r3, #1
 800bf32:	2300      	movne	r3, #0
 800bf34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800bf38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bf3c:	f083 0301 	eor.w	r3, r3, #1
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00f      	beq.n	800bf66 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d00a      	beq.n	800bf66 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800bf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf52:	695c      	ldr	r4, [r3, #20]
 800bf54:	4b68      	ldr	r3, [pc, #416]	; (800c0f8 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e0>)
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	2356      	movs	r3, #86	; 0x56
 800bf5a:	4a68      	ldr	r2, [pc, #416]	; (800c0fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800bf5c:	4968      	ldr	r1, [pc, #416]	; (800c100 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800bf5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf60:	47a0      	blx	r4
 800bf62:	2301      	movs	r3, #1
 800bf64:	e0c4      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d012      	beq.n	800bf96 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	695c      	ldr	r4, [r3, #20]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	9203      	str	r2, [sp, #12]
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	4b60      	ldr	r3, [pc, #384]	; (800c104 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ec>)
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	4b60      	ldr	r3, [pc, #384]	; (800c108 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2357      	movs	r3, #87	; 0x57
 800bf8a:	4a5c      	ldr	r2, [pc, #368]	; (800c0fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800bf8c:	495f      	ldr	r1, [pc, #380]	; (800c10c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800bf8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf90:	47a0      	blx	r4
 800bf92:	2301      	movs	r3, #1
 800bf94:	e0ac      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	6899      	ldr	r1, [r3, #8]
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	685c      	ldr	r4, [r3, #4]
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	695d      	ldr	r5, [r3, #20]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	691b      	ldr	r3, [r3, #16]
      padding, &out_height, &out_width);
 800bfae:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800bfb0:	f107 0008 	add.w	r0, r7, #8
 800bfb4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800bfb8:	9207      	str	r2, [sp, #28]
 800bfba:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800bfbe:	9206      	str	r2, [sp, #24]
 800bfc0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800bfc4:	9205      	str	r2, [sp, #20]
 800bfc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bfc8:	9204      	str	r2, [sp, #16]
 800bfca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bfcc:	9203      	str	r2, [sp, #12]
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	9202      	str	r2, [sp, #8]
 800bfd2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bfd4:	9201      	str	r2, [sp, #4]
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	462b      	mov	r3, r5
 800bfda:	4622      	mov	r2, r4
 800bfdc:	f7ff fec4 	bl	800bd68 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800bfe0:	4634      	mov	r4, r6
 800bfe2:	f107 0308 	add.w	r3, r7, #8
 800bfe6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800bfec:	2200      	movs	r2, #0
 800bfee:	6a39      	ldr	r1, [r7, #32]
 800bff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bff2:	f7f9 f8c4 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800bff6:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 800bff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0xfc>
 800bffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c000:	695c      	ldr	r4, [r3, #20]
 800c002:	4b43      	ldr	r3, [pc, #268]	; (800c110 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	2361      	movs	r3, #97	; 0x61
 800c008:	4a3c      	ldr	r2, [pc, #240]	; (800c0fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c00a:	493d      	ldr	r1, [pc, #244]	; (800c100 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c00e:	47a0      	blx	r4
 800c010:	2301      	movs	r3, #1
 800c012:	e06d      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800c014:	2201      	movs	r2, #1
 800c016:	6a39      	ldr	r1, [r7, #32]
 800c018:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c01a:	f7f9 f8b0 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c01e:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x124>
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	695c      	ldr	r4, [r3, #20]
 800c02a:	4b3a      	ldr	r3, [pc, #232]	; (800c114 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	2363      	movs	r3, #99	; 0x63
 800c030:	4a32      	ldr	r2, [pc, #200]	; (800c0fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c032:	4933      	ldr	r1, [pc, #204]	; (800c100 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c034:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c036:	47a0      	blx	r4
 800c038:	2301      	movs	r3, #1
 800c03a:	e059      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 800c03c:	2202      	movs	r2, #2
 800c03e:	6a39      	ldr	r1, [r7, #32]
 800c040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c042:	f7f9 f8cc 	bl	80051de <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800c046:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800c048:	2200      	movs	r2, #0
 800c04a:	6a39      	ldr	r1, [r7, #32]
 800c04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c04e:	f7f9 f8a6 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c052:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x158>
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	695c      	ldr	r4, [r3, #20]
 800c05e:	4b2e      	ldr	r3, [pc, #184]	; (800c118 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	2367      	movs	r3, #103	; 0x67
 800c064:	4a25      	ldr	r2, [pc, #148]	; (800c0fc <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e4>)
 800c066:	4926      	ldr	r1, [pc, #152]	; (800c100 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>)
 800c068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c06a:	47a0      	blx	r4
 800c06c:	2301      	movs	r3, #1
 800c06e:	e03f      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800c070:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c074:	2b01      	cmp	r3, #1
 800c076:	d02e      	beq.n	800c0d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 800c078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	330c      	adds	r3, #12
 800c084:	607b      	str	r3, [r7, #4]
 800c086:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c088:	321c      	adds	r2, #28
 800c08a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c08c:	3120      	adds	r1, #32
 800c08e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c090:	302c      	adds	r0, #44	; 0x2c
 800c092:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800c094:	3430      	adds	r4, #48	; 0x30
 800c096:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800c098:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800c09a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c09c:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	9308      	str	r3, [sp, #32]
 800c0a2:	9607      	str	r6, [sp, #28]
 800c0a4:	9506      	str	r5, [sp, #24]
 800c0a6:	9405      	str	r4, [sp, #20]
 800c0a8:	9004      	str	r0, [sp, #16]
 800c0aa:	9103      	str	r1, [sp, #12]
 800c0ac:	9202      	str	r2, [sp, #8]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c0ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0be:	f7f9 f89f 	bl	8005200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1be>
 800c0d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0d4:	e00c      	b.n	800c0f0 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1d8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800c0d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0dc:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800c0de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0e0:	691a      	ldr	r2, [r3, #16]
 800c0e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0e4:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e8:	691a      	ldr	r2, [r3, #16]
 800c0ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0ec:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	374c      	adds	r7, #76	; 0x4c
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f8:	08027200 	.word	0x08027200
 800c0fc:	080271ac 	.word	0x080271ac
 800c100:	080271e8 	.word	0x080271e8
 800c104:	08027240 	.word	0x08027240
 800c108:	08027244 	.word	0x08027244
 800c10c:	08027224 	.word	0x08027224
 800c110:	08027258 	.word	0x08027258
 800c114:	0802726c 	.word	0x0802726c
 800c118:	08027280 	.word	0x08027280

0800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d10b      	bne.n	800c148 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	f04f 0200 	mov.w	r2, #0
 800c136:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800c138:	f7ff fda0 	bl	800bc7c <_ZNSt14numeric_limitsIfE3maxEv>
 800c13c:	eef0 7a40 	vmov.f32	s15, s0
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800c146:	e023      	b.n	800c190 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d107      	bne.n	800c15e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f04f 0200 	mov.w	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a0f      	ldr	r2, [pc, #60]	; (800c198 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800c15a:	601a      	str	r2, [r3, #0]
}
 800c15c:	e018      	b.n	800c190 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d107      	bne.n	800c174 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	4a0d      	ldr	r2, [pc, #52]	; (800c19c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800c168:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c170:	601a      	str	r2, [r3, #0]
}
 800c172:	e00d      	b.n	800c190 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800c174:	f7ff fd90 	bl	800bc98 <_ZNSt14numeric_limitsIfE6lowestEv>
 800c178:	eef0 7a40 	vmov.f32	s15, s0
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800c182:	f7ff fd7b 	bl	800bc7c <_ZNSt14numeric_limitsIfE3maxEv>
 800c186:	eef0 7a40 	vmov.f32	s15, s0
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	edc3 7a00 	vstr	s15, [r3]
}
 800c190:	bf00      	nop
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	40c00000 	.word	0x40c00000
 800c19c:	bf800000 	.word	0xbf800000

0800c1a0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:
const int kDepthwiseConvQuantizedDimension = 3;

// Returns a DepthwiseParams struct with all the parameters needed for a
// float computation.
DepthwiseParams DepthwiseConvParamsFloat(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  CalculateActivationRange(params.activation, &op_params.float_activation_min,
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	7c18      	ldrb	r0, [r3, #16]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3330      	adds	r3, #48	; 0x30
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	f7ff ffae 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &op_params.float_activation_max);
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fbed 	bl	800c9a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.width = data.padding.width;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	b21a      	sxth	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	805a      	strh	r2, [r3, #2]
  op_params.padding_values.height = data.padding.height;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	b21a      	sxth	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	809a      	strh	r2, [r3, #4]
  op_params.stride_width = params.stride_width;
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	b21a      	sxth	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	815a      	strh	r2, [r3, #10]
  op_params.stride_height = params.stride_height;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	b21a      	sxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	819a      	strh	r2, [r3, #12]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	b21a      	sxth	r2, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	81da      	strh	r2, [r3, #14]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	699b      	ldr	r3, [r3, #24]
 800c208:	b21a      	sxth	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	821a      	strh	r2, [r3, #16]
  op_params.depth_multiplier = params.depth_multiplier;
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	b21a      	sxth	r2, r3
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	825a      	strh	r2, [r3, #18]
  return op_params;
 800c218:	bf00      	nop
}
 800c21a:	68f8      	ldr	r0, [r7, #12]
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>:

// Returns a DepthwiseParams struct with all the parameters needed for a
// quantized computation.
DepthwiseParams DepthwiseConvParamsQuantized(
    const TfLiteDepthwiseConvParams& params, const OpDataConv& data) {
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	60f8      	str	r0, [r7, #12]
 800c22a:	60b9      	str	r1, [r7, #8]
 800c22c:	607a      	str	r2, [r7, #4]
  DepthwiseParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	425a      	negs	r2, r3
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	615a      	str	r2, [r3, #20]
  op_params.weights_offset = -data.filter_zero_point;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	425a      	negs	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	619a      	str	r2, [r3, #24]
  op_params.output_offset = data.output_zero_point;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	699a      	ldr	r2, [r3, #24]
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	61da      	str	r2, [r3, #28]
  op_params.output_multiplier = data.output_multiplier;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69da      	ldr	r2, [r3, #28]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	621a      	str	r2, [r3, #32]
  op_params.output_shift = -data.output_shift;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	425a      	negs	r2, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	625a      	str	r2, [r3, #36]	; 0x24
  op_params.padding_type = tflite::micro::RuntimePaddingType(params.padding);
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f000 fb9f 	bl	800c9a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>
 800c266:	4603      	mov	r3, r0
 800c268:	461a      	mov	r2, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	701a      	strb	r2, [r3, #0]
  op_params.padding_values.height = data.padding.height;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	b21a      	sxth	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	809a      	strh	r2, [r3, #4]
  op_params.padding_values.width = data.padding.width;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	b21a      	sxth	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	805a      	strh	r2, [r3, #2]
  op_params.stride_height = params.stride_height;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	b21a      	sxth	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	819a      	strh	r2, [r3, #12]
  op_params.stride_width = params.stride_width;
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	b21a      	sxth	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	815a      	strh	r2, [r3, #10]
  op_params.dilation_height_factor = params.dilation_height_factor;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	b21a      	sxth	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	821a      	strh	r2, [r3, #16]
  op_params.dilation_width_factor = params.dilation_width_factor;
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	b21a      	sxth	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	81da      	strh	r2, [r3, #14]
  op_params.depth_multiplier = params.depth_multiplier;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	b21a      	sxth	r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	825a      	strh	r2, [r3, #18]
  op_params.quantized_activation_min = data.output_activation_min;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	629a      	str	r2, [r3, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	62da      	str	r2, [r3, #44]	; 0x2c
  return op_params;
 800c2c4:	bf00      	nop
}
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>:

TfLiteStatus CalculateOpDataDepthwiseConv(
    TfLiteContext* context, TfLiteNode* node,
    const TfLiteDepthwiseConvParams& params, int width, int height,
    int filter_width, int filter_height, int out_width, int out_height,
    const TfLiteType data_type, OpDataConv* data) {
 800c2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2d2:	b09d      	sub	sp, #116	; 0x74
 800c2d4:	af0a      	add	r7, sp, #40	; 0x28
 800c2d6:	6278      	str	r0, [r7, #36]	; 0x24
 800c2d8:	6239      	str	r1, [r7, #32]
 800c2da:	61fa      	str	r2, [r7, #28]
 800c2dc:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 800c2de:	6a3b      	ldr	r3, [r7, #32]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b03      	cmp	r3, #3
 800c2e6:	bf0c      	ite	eq
 800c2e8:	2301      	moveq	r3, #1
 800c2ea:	2300      	movne	r3, #0
 800c2ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 800c2f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c2f4:	f083 0301 	eor.w	r3, r3, #1
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00f      	beq.n	800c31e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c2fe:	6a3b      	ldr	r3, [r7, #32]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d00a      	beq.n	800c31e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x4e>
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	695c      	ldr	r4, [r3, #20]
 800c30c:	4b6c      	ldr	r3, [pc, #432]	; (800c4c0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f0>)
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2358      	movs	r3, #88	; 0x58
 800c312:	4a6c      	ldr	r2, [pc, #432]	; (800c4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c314:	496c      	ldr	r1, [pc, #432]	; (800c4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c316:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c318:	47a0      	blx	r4
 800c31a:	2301      	movs	r3, #1
 800c31c:	e0cc      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800c31e:	6a3b      	ldr	r3, [r7, #32]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d012      	beq.n	800c34e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x7e>
 800c328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32a:	695c      	ldr	r4, [r3, #20]
 800c32c:	6a3b      	ldr	r3, [r7, #32]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2201      	movs	r2, #1
 800c334:	9203      	str	r2, [sp, #12]
 800c336:	9302      	str	r3, [sp, #8]
 800c338:	4b64      	ldr	r3, [pc, #400]	; (800c4cc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1fc>)
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	4b64      	ldr	r3, [pc, #400]	; (800c4d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x200>)
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	2359      	movs	r3, #89	; 0x59
 800c342:	4a60      	ldr	r2, [pc, #384]	; (800c4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c344:	4963      	ldr	r1, [pc, #396]	; (800c4d4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x204>)
 800c346:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c348:	47a0      	blx	r4
 800c34a:	2301      	movs	r3, #1
 800c34c:	e0b4      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params.padding;
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params.stride_height, params.stride_width, params.dilation_height_factor,
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	6899      	ldr	r1, [r3, #8]
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	685c      	ldr	r4, [r3, #4]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	699d      	ldr	r5, [r3, #24]
      params.dilation_width_factor, height, width, filter_height, filter_width,
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	695b      	ldr	r3, [r3, #20]
      padding, &out_height, &out_width);
 800c366:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c368:	f107 0008 	add.w	r0, r7, #8
 800c36c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c370:	9207      	str	r2, [sp, #28]
 800c372:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800c376:	9206      	str	r2, [sp, #24]
 800c378:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800c37c:	9205      	str	r2, [sp, #20]
 800c37e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c380:	9204      	str	r2, [sp, #16]
 800c382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c384:	9203      	str	r2, [sp, #12]
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	9202      	str	r2, [sp, #8]
 800c38a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c38c:	9201      	str	r2, [sp, #4]
 800c38e:	9300      	str	r3, [sp, #0]
 800c390:	462b      	mov	r3, r5
 800c392:	4622      	mov	r2, r4
 800c394:	f7ff fce8 	bl	800bd68 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 800c398:	4634      	mov	r4, r6
 800c39a:	f107 0308 	add.w	r3, r7, #8
 800c39e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800c3a4:	4b4c      	ldr	r3, [pc, #304]	; (800c4d8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x208>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	6a39      	ldr	r1, [r7, #32]
 800c3ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ae:	f7f8 fee6 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c3b2:	6438      	str	r0, [r7, #64]	; 0x40
  TF_LITE_ENSURE(context, input != nullptr);
 800c3b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10a      	bne.n	800c3d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x100>
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	695c      	ldr	r4, [r3, #20]
 800c3be:	4b47      	ldr	r3, [pc, #284]	; (800c4dc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x20c>)
 800c3c0:	9300      	str	r3, [sp, #0]
 800c3c2:	2363      	movs	r3, #99	; 0x63
 800c3c4:	4a3f      	ldr	r2, [pc, #252]	; (800c4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c3c6:	4940      	ldr	r1, [pc, #256]	; (800c4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3ca:	47a0      	blx	r4
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e073      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800c3d0:	4b43      	ldr	r3, [pc, #268]	; (800c4e0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x210>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	6a39      	ldr	r1, [r7, #32]
 800c3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3da:	f7f8 fed0 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800c3de:	63f8      	str	r0, [r7, #60]	; 0x3c
  TF_LITE_ENSURE(context, filter != nullptr);
 800c3e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x12c>
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e8:	695c      	ldr	r4, [r3, #20]
 800c3ea:	4b3e      	ldr	r3, [pc, #248]	; (800c4e4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x214>)
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	2365      	movs	r3, #101	; 0x65
 800c3f0:	4a34      	ldr	r2, [pc, #208]	; (800c4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c3f2:	4935      	ldr	r1, [pc, #212]	; (800c4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c3f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3f6:	47a0      	blx	r4
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e05d      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
  const TfLiteTensor* bias =
      GetOptionalInputTensor(context, node, kConvBiasTensor);
 800c3fc:	4b3a      	ldr	r3, [pc, #232]	; (800c4e8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x218>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	6a39      	ldr	r1, [r7, #32]
 800c404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c406:	f7f8 feea 	bl	80051de <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800c40a:	63b8      	str	r0, [r7, #56]	; 0x38
  TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800c40c:	4b37      	ldr	r3, [pc, #220]	; (800c4ec <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x21c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	6a39      	ldr	r1, [r7, #32]
 800c414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c416:	f7f8 fec2 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800c41a:	6378      	str	r0, [r7, #52]	; 0x34
  TF_LITE_ENSURE(context, output != nullptr);
 800c41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10a      	bne.n	800c438 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x168>
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	695c      	ldr	r4, [r3, #20]
 800c426:	4b32      	ldr	r3, [pc, #200]	; (800c4f0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x220>)
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	2369      	movs	r3, #105	; 0x69
 800c42c:	4a25      	ldr	r2, [pc, #148]	; (800c4c4 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f4>)
 800c42e:	4926      	ldr	r1, [pc, #152]	; (800c4c8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1f8>)
 800c430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c432:	47a0      	blx	r4
 800c434:	2301      	movs	r3, #1
 800c436:	e03f      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 800c438:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d02e      	beq.n	800c49e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
    int output_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 800c440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	3310      	adds	r3, #16
 800c44c:	607b      	str	r3, [r7, #4]
 800c44e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c450:	321c      	adds	r2, #28
 800c452:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c454:	3120      	adds	r1, #32
 800c456:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800c458:	302c      	adds	r0, #44	; 0x2c
 800c45a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 800c45c:	3430      	adds	r4, #48	; 0x30
 800c45e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 800c460:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 800c462:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 800c464:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	9308      	str	r3, [sp, #32]
 800c46a:	9607      	str	r6, [sp, #28]
 800c46c:	9506      	str	r5, [sp, #24]
 800c46e:	9405      	str	r4, [sp, #20]
 800c470:	9004      	str	r0, [sp, #16]
 800c472:	9103      	str	r1, [sp, #12]
 800c474:	9202      	str	r2, [sp, #8]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	9301      	str	r3, [sp, #4]
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	9300      	str	r3, [sp, #0]
 800c47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c480:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c486:	f7f8 febb 	bl	8005200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 800c48a:	4603      	mov	r3, r0
 800c48c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1ce>
 800c498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c49c:	e00c      	b.n	800c4b8 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE+0x1e8>
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }

  data->input_zero_point = input->params.zero_point;
 800c49e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4a0:	691a      	ldr	r2, [r3, #16]
 800c4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4a4:	611a      	str	r2, [r3, #16]
  data->filter_zero_point = filter->params.zero_point;
 800c4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4a8:	691a      	ldr	r2, [r3, #16]
 800c4aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4ac:	615a      	str	r2, [r3, #20]
  data->output_zero_point = output->params.zero_point;
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b0:	691a      	ldr	r2, [r3, #16]
 800c4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4b4:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	374c      	adds	r7, #76	; 0x4c
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4c0:	080273f0 	.word	0x080273f0
 800c4c4:	08027394 	.word	0x08027394
 800c4c8:	080273d8 	.word	0x080273d8
 800c4cc:	08027430 	.word	0x08027430
 800c4d0:	08027434 	.word	0x08027434
 800c4d4:	08027414 	.word	0x08027414
 800c4d8:	0802883c 	.word	0x0802883c
 800c4dc:	08027448 	.word	0x08027448
 800c4e0:	08028840 	.word	0x08028840
 800c4e4:	0802745c 	.word	0x0802745c
 800c4e8:	08028844 	.word	0x08028844
 800c4ec:	08028848 	.word	0x08028848
 800c4f0:	08027470 	.word	0x08027470

0800c4f4 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	da01      	bge.n	800c50e <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	e000      	b.n	800c510 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 800c50e:	687b      	ldr	r3, [r7, #4]
    }
 800c510:	4618      	mov	r0, r3
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
 800c51c:	b590      	push	{r4, r7, lr}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
    return this->size_ == comp.size_ &&
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d113      	bne.n	800c55a <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7fe f90b 	bl	800a74e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c538:	4604      	mov	r4, r0
 800c53a:	6838      	ldr	r0, [r7, #0]
 800c53c:	f7fe f907 	bl	800a74e <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800c540:	4601      	mov	r1, r0
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	461a      	mov	r2, r3
 800c54a:	4620      	mov	r0, r4
 800c54c:	f015 fb3c 	bl	8021bc8 <memcmp>
 800c550:	4603      	mov	r3, r0
    return this->size_ == comp.size_ &&
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <_ZNK6tflite12RuntimeShapeeqERKS0_+0x40>
 800c55a:	2300      	movs	r3, #0
  }
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	bd90      	pop	{r4, r7, pc}

0800c564 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
  const int size_1 = shape.FlatSize();
 800c570:	68f8      	ldr	r0, [r7, #12]
 800c572:	f7fe f8ff 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c576:	61f8      	str	r0, [r7, #28]
  const int size_2 = check_shape_0.FlatSize();
 800c578:	68b8      	ldr	r0, [r7, #8]
 800c57a:	f7fe f8fb 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c57e:	61b8      	str	r0, [r7, #24]
  const int size_3 = check_shape_1.FlatSize();
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f7fe f8f7 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800c586:	6178      	str	r0, [r7, #20]
  TFLITE_CHECK_EQ(size_1, size_2);
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d001      	beq.n	800c594 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x30>
 800c590:	f015 fa9e 	bl	8021ad0 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
 800c594:	69ba      	ldr	r2, [r7, #24]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d001      	beq.n	800c5a0 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x3c>
 800c59c:	f015 fa98 	bl	8021ad0 <abort>
  return size_1;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3720      	adds	r7, #32
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
 800c5aa:	b590      	push	{r4, r7, lr}
 800c5ac:	b09f      	sub	sp, #124	; 0x7c
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	60f8      	str	r0, [r7, #12]
 800c5b2:	60b9      	str	r1, [r7, #8]
 800c5b4:	607a      	str	r2, [r7, #4]
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f7f9 fb38 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5c0:	68b8      	ldr	r0, [r7, #8]
 800c5c2:	f7f9 fb33 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5ca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800c5ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c5d2:	4611      	mov	r1, r2
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7f9 f9ca 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	66fb      	str	r3, [r7, #108]	; 0x6c

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	701a      	strb	r2, [r3, #0]
  RuntimeShape scalar_shape(dims_count, 1);
 800c5e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7ff f911 	bl	800b816 <_ZN6tflite12RuntimeShapeC1Eil>

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 800c5f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff f9b7 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 800c602:	f107 0310 	add.w	r3, r7, #16
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff f9b0 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
 800c610:	f107 0210 	add.w	r2, r7, #16
 800c614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c618:	4611      	mov	r1, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff ff7e 	bl	800c51c <_ZNK6tflite12RuntimeShapeeqERKS0_>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d004      	beq.n	800c630 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x86>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	701a      	strb	r2, [r3, #0]
    return false;
 800c62c:	2400      	movs	r4, #0
 800c62e:	e12c      	b.n	800c88a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
  }

  for (int i = dims_count - 1; i >= 0; --i) {
 800c630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c632:	3b01      	subs	r3, #1
 800c634:	677b      	str	r3, [r7, #116]	; 0x74
 800c636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db42      	blt.n	800c6c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
 800c63c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c640:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe f85e 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c648:	4604      	mov	r4, r0
 800c64a:	f107 0310 	add.w	r3, r7, #16
 800c64e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c650:	4618      	mov	r0, r3
 800c652:	f7fe f857 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c656:	4603      	mov	r3, r0
 800c658:	429c      	cmp	r4, r3
 800c65a:	bf0c      	ite	eq
 800c65c:	2301      	moveq	r3, #1
 800c65e:	2300      	movne	r3, #0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d128      	bne.n	800c6b8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10e>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
 800c666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c66a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7fe f849 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c672:	4603      	mov	r3, r0
 800c674:	2b01      	cmp	r3, #1
 800c676:	bf0c      	ite	eq
 800c678:	2301      	moveq	r3, #1
 800c67a:	2300      	movne	r3, #0
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d003      	beq.n	800c68a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xe0>
      params->broadcast_category =
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2202      	movs	r2, #2
 800c686:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
 800c688:	e01b      	b.n	800c6c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else if (extended_shape1.Dims(i) == 1) {
 800c68a:	f107 0310 	add.w	r3, r7, #16
 800c68e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c690:	4618      	mov	r0, r3
 800c692:	f7fe f837 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c696:	4603      	mov	r3, r0
 800c698:	2b01      	cmp	r3, #1
 800c69a:	bf0c      	ite	eq
 800c69c:	2301      	moveq	r3, #1
 800c69e:	2300      	movne	r3, #0
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d003      	beq.n	800c6ae <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x104>
      params->broadcast_category =
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
 800c6ac:	e009      	b.n	800c6c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else {
      // This case is erroneous: there is a dimension that does not match and
      // is not a broadcast from one shape to the other.
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	701a      	strb	r2, [r3, #0]
      return true;
 800c6b4:	2401      	movs	r4, #1
 800c6b6:	e0e8      	b.n	800c88a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
      continue;
 800c6b8:	bf00      	nop
  for (int i = dims_count - 1; i >= 0; --i) {
 800c6ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	677b      	str	r3, [r7, #116]	; 0x74
 800c6c0:	e7b9      	b.n	800c636 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x8c>
    }
  }

  if (params->broadcast_category !=
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b02      	cmp	r3, #2
 800c6c8:	d005      	beq.n	800c6d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d001      	beq.n	800c6d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    // This is unreachable because at least one else clause in the above loop
    // must be reached.
    TFLITE_DCHECK(false);
 800c6d2:	f015 f9fd 	bl	8021ad0 <abort>
    return false;
  }

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	bf0c      	ite	eq
 800c6de:	2301      	moveq	r3, #1
 800c6e0:	2300      	movne	r3, #0
 800c6e2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
 800c6e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14a>
 800c6ee:	f107 0310 	add.w	r3, r7, #16
 800c6f2:	e001      	b.n	800c6f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14e>
 800c6f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c6f8:	667b      	str	r3, [r7, #100]	; 0x64
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
 800c6fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
 800c702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c706:	e001      	b.n	800c70c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
 800c708:	f107 0310 	add.w	r3, r7, #16
 800c70c:	663b      	str	r3, [r7, #96]	; 0x60
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
 800c70e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c710:	3b01      	subs	r3, #1
 800c712:	673b      	str	r3, [r7, #112]	; 0x70
  params->broadcast_shape[0] = 1;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2201      	movs	r2, #1
 800c718:	651a      	str	r2, [r3, #80]	; 0x50
  params->broadcast_shape[1] = 1;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	655a      	str	r2, [r3, #84]	; 0x54
  params->broadcast_shape[2] = 1;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	659a      	str	r2, [r3, #88]	; 0x58
  params->broadcast_shape[3] = 1;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2201      	movs	r2, #1
 800c72a:	65da      	str	r2, [r3, #92]	; 0x5c
  params->broadcast_shape[4] = 1;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	661a      	str	r2, [r3, #96]	; 0x60
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c734:	2b00      	cmp	r3, #0
 800c736:	db0d      	blt.n	800c754 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 800c738:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c73a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c73c:	f7fd ffe2 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c740:	4604      	mov	r4, r0
 800c742:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c744:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c746:	f7fd ffdd 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c74a:	4603      	mov	r3, r0
 800c74c:	429c      	cmp	r4, r3
 800c74e:	d101      	bne.n	800c754 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 800c750:	2301      	movs	r3, #1
 800c752:	e000      	b.n	800c756 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ac>
 800c754:	2300      	movs	r3, #0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00e      	beq.n	800c778 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
    params->broadcast_shape[4] *= shape_b->Dims(i);
 800c75a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c75c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c75e:	f7fd ffd1 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c762:	4602      	mov	r2, r0
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c768:	fb03 f202 	mul.w	r2, r3, r2
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	661a      	str	r2, [r3, #96]	; 0x60
    --i;
 800c770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c772:	3b01      	subs	r3, #1
 800c774:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c776:	e7dc      	b.n	800c732 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x188>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
 800c778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	db08      	blt.n	800c790 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 800c77e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c780:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c782:	f7fd ffbf 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c786:	4603      	mov	r3, r0
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d101      	bne.n	800c790 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 800c78c:	2301      	movs	r3, #1
 800c78e:	e000      	b.n	800c792 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e8>
 800c790:	2300      	movs	r3, #0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00e      	beq.n	800c7b4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
 800c796:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c798:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c79a:	f7fd ffb3 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7a4:	fb03 f202 	mul.w	r2, r3, r2
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	65da      	str	r2, [r3, #92]	; 0x5c
    --i;
 800c7ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == 1) {
 800c7b2:	e7e1      	b.n	800c778 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c7b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	db0d      	blt.n	800c7d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 800c7ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c7be:	f7fd ffa1 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c7c2:	4604      	mov	r4, r0
 800c7c4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7c6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c7c8:	f7fd ff9c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	429c      	cmp	r4, r3
 800c7d0:	d101      	bne.n	800c7d6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	e000      	b.n	800c7d8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22e>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00e      	beq.n	800c7fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
    params->broadcast_shape[2] *= shape_a->Dims(i);
 800c7dc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7de:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c7e0:	f7fd ff90 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ea:	fb03 f202 	mul.w	r2, r3, r2
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	659a      	str	r2, [r3, #88]	; 0x58
    --i;
 800c7f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7f4:	3b01      	subs	r3, #1
 800c7f6:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c7f8:	e7dc      	b.n	800c7b4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
 800c7fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	db08      	blt.n	800c812 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 800c800:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c802:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c804:	f7fd ff7e 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d101      	bne.n	800c812 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 800c80e:	2301      	movs	r3, #1
 800c810:	e000      	b.n	800c814 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26a>
 800c812:	2300      	movs	r3, #0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00e      	beq.n	800c836 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
    params->broadcast_shape[1] *= shape_a->Dims(i);
 800c818:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c81a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c81c:	f7fd ff72 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c820:	4602      	mov	r2, r0
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c826:	fb03 f202 	mul.w	r2, r3, r2
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	655a      	str	r2, [r3, #84]	; 0x54
    --i;
 800c82e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c830:	3b01      	subs	r3, #1
 800c832:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_b->Dims(i) == 1) {
 800c834:	e7e1      	b.n	800c7fa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c838:	2b00      	cmp	r3, #0
 800c83a:	db0d      	blt.n	800c858 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 800c83c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c83e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800c840:	f7fd ff60 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c844:	4604      	mov	r4, r0
 800c846:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c848:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c84a:	f7fd ff5b 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c84e:	4603      	mov	r3, r0
 800c850:	429c      	cmp	r4, r3
 800c852:	d101      	bne.n	800c858 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 800c854:	2301      	movs	r3, #1
 800c856:	e000      	b.n	800c85a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2b0>
 800c858:	2300      	movs	r3, #0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00e      	beq.n	800c87c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2d2>
    params->broadcast_shape[0] *= shape_b->Dims(i);
 800c85e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c860:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800c862:	f7fd ff4f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800c866:	4602      	mov	r2, r0
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c86c:	fb03 f202 	mul.w	r2, r3, r2
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	651a      	str	r2, [r3, #80]	; 0x50
    --i;
 800c874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c876:	3b01      	subs	r3, #1
 800c878:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 800c87a:	e7dc      	b.n	800c836 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
 800c87c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c87e:	2b00      	cmp	r3, #0
 800c880:	db02      	blt.n	800c888 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2de>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2204      	movs	r2, #4
 800c886:	701a      	strb	r2, [r3, #0]
  }
  return true;
 800c888:	2401      	movs	r4, #1
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 800c88a:	f107 0310 	add.w	r3, r7, #16
 800c88e:	4618      	mov	r0, r3
 800c890:	f7f9 f9b6 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 800c894:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f9 f9b1 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
 800c89e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f9 f9ac 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800c8a8:	4623      	mov	r3, r4
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	377c      	adds	r7, #124	; 0x7c
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd90      	pop	{r4, r7, pc}

0800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800c8b2:	b580      	push	{r7, lr}
 800c8b4:	b084      	sub	sp, #16
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	ed87 0a03 	vstr	s0, [r7, #12]
 800c8bc:	edc7 0a02 	vstr	s1, [r7, #8]
 800c8c0:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800c8c4:	f107 0208 	add.w	r2, r7, #8
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7f8 fb0f 	bl	8004ef2 <_ZSt3maxIfERKT_S2_S2_>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	1d3b      	adds	r3, r7, #4
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7f8 faf0 	bl	8004ec0 <_ZSt3minIfERKT_S2_S2_>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	ee07 3a90 	vmov	s15, r3
}
 800c8e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>:
  int32_t output_multiplier_identity;
  int32_t output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
 800c8f2:	b480      	push	{r7}
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	ed87 0a03 	vstr	s0, [r7, #12]
 800c8fc:	edc7 0a02 	vstr	s1, [r7, #8]
 800c900:	6078      	str	r0, [r7, #4]
  params->float_activation_min = min;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	635a      	str	r2, [r3, #52]	; 0x34
  params->float_activation_max = max;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c90e:	bf00      	nop
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>:

template <typename P>
inline void SetActivationParams(int32_t min, int32_t max, P* params) {
 800c91a:	b480      	push	{r7}
 800c91c:	b085      	sub	sp, #20
 800c91e:	af00      	add	r7, sp, #0
 800c920:	60f8      	str	r0, [r7, #12]
 800c922:	60b9      	str	r1, [r7, #8]
 800c924:	607a      	str	r2, [r7, #4]
  params->quantized_activation_min = min;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68fa      	ldr	r2, [r7, #12]
 800c92a:	62da      	str	r2, [r3, #44]	; 0x2c
  params->quantized_activation_max = max;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c932:	bf00      	nop
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800c93e:	b480      	push	{r7}
 800c940:	b083      	sub	sp, #12
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d002      	beq.n	800c952 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800c950:	e000      	b.n	800c954 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	370c      	adds	r7, #12
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d103      	bne.n	800c980 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7f9 f920 	bl	8005bbe <_ZN6tflite12RuntimeShapeC1Ev>
 800c97e:	e00d      	b.n	800c99c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	3304      	adds	r3, #4
 800c990:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	6939      	ldr	r1, [r7, #16]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f7f9 f91f 	bl	8005bda <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding>:

PaddingType RuntimePaddingType(TfLitePadding padding) {
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d002      	beq.n	800c9ba <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x16>
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d002      	beq.n	800c9be <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1a>
 800c9b8:	e003      	b.n	800c9c2 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e002      	b.n	800c9c4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 800c9be:	2302      	movs	r3, #2
 800c9c0:	e000      	b.n	800c9c4 <_ZN6tflite5micro18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 800c9c2:	2300      	movs	r3, #0
  }
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	370c      	adds	r7, #12
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ce:	4770      	bx	lr

0800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>:
namespace tflite {

namespace reference_ops {

// TFLite Pad supports activation tensors with up to 4 dimensions.
constexpr int PadKernelMaxDimensionCount() { return 4; }
 800c9d0:	b480      	push	{r7}
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9de:	4770      	bx	lr

0800c9e0 <_ZN6tflite13reference_ops3PadIlEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKlS7_PS8_>:
// This version avoids conflicting template matching.
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32_t* input_data,
                const int32_t* pad_value_ptr, const RuntimeShape& output_shape,
                int32_t* output_data) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	9301      	str	r3, [sp, #4]
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	68b9      	ldr	r1, [r7, #8]
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 fd51 	bl	800d4a4 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
          output_data);
}
 800ca02:	bf00      	nop
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <_ZN6tflite16IsConstantTensorEPK12TfLiteTensor>:
inline bool IsConstantTensor(const TfLiteTensor* tensor) {
 800ca0a:	b480      	push	{r7}
 800ca0c:	b083      	sub	sp, #12
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
  return tensor->allocation_type == kTfLiteMmapRo;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	7d1b      	ldrb	r3, [r3, #20]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	bf0c      	ite	eq
 800ca1a:	2301      	moveq	r3, #1
 800ca1c:	2300      	movne	r3, #0
 800ca1e:	b2db      	uxtb	r3, r3
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	370c      	adds	r7, #12
 800ca24:	46bd      	mov	sp, r7
 800ca26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2a:	4770      	bx	lr

0800ca2c <_ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj>:
  int32_t output_zero_point;
};

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <_ZN6tflite3ops5micro3pad4InitEP13TfLiteContextPKcj+0x18>
 800ca40:	f015 f846 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	2130      	movs	r1, #48	; 0x30
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	4798      	blx	r3
 800ca4e:	4603      	mov	r3, r0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	b0a7      	sub	sp, #156	; 0x9c
 800ca5c:	af06      	add	r7, sp, #24
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d101      	bne.n	800ca6e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ca6a:	f015 f831 	bl	8021ad0 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	677b      	str	r3, [r7, #116]	; 0x74

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
 800ca74:	6838      	ldr	r0, [r7, #0]
 800ca76:	f7fe fe94 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d007      	beq.n	800ca90 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x38>
 800ca80:	6838      	ldr	r0, [r7, #0]
 800ca82:	f7fe fe8e 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	d001      	beq.n	800ca90 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x38>
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	e000      	b.n	800ca92 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 800ca90:	2300      	movs	r3, #0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00a      	beq.n	800caac <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x54>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	695c      	ldr	r4, [r3, #20]
 800ca9a:	4b9d      	ldr	r3, [pc, #628]	; (800cd10 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2b8>)
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	235f      	movs	r3, #95	; 0x5f
 800caa0:	4a9c      	ldr	r2, [pc, #624]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800caa2:	499d      	ldr	r1, [pc, #628]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	47a0      	blx	r4
 800caa8:	2301      	movs	r3, #1
 800caaa:	e2a1      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800caac:	6838      	ldr	r0, [r7, #0]
 800caae:	f7fe fe85 	bl	800b7bc <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	bf14      	ite	ne
 800cab8:	2301      	movne	r3, #1
 800caba:	2300      	moveq	r3, #0
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d013      	beq.n	800caea <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	695c      	ldr	r4, [r3, #20]
 800cac6:	6838      	ldr	r0, [r7, #0]
 800cac8:	f7fe fe78 	bl	800b7bc <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800cacc:	4603      	mov	r3, r0
 800cace:	2201      	movs	r2, #1
 800cad0:	9203      	str	r2, [sp, #12]
 800cad2:	9302      	str	r3, [sp, #8]
 800cad4:	4b91      	ldr	r3, [pc, #580]	; (800cd1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	4b91      	ldr	r3, [pc, #580]	; (800cd20 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	2360      	movs	r3, #96	; 0x60
 800cade:	4a8d      	ldr	r2, [pc, #564]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cae0:	4990      	ldr	r1, [pc, #576]	; (800cd24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	47a0      	blx	r4
 800cae6:	2301      	movs	r3, #1
 800cae8:	e282      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>

  const TfLiteTensor* input = GetInput(context, node, /*index=*/0);
 800caea:	2200      	movs	r2, #0
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7f8 fb45 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800caf4:	6738      	str	r0, [r7, #112]	; 0x70
  TF_LITE_ENSURE(context, input != nullptr);
 800caf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	695c      	ldr	r4, [r3, #20]
 800cb00:	4b89      	ldr	r3, [pc, #548]	; (800cd28 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	2363      	movs	r3, #99	; 0x63
 800cb06:	4a83      	ldr	r2, [pc, #524]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cb08:	4983      	ldr	r1, [pc, #524]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	47a0      	blx	r4
 800cb0e:	2301      	movs	r3, #1
 800cb10:	e26e      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
  const TfLiteTensor* paddings = GetInput(context, node, /*index=*/1);
 800cb12:	2201      	movs	r2, #1
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f7f8 fb31 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cb1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  TF_LITE_ENSURE(context, paddings != nullptr);
 800cb1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10a      	bne.n	800cb3a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xe2>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	695c      	ldr	r4, [r3, #20]
 800cb28:	4b80      	ldr	r3, [pc, #512]	; (800cd2c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800cb2a:	9300      	str	r3, [sp, #0]
 800cb2c:	2365      	movs	r3, #101	; 0x65
 800cb2e:	4a79      	ldr	r2, [pc, #484]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cb30:	4979      	ldr	r1, [pc, #484]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	47a0      	blx	r4
 800cb36:	2301      	movs	r3, #1
 800cb38:	e25a      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
  const TfLiteTensor* constant_values =
      NumInputs(node) == 3 ? GetInput(context, node, /*index=*/2) : nullptr;
 800cb3a:	6838      	ldr	r0, [r7, #0]
 800cb3c:	f7fe fe31 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d106      	bne.n	800cb54 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>
 800cb46:	2202      	movs	r2, #2
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7f8 fb17 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800cb50:	4603      	mov	r3, r0
 800cb52:	e000      	b.n	800cb56 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 800cb54:	2300      	movs	r3, #0
 800cb56:	66bb      	str	r3, [r7, #104]	; 0x68
  TfLiteTensor* output = GetOutput(context, node, /*index=*/0);
 800cb58:	2200      	movs	r2, #0
 800cb5a:	6839      	ldr	r1, [r7, #0]
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7f8 fb1e 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800cb62:	6678      	str	r0, [r7, #100]	; 0x64
  TF_LITE_ENSURE(context, output != nullptr);
 800cb64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10a      	bne.n	800cb80 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695c      	ldr	r4, [r3, #20]
 800cb6e:	4b70      	ldr	r3, [pc, #448]	; (800cd30 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800cb70:	9300      	str	r3, [sp, #0]
 800cb72:	2369      	movs	r3, #105	; 0x69
 800cb74:	4a67      	ldr	r2, [pc, #412]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cb76:	4968      	ldr	r1, [pc, #416]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	47a0      	blx	r4
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	e237      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>

  TF_LITE_ENSURE_EQ(context, input->type, output->type);
 800cb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb82:	781a      	ldrb	r2, [r3, #0]
 800cb84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d013      	beq.n	800cbb4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	695c      	ldr	r4, [r3, #20]
 800cb90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	9303      	str	r3, [sp, #12]
 800cb9c:	9202      	str	r2, [sp, #8]
 800cb9e:	4b65      	ldr	r3, [pc, #404]	; (800cd34 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	4b65      	ldr	r3, [pc, #404]	; (800cd38 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	236b      	movs	r3, #107	; 0x6b
 800cba8:	4a5a      	ldr	r2, [pc, #360]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cbaa:	495e      	ldr	r1, [pc, #376]	; (800cd24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	47a0      	blx	r4
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e21d      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(context, NumDimensions(input) <=
 800cbb4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800cbb6:	f7f8 fa0e 	bl	8004fd6 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800cbba:	4604      	mov	r4, r0
 800cbbc:	f7ff ff08 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	429c      	cmp	r4, r3
 800cbc4:	bfcc      	ite	gt
 800cbc6:	2301      	movgt	r3, #1
 800cbc8:	2300      	movle	r3, #0
 800cbca:	b2db      	uxtb	r3, r3
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00a      	beq.n	800cbe6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18e>
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	695c      	ldr	r4, [r3, #20]
 800cbd4:	4b59      	ldr	r3, [pc, #356]	; (800cd3c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800cbd6:	9300      	str	r3, [sp, #0]
 800cbd8:	236e      	movs	r3, #110	; 0x6e
 800cbda:	4a4e      	ldr	r2, [pc, #312]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cbdc:	494e      	ldr	r1, [pc, #312]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	47a0      	blx	r4
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e204      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                              reference_ops::PadKernelMaxDimensionCount());

  if (constant_values != nullptr) {
 800cbe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d03c      	beq.n	800cc66 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
 800cbec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbee:	781a      	ldrb	r2, [r3, #0]
 800cbf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d013      	beq.n	800cc20 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1c8>
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	695c      	ldr	r4, [r3, #20]
 800cbfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	9202      	str	r2, [sp, #8]
 800cc0a:	4b4d      	ldr	r3, [pc, #308]	; (800cd40 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	4b4a      	ldr	r3, [pc, #296]	; (800cd38 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	2372      	movs	r3, #114	; 0x72
 800cc14:	4a3f      	ldr	r2, [pc, #252]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cc16:	4943      	ldr	r1, [pc, #268]	; (800cd24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	47a0      	blx	r4
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	e1e7      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
    // Ensure that constant_values is a scalar.
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
 800cc20:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cc22:	f7f8 fa2c 	bl	800507e <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	bf0a      	itet	eq
 800cc2e:	2a01      	cmpeq	r2, #1
 800cc30:	2301      	movne	r3, #1
 800cc32:	2300      	moveq	r3, #0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d015      	beq.n	800cc66 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x20e>
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	695c      	ldr	r4, [r3, #20]
 800cc3e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cc40:	f7f8 fa1d 	bl	800507e <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	2101      	movs	r1, #1
 800cc4a:	9104      	str	r1, [sp, #16]
 800cc4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc50:	4b32      	ldr	r3, [pc, #200]	; (800cd1c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 800cc52:	9301      	str	r3, [sp, #4]
 800cc54:	4b3b      	ldr	r3, [pc, #236]	; (800cd44 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	2374      	movs	r3, #116	; 0x74
 800cc5a:	4a2e      	ldr	r2, [pc, #184]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cc5c:	4931      	ldr	r1, [pc, #196]	; (800cd24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	47a0      	blx	r4
 800cc62:	2301      	movs	r3, #1
 800cc64:	e1c4      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
  }

  // There must be a pair of paddings for each output dimension.
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
 800cc66:	f107 0308 	add.w	r3, r7, #8
 800cc6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7f9 f841 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7fd fd7c 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	005b      	lsls	r3, r3, #1
 800cc86:	429a      	cmp	r2, r3
 800cc88:	bf14      	ite	ne
 800cc8a:	2301      	movne	r3, #1
 800cc8c:	2300      	moveq	r3, #0
 800cc8e:	b2dc      	uxtb	r4, r3
 800cc90:	f107 0308 	add.w	r3, r7, #8
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7f8 ffb3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800cc9a:	2c00      	cmp	r4, #0
 800cc9c:	d023      	beq.n	800cce6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x28e>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	695c      	ldr	r4, [r3, #20]
 800cca2:	f107 0320 	add.w	r3, r7, #32
 800cca6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f9 f823 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ccae:	f107 0320 	add.w	r3, r7, #32
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fd fd5e 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	005b      	lsls	r3, r3, #1
 800ccc2:	9303      	str	r3, [sp, #12]
 800ccc4:	9202      	str	r2, [sp, #8]
 800ccc6:	4b20      	ldr	r3, [pc, #128]	; (800cd48 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	4b20      	ldr	r3, [pc, #128]	; (800cd4c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	2378      	movs	r3, #120	; 0x78
 800ccd0:	4a10      	ldr	r2, [pc, #64]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800ccd2:	4914      	ldr	r1, [pc, #80]	; (800cd24 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	47a0      	blx	r4
 800ccd8:	f107 0320 	add.w	r3, r7, #32
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f7f8 ff8f 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800cce2:	2301      	movs	r3, #1
 800cce4:	e184      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                    output->dims->size * 2);

  // On Micro, outputs must be properly sized by the converter.
  // NOTE: This data is only available because the paddings buffer is stored in
  // the flatbuffer:
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
 800cce6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cce8:	f7ff fe8f 	bl	800ca0a <_ZN6tflite16IsConstantTensorEPK12TfLiteTensor>
 800ccec:	4603      	mov	r3, r0
 800ccee:	f083 0301 	eor.w	r3, r3, #1
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d02d      	beq.n	800cd54 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	695c      	ldr	r4, [r3, #20]
 800ccfc:	4b14      	ldr	r3, [pc, #80]	; (800cd50 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	237e      	movs	r3, #126	; 0x7e
 800cd02:	4a04      	ldr	r2, [pc, #16]	; (800cd14 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2bc>)
 800cd04:	4904      	ldr	r1, [pc, #16]	; (800cd18 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2c0>)
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	47a0      	blx	r4
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e170      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
 800cd0e:	bf00      	nop
 800cd10:	080275d8 	.word	0x080275d8
 800cd14:	0802758c 	.word	0x0802758c
 800cd18:	080275c0 	.word	0x080275c0
 800cd1c:	08027624 	.word	0x08027624
 800cd20:	08027628 	.word	0x08027628
 800cd24:	08027608 	.word	0x08027608
 800cd28:	0802763c 	.word	0x0802763c
 800cd2c:	08027650 	.word	0x08027650
 800cd30:	08027664 	.word	0x08027664
 800cd34:	08027678 	.word	0x08027678
 800cd38:	08027688 	.word	0x08027688
 800cd3c:	08027694 	.word	0x08027694
 800cd40:	080276d8 	.word	0x080276d8
 800cd44:	080276f0 	.word	0x080276f0
 800cd48:	08027710 	.word	0x08027710
 800cd4c:	08027728 	.word	0x08027728
 800cd50:	0802774c 	.word	0x0802774c
  const int32_t* paddings_data = GetTensorData<int32_t>(paddings);
 800cd54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cd56:	f7ff fdf2 	bl	800c93e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800cd5a:	6638      	str	r0, [r7, #96]	; 0x60
  for (int i = 0; i < output->dims->size; i++) {
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cd60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd62:	689b      	ldr	r3, [r3, #8]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	da33      	bge.n	800cdd4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x37c>
    int output_dim = output->dims->data[i];
 800cd6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	65fb      	str	r3, [r7, #92]	; 0x5c
    int expected_dim =
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
 800cd7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd7c:	689a      	ldr	r2, [r3, #8]
 800cd7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	685a      	ldr	r2, [r3, #4]
 800cd86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd8c:	440b      	add	r3, r1
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	441a      	add	r2, r3
 800cd92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	3304      	adds	r3, #4
 800cd98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800cd9a:	440b      	add	r3, r1
 800cd9c:	681b      	ldr	r3, [r3, #0]
    int expected_dim =
 800cd9e:	4413      	add	r3, r2
 800cda0:	65bb      	str	r3, [r7, #88]	; 0x58
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
 800cda2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d010      	beq.n	800cdcc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x374>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	695c      	ldr	r4, [r3, #20]
 800cdae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdb0:	9303      	str	r3, [sp, #12]
 800cdb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdb4:	9302      	str	r3, [sp, #8]
 800cdb6:	4b90      	ldr	r3, [pc, #576]	; (800cff8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a0>)
 800cdb8:	9301      	str	r3, [sp, #4]
 800cdba:	4b90      	ldr	r3, [pc, #576]	; (800cffc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a4>)
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	2384      	movs	r3, #132	; 0x84
 800cdc0:	4a8f      	ldr	r2, [pc, #572]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cdc2:	4990      	ldr	r1, [pc, #576]	; (800d004 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5ac>)
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	47a0      	blx	r4
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e111      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
  for (int i = 0; i < output->dims->size; i++) {
 800cdcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800cdce:	3301      	adds	r3, #1
 800cdd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cdd2:	e7c5      	b.n	800cd60 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x308>
  }

  // Calculate OpData:
  data->params.resizing_category = ResizingCategory::kGenericResize;
 800cdd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdd6:	2202      	movs	r2, #2
 800cdd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  const int paddings_total = GetTensorShape(paddings).FlatSize();
 800cddc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cde0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f8 ff86 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800cde8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fd fcc1 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800cdf2:	6578      	str	r0, [r7, #84]	; 0x54
 800cdf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f8 ff01 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
 800cdfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce00:	2b08      	cmp	r3, #8
 800ce02:	d116      	bne.n	800ce32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3da>
 800ce04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d112      	bne.n	800ce32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3da>
 800ce0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce0e:	3304      	adds	r3, #4
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d10d      	bne.n	800ce32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3da>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
 800ce16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce18:	3318      	adds	r3, #24
 800ce1a:	681b      	ldr	r3, [r3, #0]
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d108      	bne.n	800ce32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3da>
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
 800ce20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce22:	331c      	adds	r3, #28
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d103      	bne.n	800ce32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3da>
    data->params.resizing_category = ResizingCategory::kImageStyle;
 800ce2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }

  const int num_input_dimensions = NumDimensions(input);
 800ce32:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800ce34:	f7f8 f8cf 	bl	8004fd6 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800ce38:	6538      	str	r0, [r7, #80]	; 0x50
  data->params.left_padding_count = num_input_dimensions;
 800ce3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce3c:	b25a      	sxtb	r2, r3
 800ce3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce40:	701a      	strb	r2, [r3, #0]
  data->params.right_padding_count = num_input_dimensions;
 800ce42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce44:	b25a      	sxtb	r2, r3
 800ce46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce48:	751a      	strb	r2, [r3, #20]

  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 800ce4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	db18      	blt.n	800ce88 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x430>
    data->params.left_padding[idx] = paddings_data[idx * 2];
 800ce56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce5c:	4413      	add	r3, r2
 800ce5e:	681a      	ldr	r2, [r3, #0]
 800ce60:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ce62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	440b      	add	r3, r1
 800ce68:	605a      	str	r2, [r3, #4]
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
 800ce6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	3304      	adds	r3, #4
 800ce70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ce72:	4413      	add	r3, r2
 800ce74:	6819      	ldr	r1, [r3, #0]
 800ce76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ce7a:	3206      	adds	r2, #6
 800ce7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
 800ce80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce82:	3b01      	subs	r3, #1
 800ce84:	67bb      	str	r3, [r7, #120]	; 0x78
 800ce86:	e7e3      	b.n	800ce50 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x3f8>
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 800ce88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b09      	cmp	r3, #9
 800ce8e:	d004      	beq.n	800ce9a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x442>
 800ce90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b03      	cmp	r3, #3
 800ce96:	f040 80aa 	bne.w	800cfee <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x596>
    if (constant_values == nullptr) {
 800ce9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d15f      	bne.n	800cf60 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x508>
      // Quantized Pad requires that 0 is represented in the quantized
      // range.
      if (input->type == kTfLiteUInt8) {
 800cea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	d12d      	bne.n	800cf04 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4ac>
        TF_LITE_ENSURE(context, output->params.zero_point >=
 800cea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ceaa:	691c      	ldr	r4, [r3, #16]
 800ceac:	f7f8 f86f 	bl	8004f8e <_ZNSt14numeric_limitsIhE3minEv>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	429c      	cmp	r4, r3
 800ceb4:	bfb4      	ite	lt
 800ceb6:	2301      	movlt	r3, #1
 800ceb8:	2300      	movge	r3, #0
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00a      	beq.n	800ced6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x47e>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	695c      	ldr	r4, [r3, #20]
 800cec4:	4b50      	ldr	r3, [pc, #320]	; (800d008 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b0>)
 800cec6:	9300      	str	r3, [sp, #0]
 800cec8:	239d      	movs	r3, #157	; 0x9d
 800ceca:	4a4d      	ldr	r2, [pc, #308]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cecc:	494f      	ldr	r1, [pc, #316]	; (800d00c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	47a0      	blx	r4
 800ced2:	2301      	movs	r3, #1
 800ced4:	e08c      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                                    std::numeric_limits<uint8_t>::min());
        TF_LITE_ENSURE(context, output->params.zero_point <=
 800ced6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ced8:	691c      	ldr	r4, [r3, #16]
 800ceda:	f7f8 f860 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800cede:	4603      	mov	r3, r0
 800cee0:	429c      	cmp	r4, r3
 800cee2:	bfcc      	ite	gt
 800cee4:	2301      	movgt	r3, #1
 800cee6:	2300      	movle	r3, #0
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d07b      	beq.n	800cfe6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x58e>
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	695c      	ldr	r4, [r3, #20]
 800cef2:	4b47      	ldr	r3, [pc, #284]	; (800d010 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b8>)
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	239f      	movs	r3, #159	; 0x9f
 800cef8:	4a41      	ldr	r2, [pc, #260]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cefa:	4944      	ldr	r1, [pc, #272]	; (800d00c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	47a0      	blx	r4
 800cf00:	2301      	movs	r3, #1
 800cf02:	e075      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                                    std::numeric_limits<uint8_t>::max());
      } else {
        TF_LITE_ENSURE(context, output->params.zero_point >=
 800cf04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf06:	691c      	ldr	r4, [r3, #16]
 800cf08:	f7f8 f830 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	429c      	cmp	r4, r3
 800cf10:	bfb4      	ite	lt
 800cf12:	2301      	movlt	r3, #1
 800cf14:	2300      	movge	r3, #0
 800cf16:	b2db      	uxtb	r3, r3
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4da>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	695c      	ldr	r4, [r3, #20]
 800cf20:	4b3c      	ldr	r3, [pc, #240]	; (800d014 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5bc>)
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	23a2      	movs	r3, #162	; 0xa2
 800cf26:	4a36      	ldr	r2, [pc, #216]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cf28:	4938      	ldr	r1, [pc, #224]	; (800d00c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	47a0      	blx	r4
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e05e      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                                    std::numeric_limits<int8_t>::min());
        TF_LITE_ENSURE(context, output->params.zero_point <=
 800cf32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf34:	691c      	ldr	r4, [r3, #16]
 800cf36:	f7f8 f822 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	bfcc      	ite	gt
 800cf40:	2301      	movgt	r3, #1
 800cf42:	2300      	movle	r3, #0
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d04d      	beq.n	800cfe6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x58e>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	695c      	ldr	r4, [r3, #20]
 800cf4e:	4b32      	ldr	r3, [pc, #200]	; (800d018 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5c0>)
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	23a4      	movs	r3, #164	; 0xa4
 800cf54:	4a2a      	ldr	r2, [pc, #168]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cf56:	492d      	ldr	r1, [pc, #180]	; (800d00c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5b4>)
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	47a0      	blx	r4
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e047      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                                    std::numeric_limits<int8_t>::max());
      }
    } else {
      // Quantized Pad requires that 'constant_values' is represented in the
      // same quantized range as the input and output tensors.
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
 800cf60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf62:	691a      	ldr	r2, [r3, #16]
 800cf64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d012      	beq.n	800cf92 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x53a>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	695c      	ldr	r4, [r3, #20]
 800cf70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf76:	6912      	ldr	r2, [r2, #16]
 800cf78:	9203      	str	r2, [sp, #12]
 800cf7a:	9302      	str	r3, [sp, #8]
 800cf7c:	4b27      	ldr	r3, [pc, #156]	; (800d01c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5c4>)
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	4b27      	ldr	r3, [pc, #156]	; (800d020 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5c8>)
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	23aa      	movs	r3, #170	; 0xaa
 800cf86:	4a1e      	ldr	r2, [pc, #120]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cf88:	491e      	ldr	r1, [pc, #120]	; (800d004 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5ac>)
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	47a0      	blx	r4
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e02e      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                        constant_values->params.zero_point);
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
 800cf92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf94:	ed93 7a03 	vldr	s14, [r3, #12]
 800cf98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cf9a:	edd3 7a03 	vldr	s15, [r3, #12]
 800cf9e:	eeb4 7a67 	vcmp.f32	s14, s15
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	d01e      	beq.n	800cfe6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x58e>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	695e      	ldr	r6, [r3, #20]
 800cfac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7f3 fae3 	bl	800057c <__aeabi_f2d>
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	460d      	mov	r5, r1
 800cfba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7f3 fadc 	bl	800057c <__aeabi_f2d>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	460b      	mov	r3, r1
 800cfc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cfcc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cfd0:	4b14      	ldr	r3, [pc, #80]	; (800d024 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5cc>)
 800cfd2:	9301      	str	r3, [sp, #4]
 800cfd4:	4b14      	ldr	r3, [pc, #80]	; (800d028 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5d0>)
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	23ac      	movs	r3, #172	; 0xac
 800cfda:	4a09      	ldr	r2, [pc, #36]	; (800d000 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5a8>)
 800cfdc:	4909      	ldr	r1, [pc, #36]	; (800d004 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x5ac>)
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	47b0      	blx	r6
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e004      	b.n	800cff0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x598>
                        static_cast<double>(constant_values->params.scale));
    }
    data->output_zero_point = output->params.zero_point;
 800cfe6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfe8:	691a      	ldr	r2, [r3, #16]
 800cfea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  return kTfLiteOk;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3784      	adds	r7, #132	; 0x84
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff8:	08027768 	.word	0x08027768
 800cffc:	08027778 	.word	0x08027778
 800d000:	0802758c 	.word	0x0802758c
 800d004:	08027608 	.word	0x08027608
 800d008:	08027784 	.word	0x08027784
 800d00c:	080275c0 	.word	0x080275c0
 800d010:	080277c8 	.word	0x080277c8
 800d014:	0802780c 	.word	0x0802780c
 800d018:	0802784c 	.word	0x0802784c
 800d01c:	0802788c 	.word	0x0802788c
 800d020:	080278b0 	.word	0x080278b0
 800d024:	080278cc 	.word	0x080278cc
 800d028:	08027900 	.word	0x08027900

0800d02c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800d02c:	b5b0      	push	{r4, r5, r7, lr}
 800d02e:	b0e0      	sub	sp, #384	; 0x180
 800d030:	af02      	add	r7, sp, #8
 800d032:	1d3b      	adds	r3, r7, #4
 800d034:	6018      	str	r0, [r3, #0]
 800d036:	463b      	mov	r3, r7
 800d038:	6019      	str	r1, [r3, #0]
	TFLITE_DCHECK(node->user_data != nullptr);
 800d03a:	463b      	mov	r3, r7
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d101      	bne.n	800d048 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
 800d044:	f014 fd44 	bl	8021ad0 <abort>
	#ifdef OVERLAY_FW
	OpData* data = static_cast<OpData*>(node->user_data);
	#else
	const OpData* data = static_cast<const OpData*>(node->user_data);
 800d048:	463b      	mov	r3, r7
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	#endif

	const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, /*index=*/0);
 800d052:	4639      	mov	r1, r7
 800d054:	1d3b      	adds	r3, r7, #4
 800d056:	2200      	movs	r2, #0
 800d058:	6809      	ldr	r1, [r1, #0]
 800d05a:	6818      	ldr	r0, [r3, #0]
 800d05c:	f7fd fc26 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d060:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
	const TfLiteEvalTensor* constant_values = NumInputs(node) == 3 ? tflite::micro::GetEvalInput(context, node, /*index=*/2) : nullptr;
 800d064:	463b      	mov	r3, r7
 800d066:	6818      	ldr	r0, [r3, #0]
 800d068:	f7fe fb9b 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b03      	cmp	r3, #3
 800d070:	d108      	bne.n	800d084 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 800d072:	4639      	mov	r1, r7
 800d074:	1d3b      	adds	r3, r7, #4
 800d076:	2202      	movs	r2, #2
 800d078:	6809      	ldr	r1, [r1, #0]
 800d07a:	6818      	ldr	r0, [r3, #0]
 800d07c:	f7fd fc16 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800d080:	4603      	mov	r3, r0
 800d082:	e000      	b.n	800d086 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
 800d084:	2300      	movs	r3, #0
 800d086:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, /*index=*/0);
 800d08a:	4639      	mov	r1, r7
 800d08c:	1d3b      	adds	r3, r7, #4
 800d08e:	2200      	movs	r2, #0
 800d090:	6809      	ldr	r1, [r1, #0]
 800d092:	6818      	ldr	r0, [r3, #0]
 800d094:	f7fd fc1a 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800d098:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
//		if ( next_op_filterTensorSize < TENSOR_BUFFER_SIZE )
//			DMA_CopyTensor(&DMAQue[1], next_op_filter, &oc_input2_tensors[0]);
//	}
//
	#else
	switch (input->type) {
 800d09c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d0a0:	7a1b      	ldrb	r3, [r3, #8]
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	2b08      	cmp	r3, #8
 800d0a6:	f200 81cf 	bhi.w	800d448 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x41c>
 800d0aa:	a201      	add	r2, pc, #4	; (adr r2, 800d0b0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x84>)
 800d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b0:	0800d0d5 	.word	0x0800d0d5
 800d0b4:	0800d3c7 	.word	0x0800d3c7
 800d0b8:	0800d1c9 	.word	0x0800d1c9
 800d0bc:	0800d449 	.word	0x0800d449
 800d0c0:	0800d449 	.word	0x0800d449
 800d0c4:	0800d449 	.word	0x0800d449
 800d0c8:	0800d449 	.word	0x0800d449
 800d0cc:	0800d449 	.word	0x0800d449
 800d0d0:	0800d2c7 	.word	0x0800d2c7
	case kTfLiteFloat32: {
	  float pad_value =
		  constant_values == nullptr
			  ? 0.f
 800d0d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d006      	beq.n	800d0ea <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
			  : *tflite::micro::GetTensorData<float>(constant_values);
 800d0dc:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800d0e0:	f7fe f8d8 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d0e4:	4603      	mov	r3, r0
			  ? 0.f
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	e001      	b.n	800d0ee <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xc2>
 800d0ea:	f04f 0300 	mov.w	r3, #0
			  : *tflite::micro::GetTensorData<float>(constant_values);
 800d0ee:	f107 0214 	add.w	r2, r7, #20
 800d0f2:	6013      	str	r3, [r2, #0]
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
 800d0f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d131      	bne.n	800d164 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x138>
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
 800d100:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d104:	f107 0318 	add.w	r3, r7, #24
 800d108:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff fc27 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d112:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d116:	f7fe f8bd 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d11a:	4605      	mov	r5, r0
			tflite::micro::GetTensorData<float>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
 800d11c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d120:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d124:	4618      	mov	r0, r3
 800d126:	f7ff fc1b 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d12a:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d12e:	f7fe f8c0 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800d132:	4603      	mov	r3, r0
 800d134:	f107 0214 	add.w	r2, r7, #20
 800d138:	f107 0118 	add.w	r1, r7, #24
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d142:	9300      	str	r3, [sp, #0]
 800d144:	4613      	mov	r3, r2
 800d146:	462a      	mov	r2, r5
 800d148:	4620      	mov	r0, r4
 800d14a:	f000 fb35 	bl	800d7b8 <_ZN6tflite13reference_ops13PadImageStyleIfEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKfPKT_S7_Pf>
			tflite::micro::GetTensorShape(output),
 800d14e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d152:	4618      	mov	r0, r3
 800d154:	f7f8 fd54 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			data->params, tflite::micro::GetTensorShape(input),
 800d158:	f107 0318 	add.w	r3, r7, #24
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7f8 fd4f 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<float>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<float>(output));
	  }
	} break;
 800d162:	e181      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d164:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d16c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff fbf5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d176:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d17a:	f7fe f88b 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800d17e:	4605      	mov	r5, r0
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d180:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d184:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fbe9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d18e:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d192:	f7fe f88e 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800d196:	4603      	mov	r3, r0
 800d198:	f107 0214 	add.w	r2, r7, #20
 800d19c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d1a6:	9300      	str	r3, [sp, #0]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	462a      	mov	r2, r5
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f000 fb18 	bl	800d7e2 <_ZN6tflite13reference_ops3PadIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d1b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7f8 fd22 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d1bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7f8 fd1d 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
	} break;
 800d1c6:	e14f      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
	case kTfLiteUInt8: {
	  uint8_t pad_value;
	  if (constant_values == nullptr) {
 800d1c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d107      	bne.n	800d1e0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
		pad_value = static_cast<uint8_t>(data->output_zero_point);
 800d1d0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d6:	b2da      	uxtb	r2, r3
 800d1d8:	f107 0313 	add.w	r3, r7, #19
 800d1dc:	701a      	strb	r2, [r3, #0]
 800d1de:	e008      	b.n	800d1f2 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
	  } else {
		pad_value = *tflite::micro::GetTensorData<uint8_t>(constant_values);
 800d1e0:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800d1e4:	f7fe f8e2 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	f107 0313 	add.w	r3, r7, #19
 800d1f0:	701a      	strb	r2, [r3, #0]
	  }
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
 800d1f2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d1f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d131      	bne.n	800d262 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x236>
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
 800d1fe:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d202:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d206:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7ff fba8 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d210:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d214:	f7fe f8ca 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800d218:	4605      	mov	r5, r0
			tflite::micro::GetTensorData<uint8_t>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
 800d21a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d21e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fb9c 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d228:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d22c:	f7fe f8cd 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800d230:	4603      	mov	r3, r0
 800d232:	f107 0213 	add.w	r2, r7, #19
 800d236:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800d23a:	9301      	str	r3, [sp, #4]
 800d23c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	4613      	mov	r3, r2
 800d244:	462a      	mov	r2, r5
 800d246:	4620      	mov	r0, r4
 800d248:	f000 fae0 	bl	800d80c <_ZN6tflite13reference_ops13PadImageStyleIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
			tflite::micro::GetTensorShape(output),
 800d24c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800d250:	4618      	mov	r0, r3
 800d252:	f7f8 fcd5 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			data->params, tflite::micro::GetTensorShape(input),
 800d256:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f8 fcd0 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<uint8_t>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<uint8_t>(output));
	  }
	} break;
 800d260:	e102      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d262:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d266:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d26a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fb76 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d274:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d278:	f7fe f898 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800d27c:	4605      	mov	r5, r0
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d27e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d282:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff fb6a 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d28c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d290:	f7fe f89b 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800d294:	4603      	mov	r3, r0
 800d296:	f107 0213 	add.w	r2, r7, #19
 800d29a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 800d29e:	9301      	str	r3, [sp, #4]
 800d2a0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d2a4:	9300      	str	r3, [sp, #0]
 800d2a6:	4613      	mov	r3, r2
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fac3 	bl	800d836 <_ZN6tflite13reference_ops3PadIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d2b0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7f8 fca3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d2ba:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7f8 fc9e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
	} break;
 800d2c4:	e0d0      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
	case kTfLiteInt8: {
	  int8_t pad_value;
	  if (constant_values == nullptr) {
 800d2c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2b2>
		pad_value = static_cast<uint8_t>(data->output_zero_point);
 800d2ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d4:	b25a      	sxtb	r2, r3
 800d2d6:	f107 0312 	add.w	r3, r7, #18
 800d2da:	701a      	strb	r2, [r3, #0]
 800d2dc:	e009      	b.n	800d2f2 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2c6>
	  } else {
		pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
 800d2de:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800d2e2:	f7fd fff7 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	f993 2000 	ldrsb.w	r2, [r3]
 800d2ec:	f107 0312 	add.w	r3, r7, #18
 800d2f0:	701a      	strb	r2, [r3, #0]
	  }
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
 800d2f2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800d2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d131      	bne.n	800d362 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x336>
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
 800d2fe:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d302:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d306:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff fb28 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d310:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d314:	f7fd ffde 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d318:	4605      	mov	r5, r0
			tflite::micro::GetTensorData<int8_t>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
 800d31a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800d31e:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fb1c 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::PadImageStyle(
 800d328:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d32c:	f7fd ffe1 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d330:	4603      	mov	r3, r0
 800d332:	f107 0212 	add.w	r2, r7, #18
 800d336:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800d33a:	9301      	str	r3, [sp, #4]
 800d33c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	4613      	mov	r3, r2
 800d344:	462a      	mov	r2, r5
 800d346:	4620      	mov	r0, r4
 800d348:	f000 fa8a 	bl	800d860 <_ZN6tflite13reference_ops13PadImageStyleIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
			tflite::micro::GetTensorShape(output),
 800d34c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800d350:	4618      	mov	r0, r3
 800d352:	f7f8 fc55 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			data->params, tflite::micro::GetTensorShape(input),
 800d356:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f8 fc50 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<int8_t>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<int8_t>(output));
	  }
	} break;
 800d360:	e082      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d362:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d36a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff faf6 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d374:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d378:	f7fd ffac 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800d37c:	4605      	mov	r5, r0
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d37e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d382:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff faea 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d38c:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d390:	f7fd ffaf 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800d394:	4603      	mov	r3, r0
 800d396:	f107 0212 	add.w	r2, r7, #18
 800d39a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800d39e:	9301      	str	r3, [sp, #4]
 800d3a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d3a4:	9300      	str	r3, [sp, #0]
 800d3a6:	4613      	mov	r3, r2
 800d3a8:	462a      	mov	r2, r5
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 fa6d 	bl	800d88a <_ZN6tflite13reference_ops3PadIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
						   &pad_value, tflite::micro::GetTensorShape(output),
 800d3b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7f8 fc23 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f8 fc1e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
	} break;
 800d3c4:	e050      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
	case kTfLiteInt32: {
	  int32_t pad_value =
		  constant_values == nullptr
			  ? 0
 800d3c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d006      	beq.n	800d3dc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x3b0>
			  : *tflite::micro::GetTensorData<int32_t>(constant_values);
 800d3ce:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 800d3d2:	f7fe fa00 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800d3d6:	4603      	mov	r3, r0
			  ? 0
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	e000      	b.n	800d3de <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
 800d3dc:	2300      	movs	r3, #0
			  : *tflite::micro::GetTensorData<int32_t>(constant_values);
 800d3de:	f107 020c 	add.w	r2, r7, #12
 800d3e2:	6013      	str	r3, [r2, #0]
	  reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d3e4:	f8d7 4174 	ldr.w	r4, [r7, #372]	; 0x174
 800d3e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d3ec:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7ff fab5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800d3f6:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 800d3fa:	f7fe f9ec 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800d3fe:	4605      	mov	r5, r0
						 tflite::micro::GetTensorData<int32_t>(input),
						 &pad_value, tflite::micro::GetTensorShape(output),
 800d400:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800d404:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff faa9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
	  reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d40e:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 800d412:	f7fe f9ef 	bl	800b7f4 <_ZN6tflite5micro13GetTensorDataIlEEPT_P16TfLiteEvalTensor>
 800d416:	4603      	mov	r3, r0
 800d418:	f107 020c 	add.w	r2, r7, #12
 800d41c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4613      	mov	r3, r2
 800d42a:	462a      	mov	r2, r5
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7ff fad7 	bl	800c9e0 <_ZN6tflite13reference_ops3PadIlEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKlS7_PS8_>
						 &pad_value, tflite::micro::GetTensorShape(output),
 800d432:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800d436:	4618      	mov	r0, r3
 800d438:	f7f8 fbe2 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
	  reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
 800d43c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800d440:	4618      	mov	r0, r3
 800d442:	f7f8 fbdd 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
						 tflite::micro::GetTensorData<int32_t>(output));
	} break;
 800d446:	e00f      	b.n	800d468 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43c>
	default:

	  TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
 800d448:	1d3b      	adds	r3, r7, #4
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	695c      	ldr	r4, [r3, #20]
 800d44e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800d452:	7a1b      	ldrb	r3, [r3, #8]
 800d454:	4618      	mov	r0, r3
 800d456:	f7f5 f8e9 	bl	800262c <TfLiteTypeGetName>
 800d45a:	4602      	mov	r2, r0
 800d45c:	1d3b      	adds	r3, r7, #4
 800d45e:	4905      	ldr	r1, [pc, #20]	; (800d474 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x448>)
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	47a0      	blx	r4
						 TfLiteTypeGetName(input->type));
	  return kTfLiteError;
 800d464:	2301      	movs	r3, #1
 800d466:	e000      	b.n	800d46a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x43e>
	}
	#endif
	#undef TF_LITE_PAD
	return kTfLiteOk;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800d470:	46bd      	mov	sp, r7
 800d472:	bdb0      	pop	{r4, r5, r7, pc}
 800d474:	0802792c 	.word	0x0802792c

0800d478 <_ZN6tflite3ops5micro12Register_PADEv>:

}  // namespace pad

TfLiteRegistration Register_PAD() {
 800d478:	b4b0      	push	{r4, r5, r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a07      	ldr	r2, [pc, #28]	; (800d4a0 <_ZN6tflite3ops5micro12Register_PADEv+0x28>)
 800d484:	461c      	mov	r4, r3
 800d486:	4615      	mov	r5, r2
 800d488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d48a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d48c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	bcb0      	pop	{r4, r5, r7}
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	08027954 	.word	0x08027954

0800d4a4 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 800d4a4:	b590      	push	{r4, r7, lr}
 800d4a6:	b0b1      	sub	sp, #196	; 0xc4
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
 800d4b0:	603b      	str	r3, [r7, #0]
  const RuntimeShape ext_input_shape =
 800d4b2:	f7ff fa8d 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7fe fa56 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape ext_output_shape =
 800d4c4:	f7ff fa84 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d4c8:	4601      	mov	r1, r0
 800d4ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d4ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fa4c 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f993 3000 	ldrsb.w	r3, [r3]
 800d4de:	461c      	mov	r4, r3
 800d4e0:	f7ff fa76 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	429c      	cmp	r4, r3
 800d4e8:	dd01      	ble.n	800d4ee <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4a>
 800d4ea:	f014 faf1 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d4f4:	461c      	mov	r4, r3
 800d4f6:	f7ff fa6b 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	dd01      	ble.n	800d504 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x60>
 800d500:	f014 fae6 	bl	8021ad0 <abort>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d504:	2300      	movs	r3, #0
 800d506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d50a:	f7ff fa61 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d50e:	4602      	mov	r2, r0
 800d510:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d514:	4293      	cmp	r3, r2
 800d516:	bfb4      	ite	lt
 800d518:	2301      	movlt	r3, #1
 800d51a:	2300      	movge	r3, #0
 800d51c:	b2db      	uxtb	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00e      	beq.n	800d540 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x9c>
    left_padding_copy[i] = 0;
 800d522:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d52c:	4413      	add	r3, r2
 800d52e:	2200      	movs	r2, #0
 800d530:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d534:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d538:	3301      	adds	r3, #1
 800d53a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d53e:	e7e4      	b.n	800d50a <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800d540:	2300      	movs	r3, #0
 800d542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f993 3000 	ldrsb.w	r3, [r3]
 800d54c:	461a      	mov	r2, r3
 800d54e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d552:	4293      	cmp	r3, r2
 800d554:	da1b      	bge.n	800d58e <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d556:	f7ff fa3b 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d55a:	4602      	mov	r2, r0
 800d55c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d560:	4413      	add	r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800d562:	68fa      	ldr	r2, [r7, #12]
 800d564:	f992 2000 	ldrsb.w	r2, [r2]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d568:	1a99      	subs	r1, r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d570:	009b      	lsls	r3, r3, #2
 800d572:	4413      	add	r3, r2
 800d574:	685a      	ldr	r2, [r3, #4]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d576:	008b      	lsls	r3, r1, #2
 800d578:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800d57c:	440b      	add	r3, r1
 800d57e:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800d582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d586:	3301      	adds	r3, #1
 800d588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d58c:	e7db      	b.n	800d546 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xa2>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d58e:	2300      	movs	r3, #0
 800d590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d594:	f7ff fa1c 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d598:	4602      	mov	r2, r0
 800d59a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	bfb4      	ite	lt
 800d5a2:	2301      	movlt	r3, #1
 800d5a4:	2300      	movge	r3, #0
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00e      	beq.n	800d5ca <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
    right_padding_copy[i] = 0;
 800d5ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d5b6:	4413      	add	r3, r2
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d5be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d5c8:	e7e4      	b.n	800d594 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	da1b      	bge.n	800d618 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x174>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800d5e0:	f7ff f9f6 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d5ea:	4413      	add	r3, r2
                       op_params.right_padding_count] =
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	f992 2014 	ldrsb.w	r2, [r2, #20]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800d5f2:	1a9b      	subs	r3, r3, r2
                       op_params.right_padding_count] =
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800d5fa:	3106      	adds	r1, #6
 800d5fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800d606:	440b      	add	r3, r1
 800d608:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800d60c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d610:	3301      	adds	r3, #1
 800d612:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d616:	e7db      	b.n	800d5d0 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12c>
  const int output_batch = ext_output_shape.Dims(0);
 800d618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d61c:	2100      	movs	r1, #0
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd f870 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d624:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  const int output_height = ext_output_shape.Dims(1);
 800d628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d62c:	2101      	movs	r1, #1
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd f868 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d634:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  const int output_width = ext_output_shape.Dims(2);
 800d638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d63c:	2102      	movs	r1, #2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fd f860 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d644:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  const int output_depth = ext_output_shape.Dims(3);
 800d648:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d64c:	2103      	movs	r1, #3
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fd f858 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800d654:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  const int left_b_padding = left_padding_copy[0];
 800d658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int left_h_padding = left_padding_copy[1];
 800d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int left_w_padding = left_padding_copy[2];
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int left_d_padding = left_padding_copy[3];
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	67bb      	str	r3, [r7, #120]	; 0x78
  const int right_b_padding = right_padding_copy[0];
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	677b      	str	r3, [r7, #116]	; 0x74
  const int right_h_padding = right_padding_copy[1];
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	673b      	str	r3, [r7, #112]	; 0x70
  const int right_w_padding = right_padding_copy[2];
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int right_d_padding = right_padding_copy[3];
 800d678:	6a3b      	ldr	r3, [r7, #32]
 800d67a:	66bb      	str	r3, [r7, #104]	; 0x68
  const T pad_value = *pad_value_ptr;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	667b      	str	r3, [r7, #100]	; 0x64
  const T* in_ptr = input_data;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  T* out_ptr = output_data;
 800d688:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d68c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800d690:	2300      	movs	r3, #0
 800d692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d696:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d69a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	da7c      	bge.n	800d79c <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2f8>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d6a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d6ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	da6d      	bge.n	800d790 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2ec>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d6ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	da5e      	bge.n	800d784 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2e0>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d6cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	da4f      	bge.n	800d778 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2d4>
          if (out_b < left_b_padding ||
 800d6d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d6dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	db2f      	blt.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_b >= output_batch - right_b_padding ||
 800d6e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d6e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6ea:	1ad3      	subs	r3, r2, r3
          if (out_b < left_b_padding ||
 800d6ec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	da27      	bge.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_b >= output_batch - right_b_padding ||
 800d6f4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d6f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	db21      	blt.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_h >= output_height - right_h_padding ||
 800d700:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d706:	1ad3      	subs	r3, r2, r3
              out_h < left_h_padding ||
 800d708:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d70c:	429a      	cmp	r2, r3
 800d70e:	da19      	bge.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_h >= output_height - right_h_padding ||
 800d710:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d716:	429a      	cmp	r2, r3
 800d718:	db14      	blt.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_w >= output_width - right_w_padding ||
 800d71a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d71e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d720:	1ad3      	subs	r3, r2, r3
              out_w < left_w_padding ||
 800d722:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d726:	429a      	cmp	r2, r3
 800d728:	da0c      	bge.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_w >= output_width - right_w_padding ||
 800d72a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d72e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d730:	429a      	cmp	r2, r3
 800d732:	db07      	blt.n	800d744 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_d >= output_depth - right_d_padding) {
 800d734:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d73a:	1ad3      	subs	r3, r2, r3
              out_d < left_d_padding ||
 800d73c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d740:	429a      	cmp	r2, r3
 800d742:	db07      	blt.n	800d754 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2b0>
            *out_ptr++ = pad_value;
 800d744:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d748:	1d1a      	adds	r2, r3, #4
 800d74a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d74e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d750:	601a      	str	r2, [r3, #0]
 800d752:	e00b      	b.n	800d76c <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c8>
            *out_ptr++ = *in_ptr++;
 800d754:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d758:	1d13      	adds	r3, r2, #4
 800d75a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d75e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d762:	1d19      	adds	r1, r3, #4
 800d764:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800d768:	6812      	ldr	r2, [r2, #0]
 800d76a:	601a      	str	r2, [r3, #0]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800d76c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d770:	3301      	adds	r3, #1
 800d772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d776:	e7a9      	b.n	800d6cc <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x228>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800d778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d77c:	3301      	adds	r3, #1
 800d77e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d782:	e79a      	b.n	800d6ba <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x216>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800d784:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d788:	3301      	adds	r3, #1
 800d78a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d78e:	e78b      	b.n	800d6a8 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x204>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800d790:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d794:	3301      	adds	r3, #1
 800d796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d79a:	e77c      	b.n	800d696 <_ZN6tflite13reference_ops7PadImplIllEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1f2>
  const RuntimeShape ext_output_shape =
 800d79c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7f8 fa2d 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
 800d7a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7f8 fa28 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800d7b0:	bf00      	nop
 800d7b2:	37c4      	adds	r7, #196	; 0xc4
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd90      	pop	{r4, r7, pc}

0800d7b8 <_ZN6tflite13reference_ops13PadImageStyleIfEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKfPKT_S7_Pf>:
  Pad(op_params, input_shape, input_data, pad_value_ptr, output_shape,
      output_data);
}

template <typename P>
inline void PadImageStyle(const tflite::PadParams& op_params,
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b086      	sub	sp, #24
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	60f8      	str	r0, [r7, #12]
 800d7c0:	60b9      	str	r1, [r7, #8]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
                          const RuntimeShape& input_shape,
                          const float* input_data, const P* pad_value_ptr,
                          const RuntimeShape& output_shape,
                          float* output_data) {
  Pad(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d7c6:	69fb      	ldr	r3, [r7, #28]
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	68b9      	ldr	r1, [r7, #8]
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 f804 	bl	800d7e2 <_ZN6tflite13reference_ops3PadIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
      output_data);
}
 800d7da:	bf00      	nop
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <_ZN6tflite13reference_ops3PadIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void Pad(const tflite::PadParams& op_params,
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b086      	sub	sp, #24
 800d7e6:	af02      	add	r7, sp, #8
 800d7e8:	60f8      	str	r0, [r7, #12]
 800d7ea:	60b9      	str	r1, [r7, #8]
 800d7ec:	607a      	str	r2, [r7, #4]
 800d7ee:	603b      	str	r3, [r7, #0]
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	9301      	str	r3, [sp, #4]
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	9300      	str	r3, [sp, #0]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	68b9      	ldr	r1, [r7, #8]
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f000 f858 	bl	800d8b4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
}
 800d804:	bf00      	nop
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <_ZN6tflite13reference_ops13PadImageStyleIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImageStyle(const tflite::PadParams& op_params,
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b086      	sub	sp, #24
 800d810:	af02      	add	r7, sp, #8
 800d812:	60f8      	str	r0, [r7, #12]
 800d814:	60b9      	str	r1, [r7, #8]
 800d816:	607a      	str	r2, [r7, #4]
 800d818:	603b      	str	r3, [r7, #0]
  Pad(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f000 f804 	bl	800d836 <_ZN6tflite13reference_ops3PadIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
}
 800d82e:	bf00      	nop
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <_ZN6tflite13reference_ops3PadIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void Pad(const tflite::PadParams& op_params,
 800d836:	b580      	push	{r7, lr}
 800d838:	b086      	sub	sp, #24
 800d83a:	af02      	add	r7, sp, #8
 800d83c:	60f8      	str	r0, [r7, #12]
 800d83e:	60b9      	str	r1, [r7, #8]
 800d840:	607a      	str	r2, [r7, #4]
 800d842:	603b      	str	r3, [r7, #0]
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	9301      	str	r3, [sp, #4]
 800d848:	69bb      	ldr	r3, [r7, #24]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	68b9      	ldr	r1, [r7, #8]
 800d852:	68f8      	ldr	r0, [r7, #12]
 800d854:	f000 f9b8 	bl	800dbc8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
}
 800d858:	bf00      	nop
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <_ZN6tflite13reference_ops13PadImageStyleIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImageStyle(const tflite::PadParams& op_params,
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af02      	add	r7, sp, #8
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
  Pad(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	9301      	str	r3, [sp, #4]
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	68b9      	ldr	r1, [r7, #8]
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	f000 f804 	bl	800d88a <_ZN6tflite13reference_ops3PadIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
}
 800d882:	bf00      	nop
 800d884:	3710      	adds	r7, #16
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <_ZN6tflite13reference_ops3PadIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void Pad(const tflite::PadParams& op_params,
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b086      	sub	sp, #24
 800d88e:	af02      	add	r7, sp, #8
 800d890:	60f8      	str	r0, [r7, #12]
 800d892:	60b9      	str	r1, [r7, #8]
 800d894:	607a      	str	r2, [r7, #4]
 800d896:	603b      	str	r3, [r7, #0]
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	9301      	str	r3, [sp, #4]
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	687a      	ldr	r2, [r7, #4]
 800d8a4:	68b9      	ldr	r1, [r7, #8]
 800d8a6:	68f8      	ldr	r0, [r7, #12]
 800d8a8:	f000 fb1a 	bl	800dee0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
}
 800d8ac:	bf00      	nop
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 800d8b4:	b590      	push	{r4, r7, lr}
 800d8b6:	b0b1      	sub	sp, #196	; 0xc4
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	603b      	str	r3, [r7, #0]
  const RuntimeShape ext_input_shape =
 800d8c2:	f7ff f885 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d8c6:	4601      	mov	r1, r0
 800d8c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f7fe f84e 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape ext_output_shape =
 800d8d4:	f7ff f87c 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d8d8:	4601      	mov	r1, r0
 800d8da:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d8de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f7fe f844 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f993 3000 	ldrsb.w	r3, [r3]
 800d8ee:	461c      	mov	r4, r3
 800d8f0:	f7ff f86e 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	429c      	cmp	r4, r3
 800d8f8:	dd01      	ble.n	800d8fe <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4a>
 800d8fa:	f014 f8e9 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d904:	461c      	mov	r4, r3
 800d906:	f7ff f863 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d90a:	4603      	mov	r3, r0
 800d90c:	429c      	cmp	r4, r3
 800d90e:	dd01      	ble.n	800d914 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x60>
 800d910:	f014 f8de 	bl	8021ad0 <abort>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d914:	2300      	movs	r3, #0
 800d916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d91a:	f7ff f859 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d91e:	4602      	mov	r2, r0
 800d920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d924:	4293      	cmp	r3, r2
 800d926:	bfb4      	ite	lt
 800d928:	2301      	movlt	r3, #1
 800d92a:	2300      	movge	r3, #0
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00e      	beq.n	800d950 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x9c>
    left_padding_copy[i] = 0;
 800d932:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d93c:	4413      	add	r3, r2
 800d93e:	2200      	movs	r2, #0
 800d940:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d944:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d948:	3301      	adds	r3, #1
 800d94a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d94e:	e7e4      	b.n	800d91a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800d950:	2300      	movs	r3, #0
 800d952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f993 3000 	ldrsb.w	r3, [r3]
 800d95c:	461a      	mov	r2, r3
 800d95e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d962:	4293      	cmp	r3, r2
 800d964:	da1b      	bge.n	800d99e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d966:	f7ff f833 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d96a:	4602      	mov	r2, r0
 800d96c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d970:	4413      	add	r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800d972:	68fa      	ldr	r2, [r7, #12]
 800d974:	f992 2000 	ldrsb.w	r2, [r2]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d978:	1a99      	subs	r1, r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800d97a:	68fa      	ldr	r2, [r7, #12]
 800d97c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	685a      	ldr	r2, [r3, #4]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800d986:	008b      	lsls	r3, r1, #2
 800d988:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800d98c:	440b      	add	r3, r1
 800d98e:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800d992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d996:	3301      	adds	r3, #1
 800d998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d99c:	e7db      	b.n	800d956 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xa2>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d99e:	2300      	movs	r3, #0
 800d9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9a4:	f7ff f814 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	bfb4      	ite	lt
 800d9b2:	2301      	movlt	r3, #1
 800d9b4:	2300      	movge	r3, #0
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00e      	beq.n	800d9da <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
    right_padding_copy[i] = 0;
 800d9bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9c0:	009b      	lsls	r3, r3, #2
 800d9c2:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800d9c6:	4413      	add	r3, r2
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800d9ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d9d8:	e7e4      	b.n	800d9a4 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800d9da:	2300      	movs	r3, #0
 800d9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	da1b      	bge.n	800da28 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x174>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800d9f0:	f7fe ffee 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d9fa:	4413      	add	r3, r2
                       op_params.right_padding_count] =
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	f992 2014 	ldrsb.w	r2, [r2, #20]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800da02:	1a9b      	subs	r3, r3, r2
                       op_params.right_padding_count] =
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800da0a:	3106      	adds	r1, #6
 800da0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800da16:	440b      	add	r3, r1
 800da18:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800da1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800da20:	3301      	adds	r3, #1
 800da22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800da26:	e7db      	b.n	800d9e0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12c>
  const int output_batch = ext_output_shape.Dims(0);
 800da28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fc fe68 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da34:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  const int output_height = ext_output_shape.Dims(1);
 800da38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800da3c:	2101      	movs	r1, #1
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fc fe60 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da44:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  const int output_width = ext_output_shape.Dims(2);
 800da48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800da4c:	2102      	movs	r1, #2
 800da4e:	4618      	mov	r0, r3
 800da50:	f7fc fe58 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da54:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  const int output_depth = ext_output_shape.Dims(3);
 800da58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800da5c:	2103      	movs	r1, #3
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fc fe50 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800da64:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  const int left_b_padding = left_padding_copy[0];
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int left_h_padding = left_padding_copy[1];
 800da6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int left_w_padding = left_padding_copy[2];
 800da74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da76:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int left_d_padding = left_padding_copy[3];
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	67bb      	str	r3, [r7, #120]	; 0x78
  const int right_b_padding = right_padding_copy[0];
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	677b      	str	r3, [r7, #116]	; 0x74
  const int right_h_padding = right_padding_copy[1];
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	673b      	str	r3, [r7, #112]	; 0x70
  const int right_w_padding = right_padding_copy[2];
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int right_d_padding = right_padding_copy[3];
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	66bb      	str	r3, [r7, #104]	; 0x68
  const T pad_value = *pad_value_ptr;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	667b      	str	r3, [r7, #100]	; 0x64
  const T* in_ptr = input_data;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  T* out_ptr = output_data;
 800da98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800da9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800daa0:	2300      	movs	r3, #0
 800daa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800daa6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800daaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800daae:	429a      	cmp	r2, r3
 800dab0:	da7c      	bge.n	800dbac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2f8>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800dab2:	2300      	movs	r3, #0
 800dab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dab8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800dabc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dac0:	429a      	cmp	r2, r3
 800dac2:	da6d      	bge.n	800dba0 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2ec>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800dac4:	2300      	movs	r3, #0
 800dac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800daca:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dad2:	429a      	cmp	r2, r3
 800dad4:	da5e      	bge.n	800db94 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2e0>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800dad6:	2300      	movs	r3, #0
 800dad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dadc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800dae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dae4:	429a      	cmp	r2, r3
 800dae6:	da4f      	bge.n	800db88 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2d4>
          if (out_b < left_b_padding ||
 800dae8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800daec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800daf0:	429a      	cmp	r2, r3
 800daf2:	db2f      	blt.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_b >= output_batch - right_b_padding ||
 800daf4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800daf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dafa:	1ad3      	subs	r3, r2, r3
          if (out_b < left_b_padding ||
 800dafc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800db00:	429a      	cmp	r2, r3
 800db02:	da27      	bge.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_b >= output_batch - right_b_padding ||
 800db04:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800db08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800db0c:	429a      	cmp	r2, r3
 800db0e:	db21      	blt.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_h >= output_height - right_h_padding ||
 800db10:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800db14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800db16:	1ad3      	subs	r3, r2, r3
              out_h < left_h_padding ||
 800db18:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800db1c:	429a      	cmp	r2, r3
 800db1e:	da19      	bge.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_h >= output_height - right_h_padding ||
 800db20:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800db24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db26:	429a      	cmp	r2, r3
 800db28:	db14      	blt.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_w >= output_width - right_w_padding ||
 800db2a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800db2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db30:	1ad3      	subs	r3, r2, r3
              out_w < left_w_padding ||
 800db32:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800db36:	429a      	cmp	r2, r3
 800db38:	da0c      	bge.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_w >= output_width - right_w_padding ||
 800db3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800db3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db40:	429a      	cmp	r2, r3
 800db42:	db07      	blt.n	800db54 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a0>
              out_d >= output_depth - right_d_padding) {
 800db44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800db48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db4a:	1ad3      	subs	r3, r2, r3
              out_d < left_d_padding ||
 800db4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800db50:	429a      	cmp	r2, r3
 800db52:	db07      	blt.n	800db64 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2b0>
            *out_ptr++ = pad_value;
 800db54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800db5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db60:	601a      	str	r2, [r3, #0]
 800db62:	e00b      	b.n	800db7c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c8>
            *out_ptr++ = *in_ptr++;
 800db64:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800db68:	1d13      	adds	r3, r2, #4
 800db6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800db6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800db72:	1d19      	adds	r1, r3, #4
 800db74:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	601a      	str	r2, [r3, #0]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800db7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800db80:	3301      	adds	r3, #1
 800db82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800db86:	e7a9      	b.n	800dadc <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x228>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800db88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800db8c:	3301      	adds	r3, #1
 800db8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800db92:	e79a      	b.n	800daca <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x216>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800db94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800db98:	3301      	adds	r3, #1
 800db9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800db9e:	e78b      	b.n	800dab8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x204>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800dba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800dba4:	3301      	adds	r3, #1
 800dba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dbaa:	e77c      	b.n	800daa6 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1f2>
  const RuntimeShape ext_output_shape =
 800dbac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7f8 f825 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
 800dbb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7f8 f820 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800dbc0:	bf00      	nop
 800dbc2:	37c4      	adds	r7, #196	; 0xc4
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd90      	pop	{r4, r7, pc}

0800dbc8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b0b1      	sub	sp, #196	; 0xc4
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
  const RuntimeShape ext_input_shape =
 800dbd6:	f7fe fefb 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dbda:	4601      	mov	r1, r0
 800dbdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800dbe0:	68ba      	ldr	r2, [r7, #8]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fd fec4 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape ext_output_shape =
 800dbe8:	f7fe fef2 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dbec:	4601      	mov	r1, r0
 800dbee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dbf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fd feba 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f993 3000 	ldrsb.w	r3, [r3]
 800dc02:	461c      	mov	r4, r3
 800dc04:	f7fe fee4 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	429c      	cmp	r4, r3
 800dc0c:	dd01      	ble.n	800dc12 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4a>
 800dc0e:	f013 ff5f 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800dc18:	461c      	mov	r4, r3
 800dc1a:	f7fe fed9 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	429c      	cmp	r4, r3
 800dc22:	dd01      	ble.n	800dc28 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x60>
 800dc24:	f013 ff54 	bl	8021ad0 <abort>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dc2e:	f7fe fecf 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dc32:	4602      	mov	r2, r0
 800dc34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	bfb4      	ite	lt
 800dc3c:	2301      	movlt	r3, #1
 800dc3e:	2300      	movge	r3, #0
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00e      	beq.n	800dc64 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x9c>
    left_padding_copy[i] = 0;
 800dc46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800dc50:	4413      	add	r3, r2
 800dc52:	2200      	movs	r2, #0
 800dc54:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dc58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800dc62:	e7e4      	b.n	800dc2e <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800dc64:	2300      	movs	r3, #0
 800dc66:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f993 3000 	ldrsb.w	r3, [r3]
 800dc70:	461a      	mov	r2, r3
 800dc72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc76:	4293      	cmp	r3, r2
 800dc78:	da1b      	bge.n	800dcb2 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800dc7a:	f7fe fea9 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc84:	4413      	add	r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	f992 2000 	ldrsb.w	r2, [r2]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800dc8c:	1a99      	subs	r1, r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4413      	add	r3, r2
 800dc98:	685a      	ldr	r2, [r3, #4]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800dc9a:	008b      	lsls	r3, r1, #2
 800dc9c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800dca0:	440b      	add	r3, r1
 800dca2:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800dca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dcaa:	3301      	adds	r3, #1
 800dcac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dcb0:	e7db      	b.n	800dc6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xa2>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dcb8:	f7fe fe8a 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	bfb4      	ite	lt
 800dcc6:	2301      	movlt	r3, #1
 800dcc8:	2300      	movge	r3, #0
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d00e      	beq.n	800dcee <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
    right_padding_copy[i] = 0;
 800dcd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800dcda:	4413      	add	r3, r2
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dce2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dce6:	3301      	adds	r3, #1
 800dce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dcec:	e7e4      	b.n	800dcb8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800dcee:	2300      	movs	r3, #0
 800dcf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd00:	4293      	cmp	r3, r2
 800dd02:	da1b      	bge.n	800dd3c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x174>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800dd04:	f7fe fe64 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd0e:	4413      	add	r3, r2
                       op_params.right_padding_count] =
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	f992 2014 	ldrsb.w	r2, [r2, #20]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800dd16:	1a9b      	subs	r3, r3, r2
                       op_params.right_padding_count] =
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800dd1e:	3106      	adds	r1, #6
 800dd20:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800dd2a:	440b      	add	r3, r1
 800dd2c:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800dd30:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800dd34:	3301      	adds	r3, #1
 800dd36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dd3a:	e7db      	b.n	800dcf4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12c>
  const int output_batch = ext_output_shape.Dims(0);
 800dd3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd40:	2100      	movs	r1, #0
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fc fcde 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dd48:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  const int output_height = ext_output_shape.Dims(1);
 800dd4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd50:	2101      	movs	r1, #1
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7fc fcd6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dd58:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  const int output_width = ext_output_shape.Dims(2);
 800dd5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd60:	2102      	movs	r1, #2
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fc fcce 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dd68:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  const int output_depth = ext_output_shape.Dims(3);
 800dd6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dd70:	2103      	movs	r1, #3
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fc fcc6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800dd78:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  const int left_b_padding = left_padding_copy[0];
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int left_h_padding = left_padding_copy[1];
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int left_w_padding = left_padding_copy[2];
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int left_d_padding = left_padding_copy[3];
 800dd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int right_b_padding = right_padding_copy[0];
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	677b      	str	r3, [r7, #116]	; 0x74
  const int right_h_padding = right_padding_copy[1];
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	673b      	str	r3, [r7, #112]	; 0x70
  const int right_w_padding = right_padding_copy[2];
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int right_d_padding = right_padding_copy[3];
 800dd9c:	6a3b      	ldr	r3, [r7, #32]
 800dd9e:	66bb      	str	r3, [r7, #104]	; 0x68
  const T pad_value = *pad_value_ptr;
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  const T* in_ptr = input_data;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  T* out_ptr = output_data;
 800ddae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ddb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ddbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ddc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	da7d      	bge.n	800dec4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2fc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800ddc8:	2300      	movs	r3, #0
 800ddca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ddce:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ddd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	da6e      	bge.n	800deb8 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2f0>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800ddda:	2300      	movs	r3, #0
 800dddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dde0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800dde4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dde8:	429a      	cmp	r2, r3
 800ddea:	da5f      	bge.n	800deac <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2e4>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800ddec:	2300      	movs	r3, #0
 800ddee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ddf2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ddf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	da50      	bge.n	800dea0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2d8>
          if (out_b < left_b_padding ||
 800ddfe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800de02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de06:	429a      	cmp	r2, r3
 800de08:	db2f      	blt.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_b >= output_batch - right_b_padding ||
 800de0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800de0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de10:	1ad3      	subs	r3, r2, r3
          if (out_b < left_b_padding ||
 800de12:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800de16:	429a      	cmp	r2, r3
 800de18:	da27      	bge.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_b >= output_batch - right_b_padding ||
 800de1a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800de1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de22:	429a      	cmp	r2, r3
 800de24:	db21      	blt.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_h >= output_height - right_h_padding ||
 800de26:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800de2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800de2c:	1ad3      	subs	r3, r2, r3
              out_h < left_h_padding ||
 800de2e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800de32:	429a      	cmp	r2, r3
 800de34:	da19      	bge.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_h >= output_height - right_h_padding ||
 800de36:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800de3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de3c:	429a      	cmp	r2, r3
 800de3e:	db14      	blt.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_w >= output_width - right_w_padding ||
 800de40:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800de44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de46:	1ad3      	subs	r3, r2, r3
              out_w < left_w_padding ||
 800de48:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800de4c:	429a      	cmp	r2, r3
 800de4e:	da0c      	bge.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_w >= output_width - right_w_padding ||
 800de50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800de54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de56:	429a      	cmp	r2, r3
 800de58:	db07      	blt.n	800de6a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_d >= output_depth - right_d_padding) {
 800de5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800de5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de60:	1ad3      	subs	r3, r2, r3
              out_d < left_d_padding ||
 800de62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800de66:	429a      	cmp	r2, r3
 800de68:	db08      	blt.n	800de7c <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2b4>
            *out_ptr++ = pad_value;
 800de6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800de74:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800de78:	701a      	strb	r2, [r3, #0]
 800de7a:	e00b      	b.n	800de94 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2cc>
            *out_ptr++ = *in_ptr++;
 800de7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800de80:	1c53      	adds	r3, r2, #1
 800de82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800de86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800de8a:	1c59      	adds	r1, r3, #1
 800de8c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800de90:	7812      	ldrb	r2, [r2, #0]
 800de92:	701a      	strb	r2, [r3, #0]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800de94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800de98:	3301      	adds	r3, #1
 800de9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800de9e:	e7a8      	b.n	800ddf2 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x22a>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800dea0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dea4:	3301      	adds	r3, #1
 800dea6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800deaa:	e799      	b.n	800dde0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x218>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800deac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800deb0:	3301      	adds	r3, #1
 800deb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800deb6:	e78a      	b.n	800ddce <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x206>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800deb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800debc:	3301      	adds	r3, #1
 800debe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dec2:	e77b      	b.n	800ddbc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1f4>
  const RuntimeShape ext_output_shape =
 800dec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800dec8:	4618      	mov	r0, r3
 800deca:	f7f7 fe99 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
 800dece:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ded2:	4618      	mov	r0, r3
 800ded4:	f7f7 fe94 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800ded8:	bf00      	nop
 800deda:	37c4      	adds	r7, #196	; 0xc4
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd90      	pop	{r4, r7, pc}

0800dee0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b0b1      	sub	sp, #196	; 0xc4
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	607a      	str	r2, [r7, #4]
 800deec:	603b      	str	r3, [r7, #0]
  const RuntimeShape ext_input_shape =
 800deee:	f7fe fd6f 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800def2:	4601      	mov	r1, r0
 800def4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	4618      	mov	r0, r3
 800defc:	f7fd fd38 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  const RuntimeShape ext_output_shape =
 800df00:	f7fe fd66 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800df04:	4601      	mov	r1, r0
 800df06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800df0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fd fd2e 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f993 3000 	ldrsb.w	r3, [r3]
 800df1a:	461c      	mov	r4, r3
 800df1c:	f7fe fd58 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800df20:	4603      	mov	r3, r0
 800df22:	429c      	cmp	r4, r3
 800df24:	dd01      	ble.n	800df2a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x4a>
 800df26:	f013 fdd3 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800df30:	461c      	mov	r4, r3
 800df32:	f7fe fd4d 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800df36:	4603      	mov	r3, r0
 800df38:	429c      	cmp	r4, r3
 800df3a:	dd01      	ble.n	800df40 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x60>
 800df3c:	f013 fdc8 	bl	8021ad0 <abort>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800df40:	2300      	movs	r3, #0
 800df42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df46:	f7fe fd43 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800df4a:	4602      	mov	r2, r0
 800df4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df50:	4293      	cmp	r3, r2
 800df52:	bfb4      	ite	lt
 800df54:	2301      	movlt	r3, #1
 800df56:	2300      	movge	r3, #0
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00e      	beq.n	800df7c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x9c>
    left_padding_copy[i] = 0;
 800df5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800df68:	4413      	add	r3, r2
 800df6a:	2200      	movs	r2, #0
 800df6c:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800df70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800df74:	3301      	adds	r3, #1
 800df76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800df7a:	e7e4      	b.n	800df46 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x66>
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800df7c:	2300      	movs	r3, #0
 800df7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f993 3000 	ldrsb.w	r3, [r3]
 800df88:	461a      	mov	r2, r3
 800df8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800df8e:	4293      	cmp	r3, r2
 800df90:	da1b      	bge.n	800dfca <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800df92:	f7fe fd1d 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800df96:	4602      	mov	r2, r0
 800df98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800df9c:	4413      	add	r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	f992 2000 	ldrsb.w	r2, [r2]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800dfa4:	1a99      	subs	r1, r3, r2
                      op_params.left_padding_count] = op_params.left_padding[i];
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	685a      	ldr	r2, [r3, #4]
    left_padding_copy[i + PadKernelMaxDimensionCount() -
 800dfb2:	008b      	lsls	r3, r1, #2
 800dfb4:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800dfb8:	440b      	add	r3, r1
 800dfba:	f843 2c9c 	str.w	r2, [r3, #-156]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
 800dfbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dfc8:	e7db      	b.n	800df82 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xa2>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dfd0:	f7fe fcfe 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfda:	4293      	cmp	r3, r2
 800dfdc:	bfb4      	ite	lt
 800dfde:	2301      	movlt	r3, #1
 800dfe0:	2300      	movge	r3, #0
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00e      	beq.n	800e006 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x126>
    right_padding_copy[i] = 0;
 800dfe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 800dff2:	4413      	add	r3, r2
 800dff4:	2200      	movs	r2, #0
 800dff6:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
 800dffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dffe:	3301      	adds	r3, #1
 800e000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e004:	e7e4      	b.n	800dfd0 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800e006:	2300      	movs	r3, #0
 800e008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800e012:	461a      	mov	r2, r3
 800e014:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e018:	4293      	cmp	r3, r2
 800e01a:	da1b      	bge.n	800e054 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x174>
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800e01c:	f7fe fcd8 	bl	800c9d0 <_ZN6tflite13reference_ops26PadKernelMaxDimensionCountEv>
 800e020:	4602      	mov	r2, r0
 800e022:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e026:	4413      	add	r3, r2
                       op_params.right_padding_count] =
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	f992 2014 	ldrsb.w	r2, [r2, #20]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800e02e:	1a9b      	subs	r3, r3, r2
                       op_params.right_padding_count] =
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e036:	3106      	adds	r1, #6
 800e038:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    right_padding_copy[i + PadKernelMaxDimensionCount() -
 800e03c:	009b      	lsls	r3, r3, #2
 800e03e:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800e042:	440b      	add	r3, r1
 800e044:	f843 2cac 	str.w	r2, [r3, #-172]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
 800e048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e04c:	3301      	adds	r3, #1
 800e04e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e052:	e7db      	b.n	800e00c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x12c>
  const int output_batch = ext_output_shape.Dims(0);
 800e054:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fc fb52 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e060:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  const int output_height = ext_output_shape.Dims(1);
 800e064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e068:	2101      	movs	r1, #1
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fc fb4a 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e070:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
  const int output_width = ext_output_shape.Dims(2);
 800e074:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e078:	2102      	movs	r1, #2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fc fb42 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e080:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  const int output_depth = ext_output_shape.Dims(3);
 800e084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e088:	2103      	movs	r1, #3
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fc fb3a 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e090:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  const int left_b_padding = left_padding_copy[0];
 800e094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e096:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const int left_h_padding = left_padding_copy[1];
 800e09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int left_w_padding = left_padding_copy[2];
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int left_d_padding = left_padding_copy[3];
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	67bb      	str	r3, [r7, #120]	; 0x78
  const int right_b_padding = right_padding_copy[0];
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	677b      	str	r3, [r7, #116]	; 0x74
  const int right_h_padding = right_padding_copy[1];
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	673b      	str	r3, [r7, #112]	; 0x70
  const int right_w_padding = right_padding_copy[2];
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int right_d_padding = right_padding_copy[3];
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	66bb      	str	r3, [r7, #104]	; 0x68
  const T pad_value = *pad_value_ptr;
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  const T* in_ptr = input_data;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  T* out_ptr = output_data;
 800e0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e0ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e0d4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e0d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	da7e      	bge.n	800e1de <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2fe>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e0e6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e0ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	da6f      	bge.n	800e1d2 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2f2>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e0f8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e0fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e100:	429a      	cmp	r2, r3
 800e102:	da60      	bge.n	800e1c6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2e6>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800e104:	2300      	movs	r3, #0
 800e106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e10a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e10e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e112:	429a      	cmp	r2, r3
 800e114:	da51      	bge.n	800e1ba <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2da>
          if (out_b < left_b_padding ||
 800e116:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e11e:	429a      	cmp	r2, r3
 800e120:	db2f      	blt.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_b >= output_batch - right_b_padding ||
 800e122:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e128:	1ad3      	subs	r3, r2, r3
          if (out_b < left_b_padding ||
 800e12a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800e12e:	429a      	cmp	r2, r3
 800e130:	da27      	bge.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_b >= output_batch - right_b_padding ||
 800e132:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e13a:	429a      	cmp	r2, r3
 800e13c:	db21      	blt.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_h >= output_height - right_h_padding ||
 800e13e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800e142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e144:	1ad3      	subs	r3, r2, r3
              out_h < left_h_padding ||
 800e146:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e14a:	429a      	cmp	r2, r3
 800e14c:	da19      	bge.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_h >= output_height - right_h_padding ||
 800e14e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e154:	429a      	cmp	r2, r3
 800e156:	db14      	blt.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_w >= output_width - right_w_padding ||
 800e158:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e15e:	1ad3      	subs	r3, r2, r3
              out_w < left_w_padding ||
 800e160:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e164:	429a      	cmp	r2, r3
 800e166:	da0c      	bge.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_w >= output_width - right_w_padding ||
 800e168:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e16e:	429a      	cmp	r2, r3
 800e170:	db07      	blt.n	800e182 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2a2>
              out_d >= output_depth - right_d_padding) {
 800e172:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e178:	1ad3      	subs	r3, r2, r3
              out_d < left_d_padding ||
 800e17a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e17e:	429a      	cmp	r2, r3
 800e180:	db08      	blt.n	800e194 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2b4>
            *out_ptr++ = pad_value;
 800e182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e186:	1c5a      	adds	r2, r3, #1
 800e188:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e18c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800e190:	701a      	strb	r2, [r3, #0]
 800e192:	e00c      	b.n	800e1ae <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2ce>
            *out_ptr++ = *in_ptr++;
 800e194:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800e198:	1c53      	adds	r3, r2, #1
 800e19a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e19e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e1a2:	1c59      	adds	r1, r3, #1
 800e1a4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 800e1a8:	f992 2000 	ldrsb.w	r2, [r2]
 800e1ac:	701a      	strb	r2, [r3, #0]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
 800e1ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e1b8:	e7a7      	b.n	800e10a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x22a>
      for (int out_w = 0; out_w < output_width; ++out_w) {
 800e1ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e1be:	3301      	adds	r3, #1
 800e1c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e1c4:	e798      	b.n	800e0f8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x218>
    for (int out_h = 0; out_h < output_height; ++out_h) {
 800e1c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e1d0:	e789      	b.n	800e0e6 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x206>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800e1d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e1dc:	e77a      	b.n	800e0d4 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x1f4>
  const RuntimeShape ext_output_shape =
 800e1de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f7 fd0c 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
 800e1e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7f7 fd07 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800e1f2:	bf00      	nop
 800e1f4:	37c4      	adds	r7, #196	; 0xc4
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd90      	pop	{r4, r7, pc}
	...

0800e1fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 800e1fc:	b5b0      	push	{r4, r5, r7, lr}
 800e1fe:	b08e      	sub	sp, #56	; 0x38
 800e200:	af04      	add	r7, sp, #16
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800e206:	2200      	movs	r2, #0
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f7f6 ffb7 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e210:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input != nullptr);
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10a      	bne.n	800e22e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x32>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	695c      	ldr	r4, [r3, #20]
 800e21c:	4b62      	ldr	r3, [pc, #392]	; (800e3a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1ac>)
 800e21e:	9300      	str	r3, [sp, #0]
 800e220:	2323      	movs	r3, #35	; 0x23
 800e222:	4a62      	ldr	r2, [pc, #392]	; (800e3ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e224:	4962      	ldr	r1, [pc, #392]	; (800e3b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	47a0      	blx	r4
 800e22a:	2301      	movs	r3, #1
 800e22c:	e0b8      	b.n	800e3a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800e22e:	2200      	movs	r2, #0
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7f6 ffb3 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e238:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d10a      	bne.n	800e256 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	695c      	ldr	r4, [r3, #20]
 800e244:	4b5b      	ldr	r3, [pc, #364]	; (800e3b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b8>)
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	2325      	movs	r3, #37	; 0x25
 800e24a:	4a58      	ldr	r2, [pc, #352]	; (800e3ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e24c:	4958      	ldr	r1, [pc, #352]	; (800e3b0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b4>)
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	47a0      	blx	r4
 800e252:	2301      	movs	r3, #1
 800e254:	e0a4      	b.n	800e3a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 800e256:	69b8      	ldr	r0, [r7, #24]
 800e258:	f7f6 ff11 	bl	800507e <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 800e25c:	4602      	mov	r2, r0
 800e25e:	460b      	mov	r3, r1
 800e260:	4613      	mov	r3, r2
 800e262:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	689b      	ldr	r3, [r3, #8]
 800e268:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f7fd fa99 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e270:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e272:	2b01      	cmp	r3, #1
 800e274:	d109      	bne.n	800e28a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	d105      	bne.n	800e28a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d101      	bne.n	800e28a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x8e>
 800e286:	2301      	movs	r3, #1
 800e288:	e000      	b.n	800e28c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x90>
 800e28a:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d002      	beq.n	800e296 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 800e296:	2301      	movs	r3, #1
 800e298:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 800e29a:	f04f 33ff 	mov.w	r3, #4294967295
 800e29e:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	61fb      	str	r3, [r7, #28]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	69fa      	ldr	r2, [r7, #28]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	da2b      	bge.n	800e306 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x10a>
    int value = output_shape->data[i];
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c0:	d118      	bne.n	800e2f4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf8>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 800e2c2:	6a3b      	ldr	r3, [r7, #32]
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d011      	beq.n	800e2ee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf2>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695c      	ldr	r4, [r3, #20]
 800e2ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d2:	9303      	str	r3, [sp, #12]
 800e2d4:	6a3b      	ldr	r3, [r7, #32]
 800e2d6:	9302      	str	r3, [sp, #8]
 800e2d8:	4b37      	ldr	r3, [pc, #220]	; (800e3b8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1bc>)
 800e2da:	9301      	str	r3, [sp, #4]
 800e2dc:	4b37      	ldr	r3, [pc, #220]	; (800e3bc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c0>)
 800e2de:	9300      	str	r3, [sp, #0]
 800e2e0:	233a      	movs	r3, #58	; 0x3a
 800e2e2:	4a32      	ldr	r2, [pc, #200]	; (800e3ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e2e4:	4936      	ldr	r1, [pc, #216]	; (800e3c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	47a0      	blx	r4
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e058      	b.n	800e3a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
      stretch_dim = i;
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	623b      	str	r3, [r7, #32]
 800e2f2:	e004      	b.n	800e2fe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x102>
    } else {
      num_output_elements *= value;
 800e2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	fb02 f303 	mul.w	r3, r2, r3
 800e2fc:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	3301      	adds	r3, #1
 800e302:	61fb      	str	r3, [r7, #28]
 800e304:	e7ce      	b.n	800e2a4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
    }
  }
  if (stretch_dim != -1) {
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d011      	beq.n	800e332 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x136>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 800e30e:	693a      	ldr	r2, [r7, #16]
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	fb92 f2f3 	sdiv	r2, r2, r3
 800e316:	68f9      	ldr	r1, [r7, #12]
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	440b      	add	r3, r1
 800e31e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 800e320:	68fa      	ldr	r2, [r7, #12]
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32c:	fb02 f303 	mul.w	r3, r2, r3
 800e330:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	781a      	ldrb	r2, [r3, #0]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	429a      	cmp	r2, r3
 800e33c:	d01a      	beq.n	800e374 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	695c      	ldr	r4, [r3, #20]
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	4618      	mov	r0, r3
 800e348:	f7f4 f970 	bl	800262c <TfLiteTypeGetName>
 800e34c:	4605      	mov	r5, r0
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	4618      	mov	r0, r3
 800e354:	f7f4 f96a 	bl	800262c <TfLiteTypeGetName>
 800e358:	4603      	mov	r3, r0
 800e35a:	9303      	str	r3, [sp, #12]
 800e35c:	9502      	str	r5, [sp, #8]
 800e35e:	4b19      	ldr	r3, [pc, #100]	; (800e3c4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c8>)
 800e360:	9301      	str	r3, [sp, #4]
 800e362:	4b19      	ldr	r3, [pc, #100]	; (800e3c8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1cc>)
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	2345      	movs	r3, #69	; 0x45
 800e368:	4a10      	ldr	r2, [pc, #64]	; (800e3ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e36a:	4918      	ldr	r1, [pc, #96]	; (800e3cc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d0>)
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	47a0      	blx	r4
 800e370:	2301      	movs	r3, #1
 800e372:	e015      	b.n	800e3a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 800e374:	693a      	ldr	r2, [r7, #16]
 800e376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e378:	429a      	cmp	r2, r3
 800e37a:	d010      	beq.n	800e39e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a2>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	695c      	ldr	r4, [r3, #20]
 800e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e382:	9303      	str	r3, [sp, #12]
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	9302      	str	r3, [sp, #8]
 800e388:	4b11      	ldr	r3, [pc, #68]	; (800e3d0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d4>)
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	4b11      	ldr	r3, [pc, #68]	; (800e3d4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1d8>)
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	2346      	movs	r3, #70	; 0x46
 800e392:	4a06      	ldr	r2, [pc, #24]	; (800e3ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1b0>)
 800e394:	490a      	ldr	r1, [pc, #40]	; (800e3c0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1c4>)
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	47a0      	blx	r4
 800e39a:	2301      	movs	r3, #1
 800e39c:	e000      	b.n	800e3a0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x1a4>
  return kTfLiteOk;
 800e39e:	2300      	movs	r3, #0
}
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	3728      	adds	r7, #40	; 0x28
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bdb0      	pop	{r4, r5, r7, pc}
 800e3a8:	080279d8 	.word	0x080279d8
 800e3ac:	08027988 	.word	0x08027988
 800e3b0:	080279c0 	.word	0x080279c0
 800e3b4:	080279ec 	.word	0x080279ec
 800e3b8:	08027a1c 	.word	0x08027a1c
 800e3bc:	08027a20 	.word	0x08027a20
 800e3c0:	08027a00 	.word	0x08027a00
 800e3c4:	08027a48 	.word	0x08027a48
 800e3c8:	08027a58 	.word	0x08027a58
 800e3cc:	08027a2c 	.word	0x08027a2c
 800e3d0:	08027a64 	.word	0x08027a64
 800e3d4:	08027a78 	.word	0x08027a78

0800e3d8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800e3d8:	b590      	push	{r4, r7, lr}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af04      	add	r7, sp, #16
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800e3e2:	6838      	ldr	r0, [r7, #0]
 800e3e4:	f7fd f9dd 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d007      	beq.n	800e3fe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e3ee:	6838      	ldr	r0, [r7, #0]
 800e3f0:	f7fd f9d7 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b02      	cmp	r3, #2
 800e3f8:	d001      	beq.n	800e3fe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	e000      	b.n	800e400 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 800e3fe:	2300      	movs	r3, #0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d00a      	beq.n	800e41a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	695c      	ldr	r4, [r3, #20]
 800e408:	4b27      	ldr	r3, [pc, #156]	; (800e4a8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	234b      	movs	r3, #75	; 0x4b
 800e40e:	4a27      	ldr	r2, [pc, #156]	; (800e4ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e410:	4927      	ldr	r1, [pc, #156]	; (800e4b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	47a0      	blx	r4
 800e416:	2301      	movs	r3, #1
 800e418:	e041      	b.n	800e49e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800e41a:	6838      	ldr	r0, [r7, #0]
 800e41c:	f7fd f9ce 	bl	800b7bc <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e420:	4603      	mov	r3, r0
 800e422:	2b01      	cmp	r3, #1
 800e424:	bf14      	ite	ne
 800e426:	2301      	movne	r3, #1
 800e428:	2300      	moveq	r3, #0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d013      	beq.n	800e458 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	695c      	ldr	r4, [r3, #20]
 800e434:	6838      	ldr	r0, [r7, #0]
 800e436:	f7fd f9c1 	bl	800b7bc <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2201      	movs	r2, #1
 800e43e:	9203      	str	r2, [sp, #12]
 800e440:	9302      	str	r3, [sp, #8]
 800e442:	4b1c      	ldr	r3, [pc, #112]	; (800e4b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	4b1c      	ldr	r3, [pc, #112]	; (800e4b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800e448:	9300      	str	r3, [sp, #0]
 800e44a:	234c      	movs	r3, #76	; 0x4c
 800e44c:	4a17      	ldr	r2, [pc, #92]	; (800e4ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e44e:	491b      	ldr	r1, [pc, #108]	; (800e4bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	47a0      	blx	r4
 800e454:	2301      	movs	r3, #1
 800e456:	e022      	b.n	800e49e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff fece 	bl	800e1fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e460:	4603      	mov	r3, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	bf14      	ite	ne
 800e466:	2301      	movne	r3, #1
 800e468:	2300      	moveq	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d015      	beq.n	800e49c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	695c      	ldr	r4, [r3, #20]
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fec0 	bl	800e1fc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	2300      	movs	r3, #0
 800e482:	9303      	str	r3, [sp, #12]
 800e484:	9202      	str	r2, [sp, #8]
 800e486:	4b0e      	ldr	r3, [pc, #56]	; (800e4c0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800e488:	9301      	str	r3, [sp, #4]
 800e48a:	4b0e      	ldr	r3, [pc, #56]	; (800e4c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 800e48c:	9300      	str	r3, [sp, #0]
 800e48e:	234d      	movs	r3, #77	; 0x4d
 800e490:	4a06      	ldr	r2, [pc, #24]	; (800e4ac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800e492:	490a      	ldr	r1, [pc, #40]	; (800e4bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	47a0      	blx	r4
 800e498:	2301      	movs	r3, #1
 800e49a:	e000      	b.n	800e49e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 800e49c:	2300      	movs	r3, #0
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd90      	pop	{r4, r7, pc}
 800e4a6:	bf00      	nop
 800e4a8:	08027a8c 	.word	0x08027a8c
 800e4ac:	08027988 	.word	0x08027988
 800e4b0:	080279c0 	.word	0x080279c0
 800e4b4:	08027abc 	.word	0x08027abc
 800e4b8:	08027ac0 	.word	0x08027ac0
 800e4bc:	08027a00 	.word	0x08027a00
 800e4c0:	08027ad4 	.word	0x08027ad4
 800e4c4:	08027ae0 	.word	0x08027ae0

0800e4c8 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b088      	sub	sp, #32
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7fc f9e8 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800e4dc:	61b8      	str	r0, [r7, #24]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800e4de:	2200      	movs	r2, #0
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f7fc f9f2 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800e4e8:	6178      	str	r0, [r7, #20]

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	7a1b      	ldrb	r3, [r3, #8]
 800e4ee:	f107 020c 	add.w	r2, r7, #12
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f7 fc61 	bl	8005dbc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	74fb      	strb	r3, [r7, #19]
 800e4fe:	7cfb      	ldrb	r3, [r7, #19]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800e504:	7cfb      	ldrb	r3, [r7, #19]
 800e506:	e024      	b.n	800e552 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
  input_bytes *= ElementCount(*input->dims);
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f7fb fa45 	bl	800999c <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 800e512:	4602      	mov	r2, r0
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	fb02 f303 	mul.w	r3, r2, r3
 800e51a:	60fb      	str	r3, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	697b      	ldr	r3, [r7, #20]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	429a      	cmp	r2, r3
 800e526:	d013      	beq.n	800e550 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input_bytes; ++i) {
 800e528:	2300      	movs	r3, #0
 800e52a:	61fb      	str	r3, [r7, #28]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	69fa      	ldr	r2, [r7, #28]
 800e530:	429a      	cmp	r2, r3
 800e532:	d20d      	bcs.n	800e550 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      output->data.raw[i] = input->data.raw[i];
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	441a      	add	r2, r3
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	6819      	ldr	r1, [r3, #0]
 800e540:	69fb      	ldr	r3, [r7, #28]
 800e542:	440b      	add	r3, r1
 800e544:	7812      	ldrb	r2, [r2, #0]
 800e546:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	3301      	adds	r3, #1
 800e54c:	61fb      	str	r3, [r7, #28]
 800e54e:	e7ed      	b.n	800e52c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    }
  }
  return kTfLiteOk;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
	...

0800e55c <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 800e55c:	b4b0      	push	{r4, r5, r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4a07      	ldr	r2, [pc, #28]	; (800e584 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x28>)
 800e568:	461c      	mov	r4, r3
 800e56a:	4615      	mov	r5, r2
 800e56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e56e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e570:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bcb0      	pop	{r4, r5, r7}
 800e580:	4770      	bx	lr
 800e582:	bf00      	nop
 800e584:	08027b00 	.word	0x08027b00

0800e588 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
 800e588:	b590      	push	{r4, r7, lr}
 800e58a:	b089      	sub	sp, #36	; 0x24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800e596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e598:	6839      	ldr	r1, [r7, #0]
 800e59a:	68b8      	ldr	r0, [r7, #8]
 800e59c:	f7fd ffe2 	bl	800c564 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800e5a0:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; i++) {
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	61fb      	str	r3, [r7, #28]
 800e5a6:	69fa      	ldr	r2, [r7, #28]
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	da29      	bge.n	800e602 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7a>
    auto x = input1_data[i] + input2_data[i];
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	687a      	ldr	r2, [r7, #4]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	ed93 7a00 	vldr	s14, [r3]
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5c0:	4413      	add	r3, r2
 800e5c2:	edd3 7a00 	vldr	s15, [r3]
 800e5c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5ca:	edc7 7a05 	vstr	s15, [r7, #20]
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    output_data[i] = ActivationFunctionWithMinMax(
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	009b      	lsls	r3, r3, #2
 800e5de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e5e0:	18d4      	adds	r4, r2, r3
 800e5e2:	eeb0 1a47 	vmov.f32	s2, s14
 800e5e6:	eef0 0a67 	vmov.f32	s1, s15
 800e5ea:	ed97 0a05 	vldr	s0, [r7, #20]
 800e5ee:	f7fe f960 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800e5f2:	eef0 7a40 	vmov.f32	s15, s0
 800e5f6:	edc4 7a00 	vstr	s15, [r4]
  for (int i = 0; i < flat_size; i++) {
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	61fb      	str	r3, [r7, #28]
 800e600:	e7d1      	b.n	800e5a6 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x1e>
  }
}
 800e602:	bf00      	nop
 800e604:	3724      	adds	r7, #36	; 0x24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd90      	pop	{r4, r7, pc}

0800e60a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8_t* input1_data,
                const RuntimeShape& input2_shape, const uint8_t* input2_data,
                const RuntimeShape& output_shape, uint8_t* output_data) {
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b088      	sub	sp, #32
 800e60e:	af02      	add	r7, sp, #8
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	607a      	str	r2, [r7, #4]
 800e616:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e620:	429a      	cmp	r2, r3
 800e622:	dd01      	ble.n	800e628 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1e>
 800e624:	f013 fa54 	bl	8021ad0 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800e628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	68b8      	ldr	r0, [r7, #8]
 800e62e:	f7fd ff99 	bl	800c564 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800e632:	6178      	str	r0, [r7, #20]

  TFLITE_DCHECK_GT(params.input1_offset, -256);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	685b      	ldr	r3, [r3, #4]
 800e638:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800e63c:	da01      	bge.n	800e642 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x38>
 800e63e:	f013 fa47 	bl	8021ad0 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	689b      	ldr	r3, [r3, #8]
 800e646:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800e64a:	da01      	bge.n	800e650 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
 800e64c:	f013 fa40 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	685b      	ldr	r3, [r3, #4]
 800e654:	2bff      	cmp	r3, #255	; 0xff
 800e656:	dd01      	ble.n	800e65c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x52>
 800e658:	f013 fa3a 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	2bff      	cmp	r3, #255	; 0xff
 800e662:	dd01      	ble.n	800e668 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5e>
 800e664:	f013 fa34 	bl	8021ad0 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 800e668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66a:	9300      	str	r3, [sp, #0]
 800e66c:	6a3b      	ldr	r3, [r7, #32]
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	68f9      	ldr	r1, [r7, #12]
 800e672:	6978      	ldr	r0, [r7, #20]
 800e674:	f000 fe86 	bl	800f384 <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_>
}
 800e678:	bf00      	nop
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
 800e680:	b590      	push	{r4, r7, lr}
 800e682:	ed2d 8b04 	vpush	{d8-d9}
 800e686:	b0a1      	sub	sp, #132	; 0x84
 800e688:	af02      	add	r7, sp, #8
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800e692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e696:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e69a:	6839      	ldr	r1, [r7, #0]
 800e69c:	68b8      	ldr	r0, [r7, #8]
 800e69e:	f7fd fa1e 	bl	800bade <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800e6a2:	f107 0310 	add.w	r3, r7, #16
 800e6a6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fd f95f 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	677b      	str	r3, [r7, #116]	; 0x74
 800e6b6:	f107 0310 	add.w	r3, r7, #16
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fc f821 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	bfb4      	ite	lt
 800e6ca:	2301      	movlt	r3, #1
 800e6cc:	2300      	movge	r3, #0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f000 8084 	beq.w	800e7de <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x15e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	673b      	str	r3, [r7, #112]	; 0x70
 800e6da:	f107 0310 	add.w	r3, r7, #16
 800e6de:	2101      	movs	r1, #1
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fc f80f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	bfb4      	ite	lt
 800e6ee:	2301      	movlt	r3, #1
 800e6f0:	2300      	movge	r3, #0
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d06e      	beq.n	800e7d6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x156>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e6fc:	f107 0310 	add.w	r3, r7, #16
 800e700:	2102      	movs	r1, #2
 800e702:	4618      	mov	r0, r3
 800e704:	f7fb fffe 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e708:	4602      	mov	r2, r0
 800e70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e70c:	4293      	cmp	r3, r2
 800e70e:	bfb4      	ite	lt
 800e710:	2301      	movlt	r3, #1
 800e712:	2300      	movge	r3, #0
 800e714:	b2db      	uxtb	r3, r3
 800e716:	2b00      	cmp	r3, #0
 800e718:	d059      	beq.n	800e7ce <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x14e>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800e71a:	2300      	movs	r3, #0
 800e71c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e71e:	f107 0310 	add.w	r3, r7, #16
 800e722:	2103      	movs	r1, #3
 800e724:	4618      	mov	r0, r3
 800e726:	f7fb ffed 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e72a:	4602      	mov	r2, r0
 800e72c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e72e:	4293      	cmp	r3, r2
 800e730:	bfb4      	ite	lt
 800e732:	2301      	movlt	r3, #1
 800e734:	2300      	movge	r3, #0
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d044      	beq.n	800e7c6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x146>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
 800e73c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800e740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e742:	9300      	str	r3, [sp, #0]
 800e744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e746:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e748:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e74a:	f7fd f97e 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800e74e:	4603      	mov	r3, r0
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	4413      	add	r3, r2
 800e756:	ed93 8a00 	vldr	s16, [r3]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
 800e75a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e75e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e764:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e766:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e768:	f7fd f96f 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800e76c:	4603      	mov	r3, r0
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e774:	4413      	add	r3, r2
 800e776:	edd3 7a00 	vldr	s15, [r3]
              ActivationFunctionWithMinMax(
 800e77a:	ee38 8a27 	vadd.f32	s16, s16, s15
                  params.float_activation_min, params.float_activation_max);
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800e78a:	f107 0010 	add.w	r0, r7, #16
 800e78e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e794:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e796:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e798:	f7fd f892 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e79c:	4603      	mov	r3, r0
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800e7a4:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(
 800e7a6:	eeb0 1a49 	vmov.f32	s2, s18
 800e7aa:	eef0 0a68 	vmov.f32	s1, s17
 800e7ae:	eeb0 0a48 	vmov.f32	s0, s16
 800e7b2:	f7fe f87e 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800e7b6:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800e7ba:	edc4 7a00 	vstr	s15, [r4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800e7be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e7c4:	e7ab      	b.n	800e71e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x9e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800e7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e7cc:	e796      	b.n	800e6fc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800e7ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	673b      	str	r3, [r7, #112]	; 0x70
 800e7d4:	e781      	b.n	800e6da <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800e7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7d8:	3301      	adds	r3, #1
 800e7da:	677b      	str	r3, [r7, #116]	; 0x74
 800e7dc:	e76b      	b.n	800e6b6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
      RuntimeShape::ExtendedShape(4, output_shape);
 800e7de:	f107 0310 	add.w	r3, r7, #16
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7f7 fa0c 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
 800e7e8:	bf00      	nop
 800e7ea:	377c      	adds	r7, #124	; 0x7c
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	ecbd 8b04 	vpop	{d8-d9}
 800e7f2:	bd90      	pop	{r4, r7, pc}

0800e7f4 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE>:
#include "tensorflow/lite/kernels/internal/types.h"

namespace tflite {
namespace reference_integer_ops {

inline void CheckArithmeticParams(const ArithmeticParams& params) {
 800e7f4:	b590      	push	{r4, r7, lr}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e804:	429a      	cmp	r2, r3
 800e806:	dd01      	ble.n	800e80c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0x18>
 800e808:	f013 f962 	bl	8021ad0 <abort>
                   params.quantized_activation_max);
  // Input offset is negative input zero point. Activation tensors are
  // asymmetric quantized so they span the full int8 range.
  TFLITE_DCHECK_GE(-params.input1_offset, std::numeric_limits<int8_t>::min());
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	425c      	negs	r4, r3
 800e812:	f7f6 fbab 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 800e816:	4603      	mov	r3, r0
 800e818:	429c      	cmp	r4, r3
 800e81a:	da01      	bge.n	800e820 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0x2c>
 800e81c:	f013 f958 	bl	8021ad0 <abort>
  TFLITE_DCHECK_GE(-params.input2_offset, std::numeric_limits<int8_t>::min());
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	689b      	ldr	r3, [r3, #8]
 800e824:	425c      	negs	r4, r3
 800e826:	f7f6 fba1 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 800e82a:	4603      	mov	r3, r0
 800e82c:	429c      	cmp	r4, r3
 800e82e:	da01      	bge.n	800e834 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0x40>
 800e830:	f013 f94e 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(-params.input1_offset, std::numeric_limits<int8_t>::max());
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	425c      	negs	r4, r3
 800e83a:	f7f6 fba0 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800e83e:	4603      	mov	r3, r0
 800e840:	429c      	cmp	r4, r3
 800e842:	dd01      	ble.n	800e848 <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0x54>
 800e844:	f013 f944 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(-params.input2_offset, std::numeric_limits<int8_t>::max());
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	425c      	negs	r4, r3
 800e84e:	f7f6 fb96 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 800e852:	4603      	mov	r3, r0
 800e854:	429c      	cmp	r4, r3
 800e856:	dd01      	ble.n	800e85c <_ZN6tflite21reference_integer_ops21CheckArithmeticParamsERKNS_16ArithmeticParamsE+0x68>
 800e858:	f013 f93a 	bl	8021ad0 <abort>
}
 800e85c:	bf00      	nop
 800e85e:	370c      	adds	r7, #12
 800e860:	46bd      	mov	sp, r7
 800e862:	bd90      	pop	{r4, r7, pc}

0800e864 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E>:
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const int8_t* input1_data, const RuntimeShape& input2_shape,
    const int8_t* input2_data, const RuntimeShape& output_shape,
    int8_t* output_data,
    void (*check_arithmetic_params)(const ArithmeticParams&),
    int8_t (*binary_func)(int8_t, int8_t, const ArithmeticParams&)) {
 800e864:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e866:	b0a1      	sub	sp, #132	; 0x84
 800e868:	af02      	add	r7, sp, #8
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800e872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e87a:	6839      	ldr	r1, [r7, #0]
 800e87c:	68b8      	ldr	r0, [r7, #8]
 800e87e:	f7fd f92e 	bl	800bade <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800e882:	f107 0310 	add.w	r3, r7, #16
 800e886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e88a:	2104      	movs	r1, #4
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7fd f86f 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800e892:	2300      	movs	r3, #0
 800e894:	677b      	str	r3, [r7, #116]	; 0x74
 800e896:	f107 0310 	add.w	r3, r7, #16
 800e89a:	2100      	movs	r1, #0
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7fb ff31 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e8a2:	4602      	mov	r2, r0
 800e8a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	bfb4      	ite	lt
 800e8aa:	2301      	movlt	r3, #1
 800e8ac:	2300      	movge	r3, #0
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d077      	beq.n	800e9a4 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x140>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	673b      	str	r3, [r7, #112]	; 0x70
 800e8b8:	f107 0310 	add.w	r3, r7, #16
 800e8bc:	2101      	movs	r1, #1
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7fb ff20 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	bfb4      	ite	lt
 800e8cc:	2301      	movlt	r3, #1
 800e8ce:	2300      	movge	r3, #0
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d062      	beq.n	800e99c <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x138>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8da:	f107 0310 	add.w	r3, r7, #16
 800e8de:	2102      	movs	r1, #2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7fb ff0f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	bfb4      	ite	lt
 800e8ee:	2301      	movlt	r3, #1
 800e8f0:	2300      	movge	r3, #0
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d04d      	beq.n	800e994 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x130>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8fc:	f107 0310 	add.w	r3, r7, #16
 800e900:	2103      	movs	r1, #3
 800e902:	4618      	mov	r0, r3
 800e904:	f7fb fefe 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800e908:	4602      	mov	r2, r0
 800e90a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e90c:	4293      	cmp	r3, r2
 800e90e:	bfb4      	ite	lt
 800e910:	2301      	movlt	r3, #1
 800e912:	2300      	movge	r3, #0
 800e914:	b2db      	uxtb	r3, r3
 800e916:	2b00      	cmp	r3, #0
 800e918:	d038      	beq.n	800e98c <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x128>
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
              input1_data[SubscriptToIndex(desc1, b, y, x, c)],
 800e91a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800e91e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e920:	9300      	str	r3, [sp, #0]
 800e922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e924:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e926:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e928:	f7fd f88f 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800e92c:	4603      	mov	r3, r0
 800e92e:	461a      	mov	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4413      	add	r3, r2
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
 800e934:	f993 5000 	ldrsb.w	r5, [r3]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)], params);
 800e938:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e93c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e942:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e944:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e946:	f7fd f880 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461a      	mov	r2, r3
 800e94e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e952:	4413      	add	r3, r2
          output_data[Offset(extended_output_shape, b, y, x, c)] = binary_func(
 800e954:	f993 6000 	ldrsb.w	r6, [r3]
 800e958:	f107 0010 	add.w	r0, r7, #16
 800e95c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e962:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e964:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e966:	f7fc ffab 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800e96a:	4603      	mov	r3, r0
 800e96c:	461a      	mov	r2, r3
 800e96e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e972:	189c      	adds	r4, r3, r2
 800e974:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	4631      	mov	r1, r6
 800e97c:	4628      	mov	r0, r5
 800e97e:	4798      	blx	r3
 800e980:	4603      	mov	r3, r0
 800e982:	7023      	strb	r3, [r4, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800e984:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e986:	3301      	adds	r3, #1
 800e988:	66bb      	str	r3, [r7, #104]	; 0x68
 800e98a:	e7b7      	b.n	800e8fc <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x98>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800e98c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e98e:	3301      	adds	r3, #1
 800e990:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e992:	e7a2      	b.n	800e8da <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x76>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800e994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e996:	3301      	adds	r3, #1
 800e998:	673b      	str	r3, [r7, #112]	; 0x70
 800e99a:	e78d      	b.n	800e8b8 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x54>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800e99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e99e:	3301      	adds	r3, #1
 800e9a0:	677b      	str	r3, [r7, #116]	; 0x74
 800e9a2:	e778      	b.n	800e896 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E+0x32>
      RuntimeShape::ExtendedShape(4, output_shape);
 800e9a4:	f107 0310 	add.w	r3, r7, #16
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7f7 f929 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
 800e9ae:	bf00      	nop
 800e9b0:	377c      	adds	r7, #124	; 0x7c
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9b6 <_ZN6tflite21reference_integer_ops7AddFuncEaaRKNS_16ArithmeticParamsE>:

inline int8_t AddFunc(int8_t x, int8_t y, const ArithmeticParams& params) {
 800e9b6:	b590      	push	{r4, r7, lr}
 800e9b8:	b08d      	sub	sp, #52	; 0x34
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	4603      	mov	r3, r0
 800e9be:	603a      	str	r2, [r7, #0]
 800e9c0:	71fb      	strb	r3, [r7, #7]
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	71bb      	strb	r3, [r7, #6]
  const int32_t input1_val = params.input1_offset + x;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	685a      	ldr	r2, [r3, #4]
 800e9ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  const int32_t input2_val = params.input2_offset + y;
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	689a      	ldr	r2, [r3, #8]
 800e9d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e9da:	4413      	add	r3, r2
 800e9dc:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	699b      	ldr	r3, [r3, #24]
 800e9e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e9e8:	627b      	str	r3, [r7, #36]	; 0x24
  const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9f0:	fa02 f303 	lsl.w	r3, r2, r3
 800e9f4:	623b      	str	r3, [r7, #32]
  const int32_t scaled_input1_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input1_val, params.input1_multiplier, params.input1_shift);
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	69d9      	ldr	r1, [r3, #28]
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800e9fe:	461a      	mov	r2, r3
 800ea00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea02:	f7fd f80c 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ea06:	61f8      	str	r0, [r7, #28]
  const int32_t scaled_input2_val =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          shifted_input2_val, params.input2_multiplier, params.input2_shift);
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ea10:	461a      	mov	r2, r3
 800ea12:	6a38      	ldr	r0, [r7, #32]
 800ea14:	f7fd f803 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ea18:	61b8      	str	r0, [r7, #24]
  const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 800ea1a:	69fa      	ldr	r2, [r7, #28]
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	4413      	add	r3, r2
 800ea20:	617b      	str	r3, [r7, #20]
  const int32_t raw_output =
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
          raw_sum, params.output_multiplier, params.output_shift) +
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	6919      	ldr	r1, [r3, #16]
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	695b      	ldr	r3, [r3, #20]
      MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	6978      	ldr	r0, [r7, #20]
 800ea2e:	f7fc fff6 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ea32:	4602      	mov	r2, r0
      params.output_offset;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	68db      	ldr	r3, [r3, #12]
          raw_sum, params.output_multiplier, params.output_shift) +
 800ea38:	4413      	add	r3, r2
      params.output_offset;
 800ea3a:	60fb      	str	r3, [r7, #12]
  const int32_t clamped_output =
      std::min(params.quantized_activation_max,
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	f103 0430 	add.w	r4, r3, #48	; 0x30
               std::max(params.quantized_activation_min, raw_output));
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	332c      	adds	r3, #44	; 0x2c
 800ea46:	f107 020c 	add.w	r2, r7, #12
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7f6 ff8e 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800ea52:	4603      	mov	r3, r0
 800ea54:	4619      	mov	r1, r3
 800ea56:	4620      	mov	r0, r4
 800ea58:	f7f6 ff75 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	613b      	str	r3, [r7, #16]
  return static_cast<int8_t>(clamped_output);
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	b25b      	sxtb	r3, r3
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3734      	adds	r7, #52	; 0x34
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd90      	pop	{r4, r7, pc}
	...

0800ea70 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b08a      	sub	sp, #40	; 0x28
 800ea74:	af06      	add	r7, sp, #24
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
  BroadcastBinaryFunction4DSlow(params, input1_shape, input1_data, input2_shape,
 800ea7e:	4b0a      	ldr	r3, [pc, #40]	; (800eaa8 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x38>)
 800ea80:	9304      	str	r3, [sp, #16]
 800ea82:	4b0a      	ldr	r3, [pc, #40]	; (800eaac <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3c>)
 800ea84:	9303      	str	r3, [sp, #12]
 800ea86:	6a3b      	ldr	r3, [r7, #32]
 800ea88:	9302      	str	r3, [sp, #8]
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	69bb      	ldr	r3, [r7, #24]
 800ea90:	9300      	str	r3, [sp, #0]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	68b9      	ldr	r1, [r7, #8]
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff fee3 	bl	800e864 <_ZN6tflite21reference_integer_ops29BroadcastBinaryFunction4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PaPFvS3_EPFaaaS3_E>
                                input2_data, output_shape, output_data,
                                CheckArithmeticParams, AddFunc);
}
 800ea9e:	bf00      	nop
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	0800e9b7 	.word	0x0800e9b7
 800eaac:	0800e7f5 	.word	0x0800e7f5

0800eab0 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
 800eab0:	b5b0      	push	{r4, r5, r7, lr}
 800eab2:	b090      	sub	sp, #64	; 0x40
 800eab4:	af02      	add	r7, sp, #8
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
 800eabc:	603b      	str	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7f6 ff15 	bl	80058f0 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
 800eac6:	4603      	mov	r3, r0
 800eac8:	f083 0301 	eor.w	r3, r3, #1
 800eacc:	b2da      	uxtb	r2, r3
 800eace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ead0:	701a      	strb	r2, [r3, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 800ead2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	2b03      	cmp	r3, #3
 800ead8:	d004      	beq.n	800eae4 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x34>
 800eada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b09      	cmp	r3, #9
 800eae0:	f040 8095 	bne.w	800ec0e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	425a      	negs	r2, r3
 800eaea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaec:	629a      	str	r2, [r3, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	425a      	negs	r2, r3
 800eaf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eaf6:	62da      	str	r2, [r3, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
 800eaf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eafa:	691a      	ldr	r2, [r3, #16]
 800eafc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eafe:	631a      	str	r2, [r3, #48]	; 0x30
    data->left_shift = 20;
 800eb00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb02:	2214      	movs	r2, #20
 800eb04:	625a      	str	r2, [r3, #36]	; 0x24
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f103 020c 	add.w	r2, r3, #12
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	330c      	adds	r3, #12
 800eb10:	4619      	mov	r1, r3
 800eb12:	4610      	mov	r0, r2
 800eb14:	f7f6 f9ed 	bl	8004ef2 <_ZSt3maxIfERKT_S2_S2_>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	681b      	ldr	r3, [r3, #0]
        2 * static_cast<double>(
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7f1 fd2d 	bl	800057c <__aeabi_f2d>
                std::max(input1->params.scale, input2->params.scale));
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	f7f1 fbcb 	bl	80002c0 <__adddf3>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	68db      	ldr	r3, [r3, #12]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7f1 fd20 	bl	800057c <__aeabi_f2d>
    const double real_input1_multiplier =
 800eb3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eb40:	f7f1 fe9e 	bl	8000880 <__aeabi_ddiv>
 800eb44:	4602      	mov	r2, r0
 800eb46:	460b      	mov	r3, r1
 800eb48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7f1 fd13 	bl	800057c <__aeabi_f2d>
    const double real_input2_multiplier =
 800eb56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800eb5a:	f7f1 fe91 	bl	8000880 <__aeabi_ddiv>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 800eb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7f1 fcf1 	bl	8000558 <__aeabi_i2d>
 800eb76:	4604      	mov	r4, r0
 800eb78:	460d      	mov	r5, r1
 800eb7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7f1 fcfc 	bl	800057c <__aeabi_f2d>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4620      	mov	r0, r4
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	f7f1 fd4e 	bl	800062c <__aeabi_dmul>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
    const double real_output_multiplier =
 800eb94:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800eb98:	f7f1 fe72 	bl	8000880 <__aeabi_ddiv>
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	460b      	mov	r3, r1
 800eba0:	e9c7 2306 	strd	r2, r3, [r7, #24]

    QuantizeMultiplierSmallerThanOneExp(
 800eba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba6:	f103 0214 	add.w	r2, r3, #20
 800ebaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebac:	3304      	adds	r3, #4
 800ebae:	4619      	mov	r1, r3
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 800ebb6:	f7f6 f94d 	bl	8004e54 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
 800ebba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebbc:	f103 0218 	add.w	r2, r3, #24
 800ebc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	4610      	mov	r0, r2
 800ebc8:	ed97 0b08 	vldr	d0, [r7, #32]
 800ebcc:	f7f6 f942 	bl	8004e54 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
 800ebd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd2:	f103 021c 	add.w	r2, r3, #28
 800ebd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebd8:	3320      	adds	r3, #32
 800ebda:	4619      	mov	r1, r3
 800ebdc:	4610      	mov	r0, r2
 800ebde:	ed97 0b06 	vldr	d0, [r7, #24]
 800ebe2:	f7f6 f937 	bl	8004e54 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	7819      	ldrb	r1, [r3, #0]
 800ebea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebec:	f103 020c 	add.w	r2, r3, #12
 800ebf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebf2:	3310      	adds	r3, #16
 800ebf4:	9300      	str	r3, [sp, #0]
 800ebf6:	4613      	mov	r3, r2
 800ebf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebfa:	68f8      	ldr	r0, [r7, #12]
 800ebfc:	f7f6 fe24 	bl	8005848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800ec00:	4603      	mov	r3, r0
 800ec02:	75fb      	strb	r3, [r7, #23]
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d010      	beq.n	800ec2c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x17c>
 800ec0a:	7dfb      	ldrb	r3, [r7, #23]
 800ec0c:	e010      	b.n	800ec30 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x180>
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  } else if (output->type == kTfLiteFloat32) {
 800ec0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d10b      	bne.n	800ec2e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x17e>
    CalculateActivationRange(params->activation,
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	7818      	ldrb	r0, [r3, #0]
 800ec1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec1c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ec20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec22:	3338      	adds	r3, #56	; 0x38
 800ec24:	461a      	mov	r2, r3
 800ec26:	f7fd fa79 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 800ec2a:	e000      	b.n	800ec2e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x17e>
        &data->output_activation_max));
 800ec2c:	bf00      	nop
                             &data->output_activation_min_f32,
                             &data->output_activation_max_f32);
  }

  return kTfLiteOk;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3738      	adds	r7, #56	; 0x38
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bdb0      	pop	{r4, r5, r7, pc}

0800ec38 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:

void EvalAdd(TfLiteContext* context, TfLiteNode* node, TfLiteAddParams* params,
             const OpData* data, const TfLiteEvalTensor* input1,
             const TfLiteEvalTensor* input2, TfLiteEvalTensor* output) {
 800ec38:	b5b0      	push	{r4, r5, r7, lr}
 800ec3a:	b0c6      	sub	sp, #280	; 0x118
 800ec3c:	af04      	add	r7, sp, #16
 800ec3e:	60f8      	str	r0, [r7, #12]
 800ec40:	f107 0008 	add.w	r0, r7, #8
 800ec44:	6001      	str	r1, [r0, #0]
 800ec46:	1d39      	adds	r1, r7, #4
 800ec48:	600a      	str	r2, [r1, #0]
 800ec4a:	463a      	mov	r2, r7
 800ec4c:	6013      	str	r3, [r2, #0]
  tflite::ArithmeticParams op_params;
  SetActivationParams(data->output_activation_min_f32,
 800ec4e:	463b      	mov	r3, r7
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
                      data->output_activation_max_f32, &op_params);
 800ec56:	463b      	mov	r3, r7
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
  SetActivationParams(data->output_activation_min_f32,
 800ec5e:	f107 0310 	add.w	r3, r7, #16
 800ec62:	4618      	mov	r0, r3
 800ec64:	eef0 0a47 	vmov.f32	s1, s14
 800ec68:	eeb0 0a67 	vmov.f32	s0, s15
 800ec6c:	f7fd fe41 	bl	800c8f2 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>
                        tflite::micro::GetTensorData<float>(input1),      \
                        tflite::micro::GetTensorShape(input2),            \
                        tflite::micro::GetTensorData<float>(input2),      \
                        tflite::micro::GetTensorShape(output),            \
                        tflite::micro::GetTensorData<float>(output))
  if (data->requires_broadcast) {
 800ec70:	463b      	mov	r3, r7
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d042      	beq.n	800ed00 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0xc8>
    TF_LITE_ADD(BroadcastAdd4DSlow);
 800ec7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ec7e:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fd fe6c 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ec88:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800ec8c:	f7fc fb02 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ec90:	4605      	mov	r5, r0
 800ec92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ec96:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fd fe60 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800eca0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800eca4:	f7fc faf6 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800eca8:	4604      	mov	r4, r0
 800ecaa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ecae:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fd fe54 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ecb8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ecbc:	f7fc faf9 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800ecc6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800ecca:	f107 0010 	add.w	r0, r7, #16
 800ecce:	9302      	str	r3, [sp, #8]
 800ecd0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	9400      	str	r4, [sp, #0]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	462a      	mov	r2, r5
 800ecdc:	f7ff fcd0 	bl	800e680 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 800ece0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f6 ff8b 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ecea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7f6 ff86 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ecf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f6 ff81 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    TF_LITE_ADD(Add);
  }
#undef TF_LITE_ADD
}
 800ecfe:	e041      	b.n	800ed84 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x14c>
    TF_LITE_ADD(Add);
 800ed00:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800ed04:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7fd fe29 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ed0e:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800ed12:	f7fc fabf 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ed16:	4605      	mov	r5, r0
 800ed18:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ed1c:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fd fe1d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ed26:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ed2a:	f7fc fab3 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800ed2e:	4604      	mov	r4, r0
 800ed30:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800ed34:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fd fe11 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ed3e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ed42:	f7fc fab6 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800ed46:	4603      	mov	r3, r0
 800ed48:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800ed4c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800ed50:	f107 0010 	add.w	r0, r7, #16
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	9400      	str	r4, [sp, #0]
 800ed5e:	4613      	mov	r3, r2
 800ed60:	462a      	mov	r2, r5
 800ed62:	f7ff fc11 	bl	800e588 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 800ed66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7f6 ff48 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ed70:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f6 ff43 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ed7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f6 ff3e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800ed84:	bf00      	nop
 800ed86:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bdb0      	pop	{r4, r5, r7, pc}

0800ed8e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>:

TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
                              TfLiteAddParams* params, const OpData* data,
                              const TfLiteEvalTensor* input1,
                              const TfLiteEvalTensor* input2,
                              TfLiteEvalTensor* output) {
 800ed8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed92:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800ed96:	af0c      	add	r7, sp, #48	; 0x30
 800ed98:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800ed9c:	6020      	str	r0, [r4, #0]
 800ed9e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800eda2:	6001      	str	r1, [r0, #0]
 800eda4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800eda8:	600a      	str	r2, [r1, #0]
 800edaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800edae:	6013      	str	r3, [r2, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 800edb0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800edb4:	7a1b      	ldrb	r3, [r3, #8]
 800edb6:	2b03      	cmp	r3, #3
 800edb8:	d005      	beq.n	800edc6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x38>
 800edba:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800edbe:	7a1b      	ldrb	r3, [r3, #8]
 800edc0:	2b09      	cmp	r3, #9
 800edc2:	f040 81d2 	bne.w	800f16a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3dc>
    tflite::ArithmeticParams op_params;
    op_params.left_shift = data->left_shift;
 800edc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edd2:	619a      	str	r2, [r3, #24]
    op_params.input1_offset = data->input1_offset;
 800edd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eddc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ede0:	605a      	str	r2, [r3, #4]
    op_params.input1_multiplier = data->input1_multiplier;
 800ede2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	695a      	ldr	r2, [r3, #20]
 800edea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edee:	61da      	str	r2, [r3, #28]
    op_params.input1_shift = data->input1_shift;
 800edf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685a      	ldr	r2, [r3, #4]
 800edf8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800edfc:	621a      	str	r2, [r3, #32]
    op_params.input2_offset = data->input2_offset;
 800edfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee0a:	609a      	str	r2, [r3, #8]
    op_params.input2_multiplier = data->input2_multiplier;
 800ee0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	699a      	ldr	r2, [r3, #24]
 800ee14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee18:	625a      	str	r2, [r3, #36]	; 0x24
    op_params.input2_shift = data->input2_shift;
 800ee1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	689a      	ldr	r2, [r3, #8]
 800ee22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee26:	629a      	str	r2, [r3, #40]	; 0x28
    op_params.output_offset = data->output_offset;
 800ee28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee34:	60da      	str	r2, [r3, #12]
    op_params.output_multiplier = data->output_multiplier;
 800ee36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	69da      	ldr	r2, [r3, #28]
 800ee3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee42:	611a      	str	r2, [r3, #16]
    op_params.output_shift = data->output_shift;
 800ee44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6a1a      	ldr	r2, [r3, #32]
 800ee4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ee50:	615a      	str	r2, [r3, #20]
    SetActivationParams(data->output_activation_min,
 800ee52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	68d8      	ldr	r0, [r3, #12]
                        data->output_activation_max, &op_params);
 800ee5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	691b      	ldr	r3, [r3, #16]
    SetActivationParams(data->output_activation_min,
 800ee62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee66:	4619      	mov	r1, r3
 800ee68:	f7fd fd57 	bl	800c91a <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
        tflite::micro::GetTensorShape(input1),
 800ee6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ee70:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7fd fd73 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(input2), &op_params);
 800ee7a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800ee7e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd fd6c 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 800ee88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800ee8c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800ee90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fd fb88 	bl	800c5aa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7
        tflite::micro::GetTensorShape(input2), &op_params);
 800eea0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7f6 feab 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input1),
 800eeaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f6 fea6 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
               tflite::micro::GetTensorData<dtype>(input1),      \
               tflite::micro::GetTensorShape(input2),            \
               tflite::micro::GetTensorData<dtype>(input2),      \
               tflite::micro::GetTensorShape(output),            \
               tflite::micro::GetTensorData<dtype>(output));
    if (output->type == kTfLiteInt8) {
 800eeb4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 800eeb8:	7a1b      	ldrb	r3, [r3, #8]
 800eeba:	2b09      	cmp	r3, #9
 800eebc:	f040 80cc 	bne.w	800f058 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x2ca>
      if (need_broadcast) {
 800eec0:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d042      	beq.n	800ef4e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x1c0>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
 800eec8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800eecc:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fd fd45 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800eed6:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800eeda:	f7fc f9fb 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800eede:	4605      	mov	r5, r0
 800eee0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800eee4:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd fd39 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800eeee:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800eef2:	f7fc f9ef 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800eef6:	4604      	mov	r4, r0
 800eef8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800eefc:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fd fd2d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ef06:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800ef0a:	f7fc f9f2 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800ef14:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800ef18:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800ef1c:	9302      	str	r3, [sp, #8]
 800ef1e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	9400      	str	r4, [sp, #0]
 800ef26:	4613      	mov	r3, r2
 800ef28:	462a      	mov	r2, r5
 800ef2a:	f7ff fda1 	bl	800ea70 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 800ef2e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f6 fe64 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef38:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f6 fe5f 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7f6 fe5a 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800ef4c:	e10d      	b.n	800f16a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3dc>
      } else {
        arm_elementwise_add_s8(
 800ef4e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800ef52:	f7fc f9bf 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ef56:	4680      	mov	r8, r0
 800ef58:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800ef5c:	f7fc f9ba 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800ef60:	4681      	mov	r9, r0
 800ef62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
 800ef6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef6e:	69d9      	ldr	r1, [r3, #28]
 800ef70:	6239      	str	r1, [r7, #32]
            tflite::micro::GetTensorData<int8_t>(input1),
            tflite::micro::GetTensorData<int8_t>(input2),
            op_params.input1_offset, op_params.input1_multiplier,
            op_params.input1_shift, op_params.input2_offset,
 800ef72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef76:	6a1e      	ldr	r6, [r3, #32]
        arm_elementwise_add_s8(
 800ef78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef7c:	6898      	ldr	r0, [r3, #8]
 800ef7e:	61f8      	str	r0, [r7, #28]
 800ef80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ef86:	61bc      	str	r4, [r7, #24]
            op_params.input2_multiplier, op_params.input2_shift,
 800ef88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef8c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ef8e:	617d      	str	r5, [r7, #20]
            op_params.left_shift, tflite::micro::GetTensorData<int8_t>(output),
 800ef90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef94:	699a      	ldr	r2, [r3, #24]
 800ef96:	613a      	str	r2, [r7, #16]
        arm_elementwise_add_s8(
 800ef98:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800ef9c:	f7fc f9a9 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800efa0:	60f8      	str	r0, [r7, #12]
 800efa2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efa6:	68d9      	ldr	r1, [r3, #12]
 800efa8:	60b9      	str	r1, [r7, #8]
 800efaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efae:	691b      	ldr	r3, [r3, #16]
 800efb0:	607b      	str	r3, [r7, #4]
            op_params.output_offset, op_params.output_multiplier,
            op_params.output_shift, op_params.quantized_activation_min,
 800efb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efb6:	695c      	ldr	r4, [r3, #20]
 800efb8:	603c      	str	r4, [r7, #0]
        arm_elementwise_add_s8(
 800efba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efbe:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800efc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efc4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
            op_params.quantized_activation_max,
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
 800efc6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800efca:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fd fcc6 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(input2),
 800efd4:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800efd8:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fd fcbf 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                                 tflite::micro::GetTensorShape(output)));
 800efe2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800efe6:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800efea:	4618      	mov	r0, r3
 800efec:	f7fd fcb8 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
 800eff0:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 800eff4:	f507 719a 	add.w	r1, r7, #308	; 0x134
 800eff8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800effc:	4618      	mov	r0, r3
 800effe:	f7fd fab1 	bl	800c564 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800f002:	4603      	mov	r3, r0
        arm_elementwise_add_s8(
 800f004:	930b      	str	r3, [sp, #44]	; 0x2c
 800f006:	940a      	str	r4, [sp, #40]	; 0x28
 800f008:	9509      	str	r5, [sp, #36]	; 0x24
 800f00a:	683c      	ldr	r4, [r7, #0]
 800f00c:	9408      	str	r4, [sp, #32]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	9307      	str	r3, [sp, #28]
 800f012:	68b9      	ldr	r1, [r7, #8]
 800f014:	9106      	str	r1, [sp, #24]
 800f016:	68f9      	ldr	r1, [r7, #12]
 800f018:	9105      	str	r1, [sp, #20]
 800f01a:	693a      	ldr	r2, [r7, #16]
 800f01c:	9204      	str	r2, [sp, #16]
 800f01e:	697d      	ldr	r5, [r7, #20]
 800f020:	9503      	str	r5, [sp, #12]
 800f022:	69bc      	ldr	r4, [r7, #24]
 800f024:	9402      	str	r4, [sp, #8]
 800f026:	69f8      	ldr	r0, [r7, #28]
 800f028:	9001      	str	r0, [sp, #4]
 800f02a:	9600      	str	r6, [sp, #0]
 800f02c:	6a3b      	ldr	r3, [r7, #32]
 800f02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f030:	4649      	mov	r1, r9
 800f032:	4640      	mov	r0, r8
 800f034:	f004 fa4c 	bl	80134d0 <arm_elementwise_add_s8>
                                 tflite::micro::GetTensorShape(output)));
 800f038:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7f6 fddf 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                                 tflite::micro::GetTensorShape(input2),
 800f042:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800f046:	4618      	mov	r0, r3
 800f048:	f7f6 fdda 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
            MatchingElementsSize(tflite::micro::GetTensorShape(input1),
 800f04c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800f050:	4618      	mov	r0, r3
 800f052:	f7f6 fdd5 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f056:	e088      	b.n	800f16a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3dc>
      }
    } else {
      if (need_broadcast) {
 800f058:	f897 31f7 	ldrb.w	r3, [r7, #503]	; 0x1f7
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d042      	beq.n	800f0e6 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x358>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
 800f060:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800f064:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd fc79 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f06e:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800f072:	f7fc f99b 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f076:	4605      	mov	r5, r0
 800f078:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f07c:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd fc6d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f086:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800f08a:	f7fc f98f 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f08e:	4604      	mov	r4, r0
 800f090:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800f094:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fd fc61 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f09e:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800f0a2:	f7fc f992 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800f0ac:	f507 71b2 	add.w	r1, r7, #356	; 0x164
 800f0b0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f0b4:	9302      	str	r3, [sp, #8]
 800f0b6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800f0ba:	9301      	str	r3, [sp, #4]
 800f0bc:	9400      	str	r4, [sp, #0]
 800f0be:	4613      	mov	r3, r2
 800f0c0:	462a      	mov	r2, r5
 800f0c2:	f000 f9f2 	bl	800f4aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
 800f0c6:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f6 fd98 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f0d0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7f6 fd93 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f0da:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7f6 fd8e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f0e4:	e041      	b.n	800f16a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_+0x3dc>
      } else {
        TF_LITE_ADD(reference_ops, Add, uint8_t);
 800f0e6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800f0ea:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fd fc36 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f0f4:	f8d7 0218 	ldr.w	r0, [r7, #536]	; 0x218
 800f0f8:	f7fc f958 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f0fc:	4605      	mov	r5, r0
 800f0fe:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800f102:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800f106:	4618      	mov	r0, r3
 800f108:	f7fd fc2a 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f10c:	f8d7 021c 	ldr.w	r0, [r7, #540]	; 0x21c
 800f110:	f7fc f94c 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800f114:	4604      	mov	r4, r0
 800f116:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800f11a:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fd fc1e 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800f124:	f8d7 0220 	ldr.w	r0, [r7, #544]	; 0x220
 800f128:	f7fc f94f 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800f12c:	4603      	mov	r3, r0
 800f12e:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 800f132:	f507 71d6 	add.w	r1, r7, #428	; 0x1ac
 800f136:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800f13a:	9302      	str	r3, [sp, #8]
 800f13c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800f140:	9301      	str	r3, [sp, #4]
 800f142:	9400      	str	r4, [sp, #0]
 800f144:	4613      	mov	r3, r2
 800f146:	462a      	mov	r2, r5
 800f148:	f7ff fa5f 	bl	800e60a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 800f14c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800f150:	4618      	mov	r0, r3
 800f152:	f7f6 fd55 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f156:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7f6 fd50 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 800f160:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800f164:	4618      	mov	r0, r3
 800f166:	f7f6 fd4b 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
#undef TF_LITE_ADD
  }

  return kTfLiteOk;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 800f172:	46bd      	mov	sp, r7
 800f174:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f178 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <_ZN6tflite3ops5micro3add4InitEP13TfLiteContextPKcj+0x18>
 800f18c:	f012 fca0 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f194:	213c      	movs	r1, #60	; 0x3c
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	4798      	blx	r3
 800f19a:	4603      	mov	r3, r0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b08b      	sub	sp, #44	; 0x2c
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800f1b6:	f012 fc8b 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	695b      	ldr	r3, [r3, #20]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d101      	bne.n	800f1c6 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800f1c2:	f012 fc85 	bl	8021ad0 <abort>

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	6839      	ldr	r1, [r7, #0]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7f5 ffd7 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f1d0:	61f8      	str	r0, [r7, #28]
  TF_LITE_ENSURE(context, input1 != nullptr);
 800f1d2:	69fb      	ldr	r3, [r7, #28]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	695c      	ldr	r4, [r3, #20]
 800f1dc:	4b26      	ldr	r3, [pc, #152]	; (800f278 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	23f3      	movs	r3, #243	; 0xf3
 800f1e2:	4a26      	ldr	r2, [pc, #152]	; (800f27c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f1e4:	4926      	ldr	r1, [pc, #152]	; (800f280 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	47a0      	blx	r4
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e03f      	b.n	800f26e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7f5 ffc3 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f1f8:	61b8      	str	r0, [r7, #24]
  TF_LITE_ENSURE(context, input2 != nullptr);
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10a      	bne.n	800f216 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x72>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	695c      	ldr	r4, [r3, #20]
 800f204:	4b1f      	ldr	r3, [pc, #124]	; (800f284 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	23f5      	movs	r3, #245	; 0xf5
 800f20a:	4a1c      	ldr	r2, [pc, #112]	; (800f27c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f20c:	491c      	ldr	r1, [pc, #112]	; (800f280 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	47a0      	blx	r4
 800f212:	2301      	movs	r3, #1
 800f214:	e02b      	b.n	800f26e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800f216:	2200      	movs	r2, #0
 800f218:	6839      	ldr	r1, [r7, #0]
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	f7f5 ffbf 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f220:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, output != nullptr);
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10a      	bne.n	800f23e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	695c      	ldr	r4, [r3, #20]
 800f22c:	4b16      	ldr	r3, [pc, #88]	; (800f288 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	23f7      	movs	r3, #247	; 0xf7
 800f232:	4a12      	ldr	r2, [pc, #72]	; (800f27c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f234:	4912      	ldr	r1, [pc, #72]	; (800f280 <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	47a0      	blx	r4
 800f23a:	2301      	movs	r3, #1
 800f23c:	e017      	b.n	800f26e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xca>

  OpData* data = static_cast<OpData*>(node->user_data);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	691b      	ldr	r3, [r3, #16]
 800f242:	613b      	str	r3, [r7, #16]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	695b      	ldr	r3, [r3, #20]
 800f248:	60fb      	str	r3, [r7, #12]

  TF_LITE_ENSURE_STATUS(
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	9301      	str	r3, [sp, #4]
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	9300      	str	r3, [sp, #0]
 800f252:	69bb      	ldr	r3, [r7, #24]
 800f254:	69fa      	ldr	r2, [r7, #28]
 800f256:	68f9      	ldr	r1, [r7, #12]
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fc29 	bl	800eab0 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
 800f25e:	4603      	mov	r3, r0
 800f260:	72fb      	strb	r3, [r7, #11]
 800f262:	7afb      	ldrb	r3, [r7, #11]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d001      	beq.n	800f26c <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 800f268:	7afb      	ldrb	r3, [r7, #11]
 800f26a:	e000      	b.n	800f26e <_ZN6tflite3ops5micro3add7PrepareEP13TfLiteContextP10TfLiteNode+0xca>
      CalculateOpData(context, params, input1, input2, output, data));

  return kTfLiteOk;
 800f26c:	2300      	movs	r3, #0
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3724      	adds	r7, #36	; 0x24
 800f272:	46bd      	mov	sp, r7
 800f274:	bd90      	pop	{r4, r7, pc}
 800f276:	bf00      	nop
 800f278:	08027b88 	.word	0x08027b88
 800f27c:	08027b34 	.word	0x08027b34
 800f280:	08027b70 	.word	0x08027b70
 800f284:	08027b9c 	.word	0x08027b9c
 800f288:	08027bb0 	.word	0x08027bb0

0800f28c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800f28c:	b590      	push	{r4, r7, lr}
 800f28e:	b08d      	sub	sp, #52	; 0x34
 800f290:	af04      	add	r7, sp, #16
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
	auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	61fb      	str	r3, [r7, #28]

	const TfLiteEvalTensor*	input1	=	tflite::micro::GetEvalInput(context, node, kInputTensor1);
 800f29c:	2200      	movs	r2, #0
 800f29e:	6839      	ldr	r1, [r7, #0]
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	f7fb fb03 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f2a6:	61b8      	str	r0, [r7, #24]
	const TfLiteEvalTensor*	input2	=	tflite::micro::GetEvalInput(context, node, kInputTensor2);
 800f2a8:	2201      	movs	r2, #1
 800f2aa:	6839      	ldr	r1, [r7, #0]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7fb fafd 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800f2b2:	6178      	str	r0, [r7, #20]
	TfLiteEvalTensor*		output	=	tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	6839      	ldr	r1, [r7, #0]
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7fb fb07 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800f2be:	6138      	str	r0, [r7, #16]

	TFLITE_DCHECK(node->user_data != nullptr);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x40>
 800f2c8:	f012 fc02 	bl	8021ad0 <abort>
	const OpData* data = static_cast<const OpData*>(node->user_data);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	60fb      	str	r3, [r7, #12]
	}
	#endif

	#else

	if (output->type == kTfLiteFloat32) {
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	7a1b      	ldrb	r3, [r3, #8]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d10c      	bne.n	800f2f4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
		EvalAdd(context, node, params, data, input1, input2, output);
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	9302      	str	r3, [sp, #8]
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	9301      	str	r3, [sp, #4]
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	9300      	str	r3, [sp, #0]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	69fa      	ldr	r2, [r7, #28]
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff fca3 	bl	800ec38 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
 800f2f2:	e02a      	b.n	800f34a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
	} else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	7a1b      	ldrb	r3, [r3, #8]
 800f2f8:	2b03      	cmp	r3, #3
 800f2fa:	d003      	beq.n	800f304 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x78>
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	7a1b      	ldrb	r3, [r3, #8]
 800f300:	2b09      	cmp	r3, #9
 800f302:	d112      	bne.n	800f32a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
		TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, data,
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	9302      	str	r3, [sp, #8]
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	9301      	str	r3, [sp, #4]
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	69fa      	ldr	r2, [r7, #28]
 800f314:	6839      	ldr	r1, [r7, #0]
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f7ff fd39 	bl	800ed8e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK16TfLiteEvalTensorSE_PSC_>
 800f31c:	4603      	mov	r3, r0
 800f31e:	72fb      	strb	r3, [r7, #11]
 800f320:	7afb      	ldrb	r3, [r7, #11]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d010      	beq.n	800f348 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
 800f326:	7afb      	ldrb	r3, [r7, #11]
 800f328:	e010      	b.n	800f34c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
													input1, input2, output));
	} else {
		TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	695c      	ldr	r4, [r3, #20]
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	7a1b      	ldrb	r3, [r3, #8]
 800f332:	4618      	mov	r0, r3
 800f334:	f7f3 f97a 	bl	800262c <TfLiteTypeGetName>
 800f338:	4602      	mov	r2, r0
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	7a1b      	ldrb	r3, [r3, #8]
 800f33e:	4905      	ldr	r1, [pc, #20]	; (800f354 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	47a0      	blx	r4
						   TfLiteTypeGetName(output->type), output->type);
	return kTfLiteError;
 800f344:	2301      	movs	r3, #1
 800f346:	e001      	b.n	800f34c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
													input1, input2, output));
 800f348:	bf00      	nop
	}
	#endif

  return kTfLiteOk;
 800f34a:	2300      	movs	r3, #0
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	3724      	adds	r7, #36	; 0x24
 800f350:	46bd      	mov	sp, r7
 800f352:	bd90      	pop	{r4, r7, pc}
 800f354:	08027bc4 	.word	0x08027bc4

0800f358 <_ZN6tflite3ops5micro12Register_ADDEv>:

}  // namespace add

TfLiteRegistration Register_ADD() {
 800f358:	b4b0      	push	{r4, r5, r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
          /*prepare=*/add::Prepare,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	4a07      	ldr	r2, [pc, #28]	; (800f380 <_ZN6tflite3ops5micro12Register_ADDEv+0x28>)
 800f364:	461c      	mov	r4, r3
 800f366:	4615      	mov	r5, r2
 800f368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f36c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f370:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	bcb0      	pop	{r4, r5, r7}
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	08027be0 	.word	0x08027be0

0800f384 <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_>:
inline void AddElementwise(int size, const ArithmeticParams& params,
 800f384:	b590      	push	{r4, r7, lr}
 800f386:	b08f      	sub	sp, #60	; 0x3c
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_GT(params.input1_offset, -std::numeric_limits<T>::max());
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	685c      	ldr	r4, [r3, #4]
 800f396:	f7f5 fe02 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800f39a:	4603      	mov	r3, r0
 800f39c:	425b      	negs	r3, r3
 800f39e:	429c      	cmp	r4, r3
 800f3a0:	dc01      	bgt.n	800f3a6 <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x22>
 800f3a2:	f012 fb95 	bl	8021ad0 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -std::numeric_limits<T>::max());
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	689c      	ldr	r4, [r3, #8]
 800f3aa:	f7f5 fdf8 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	425b      	negs	r3, r3
 800f3b2:	429c      	cmp	r4, r3
 800f3b4:	dc01      	bgt.n	800f3ba <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x36>
 800f3b6:	f012 fb8b 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, std::numeric_limits<T>::max());
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	685c      	ldr	r4, [r3, #4]
 800f3be:	f7f5 fdee 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	429c      	cmp	r4, r3
 800f3c6:	db01      	blt.n	800f3cc <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x48>
 800f3c8:	f012 fb82 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, std::numeric_limits<T>::max());
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	689c      	ldr	r4, [r3, #8]
 800f3d0:	f7f5 fde5 	bl	8004f9e <_ZNSt14numeric_limitsIhE3maxEv>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	429c      	cmp	r4, r3
 800f3d8:	db01      	blt.n	800f3de <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x5a>
 800f3da:	f012 fb79 	bl	8021ad0 <abort>
  for (int i = 0; i < size; ++i) {
 800f3de:	2300      	movs	r3, #0
 800f3e0:	637b      	str	r3, [r7, #52]	; 0x34
 800f3e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	da5b      	bge.n	800f4a2 <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x11e>
    const int32_t input1_val = params.input1_offset + input1_data[i];
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3f0:	6879      	ldr	r1, [r7, #4]
 800f3f2:	440a      	add	r2, r1
 800f3f4:	7812      	ldrb	r2, [r2, #0]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t input2_val = params.input2_offset + input2_data[i];
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	689b      	ldr	r3, [r3, #8]
 800f3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f400:	6839      	ldr	r1, [r7, #0]
 800f402:	440a      	add	r2, r1
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	4413      	add	r3, r2
 800f408:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	699b      	ldr	r3, [r3, #24]
 800f40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f410:	fa02 f303 	lsl.w	r3, r2, r3
 800f414:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	699b      	ldr	r3, [r3, #24]
 800f41a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f41c:	fa02 f303 	lsl.w	r3, r2, r3
 800f420:	627b      	str	r3, [r7, #36]	; 0x24
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	69d9      	ldr	r1, [r3, #28]
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f42a:	461a      	mov	r2, r3
 800f42c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f42e:	f7fc faf6 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f432:	6238      	str	r0, [r7, #32]
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f43c:	461a      	mov	r2, r3
 800f43e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f440:	f7fc faed 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f444:	61f8      	str	r0, [r7, #28]
    const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 800f446:	6a3a      	ldr	r2, [r7, #32]
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	4413      	add	r3, r2
 800f44c:	61bb      	str	r3, [r7, #24]
            raw_sum, params.output_multiplier, params.output_shift) +
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	6919      	ldr	r1, [r3, #16]
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f456:	461a      	mov	r2, r3
 800f458:	69b8      	ldr	r0, [r7, #24]
 800f45a:	f7fc fae0 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f45e:	4602      	mov	r2, r0
        params.output_offset;
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 800f464:	4413      	add	r3, r2
    const int32_t raw_output =
 800f466:	613b      	str	r3, [r7, #16]
        std::min(params.quantized_activation_max,
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	332c      	adds	r3, #44	; 0x2c
 800f472:	f107 0210 	add.w	r2, r7, #16
 800f476:	4611      	mov	r1, r2
 800f478:	4618      	mov	r0, r3
 800f47a:	f7f6 fa78 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800f47e:	4603      	mov	r3, r0
 800f480:	4619      	mov	r1, r3
 800f482:	4620      	mov	r0, r4
 800f484:	f7f6 fa5f 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800f488:	4603      	mov	r3, r0
    const int32_t clamped_output =
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	617b      	str	r3, [r7, #20]
    output_data[i] = static_cast<T>(clamped_output);
 800f48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f492:	4413      	add	r3, r2
 800f494:	697a      	ldr	r2, [r7, #20]
 800f496:	b2d2      	uxtb	r2, r2
 800f498:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 800f49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f49c:	3301      	adds	r3, #1
 800f49e:	637b      	str	r3, [r7, #52]	; 0x34
 800f4a0:	e79f      	b.n	800f3e2 <_ZN6tflite13reference_ops14AddElementwiseIhEEviRKNS_16ArithmeticParamsEPKT_S7_PS5_+0x5e>
}
 800f4a2:	bf00      	nop
 800f4a4:	373c      	adds	r7, #60	; 0x3c
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd90      	pop	{r4, r7, pc}

0800f4aa <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

// This function is used for 8-bit as well as for 16-bit, but the accumulator
// is 32-bit for both cases. The overflow does not happen due to the
// choice of the shift (20 or 15, accordingly - see add.cc for more comments).
template <typename T>
inline void BroadcastAdd4DSlow(
 800f4aa:	b590      	push	{r4, r7, lr}
 800f4ac:	b0ab      	sub	sp, #172	; 0xac
 800f4ae:	af02      	add	r7, sp, #8
 800f4b0:	60f8      	str	r0, [r7, #12]
 800f4b2:	60b9      	str	r1, [r7, #8]
 800f4b4:	607a      	str	r2, [r7, #4]
 800f4b6:	603b      	str	r3, [r7, #0]
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800f4b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4bc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800f4c0:	6839      	ldr	r1, [r7, #0]
 800f4c2:	68b8      	ldr	r0, [r7, #8]
 800f4c4:	f7fc fb0b 	bl	800bade <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
 800f4c8:	f107 0318 	add.w	r3, r7, #24
 800f4cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f4d0:	2104      	movs	r1, #4
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fc fa4c 	bl	800b970 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800f4d8:	2300      	movs	r3, #0
 800f4da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f4de:	f107 0318 	add.w	r3, r7, #24
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fb f90d 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	bfb4      	ite	lt
 800f4f4:	2301      	movlt	r3, #1
 800f4f6:	2300      	movge	r3, #0
 800f4f8:	b2db      	uxtb	r3, r3
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	f000 80e0 	beq.w	800f6c0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x216>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800f500:	2300      	movs	r3, #0
 800f502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f506:	f107 0318 	add.w	r3, r7, #24
 800f50a:	2101      	movs	r1, #1
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fb f8f9 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f512:	4602      	mov	r2, r0
 800f514:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f518:	4293      	cmp	r3, r2
 800f51a:	bfb4      	ite	lt
 800f51c:	2301      	movlt	r3, #1
 800f51e:	2300      	movge	r3, #0
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b00      	cmp	r3, #0
 800f524:	f000 80c6 	beq.w	800f6b4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800f528:	2300      	movs	r3, #0
 800f52a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f52e:	f107 0318 	add.w	r3, r7, #24
 800f532:	2102      	movs	r1, #2
 800f534:	4618      	mov	r0, r3
 800f536:	f7fb f8e5 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f53a:	4602      	mov	r2, r0
 800f53c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f540:	4293      	cmp	r3, r2
 800f542:	bfb4      	ite	lt
 800f544:	2301      	movlt	r3, #1
 800f546:	2300      	movge	r3, #0
 800f548:	b2db      	uxtb	r3, r3
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f000 80ac 	beq.w	800f6a8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1fe>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800f550:	2300      	movs	r3, #0
 800f552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f556:	f107 0318 	add.w	r3, r7, #24
 800f55a:	2103      	movs	r1, #3
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fb f8d1 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f562:	4602      	mov	r2, r0
 800f564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f568:	4293      	cmp	r3, r2
 800f56a:	bfb4      	ite	lt
 800f56c:	2301      	movlt	r3, #1
 800f56e:	2300      	movge	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	f000 8092 	beq.w	800f69c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1f2>
          const int32_t input1_val =
              params.input1_offset +
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 800f57c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800f580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f58a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f58e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f592:	f7fc fa5a 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800f596:	4603      	mov	r3, r0
 800f598:	461a      	mov	r2, r3
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	4413      	add	r3, r2
 800f59e:	781b      	ldrb	r3, [r3, #0]
          const int32_t input1_val =
 800f5a0:	4423      	add	r3, r4
 800f5a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32_t input2_val =
              params.input2_offset +
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 800f5aa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f5ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f5b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f5bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f5c0:	f7fc fa43 	bl	800ba4a <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f5cc:	4413      	add	r3, r2
 800f5ce:	781b      	ldrb	r3, [r3, #0]
          const int32_t input2_val =
 800f5d0:	4423      	add	r3, r4
 800f5d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input1_val =
 800f5da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f5de:	fa02 f303 	lsl.w	r3, r2, r3
 800f5e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32_t shifted_input2_val =
              input2_val * (1 << params.left_shift);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input2_val =
 800f5ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f5fe:	461a      	mov	r2, r3
 800f600:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800f604:	f7fc fa0b 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f608:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f612:	461a      	mov	r2, r3
 800f614:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800f618:	f7fc fa01 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f61c:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 800f61e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f622:	4413      	add	r3, r2
 800f624:	677b      	str	r3, [r7, #116]	; 0x74
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6919      	ldr	r1, [r3, #16]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800f62e:	461a      	mov	r2, r3
 800f630:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800f632:	f7fc f9f4 	bl	800ba1e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800f636:	4602      	mov	r2, r0
              params.output_offset;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 800f63c:	4413      	add	r3, r2
          const int32_t raw_output =
 800f63e:	617b      	str	r3, [r7, #20]
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	332c      	adds	r3, #44	; 0x2c
 800f64a:	f107 0214 	add.w	r2, r7, #20
 800f64e:	4611      	mov	r1, r2
 800f650:	4618      	mov	r0, r3
 800f652:	f7f6 f98c 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800f656:	4603      	mov	r3, r0
 800f658:	4619      	mov	r1, r3
 800f65a:	4620      	mov	r0, r4
 800f65c:	f7f6 f973 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800f660:	4603      	mov	r3, r0
          const int32_t clamped_output =
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800f666:	f107 0018 	add.w	r0, r7, #24
 800f66a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f674:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f678:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f67c:	f7fc f920 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800f680:	4603      	mov	r3, r0
 800f682:	461a      	mov	r2, r3
 800f684:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f688:	4413      	add	r3, r2
 800f68a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800f690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f694:	3301      	adds	r3, #1
 800f696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f69a:	e75c      	b.n	800f556 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800f69c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f6a6:	e742      	b.n	800f52e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x84>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800f6a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f6b2:	e728      	b.n	800f506 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5c>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800f6b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f6be:	e70e      	b.n	800f4de <_ZN6tflite13reference_ops18BroadcastAdd4DSlowIhEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x34>
  const RuntimeShape extended_output_shape =
 800f6c0:	f107 0318 	add.w	r3, r7, #24
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7f6 fa9b 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	37a4      	adds	r7, #164	; 0xa4
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd90      	pop	{r4, r7, pc}

0800f6d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 800f6d2:	b590      	push	{r4, r7, lr}
 800f6d4:	ed2d 8b02 	vpush	{d8}
 800f6d8:	b0a9      	sub	sp, #164	; 0xa4
 800f6da:	af02      	add	r7, sp, #8
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
 800f6e2:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f6ea:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f6f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800f6fa:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800f702:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f70a:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f712:	65fb      	str	r3, [r7, #92]	; 0x5c
  const float output_activation_min = params.float_activation_min;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f718:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_max = params.float_activation_max;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71e:	657b      	str	r3, [r7, #84]	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800f720:	68b8      	ldr	r0, [r7, #8]
 800f722:	f7f6 fa83 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f726:	4603      	mov	r3, r0
 800f728:	2b04      	cmp	r3, #4
 800f72a:	d001      	beq.n	800f730 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 800f72c:	f012 f9d0 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800f730:	6838      	ldr	r0, [r7, #0]
 800f732:	f7f6 fa7b 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f736:	4603      	mov	r3, r0
 800f738:	2b04      	cmp	r3, #4
 800f73a:	d001      	beq.n	800f740 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 800f73c:	f012 f9c8 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800f740:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800f744:	f7f6 fa72 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b04      	cmp	r3, #4
 800f74c:	d001      	beq.n	800f752 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 800f74e:	f012 f9bf 	bl	8021ad0 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800f752:	2300      	movs	r3, #0
 800f754:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f758:	2100      	movs	r1, #0
 800f75a:	68b8      	ldr	r0, [r7, #8]
 800f75c:	f7fc fa5e 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f760:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800f762:	2303      	movs	r3, #3
 800f764:	683a      	ldr	r2, [r7, #0]
 800f766:	2103      	movs	r1, #3
 800f768:	68b8      	ldr	r0, [r7, #8]
 800f76a:	f7fc fa57 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f76e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800f770:	2303      	movs	r3, #3
 800f772:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f776:	2100      	movs	r1, #0
 800f778:	6838      	ldr	r0, [r7, #0]
 800f77a:	f7fc fa4f 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f77e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (bias_data) {
 800f780:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f784:	2b00      	cmp	r3, #0
 800f786:	d009      	beq.n	800f79c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800f788:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800f78c:	f7fa fff2 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f790:	4602      	mov	r2, r0
 800f792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f794:	4293      	cmp	r3, r2
 800f796:	d001      	beq.n	800f79c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 800f798:	f012 f99a 	bl	8021ad0 <abort>
  }
  const int input_height = input_shape.Dims(1);
 800f79c:	2101      	movs	r1, #1
 800f79e:	68b8      	ldr	r0, [r7, #8]
 800f7a0:	f7fa ffb0 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7a4:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 800f7a6:	2102      	movs	r1, #2
 800f7a8:	68b8      	ldr	r0, [r7, #8]
 800f7aa:	f7fa ffab 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7ae:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_height = filter_shape.Dims(1);
 800f7b0:	2101      	movs	r1, #1
 800f7b2:	6838      	ldr	r0, [r7, #0]
 800f7b4:	f7fa ffa6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7b8:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_width = filter_shape.Dims(2);
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	6838      	ldr	r0, [r7, #0]
 800f7be:	f7fa ffa1 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7c2:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_height = output_shape.Dims(1);
 800f7c4:	2101      	movs	r1, #1
 800f7c6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800f7ca:	f7fa ff9b 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7ce:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
 800f7d0:	2102      	movs	r1, #2
 800f7d2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800f7d6:	f7fa ff95 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800f7da:	6338      	str	r0, [r7, #48]	; 0x30
  for (int batch = 0; batch < batches; ++batch) {
 800f7dc:	2300      	movs	r3, #0
 800f7de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	f280 80f0 	bge.w	800f9ce <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2fc>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f7f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f7f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	f280 80e1 	bge.w	800f9c2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2f0>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800f800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f806:	fb02 f203 	mul.w	r2, r2, r3
 800f80a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800f810:	2300      	movs	r3, #0
 800f812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f816:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81c:	429a      	cmp	r2, r3
 800f81e:	f280 80ca 	bge.w	800f9b6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2e4>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800f822:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f826:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f828:	fb02 f203 	mul.w	r2, r2, r3
 800f82c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f82e:	1ad3      	subs	r3, r2, r3
 800f830:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800f832:	2300      	movs	r3, #0
 800f834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f838:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f83c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f83e:	429a      	cmp	r2, r3
 800f840:	f280 80b3 	bge.w	800f9aa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
          float total = 0.f;
 800f844:	f04f 0300 	mov.w	r3, #0
 800f848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800f84c:	2300      	movs	r3, #0
 800f84e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f852:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f858:	429a      	cmp	r2, r3
 800f85a:	da6d      	bge.n	800f938 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x266>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800f85c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f85e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f862:	fb02 f303 	mul.w	r3, r2, r3
 800f866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f868:	4413      	add	r3, r2
 800f86a:	627b      	str	r3, [r7, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800f86c:	2300      	movs	r3, #0
 800f86e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f870:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	429a      	cmp	r2, r3
 800f876:	da59      	bge.n	800f92c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x25a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800f878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f87a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f87c:	fb02 f303 	mul.w	r3, r2, r3
 800f880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f882:	4413      	add	r3, r2
 800f884:	623b      	str	r3, [r7, #32]

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	db0c      	blt.n	800f8a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800f88c:	6a3a      	ldr	r2, [r7, #32]
 800f88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f890:	429a      	cmp	r2, r3
 800f892:	da08      	bge.n	800f8a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800f894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f896:	2b00      	cmp	r3, #0
 800f898:	db05      	blt.n	800f8a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800f89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f89c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	da01      	bge.n	800f8a6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d4>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e000      	b.n	800f8a8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1d6>
 800f8a6:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800f8a8:	77fb      	strb	r3, [r7, #31]
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800f8aa:	7ffb      	ldrb	r3, [r7, #31]
 800f8ac:	f083 0301 	eor.w	r3, r3, #1
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d135      	bne.n	800f922 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x250>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800f8ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	da30      	bge.n	800f924 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x252>
                float input_value = input_data[Offset(input_shape, batch, in_y,
 800f8c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	6a3b      	ldr	r3, [r7, #32]
 800f8c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8ca:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f8ce:	68b8      	ldr	r0, [r7, #8]
 800f8d0:	f7fb fff6 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800f8d4:	4603      	mov	r3, r0
                                                      in_x, in_channel)];
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	4413      	add	r3, r2
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	61bb      	str	r3, [r7, #24]
                float filter_value = filter_data[Offset(
 800f8e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8e2:	9300      	str	r3, [sp, #0]
 800f8e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8ea:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800f8ee:	6838      	ldr	r0, [r7, #0]
 800f8f0:	f7fb ffe6 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800f8f4:	4603      	mov	r3, r0
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f8fc:	4413      	add	r3, r2
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	617b      	str	r3, [r7, #20]
                total += (input_value * filter_value);
 800f902:	ed97 7a06 	vldr	s14, [r7, #24]
 800f906:	edd7 7a05 	vldr	s15, [r7, #20]
 800f90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f90e:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800f912:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f916:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800f91a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f91c:	3301      	adds	r3, #1
 800f91e:	67bb      	str	r3, [r7, #120]	; 0x78
 800f920:	e7cb      	b.n	800f8ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1e8>
                continue;
 800f922:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800f924:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f926:	3301      	adds	r3, #1
 800f928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f92a:	e7a1      	b.n	800f870 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x19e>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800f92c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f930:	3301      	adds	r3, #1
 800f932:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f936:	e78c      	b.n	800f852 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x180>
              }
            }
          }
          float bias_value = 0.0f;
 800f938:	f04f 0300 	mov.w	r3, #0
 800f93c:	677b      	str	r3, [r7, #116]	; 0x74
          if (bias_data) {
 800f93e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f942:	2b00      	cmp	r3, #0
 800f944:	d007      	beq.n	800f956 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x284>
            bias_value = bias_data[out_channel];
 800f946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f950:	4413      	add	r3, r2
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	677b      	str	r3, [r7, #116]	; 0x74
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 800f956:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 800f95a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800f95e:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800f962:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f96c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f970:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800f974:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800f978:	f7fb ffa2 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800f97c:	4603      	mov	r3, r0
 800f97e:	009b      	lsls	r3, r3, #2
 800f980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f984:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 800f986:	ed97 1a15 	vldr	s2, [r7, #84]	; 0x54
 800f98a:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800f98e:	eeb0 0a48 	vmov.f32	s0, s16
 800f992:	f7fc ff8e 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800f996:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800f99a:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800f99e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f9a8:	e746      	b.n	800f838 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x166>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800f9aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f9b4:	e72f      	b.n	800f816 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x144>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800f9b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9c0:	e718      	b.n	800f7f4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 800f9c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f9cc:	e709      	b.n	800f7e2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 800f9ce:	bf00      	nop
 800f9d0:	379c      	adds	r7, #156	; 0x9c
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	ecbd 8b02 	vpop	{d8}
 800f9d8:	bd90      	pop	{r4, r7, pc}

0800f9da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800f9da:	b590      	push	{r4, r7, lr}
 800f9dc:	b0a9      	sub	sp, #164	; 0xa4
 800f9de:	af02      	add	r7, sp, #8
 800f9e0:	60f8      	str	r0, [r7, #12]
 800f9e2:	60b9      	str	r1, [r7, #8]
 800f9e4:	607a      	str	r2, [r7, #4]
 800f9e6:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	695b      	ldr	r3, [r3, #20]
 800f9ec:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800f9f4:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800f9fc:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fa04:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800fa0c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fa14:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800fa1c:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_offset = params.output_offset;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	69db      	ldr	r3, [r3, #28]
 800fa22:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa28:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa2e:	617b      	str	r3, [r7, #20]

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800fa30:	69ba      	ldr	r2, [r7, #24]
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	dd01      	ble.n	800fa3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 800fa38:	f012 f84a 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800fa3c:	6838      	ldr	r0, [r7, #0]
 800fa3e:	f7f6 f8f5 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b04      	cmp	r3, #4
 800fa46:	d001      	beq.n	800fa4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 800fa48:	f012 f842 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800fa4c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fa50:	f7f6 f8ec 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b04      	cmp	r3, #4
 800fa58:	d001      	beq.n	800fa5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 800fa5a:	f012 f839 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800fa5e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800fa62:	f7f6 f8e3 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	d001      	beq.n	800fa70 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 800fa6c:	f012 f830 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 800fa70:	2300      	movs	r3, #0
 800fa72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fa76:	2100      	movs	r1, #0
 800fa78:	6838      	ldr	r0, [r7, #0]
 800fa7a:	f7fc f8cf 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fa7e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 800fa80:	2303      	movs	r3, #3
 800fa82:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fa86:	2103      	movs	r1, #3
 800fa88:	6838      	ldr	r0, [r7, #0]
 800fa8a:	f7fc f8c7 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fa8e:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 800fa90:	2303      	movs	r3, #3
 800fa92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fa96:	2100      	movs	r1, #0
 800fa98:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fa9c:	f7fc f8be 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800faa0:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 800faa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d009      	beq.n	800fabe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800faaa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800faae:	f7fa fe61 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800fab2:	4602      	mov	r2, r0
 800fab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d001      	beq.n	800fabe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 800faba:	f012 f809 	bl	8021ad0 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 800fabe:	2101      	movs	r1, #1
 800fac0:	6838      	ldr	r0, [r7, #0]
 800fac2:	f7fa fe1f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fac6:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 800fac8:	2102      	movs	r1, #2
 800faca:	6838      	ldr	r0, [r7, #0]
 800facc:	f7fa fe1a 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fad0:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 800fad2:	2101      	movs	r1, #1
 800fad4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fad8:	f7fa fe14 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fadc:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 800fade:	2102      	movs	r1, #2
 800fae0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fae4:	f7fa fe0e 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fae8:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 800faea:	2101      	movs	r1, #1
 800faec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800faf0:	f7fa fe08 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800faf4:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 800faf6:	2102      	movs	r1, #2
 800faf8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800fafc:	f7fa fe02 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fb00:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 800fb02:	2300      	movs	r3, #0
 800fb04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fb08:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fb0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	f280 8113 	bge.w	800fd3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x360>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800fb14:	2300      	movs	r3, #0
 800fb16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fb1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb20:	429a      	cmp	r2, r3
 800fb22:	f280 8104 	bge.w	800fd2e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x354>
      const int in_y_origin = (out_y * stride_height) - pad_height;
 800fb26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fb2c:	fb02 f203 	mul.w	r2, r2, r3
 800fb30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fb32:	1ad3      	subs	r3, r2, r3
 800fb34:	637b      	str	r3, [r7, #52]	; 0x34
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800fb36:	2300      	movs	r3, #0
 800fb38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb3c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb42:	429a      	cmp	r2, r3
 800fb44:	f280 80ed 	bge.w	800fd22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x348>
        const int in_x_origin = (out_x * stride_width) - pad_width;
 800fb48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb4e:	fb02 f203 	mul.w	r2, r2, r3
 800fb52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb54:	1ad3      	subs	r3, r2, r3
 800fb56:	633b      	str	r3, [r7, #48]	; 0x30
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fb5e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb64:	429a      	cmp	r2, r3
 800fb66:	f280 80d6 	bge.w	800fd16 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x33c>
          int32_t acc = 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800fb6e:	2300      	movs	r3, #0
 800fb70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fb74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	da76      	bge.n	800fc6c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
 800fb7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb80:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fb84:	fb02 f303 	mul.w	r3, r2, r3
 800fb88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb8a:	4413      	add	r3, r2
 800fb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800fb8e:	2300      	movs	r3, #0
 800fb90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	da60      	bge.n	800fc60 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x286>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;
 800fb9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fba0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fba4:	fb02 f303 	mul.w	r3, r2, r3
 800fba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbaa:	4413      	add	r3, r2
 800fbac:	62bb      	str	r3, [r7, #40]	; 0x28

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	db0c      	blt.n	800fbce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800fbb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	da08      	bge.n	800fbce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	db05      	blt.n	800fbce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800fbc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	da01      	bge.n	800fbce <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f4>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	e000      	b.n	800fbd0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f6>
 800fbce:	2300      	movs	r3, #0
              const bool is_point_inside_image =
 800fbd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                  (in_y < input_height);

              if (!is_point_inside_image) {
 800fbd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd8:	f083 0301 	eor.w	r3, r3, #1
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d137      	bne.n	800fc52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x278>
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbe6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbea:	429a      	cmp	r2, r3
 800fbec:	da32      	bge.n	800fc54 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27a>
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
 800fbee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbf6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800fbfa:	6838      	ldr	r0, [r7, #0]
 800fbfc:	f7fb fe60 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fc00:	4603      	mov	r3, r0
 800fc02:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 800fc04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fc08:	4413      	add	r3, r2
 800fc0a:	f993 3000 	ldrsb.w	r3, [r3]
 800fc0e:	623b      	str	r3, [r7, #32]
                int32_t filter_val = filter_data[Offset(
 800fc10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc12:	9300      	str	r3, [sp, #0]
 800fc14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc18:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fc1c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fc20:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800fc24:	f7fb fe4c 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	461a      	mov	r2, r3
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800fc2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fc30:	4413      	add	r3, r2
 800fc32:	f993 3000 	ldrsb.w	r3, [r3]
 800fc36:	61fb      	str	r3, [r7, #28]
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(b/174275578): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 800fc38:	6a3a      	ldr	r2, [r7, #32]
 800fc3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc3c:	4413      	add	r3, r2
 800fc3e:	69fa      	ldr	r2, [r7, #28]
 800fc40:	fb02 f203 	mul.w	r2, r2, r3
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	4413      	add	r3, r2
 800fc48:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800fc4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fc50:	e7c9      	b.n	800fbe6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x20c>
                continue;
 800fc52:	bf00      	nop
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800fc54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc58:	3301      	adds	r3, #1
 800fc5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc5e:	e799      	b.n	800fb94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ba>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800fc60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc64:	3301      	adds	r3, #1
 800fc66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fc6a:	e783      	b.n	800fb74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
              }
            }
          }

          if (bias_data) {
 800fc6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d009      	beq.n	800fc88 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2ae>
            acc += bias_data[out_channel];
 800fc74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fc7e:	4413      	add	r3, r2
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	4413      	add	r3, r2
 800fc86:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 800fc88:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800fc8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	68ba      	ldr	r2, [r7, #8]
 800fc92:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800fc94:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 800fc96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	f7fa fdbe 	bl	800a824 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 800fcac:	693a      	ldr	r2, [r7, #16]
 800fcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb0:	4413      	add	r3, r2
 800fcb2:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 800fcb4:	f107 0218 	add.w	r2, r7, #24
 800fcb8:	f107 0310 	add.w	r3, r7, #16
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7f5 fe55 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 800fcca:	f107 0214 	add.w	r2, r7, #20
 800fcce:	f107 0310 	add.w	r3, r7, #16
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7f5 fe36 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800fce0:	693c      	ldr	r4, [r7, #16]
 800fce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800fcf0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800fcf4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800fcf8:	f7fb fde2 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fd04:	4413      	add	r3, r2
 800fd06:	b262      	sxtb	r2, r4
 800fd08:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800fd0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd0e:	3301      	adds	r3, #1
 800fd10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fd14:	e723      	b.n	800fb5e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800fd16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fd20:	e70c      	b.n	800fb3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x162>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800fd22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fd26:	3301      	adds	r3, #1
 800fd28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fd2c:	e6f5      	b.n	800fb1a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 800fd2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fd32:	3301      	adds	r3, #1
 800fd34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fd38:	e6e6      	b.n	800fb08 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 800fd3a:	bf00      	nop
 800fd3c:	379c      	adds	r7, #156	; 0x9c
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd90      	pop	{r4, r7, pc}

0800fd42 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800fd42:	b580      	push	{r7, lr}
 800fd44:	b084      	sub	sp, #16
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	60f8      	str	r0, [r7, #12]
 800fd4a:	60b9      	str	r1, [r7, #8]
 800fd4c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d101      	bne.n	800fd5a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800fd56:	f011 febb 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd5e:	2138      	movs	r1, #56	; 0x38
 800fd60:	68f8      	ldr	r0, [r7, #12]
 800fd62:	4798      	blx	r3
 800fd64:	4603      	mov	r3, r0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
	...

0800fd70 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800fd70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd72:	b0b7      	sub	sp, #220	; 0xdc
 800fd74:	af08      	add	r7, sp, #32
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
  TFLITE_DCHECK(node->user_data != nullptr);
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	691b      	ldr	r3, [r3, #16]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800fd82:	f011 fea5 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d101      	bne.n	800fd92 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800fd8e:	f011 fe9f 	bl	8021ad0 <abort>

  int32_t buf_size = 0;
 800fd92:	2300      	movs	r3, #0
 800fd94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  const auto& params =
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	695b      	ldr	r3, [r3, #20]
 800fd9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      *(static_cast<const TfLiteConvParams*>(node->builtin_data));
  OpData* data = static_cast<OpData*>(node->user_data);
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  const TfLiteTensor* input = GetInput(context, node, kConvInputTensor);
 800fda8:	4ba2      	ldr	r3, [pc, #648]	; (8010034 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c4>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	461a      	mov	r2, r3
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f7f5 f9e4 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800fdb6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
  TF_LITE_ENSURE(context, input != nullptr);
 800fdba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d10a      	bne.n	800fdd8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	695c      	ldr	r4, [r3, #20]
 800fdc6:	4b9c      	ldr	r3, [pc, #624]	; (8010038 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2c8>)
 800fdc8:	9300      	str	r3, [sp, #0]
 800fdca:	237c      	movs	r3, #124	; 0x7c
 800fdcc:	4a9b      	ldr	r2, [pc, #620]	; (801003c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800fdce:	499c      	ldr	r1, [pc, #624]	; (8010040 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	47a0      	blx	r4
 800fdd4:	2401      	movs	r4, #1
 800fdd6:	e128      	b.n	801002a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* filter = GetInput(context, node, kConvWeightsTensor);
 800fdd8:	4b9a      	ldr	r3, [pc, #616]	; (8010044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d4>)
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	461a      	mov	r2, r3
 800fdde:	68b9      	ldr	r1, [r7, #8]
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f7f5 f9cc 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800fde6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
  TF_LITE_ENSURE(context, filter != nullptr);
 800fdea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d10a      	bne.n	800fe08 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x98>
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	695c      	ldr	r4, [r3, #20]
 800fdf6:	4b94      	ldr	r3, [pc, #592]	; (8010048 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d8>)
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	237e      	movs	r3, #126	; 0x7e
 800fdfc:	4a8f      	ldr	r2, [pc, #572]	; (801003c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800fdfe:	4990      	ldr	r1, [pc, #576]	; (8010040 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	47a0      	blx	r4
 800fe04:	2401      	movs	r4, #1
 800fe06:	e110      	b.n	801002a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>
  const TfLiteTensor* output = GetOutput(context, node, kConvOutputTensor);
 800fe08:	4b90      	ldr	r3, [pc, #576]	; (801004c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2dc>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	68b9      	ldr	r1, [r7, #8]
 800fe10:	68f8      	ldr	r0, [r7, #12]
 800fe12:	f7f5 f9c4 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800fe16:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TF_LITE_ENSURE(context, output != nullptr);
 800fe1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10a      	bne.n	800fe38 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	695c      	ldr	r4, [r3, #20]
 800fe26:	4b8a      	ldr	r3, [pc, #552]	; (8010050 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	2380      	movs	r3, #128	; 0x80
 800fe2c:	4a83      	ldr	r2, [pc, #524]	; (801003c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>)
 800fe2e:	4984      	ldr	r1, [pc, #528]	; (8010040 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2d0>)
 800fe30:	68f8      	ldr	r0, [r7, #12]
 800fe32:	47a0      	blx	r4
 800fe34:	2401      	movs	r4, #1
 800fe36:	e0f8      	b.n	801002a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ba>

  RuntimeShape input_shape = GetTensorShape(input);
 800fe38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fe3c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7f5 ff57 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  RuntimeShape output_shape = GetTensorShape(output);
 800fe46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fe4a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f5 ff50 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>

  // Initialize cmsis_nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 800fe54:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800fe58:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	2100      	movs	r1, #0
 800fe60:	f7fb fedc 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fe64:	4603      	mov	r3, r0
 800fe66:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.h = input->dims->data[1];
 800fe68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.w = input->dims->data[2];
 800fe72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	663b      	str	r3, [r7, #96]	; 0x60
  input_dims.c = input_shape.Dims(3);
 800fe7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fe80:	2103      	movs	r1, #3
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fa fc3e 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	667b      	str	r3, [r7, #100]	; 0x64

  // Initialize cmsis_nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
 800fe8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fe90:	2103      	movs	r1, #3
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7fa fc36 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	64bb      	str	r3, [r7, #72]	; 0x48
  filter_dims.h = filter->dims->data[1];
 800fe9c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	64fb      	str	r3, [r7, #76]	; 0x4c
  filter_dims.w = filter->dims->data[2];
 800fea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	68db      	ldr	r3, [r3, #12]
 800feae:	653b      	str	r3, [r7, #80]	; 0x50
  filter_dims.c = input_dims.c;
 800feb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800feb2:	657b      	str	r3, [r7, #84]	; 0x54

  // Initialize cmsis_nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
 800feb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800feb6:	63bb      	str	r3, [r7, #56]	; 0x38
  output_dims.h = output->dims->data[1];
 800feb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  output_dims.w = output->dims->data[2];
 800fec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fec6:	689b      	ldr	r3, [r3, #8]
 800fec8:	68db      	ldr	r3, [r3, #12]
 800feca:	643b      	str	r3, [r7, #64]	; 0x40
  output_dims.c = output_shape.Dims(3);
 800fecc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fed0:	2103      	movs	r1, #3
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fa fc16 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fed8:	4603      	mov	r3, r0
 800feda:	647b      	str	r3, [r7, #68]	; 0x44
  // Dynamically allocate per-channel quantization parameters.
  // TODO(#42883): This allocation is done even for non-int8 cases to get around
  // a bug in kernel_util.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 800fedc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fee0:	689a      	ldr	r2, [r3, #8]
 800fee2:	4b5c      	ldr	r3, [pc, #368]	; (8010054 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  data->reference_op_data.per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800fef4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800fef8:	0092      	lsls	r2, r2, #2
 800fefa:	4611      	mov	r1, r2
 800fefc:	68f8      	ldr	r0, [r7, #12]
 800fefe:	4798      	blx	r3
 800ff00:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 800ff02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff06:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 800ff0c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 800ff10:	0092      	lsls	r2, r2, #2
 800ff12:	4611      	mov	r1, r2
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	4798      	blx	r3
 800ff18:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 800ff1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff1e:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataConv(
 800ff20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff22:	607b      	str	r3, [r7, #4]
 800ff24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ff2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ff2c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800ff2e:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 800ff32:	782d      	ldrb	r5, [r5, #0]
 800ff34:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 800ff38:	9606      	str	r6, [sp, #24]
 800ff3a:	9505      	str	r5, [sp, #20]
 800ff3c:	9404      	str	r4, [sp, #16]
 800ff3e:	9003      	str	r0, [sp, #12]
 800ff40:	9102      	str	r1, [sp, #8]
 800ff42:	9201      	str	r2, [sp, #4]
 800ff44:	9300      	str	r3, [sp, #0]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ff4c:	68b9      	ldr	r1, [r7, #8]
 800ff4e:	68f8      	ldr	r0, [r7, #12]
 800ff50:	f7fb ffe2 	bl	800bf18 <_ZN6tflite19CalculateOpDataConvEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 800ff54:	4603      	mov	r3, r0
 800ff56:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 800ff5a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
 800ff62:	f897 409b 	ldrb.w	r4, [r7, #155]	; 0x9b
 800ff66:	e056      	b.n	8010016 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
      context, node, params, input_dims.w, input_dims.h, filter_dims.w,
      filter_dims.h, output_dims.w, output_dims.h, input->type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 800ff68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	2b09      	cmp	r3, #9
 800ff70:	d134      	bne.n	800ffdc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x26c>
    // Initialize cmsis_nn convolution parameters
    cmsis_nn_conv_params conv_params;
    conv_params.input_offset = -input->params.zero_point;
 800ff72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ff76:	691b      	ldr	r3, [r3, #16]
 800ff78:	425b      	negs	r3, r3
 800ff7a:	613b      	str	r3, [r7, #16]
    conv_params.output_offset = output->params.zero_point;
 800ff7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ff80:	691b      	ldr	r3, [r3, #16]
 800ff82:	617b      	str	r3, [r7, #20]
    conv_params.stride.h = params.stride_height;
 800ff84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	61fb      	str	r3, [r7, #28]
    conv_params.stride.w = params.stride_width;
 800ff8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	61bb      	str	r3, [r7, #24]
    conv_params.dilation.h = params.dilation_height_factor;
 800ff94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_params.dilation.w = params.dilation_width_factor;
 800ff9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	62bb      	str	r3, [r7, #40]	; 0x28
    conv_params.padding.h = data->reference_op_data.padding.height;
 800ffa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	627b      	str	r3, [r7, #36]	; 0x24
    conv_params.padding.w = data->reference_op_data.padding.width;
 800ffac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	623b      	str	r3, [r7, #32]
    conv_params.activation.min = data->reference_op_data.output_activation_min;
 800ffb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffba:	633b      	str	r3, [r7, #48]	; 0x30
    conv_params.activation.max = data->reference_op_data.output_activation_max;
 800ffbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ffc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffc2:	637b      	str	r3, [r7, #52]	; 0x34

    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 800ffc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffc8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ffcc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ffd0:	f107 0010 	add.w	r0, r7, #16
 800ffd4:	f005 fbc9 	bl	801576a <arm_convolve_wrapper_s8_get_buffer_size>
 800ffd8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  debugPrintPtr += 32;
//	  return kTfLiteError;
  }
  #endif

  if (buf_size > 0) {
 800ffdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	dd12      	ble.n	801000a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x29a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ffec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fff0:	3234      	adds	r2, #52	; 0x34
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	4798      	blx	r3
 800fff6:	4603      	mov	r3, r0
 800fff8:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 800fffc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8010000:	2b00      	cmp	r3, #0
 8010002:	d007      	beq.n	8010014 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a4>
 8010004:	f897 409a 	ldrb.w	r4, [r7, #154]	; 0x9a
 8010008:	e005      	b.n	8010016 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2a6>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
 801000a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801000e:	f04f 32ff 	mov.w	r2, #4294967295
 8010012:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8010014:	2400      	movs	r4, #0
  RuntimeShape output_shape = GetTensorShape(output);
 8010016:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801001a:	4618      	mov	r0, r3
 801001c:	f7f5 fdf0 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = GetTensorShape(input);
 8010020:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010024:	4618      	mov	r0, r3
 8010026:	f7f5 fdeb 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 801002a:	4623      	mov	r3, r4
}
 801002c:	4618      	mov	r0, r3
 801002e:	37bc      	adds	r7, #188	; 0xbc
 8010030:	46bd      	mov	sp, r7
 8010032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010034:	0802883c 	.word	0x0802883c
 8010038:	08027d4c 	.word	0x08027d4c
 801003c:	08027cf8 	.word	0x08027cf8
 8010040:	08027d34 	.word	0x08027d34
 8010044:	08028840 	.word	0x08028840
 8010048:	08027d60 	.word	0x08027d60
 801004c:	08028848 	.word	0x08028848
 8010050:	08027d74 	.word	0x08027d74
 8010054:	0802884c 	.word	0x0802884c

08010058 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>:

TfLiteStatus EvalQuantizedPerChannel(
    TfLiteContext* context, TfLiteNode* node, const TfLiteConvParams& params,
    const OpData& data, const TfLiteEvalTensor* input,
    const TfLiteEvalTensor* filter, const TfLiteEvalTensor* bias,
    TfLiteEvalTensor* output, TfLiteEvalTensor* im2col) {
 8010058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801005a:	b0ef      	sub	sp, #444	; 0x1bc
 801005c:	af08      	add	r7, sp, #32
 801005e:	f107 0414 	add.w	r4, r7, #20
 8010062:	6020      	str	r0, [r4, #0]
 8010064:	f107 0010 	add.w	r0, r7, #16
 8010068:	6001      	str	r1, [r0, #0]
 801006a:	f107 010c 	add.w	r1, r7, #12
 801006e:	600a      	str	r2, [r1, #0]
 8010070:	f107 0208 	add.w	r2, r7, #8
 8010074:	6013      	str	r3, [r2, #0]
  cmsis_nn_conv_params conv_params;
  conv_params.dilation.h = params.dilation_height_factor;
 8010076:	f107 030c 	add.w	r3, r7, #12
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  conv_params.dilation.w = params.dilation_width_factor;
 8010082:	f107 030c 	add.w	r3, r7, #12
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	691b      	ldr	r3, [r3, #16]
 801008a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 801008e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010092:	2b01      	cmp	r3, #1
 8010094:	f040 818a 	bne.w	80103ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
 8010098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801009c:	2b01      	cmp	r3, #1
 801009e:	f040 8185 	bne.w	80103ac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x354>
    // Initialize cmsis_nn convolution parameters
    conv_params.input_offset = -data.reference_op_data.input_zero_point;
 80100a2:	f107 0308 	add.w	r3, r7, #8
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	425b      	negs	r3, r3
 80100ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    conv_params.output_offset = data.reference_op_data.output_zero_point;
 80100b0:	f107 0308 	add.w	r3, r7, #8
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    conv_params.stride.h = params.stride_height;
 80100bc:	f107 030c 	add.w	r3, r7, #12
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    conv_params.stride.w = params.stride_width;
 80100c8:	f107 030c 	add.w	r3, r7, #12
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	685b      	ldr	r3, [r3, #4]
 80100d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    conv_params.padding.h = data.reference_op_data.padding.height;
 80100d4:	f107 0308 	add.w	r3, r7, #8
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    conv_params.padding.w = data.reference_op_data.padding.width;
 80100e0:	f107 0308 	add.w	r3, r7, #8
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    conv_params.activation.min = data.reference_op_data.output_activation_min;
 80100ec:	f107 0308 	add.w	r3, r7, #8
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    conv_params.activation.max = data.reference_op_data.output_activation_max;
 80100f8:	f107 0308 	add.w	r3, r7, #8
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010100:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    // Initialize cmsis_nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier = const_cast<int32_t*>(
        data.reference_op_data.per_channel_output_multiplier);
 8010104:	f107 0308 	add.w	r3, r7, #8
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier = const_cast<int32_t*>(
 801010c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift =
        const_cast<int32_t*>(data.reference_op_data.per_channel_output_shift);
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    quant_params.shift =
 8010118:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 801011c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010120:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 8010124:	4618      	mov	r0, r3
 8010126:	f7fc fc1b 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801012a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801012e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc fc14 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8010138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801013c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8010140:	4618      	mov	r0, r3
 8010142:	f7fc fc0d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8010146:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801014a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801014e:	4618      	mov	r0, r3
 8010150:	f7fc fc06 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    // Consistency check.
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8010154:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010158:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801015c:	429a      	cmp	r2, r3
 801015e:	dd01      	ble.n	8010164 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x10c>
 8010160:	f011 fcb6 	bl	8021ad0 <abort>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010164:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010168:	4618      	mov	r0, r3
 801016a:	f7f5 fd5f 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801016e:	4603      	mov	r3, r0
 8010170:	2b04      	cmp	r3, #4
 8010172:	d001      	beq.n	8010178 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x120>
 8010174:	f011 fcac 	bl	8021ad0 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8010178:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801017c:	4618      	mov	r0, r3
 801017e:	f7f5 fd55 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010182:	4603      	mov	r3, r0
 8010184:	2b04      	cmp	r3, #4
 8010186:	d001      	beq.n	801018c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x134>
 8010188:	f011 fca2 	bl	8021ad0 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801018c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010190:	4618      	mov	r0, r3
 8010192:	f7f5 fd4b 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010196:	4603      	mov	r3, r0
 8010198:	2b04      	cmp	r3, #4
 801019a:	d001      	beq.n	80101a0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x148>
 801019c:	f011 fc98 	bl	8021ad0 <abort>
    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80101a0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80101a4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80101a8:	2300      	movs	r3, #0
 80101aa:	2100      	movs	r1, #0
 80101ac:	f7fb fd36 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80101b0:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
    const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80101b4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80101b8:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80101bc:	2303      	movs	r3, #3
 80101be:	2103      	movs	r1, #3
 80101c0:	f7fb fd2c 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80101c4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
    const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80101c8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80101cc:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80101d0:	2303      	movs	r3, #3
 80101d2:	2100      	movs	r1, #0
 80101d4:	f7fb fd22 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80101d8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80101dc:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 80101e0:	f7fb f878 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	bf14      	ite	ne
 80101ea:	2301      	movne	r3, #1
 80101ec:	2300      	moveq	r3, #0
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00b      	beq.n	801020c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80101f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fa fabb 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80101fe:	4602      	mov	r2, r0
 8010200:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8010204:	4293      	cmp	r3, r2
 8010206:	d001      	beq.n	801020c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x1b4>
 8010208:	f011 fc62 	bl	8021ad0 <abort>
    }

    // Initialize cmsis_nn dimensions
    // Input
    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 801020c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010210:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8010214:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8010216:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801021a:	2101      	movs	r1, #1
 801021c:	4618      	mov	r0, r3
 801021e:	f7fa fa71 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010222:	4602      	mov	r2, r0
 8010224:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010228:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 801022a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801022e:	2102      	movs	r1, #2
 8010230:	4618      	mov	r0, r3
 8010232:	f7fa fa67 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010236:	4602      	mov	r2, r0
 8010238:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801023c:	609a      	str	r2, [r3, #8]
    input_dims.c = input_depth;
 801023e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010242:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8010246:	60da      	str	r2, [r3, #12]

    // Filter
    cmsis_nn_dims filter_dims;
    filter_dims.n = output_depth;
 8010248:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801024c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8010250:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8010252:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010256:	2101      	movs	r1, #1
 8010258:	4618      	mov	r0, r3
 801025a:	f7fa fa53 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801025e:	4602      	mov	r2, r0
 8010260:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010264:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8010266:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801026a:	2102      	movs	r1, #2
 801026c:	4618      	mov	r0, r3
 801026e:	f7fa fa49 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010272:	4602      	mov	r2, r0
 8010274:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010278:	609a      	str	r2, [r3, #8]
    filter_dims.c = input_depth;
 801027a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801027e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8010282:	60da      	str	r2, [r3, #12]

    // Bias
    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 8010284:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010288:	2201      	movs	r2, #1
 801028a:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 801028c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010290:	2201      	movs	r2, #1
 8010292:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 8010294:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010298:	2201      	movs	r2, #1
 801029a:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 801029c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80102a0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80102a4:	60da      	str	r2, [r3, #12]

    // Output
    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80102a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80102ae:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80102b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80102b4:	2101      	movs	r1, #1
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fa fa24 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80102bc:	4602      	mov	r2, r0
 80102be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102c2:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80102c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80102c8:	2102      	movs	r1, #2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fa fa1a 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80102d0:	4602      	mov	r2, r0
 80102d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102d6:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 80102d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80102dc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80102e0:	60da      	str	r2, [r3, #12]

    // Initialize cmsis_nn context
    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 80102e2:	f107 031c 	add.w	r3, r7, #28
 80102e6:	2200      	movs	r2, #0
 80102e8:	601a      	str	r2, [r3, #0]
    ctx.size = 0;
 80102ea:	f107 031c 	add.w	r3, r7, #28
 80102ee:	2200      	movs	r2, #0
 80102f0:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 80102f2:	f107 0308 	add.w	r3, r7, #8
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	db0f      	blt.n	801031e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x2c6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80102fe:	f107 0314 	add.w	r3, r7, #20
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010306:	f107 0208 	add.w	r2, r7, #8
 801030a:	6812      	ldr	r2, [r2, #0]
 801030c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801030e:	f107 0214 	add.w	r2, r7, #20
 8010312:	6810      	ldr	r0, [r2, #0]
 8010314:	4798      	blx	r3
 8010316:	4602      	mov	r2, r0
 8010318:	f107 031c 	add.w	r3, r7, #28
 801031c:	601a      	str	r2, [r3, #0]
      // arm_convolve_wrapper_s8_get_buffer_size
    }

    // arm_convolve_wrapper_s8 dispatches the optimized kernel accordingly with
    // the parameters passed
    TFLITE_DCHECK_EQ(
 801031e:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 8010322:	f7fa ffd7 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010326:	4605      	mov	r5, r0
 8010328:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 801032c:	f7fa ffd2 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8010330:	4606      	mov	r6, r0
 8010332:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8010336:	f7fb fa4e 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 8010340:	f7fa ffd7 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8010344:	4603      	mov	r3, r0
 8010346:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801034a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801034e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8010352:	f107 001c 	add.w	r0, r7, #28
 8010356:	9306      	str	r3, [sp, #24]
 8010358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801035c:	9305      	str	r3, [sp, #20]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	9304      	str	r3, [sp, #16]
 8010362:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010366:	9303      	str	r3, [sp, #12]
 8010368:	9602      	str	r6, [sp, #8]
 801036a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801036e:	9301      	str	r3, [sp, #4]
 8010370:	9500      	str	r5, [sp, #0]
 8010372:	4623      	mov	r3, r4
 8010374:	f005 f979 	bl	801566a <arm_convolve_wrapper_s8>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d001      	beq.n	8010382 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x32a>
 801037e:	f011 fba7 	bl	8021ad0 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8010382:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010386:	4618      	mov	r0, r3
 8010388:	f7f5 fc3a 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801038c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010390:	4618      	mov	r0, r3
 8010392:	f7f5 fc35 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8010396:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801039a:	4618      	mov	r0, r3
 801039c:	f7f5 fc30 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80103a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7f5 fc2b 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80103aa:	e06d      	b.n	8010488 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_+0x430>
  } else {
    reference_integer_ops::ConvPerChannel(
        ConvParamsQuantized(params, data.reference_op_data),
 80103ac:	f107 0308 	add.w	r3, r7, #8
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 80103b6:	f107 030c 	add.w	r3, r7, #12
 80103ba:	6819      	ldr	r1, [r3, #0]
 80103bc:	f7fb fd5a 	bl	800be74 <_ZN6tflite19ConvParamsQuantizedERK16TfLiteConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80103c0:	f107 0308 	add.w	r3, r7, #8
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80103c8:	f107 0308 	add.w	r3, r7, #8
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 80103d0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80103d4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 80103d8:	4618      	mov	r0, r3
 80103da:	f7fc fac1 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80103de:	f8d7 01b0 	ldr.w	r0, [r7, #432]	; 0x1b0
 80103e2:	f7fa ff77 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80103e6:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 80103e8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80103ec:	f8d7 11b4 	ldr.w	r1, [r7, #436]	; 0x1b4
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fc fab5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 80103f6:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 80103fa:	f7fa ff6b 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80103fe:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8010400:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010404:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8010408:	4618      	mov	r0, r3
 801040a:	f7fc faa9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 801040e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8010412:	f7fb f9e0 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8010416:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8010418:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801041c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8010420:	4618      	mov	r0, r3
 8010422:	f7fc fa9d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::ConvPerChannel(
 8010426:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801042a:	f7fa ff62 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801042e:	4603      	mov	r3, r0
 8010430:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 8010434:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8010438:	9306      	str	r3, [sp, #24]
 801043a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801043e:	9305      	str	r3, [sp, #20]
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	9304      	str	r3, [sp, #16]
 8010444:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010448:	9303      	str	r3, [sp, #12]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	9302      	str	r3, [sp, #8]
 801044e:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8010452:	9301      	str	r3, [sp, #4]
 8010454:	9600      	str	r6, [sp, #0]
 8010456:	4613      	mov	r3, r2
 8010458:	462a      	mov	r2, r5
 801045a:	4621      	mov	r1, r4
 801045c:	f7ff fabd 	bl	800f9da <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8010460:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8010464:	4618      	mov	r0, r3
 8010466:	f7f5 fbcb 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 801046a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801046e:	4618      	mov	r0, r3
 8010470:	f7f5 fbc6 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 8010474:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8010478:	4618      	mov	r0, r3
 801047a:	f7f5 fbc1 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 801047e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8010482:	4618      	mov	r0, r3
 8010484:	f7f5 fbbc 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8010490:	46bd      	mov	sp, r7
 8010492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010494 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010498:	b0be      	sub	sp, #248	; 0xf8
 801049a:	af08      	add	r7, sp, #32
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	6039      	str	r1, [r7, #0]
	const TfLiteEvalTensor* input =
	  tflite::micro::GetEvalInput(context, node, kConvInputTensor);
 80104a0:	4b91      	ldr	r3, [pc, #580]	; (80106e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x254>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	461a      	mov	r2, r3
 80104a6:	6839      	ldr	r1, [r7, #0]
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7fa f9ff 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80104ae:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
	const TfLiteEvalTensor* filter =
	  tflite::micro::GetEvalInput(context, node, kConvWeightsTensor);
 80104b2:	4b8e      	ldr	r3, [pc, #568]	; (80106ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x258>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	461a      	mov	r2, r3
 80104b8:	6839      	ldr	r1, [r7, #0]
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7fa f9f6 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80104c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
	const TfLiteEvalTensor* bias =
	  (NumInputs(node) == 3)
 80104c4:	6838      	ldr	r0, [r7, #0]
 80104c6:	f7fb f96c 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 80104ca:	4603      	mov	r3, r0
		  ? tflite::micro::GetEvalInput(context, node, kConvBiasTensor)
 80104cc:	2b03      	cmp	r3, #3
 80104ce:	d108      	bne.n	80104e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4e>
 80104d0:	4b87      	ldr	r3, [pc, #540]	; (80106f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	461a      	mov	r2, r3
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7fa f9e7 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 80104de:	4603      	mov	r3, r0
 80104e0:	e000      	b.n	80104e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x50>
 80104e2:	2300      	movs	r3, #0
		  : nullptr;
 80104e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	TfLiteEvalTensor* output =
	  tflite::micro::GetEvalOutput(context, node, kConvOutputTensor);
 80104e8:	4b82      	ldr	r3, [pc, #520]	; (80106f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x260>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	461a      	mov	r2, r3
 80104ee:	6839      	ldr	r1, [r7, #0]
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	f7fa f9eb 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 80104f6:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

	TFLITE_DCHECK(node->builtin_data != nullptr);
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	695b      	ldr	r3, [r3, #20]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
 8010502:	f011 fae5 	bl	8021ad0 <abort>
	const auto& params =
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  *(reinterpret_cast<TfLiteConvParams*>(node->builtin_data));
	TFLITE_DCHECK(node->user_data != nullptr);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8010516:	f011 fadb 	bl	8021ad0 <abort>
	#ifdef OVERLAY_FW
	OpData& data = *(static_cast<OpData*>(node->user_data));
	#else
	const OpData& data = *(static_cast<const OpData*>(node->user_data));
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
//		debugPrintPtr += 32;
	}
	#endif

	#else
	TF_LITE_ENSURE_EQ(context, input->type, output->type);
 8010522:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010526:	7a1a      	ldrb	r2, [r3, #8]
 8010528:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801052c:	7a1b      	ldrb	r3, [r3, #8]
 801052e:	429a      	cmp	r2, r3
 8010530:	d016      	beq.n	8010560 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	695c      	ldr	r4, [r3, #20]
 8010536:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801053a:	7a1b      	ldrb	r3, [r3, #8]
 801053c:	461a      	mov	r2, r3
 801053e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010542:	7a1b      	ldrb	r3, [r3, #8]
 8010544:	9303      	str	r3, [sp, #12]
 8010546:	9202      	str	r2, [sp, #8]
 8010548:	4b6b      	ldr	r3, [pc, #428]	; (80106f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x264>)
 801054a:	9301      	str	r3, [sp, #4]
 801054c:	4b6b      	ldr	r3, [pc, #428]	; (80106fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x268>)
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	f240 2349 	movw	r3, #585	; 0x249
 8010554:	4a6a      	ldr	r2, [pc, #424]	; (8010700 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x26c>)
 8010556:	496b      	ldr	r1, [pc, #428]	; (8010704 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x270>)
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	47a0      	blx	r4
 801055c:	2301      	movs	r3, #1
 801055e:	e0be      	b.n	80106de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
	TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8010560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010564:	7a1a      	ldrb	r2, [r3, #8]
 8010566:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801056a:	7a1b      	ldrb	r3, [r3, #8]
 801056c:	429a      	cmp	r2, r3
 801056e:	d006      	beq.n	801057e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	695b      	ldr	r3, [r3, #20]
 8010574:	4964      	ldr	r1, [pc, #400]	; (8010708 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>)
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	4798      	blx	r3
 801057a:	2301      	movs	r3, #1
 801057c:	e0af      	b.n	80106de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
						 "Hybrid models are not supported on TFLite Micro.");

	timer_val = HAL_GetTick();
 801057e:	f00d fdbf 	bl	801e100 <HAL_GetTick>
 8010582:	4603      	mov	r3, r0
 8010584:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
//	uart_buf_len = sprintf((char *)debugPrintPtr, "conv_time: %u\n", timer_val);
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//	debugPrintPtr += 32;

	switch (input->type) {  // Already know in/out types are same.
 8010588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801058c:	7a1b      	ldrb	r3, [r3, #8]
 801058e:	2b01      	cmp	r3, #1
 8010590:	d002      	beq.n	8010598 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x104>
 8010592:	2b09      	cmp	r3, #9
 8010594:	d071      	beq.n	801067a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1e6>
 8010596:	e087      	b.n	80106a8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x214>
		case kTfLiteFloat32: {
		  tflite::reference_ops::Conv(
			  ConvParamsFloat(params, data.reference_op_data),
 8010598:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801059c:	f107 030c 	add.w	r3, r7, #12
 80105a0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fb fc29 	bl	800bdfc <_ZN6tflite15ConvParamsFloatERK16TfLiteConvParamsRKNS_10OpDataConvE>
			  tflite::micro::GetTensorShape(input),
 80105aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80105ae:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fc f9d4 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		  tflite::reference_ops::Conv(
 80105b8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80105bc:	f7fa fe6a 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80105c0:	4680      	mov	r8, r0
			  tflite::micro::GetTensorData<float>(input),
			  tflite::micro::GetTensorShape(filter),
 80105c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80105c6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fc f9c8 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		  tflite::reference_ops::Conv(
 80105d0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80105d4:	f7fa fe5e 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80105d8:	4604      	mov	r4, r0
			  tflite::micro::GetTensorData<float>(filter),
			  tflite::micro::GetTensorShape(bias),
 80105da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80105de:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fc f9bc 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		  tflite::reference_ops::Conv(
 80105e8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80105ec:	f7fa fe52 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80105f0:	4605      	mov	r5, r0
			  tflite::micro::GetTensorData<float>(bias),
			  tflite::micro::GetTensorShape(output),
 80105f2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80105f6:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fc f9b0 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		  tflite::reference_ops::Conv(
 8010600:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8010604:	f7fa fe55 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8010608:	4606      	mov	r6, r0
			  tflite::micro::GetTensorData<float>(output),
			  tflite::micro::GetTensorShape(nullptr), nullptr);
 801060a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801060e:	2100      	movs	r1, #0
 8010610:	4618      	mov	r0, r3
 8010612:	f7fc f9a5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		  tflite::reference_ops::Conv(
 8010616:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801061a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 801061e:	f107 000c 	add.w	r0, r7, #12
 8010622:	2300      	movs	r3, #0
 8010624:	9306      	str	r3, [sp, #24]
 8010626:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801062a:	9305      	str	r3, [sp, #20]
 801062c:	9604      	str	r6, [sp, #16]
 801062e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010632:	9303      	str	r3, [sp, #12]
 8010634:	9502      	str	r5, [sp, #8]
 8010636:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801063a:	9301      	str	r3, [sp, #4]
 801063c:	9400      	str	r4, [sp, #0]
 801063e:	4613      	mov	r3, r2
 8010640:	4642      	mov	r2, r8
 8010642:	f7ff f846 	bl	800f6d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
			  tflite::micro::GetTensorShape(nullptr), nullptr);
 8010646:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801064a:	4618      	mov	r0, r3
 801064c:	f7f5 fad8 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			  tflite::micro::GetTensorShape(output),
 8010650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010654:	4618      	mov	r0, r3
 8010656:	f7f5 fad3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			  tflite::micro::GetTensorShape(bias),
 801065a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801065e:	4618      	mov	r0, r3
 8010660:	f7f5 face 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			  tflite::micro::GetTensorShape(filter),
 8010664:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010668:	4618      	mov	r0, r3
 801066a:	f7f5 fac9 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
			  tflite::micro::GetTensorShape(input),
 801066e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010672:	4618      	mov	r0, r3
 8010674:	f7f5 fac4 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		  break;
 8010678:	e027      	b.n	80106ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
		}
		case kTfLiteInt8:
		  EvalQuantizedPerChannel(context, node, params, data, input, filter,
 801067a:	2300      	movs	r3, #0
 801067c:	9304      	str	r3, [sp, #16]
 801067e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010682:	9303      	str	r3, [sp, #12]
 8010684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010688:	9302      	str	r3, [sp, #8]
 801068a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801069a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801069e:	6839      	ldr	r1, [r7, #0]
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f7ff fcd9 	bl	8010058 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_SE_>
										 bias, output, nullptr);
	//	  return EvalQuantizedPerChannel(context, node, params, data, input, filter,
	//									 bias, output, nullptr);
		  break;
 80106a6:	e010      	b.n	80106ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x236>
		default:
		  TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	695c      	ldr	r4, [r3, #20]
 80106ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80106b0:	7a1b      	ldrb	r3, [r3, #8]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f7f1 ffba 	bl	800262c <TfLiteTypeGetName>
 80106b8:	4602      	mov	r2, r0
 80106ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80106be:	7a1b      	ldrb	r3, [r3, #8]
 80106c0:	4912      	ldr	r1, [pc, #72]	; (801070c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x278>)
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	47a0      	blx	r4
							 TfLiteTypeGetName(input->type), input->type);
		  return kTfLiteError;
 80106c6:	2301      	movs	r3, #1
 80106c8:	e009      	b.n	80106de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x24a>
	}

	timer_val = HAL_GetTick() - timer_val;
 80106ca:	f00d fd19 	bl	801e100 <HAL_GetTick>
 80106ce:	4603      	mov	r3, r0
 80106d0:	b29a      	uxth	r2, r3
 80106d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80106d6:	1ad3      	subs	r3, r2, r3
 80106d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
//	uart_buf_len = sprintf((char *)debugPrintPtr, "conv_time: %u\n", timer_val);
//	HAL_UART_Transmit(&huart3, (uint8_t *)(char *)debugPrintPtr, uart_buf_len, 100);
//	debugPrintPtr += 32;
	#endif

	return kTfLiteOk;
 80106dc:	2300      	movs	r3, #0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	37d8      	adds	r7, #216	; 0xd8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106e8:	0802883c 	.word	0x0802883c
 80106ec:	08028840 	.word	0x08028840
 80106f0:	08028844 	.word	0x08028844
 80106f4:	08028848 	.word	0x08028848
 80106f8:	08027da4 	.word	0x08027da4
 80106fc:	08027db4 	.word	0x08027db4
 8010700:	08027cf8 	.word	0x08027cf8
 8010704:	08027d88 	.word	0x08027d88
 8010708:	08027dc0 	.word	0x08027dc0
 801070c:	08027e2c 	.word	0x08027e2c

08010710 <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 8010710:	b4b0      	push	{r4, r5, r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4a07      	ldr	r2, [pc, #28]	; (8010738 <_ZN6tflite16Register_CONV_2DEv+0x28>)
 801071c:	461c      	mov	r4, r3
 801071e:	4615      	mov	r5, r2
 8010720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	bcb0      	pop	{r4, r5, r7}
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	08027e48 	.word	0x08027e48

0801073c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 801073c:	b590      	push	{r4, r7, lr}
 801073e:	ed2d 8b02 	vpush	{d8}
 8010742:	b0a9      	sub	sp, #164	; 0xa4
 8010744:	af02      	add	r7, sp, #8
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
 801074c:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010754:	673b      	str	r3, [r7, #112]	; 0x70
  const int stride_height = params.stride_height;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801075c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_width_factor = params.dilation_width_factor;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010764:	66bb      	str	r3, [r7, #104]	; 0x68
  const int dilation_height_factor = params.dilation_height_factor;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801076c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_width = params.padding_values.width;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010774:	663b      	str	r3, [r7, #96]	; 0x60
  const int pad_height = params.padding_values.height;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801077c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int depth_multiplier = params.depth_multiplier;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010784:	65bb      	str	r3, [r7, #88]	; 0x58
  const float output_activation_min = params.float_activation_min;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801078a:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_max = params.float_activation_max;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010790:	653b      	str	r3, [r7, #80]	; 0x50
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010792:	68b8      	ldr	r0, [r7, #8]
 8010794:	f7f5 fa4a 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010798:	4603      	mov	r3, r0
 801079a:	2b04      	cmp	r3, #4
 801079c:	d001      	beq.n	80107a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x66>
 801079e:	f011 f997 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80107a2:	6838      	ldr	r0, [r7, #0]
 80107a4:	f7f5 fa42 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80107a8:	4603      	mov	r3, r0
 80107aa:	2b04      	cmp	r3, #4
 80107ac:	d001      	beq.n	80107b2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x76>
 80107ae:	f011 f98f 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80107b2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80107b6:	f7f5 fa39 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b04      	cmp	r3, #4
 80107be:	d001      	beq.n	80107c4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x88>
 80107c0:	f011 f986 	bl	8021ad0 <abort>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80107c4:	2300      	movs	r3, #0
 80107c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80107ca:	2100      	movs	r1, #0
 80107cc:	68b8      	ldr	r0, [r7, #8]
 80107ce:	f7fb fa25 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80107d2:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80107d4:	2303      	movs	r3, #3
 80107d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80107da:	2103      	movs	r1, #3
 80107dc:	6838      	ldr	r0, [r7, #0]
 80107de:	f7fb fa1d 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80107e2:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_height = input_shape.Dims(1);
 80107e4:	2101      	movs	r1, #1
 80107e6:	68b8      	ldr	r0, [r7, #8]
 80107e8:	f7f9 ff8c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80107ec:	6478      	str	r0, [r7, #68]	; 0x44
  const int input_width = input_shape.Dims(2);
 80107ee:	2102      	movs	r1, #2
 80107f0:	68b8      	ldr	r0, [r7, #8]
 80107f2:	f7f9 ff87 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80107f6:	6438      	str	r0, [r7, #64]	; 0x40
  const int input_depth = input_shape.Dims(3);
 80107f8:	2103      	movs	r1, #3
 80107fa:	68b8      	ldr	r0, [r7, #8]
 80107fc:	f7f9 ff82 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010800:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int filter_height = filter_shape.Dims(1);
 8010802:	2101      	movs	r1, #1
 8010804:	6838      	ldr	r0, [r7, #0]
 8010806:	f7f9 ff7d 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801080a:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_width = filter_shape.Dims(2);
 801080c:	2102      	movs	r1, #2
 801080e:	6838      	ldr	r0, [r7, #0]
 8010810:	f7f9 ff78 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010814:	6378      	str	r0, [r7, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
 8010816:	2101      	movs	r1, #1
 8010818:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801081c:	f7f9 ff72 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010820:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
 8010822:	2102      	movs	r1, #2
 8010824:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010828:	f7f9 ff6c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801082c:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 801082e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010832:	fb02 f303 	mul.w	r3, r2, r3
 8010836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010838:	429a      	cmp	r2, r3
 801083a:	d001      	beq.n	8010840 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x104>
 801083c:	f011 f948 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8010840:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010844:	f7f9 ff96 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010848:	4602      	mov	r2, r0
 801084a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801084c:	4293      	cmp	r3, r2
 801084e:	d001      	beq.n	8010854 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x118>
 8010850:	f011 f93e 	bl	8021ad0 <abort>

  for (int b = 0; b < batches; ++b) {
 8010854:	2300      	movs	r3, #0
 8010856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801085a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801085e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010860:	429a      	cmp	r2, r3
 8010862:	f280 80eb 	bge.w	8010a3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x300>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010866:	2300      	movs	r3, #0
 8010868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801086c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010872:	429a      	cmp	r2, r3
 8010874:	f280 80dc 	bge.w	8010a30 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2f4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010878:	2300      	movs	r3, #0
 801087a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801087e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010884:	429a      	cmp	r2, r3
 8010886:	f280 80cd 	bge.w	8010a24 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2e8>
        for (int ic = 0; ic < input_depth; ++ic) {
 801088a:	2300      	movs	r3, #0
 801088c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010890:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010896:	429a      	cmp	r2, r3
 8010898:	f280 80be 	bge.w	8010a18 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2dc>
          for (int m = 0; m < depth_multiplier; m++) {
 801089c:	2300      	movs	r3, #0
 801089e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80108a2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80108a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108a8:	429a      	cmp	r2, r3
 80108aa:	f280 80af 	bge.w	8010a0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x2d0>
            const int oc = m + ic * depth_multiplier;
 80108ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80108b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80108b4:	fb02 f303 	mul.w	r3, r2, r3
 80108b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80108bc:	4413      	add	r3, r2
 80108be:	62bb      	str	r3, [r7, #40]	; 0x28
            const int in_x_origin = (out_x * stride_width) - pad_width;
 80108c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80108c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80108c6:	fb02 f203 	mul.w	r2, r2, r3
 80108ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80108cc:	1ad3      	subs	r3, r2, r3
 80108ce:	627b      	str	r3, [r7, #36]	; 0x24
            const int in_y_origin = (out_y * stride_height) - pad_height;
 80108d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80108d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80108d6:	fb02 f203 	mul.w	r2, r2, r3
 80108da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	623b      	str	r3, [r7, #32]
            float total = 0.f;
 80108e0:	f04f 0300 	mov.w	r3, #0
 80108e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 80108e8:	2300      	movs	r3, #0
 80108ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80108ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80108ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f0:	429a      	cmp	r2, r3
 80108f2:	da54      	bge.n	801099e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x262>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 80108f4:	2300      	movs	r3, #0
 80108f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80108f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	429a      	cmp	r2, r3
 80108fe:	da4a      	bge.n	8010996 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x25a>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8010900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010902:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010904:	fb02 f303 	mul.w	r3, r2, r3
 8010908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090a:	4413      	add	r3, r2
 801090c:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 801090e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010912:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8010916:	6a3a      	ldr	r2, [r7, #32]
 8010918:	4413      	add	r3, r2
 801091a:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	2b00      	cmp	r3, #0
 8010920:	db35      	blt.n	801098e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8010922:	69fa      	ldr	r2, [r7, #28]
 8010924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010926:	429a      	cmp	r2, r3
 8010928:	da31      	bge.n	801098e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	db2e      	blt.n	801098e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
 8010930:	69ba      	ldr	r2, [r7, #24]
 8010932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010934:	429a      	cmp	r2, r3
 8010936:	da2a      	bge.n	801098e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x252>
                    (in_y < input_height)) {
                  float input_value =
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
 8010938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	69fb      	ldr	r3, [r7, #28]
 8010940:	69ba      	ldr	r2, [r7, #24]
 8010942:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8010946:	68b8      	ldr	r0, [r7, #8]
 8010948:	f7fa ffba 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801094c:	4603      	mov	r3, r0
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	4413      	add	r3, r2
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	617b      	str	r3, [r7, #20]
                  float filter_value = filter_data[Offset(
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	9300      	str	r3, [sp, #0]
 801095c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801095e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010960:	2100      	movs	r1, #0
 8010962:	6838      	ldr	r0, [r7, #0]
 8010964:	f7fa ffac 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010968:	4603      	mov	r3, r0
                      filter_shape, 0, filter_y, filter_x, oc)];
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010970:	4413      	add	r3, r2
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8010976:	ed97 7a05 	vldr	s14, [r7, #20]
 801097a:	edd7 7a04 	vldr	s15, [r7, #16]
 801097e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010982:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8010986:	ee77 7a27 	vadd.f32	s15, s14, s15
 801098a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801098e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010990:	3301      	adds	r3, #1
 8010992:	67bb      	str	r3, [r7, #120]	; 0x78
 8010994:	e7b0      	b.n	80108f8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010998:	3301      	adds	r3, #1
 801099a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801099c:	e7a6      	b.n	80108ec <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
                }
              }
            }
            float bias_value = 0.0f;
 801099e:	f04f 0300 	mov.w	r3, #0
 80109a2:	677b      	str	r3, [r7, #116]	; 0x74
            if (bias_data) {
 80109a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d006      	beq.n	80109ba <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x27e>
              bias_value = bias_data[oc];
 80109ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80109b4:	4413      	add	r3, r2
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	677b      	str	r3, [r7, #116]	; 0x74
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
                ActivationFunctionWithMinMax(total + bias_value,
 80109ba:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80109be:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80109c2:	ee37 8a27 	vadd.f32	s16, s14, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 80109c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80109ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80109d2:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80109d6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80109da:	f7fa ff71 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80109de:	4603      	mov	r3, r0
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80109e6:	18d4      	adds	r4, r2, r3
                ActivationFunctionWithMinMax(total + bias_value,
 80109e8:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80109ec:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 80109f0:	eeb0 0a48 	vmov.f32	s0, s16
 80109f4:	f7fb ff5d 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 80109f8:	eef0 7a40 	vmov.f32	s15, s0
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
 80109fc:	edc4 7a00 	vstr	s15, [r4]
          for (int m = 0; m < depth_multiplier; m++) {
 8010a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010a04:	3301      	adds	r3, #1
 8010a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010a0a:	e74a      	b.n	80108a2 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x166>
        for (int ic = 0; ic < input_depth; ++ic) {
 8010a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010a10:	3301      	adds	r3, #1
 8010a12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010a16:	e73b      	b.n	8010890 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x154>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010a22:	e72c      	b.n	801087e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x142>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010a28:	3301      	adds	r3, #1
 8010a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a2e:	e71d      	b.n	801086c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x130>
  for (int b = 0; b < batches; ++b) {
 8010a30:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010a34:	3301      	adds	r3, #1
 8010a36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010a3a:	e70e      	b.n	801085a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11e>
          }
        }
      }
    }
  }
}
 8010a3c:	bf00      	nop
 8010a3e:	379c      	adds	r7, #156	; 0x9c
 8010a40:	46bd      	mov	sp, r7
 8010a42:	ecbd 8b02 	vpop	{d8}
 8010a46:	bd90      	pop	{r4, r7, pc}

08010a48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8010a48:	b590      	push	{r4, r7, lr}
 8010a4a:	b0ab      	sub	sp, #172	; 0xac
 8010a4c:	af02      	add	r7, sp, #8
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010a5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8010a66:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8010a6e:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8010a76:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010a7e:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8010a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int depth_multiplier = params.depth_multiplier;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8010a8e:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32_t input_offset = params.input_offset;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	667b      	str	r3, [r7, #100]	; 0x64
  const int32_t output_offset = params.output_offset;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	69db      	ldr	r3, [r3, #28]
 8010a9a:	663b      	str	r3, [r7, #96]	; 0x60
  const int32_t output_activation_min = params.quantized_activation_min;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa0:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa6:	617b      	str	r3, [r7, #20]

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8010aa8:	6838      	ldr	r0, [r7, #0]
 8010aaa:	f7f5 f8bf 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b04      	cmp	r3, #4
 8010ab2:	d001      	beq.n	8010ab8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x70>
 8010ab4:	f011 f80c 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8010ab8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010abc:	f7f5 f8b6 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b04      	cmp	r3, #4
 8010ac4:	d001      	beq.n	8010aca <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x82>
 8010ac6:	f011 f803 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8010aca:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010ace:	f7f5 f8ad 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	2b04      	cmp	r3, #4
 8010ad6:	d001      	beq.n	8010adc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x94>
 8010ad8:	f010 fffa 	bl	8021ad0 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8010adc:	69ba      	ldr	r2, [r7, #24]
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	dd01      	ble.n	8010ae8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa0>
 8010ae4:	f010 fff4 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8010ae8:	2300      	movs	r3, #0
 8010aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010aee:	2100      	movs	r1, #0
 8010af0:	6838      	ldr	r0, [r7, #0]
 8010af2:	f7fb f893 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010af6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 8010af8:	2303      	movs	r3, #3
 8010afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010afe:	2103      	movs	r1, #3
 8010b00:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010b04:	f7fb f88a 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8010b08:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_height = input_shape.Dims(1);
 8010b0a:	2101      	movs	r1, #1
 8010b0c:	6838      	ldr	r0, [r7, #0]
 8010b0e:	f7f9 fdf9 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b12:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_width = input_shape.Dims(2);
 8010b14:	2102      	movs	r1, #2
 8010b16:	6838      	ldr	r0, [r7, #0]
 8010b18:	f7f9 fdf4 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b1c:	6538      	str	r0, [r7, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
 8010b1e:	2103      	movs	r1, #3
 8010b20:	6838      	ldr	r0, [r7, #0]
 8010b22:	f7f9 fdef 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b26:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int filter_height = filter_shape.Dims(1);
 8010b28:	2101      	movs	r1, #1
 8010b2a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010b2e:	f7f9 fde9 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b32:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_width = filter_shape.Dims(2);
 8010b34:	2102      	movs	r1, #2
 8010b36:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010b3a:	f7f9 fde3 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b3e:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_height = output_shape.Dims(1);
 8010b40:	2101      	movs	r1, #1
 8010b42:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010b46:	f7f9 fddd 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b4a:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_width = output_shape.Dims(2);
 8010b4c:	2102      	movs	r1, #2
 8010b4e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010b52:	f7f9 fdd7 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010b56:	63f8      	str	r0, [r7, #60]	; 0x3c
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
 8010b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b5c:	fb02 f303 	mul.w	r3, r2, r3
 8010b60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d001      	beq.n	8010b6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x122>
 8010b66:	f010 ffb3 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8010b6a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8010b6e:	f7f9 fe01 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8010b72:	4602      	mov	r2, r0
 8010b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d001      	beq.n	8010b7e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
 8010b7a:	f010 ffa9 	bl	8021ad0 <abort>

  for (int batch = 0; batch < batches; ++batch) {
 8010b7e:	2300      	movs	r3, #0
 8010b80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010b84:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	f280 811a 	bge.w	8010dc4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010b90:	2300      	movs	r3, #0
 8010b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010b96:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b9c:	429a      	cmp	r2, r3
 8010b9e:	f280 810b 	bge.w	8010db8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010ba8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bae:	429a      	cmp	r2, r3
 8010bb0:	f280 80fc 	bge.w	8010dac <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x364>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010bba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	f280 80ed 	bge.w	8010da0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
          for (int m = 0; m < depth_multiplier; ++m) {
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010bcc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	f280 80de 	bge.w	8010d94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
            const int output_channel = m + in_channel * depth_multiplier;
 8010bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010bdc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010bde:	fb02 f303 	mul.w	r3, r2, r3
 8010be2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010be6:	4413      	add	r3, r2
 8010be8:	63bb      	str	r3, [r7, #56]	; 0x38
            const int in_x_origin = (out_x * stride_width) - pad_width;
 8010bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010bf2:	fb02 f203 	mul.w	r2, r2, r3
 8010bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bf8:	1ad3      	subs	r3, r2, r3
 8010bfa:	637b      	str	r3, [r7, #52]	; 0x34
            const int in_y_origin = (out_y * stride_height) - pad_height;
 8010bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010c00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c02:	fb02 f203 	mul.w	r2, r2, r3
 8010c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	633b      	str	r3, [r7, #48]	; 0x30
            int32_t acc = 0;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	613b      	str	r3, [r7, #16]
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010c10:	2300      	movs	r3, #0
 8010c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010c16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	da68      	bge.n	8010cf2 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2aa>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010c20:	2300      	movs	r3, #0
 8010c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010c26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	da5a      	bge.n	8010ce6 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x29e>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8010c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010c36:	fb02 f303 	mul.w	r3, r2, r3
 8010c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c3c:	4413      	add	r3, r2
 8010c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8010c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010c42:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010c46:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8010c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c4c:	4413      	add	r3, r2
 8010c4e:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	db0c      	blt.n	8010c70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8010c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	da08      	bge.n	8010c70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8010c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	db05      	blt.n	8010c70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8010c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	da01      	bge.n	8010c70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e000      	b.n	8010c72 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22a>
 8010c70:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8010c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8010c76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d02d      	beq.n	8010cda <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x292>
                  int32_t input_val = input_data[Offset(
 8010c7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010c82:	9300      	str	r3, [sp, #0]
 8010c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c88:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010c8c:	6838      	ldr	r0, [r7, #0]
 8010c8e:	f7fa fe17 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461a      	mov	r2, r3
                      input_shape, batch, in_y, in_x, in_channel)];
 8010c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010c9a:	4413      	add	r3, r2
 8010c9c:	f993 3000 	ldrsb.w	r3, [r3]
 8010ca0:	623b      	str	r3, [r7, #32]
                  int32_t filter_val = filter_data[Offset(
 8010ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca4:	9300      	str	r3, [sp, #0]
 8010ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010caa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010cae:	2100      	movs	r1, #0
 8010cb0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8010cb4:	f7fa fe04 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461a      	mov	r2, r3
                      filter_shape, 0, filter_y, filter_x, output_channel)];
 8010cbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8010cc6:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(b/174275578): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8010cc8:	6a3a      	ldr	r2, [r7, #32]
 8010cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ccc:	4413      	add	r3, r2
 8010cce:	69fa      	ldr	r2, [r7, #28]
 8010cd0:	fb02 f203 	mul.w	r2, r2, r3
 8010cd4:	693b      	ldr	r3, [r7, #16]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	613b      	str	r3, [r7, #16]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8010cda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010cde:	3301      	adds	r3, #1
 8010ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010ce4:	e79f      	b.n	8010c26 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1de>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8010ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010cea:	3301      	adds	r3, #1
 8010cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010cf0:	e791      	b.n	8010c16 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1ce>
                }
              }
            }
            if (bias_data) {
 8010cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d008      	beq.n	8010d0c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c4>
              acc += bias_data[output_channel];
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8010d02:	4413      	add	r3, r2
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	4413      	add	r3, r2
 8010d0a:	613b      	str	r3, [r7, #16]
            }
            acc = MultiplyByQuantizedMultiplier(
 8010d0c:	6938      	ldr	r0, [r7, #16]
                acc, output_multiplier[output_channel],
 8010d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d10:	009b      	lsls	r3, r3, #2
 8010d12:	68ba      	ldr	r2, [r7, #8]
 8010d14:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8010d16:	6819      	ldr	r1, [r3, #0]
                output_shift[output_channel]);
 8010d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d1a:	009b      	lsls	r3, r3, #2
 8010d1c:	687a      	ldr	r2, [r7, #4]
 8010d1e:	4413      	add	r3, r2
            acc = MultiplyByQuantizedMultiplier(
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	461a      	mov	r2, r3
 8010d24:	f7f9 fd7e 	bl	800a824 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	613b      	str	r3, [r7, #16]
            acc += output_offset;
 8010d2c:	693a      	ldr	r2, [r7, #16]
 8010d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010d30:	4413      	add	r3, r2
 8010d32:	613b      	str	r3, [r7, #16]
            acc = std::max(acc, output_activation_min);
 8010d34:	f107 0218 	add.w	r2, r7, #24
 8010d38:	f107 0310 	add.w	r3, r7, #16
 8010d3c:	4611      	mov	r1, r2
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7f4 fe15 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 8010d44:	4603      	mov	r3, r0
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	613b      	str	r3, [r7, #16]
            acc = std::min(acc, output_activation_max);
 8010d4a:	f107 0214 	add.w	r2, r7, #20
 8010d4e:	f107 0310 	add.w	r3, r7, #16
 8010d52:	4611      	mov	r1, r2
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7f4 fdf6 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	613b      	str	r3, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
                               output_channel)] = static_cast<int8_t>(acc);
 8010d60:	693c      	ldr	r4, [r7, #16]
            output_data[Offset(output_shape, batch, out_y, out_x,
 8010d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d64:	9300      	str	r3, [sp, #0]
 8010d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010d6e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010d72:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8010d76:	f7fa fda3 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	461a      	mov	r2, r3
                               output_channel)] = static_cast<int8_t>(acc);
 8010d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010d82:	4413      	add	r3, r2
 8010d84:	b262      	sxtb	r2, r4
 8010d86:	701a      	strb	r2, [r3, #0]
          for (int m = 0; m < depth_multiplier; ++m) {
 8010d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010d92:	e71b      	b.n	8010bcc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x184>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8010d94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010d98:	3301      	adds	r3, #1
 8010d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010d9e:	e70c      	b.n	8010bba <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x172>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8010da0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010da4:	3301      	adds	r3, #1
 8010da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010daa:	e6fd      	b.n	8010ba8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8010dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010db0:	3301      	adds	r3, #1
 8010db2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010db6:	e6ee      	b.n	8010b96 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x14e>
  for (int batch = 0; batch < batches; ++batch) {
 8010db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010dc2:	e6df      	b.n	8010b84 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x13c>
          }
        }
      }
    }
  }
}
 8010dc4:	bf00      	nop
 8010dc6:	37a4      	adds	r7, #164	; 0xa4
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd90      	pop	{r4, r7, pc}

08010dcc <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

  // Index to buffer for optimizations if applicable.
  int buffer_idx;
};

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d101      	bne.n	8010de4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 8010de0:	f010 fe76 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de8:	2138      	movs	r1, #56	; 0x38
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	4798      	blx	r3
 8010dee:	4603      	mov	r3, r0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3710      	adds	r7, #16
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}

08010df8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8010df8:	b5b0      	push	{r4, r5, r7, lr}
 8010dfa:	b0c6      	sub	sp, #280	; 0x118
 8010dfc:	af08      	add	r7, sp, #32
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
 8010e02:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	691b      	ldr	r3, [r3, #16]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d101      	bne.n	8010e10 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18>
 8010e0c:	f010 fe60 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	695b      	ldr	r3, [r3, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d101      	bne.n	8010e1c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 8010e18:	f010 fe5a 	bl	8021ad0 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	691b      	ldr	r3, [r3, #16]
 8010e20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  const auto& params =
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	695b      	ldr	r3, [r3, #20]
 8010e28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));

  const TfLiteTensor* input =
      GetInput(context, node, kDepthwiseConvInputTensor);
 8010e2c:	4baa      	ldr	r3, [pc, #680]	; (80110d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e0>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	461a      	mov	r2, r3
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7f4 f9a2 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010e3a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
  TF_LITE_ENSURE(context, input != nullptr);
 8010e3e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10a      	bne.n	8010e5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	695c      	ldr	r4, [r3, #20]
 8010e4a:	4ba4      	ldr	r3, [pc, #656]	; (80110dc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
 8010e4c:	9300      	str	r3, [sp, #0]
 8010e4e:	2372      	movs	r3, #114	; 0x72
 8010e50:	4aa3      	ldr	r2, [pc, #652]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010e52:	49a4      	ldr	r1, [pc, #656]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	47a0      	blx	r4
 8010e58:	2401      	movs	r4, #1
 8010e5a:	e22a      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  const TfLiteTensor* filter =
      GetInput(context, node, kDepthwiseConvWeightsTensor);
 8010e5c:	4ba2      	ldr	r3, [pc, #648]	; (80110e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	461a      	mov	r2, r3
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7f4 f98a 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010e6a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
  TF_LITE_ENSURE(context, filter != nullptr);
 8010e6e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10a      	bne.n	8010e8c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	695c      	ldr	r4, [r3, #20]
 8010e7a:	4b9c      	ldr	r3, [pc, #624]	; (80110ec <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
 8010e7c:	9300      	str	r3, [sp, #0]
 8010e7e:	2375      	movs	r3, #117	; 0x75
 8010e80:	4a97      	ldr	r2, [pc, #604]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010e82:	4998      	ldr	r1, [pc, #608]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	47a0      	blx	r4
 8010e88:	2401      	movs	r4, #1
 8010e8a:	e212      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
  TfLiteTensor* output = GetOutput(context, node, kDepthwiseConvOutputTensor);
 8010e8c:	4b98      	ldr	r3, [pc, #608]	; (80110f0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	461a      	mov	r2, r3
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7f4 f982 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010e9a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  TF_LITE_ENSURE(context, output != nullptr);
 8010e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d10a      	bne.n	8010ebc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	695c      	ldr	r4, [r3, #20]
 8010eaa:	4b92      	ldr	r3, [pc, #584]	; (80110f4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	2377      	movs	r3, #119	; 0x77
 8010eb0:	4a8b      	ldr	r2, [pc, #556]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010eb2:	498c      	ldr	r1, [pc, #560]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	47a0      	blx	r4
 8010eb8:	2401      	movs	r4, #1
 8010eba:	e1fa      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>

  const TfLiteType data_type = input->type;
 8010ebc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  int input_width = SizeOfDimension(input, 2);
 8010ec6:	2102      	movs	r1, #2
 8010ec8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8010ecc:	f7f4 f890 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010ed0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  int input_height = SizeOfDimension(input, 1);
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8010eda:	f7f4 f889 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010ede:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
  int filter_width = SizeOfDimension(filter, 2);
 8010ee2:	2102      	movs	r1, #2
 8010ee4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010ee8:	f7f4 f882 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010eec:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  int filter_height = SizeOfDimension(filter, 1);
 8010ef0:	2101      	movs	r1, #1
 8010ef2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8010ef6:	f7f4 f87b 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010efa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
  int output_width = SizeOfDimension(output, 2);
 8010efe:	2102      	movs	r1, #2
 8010f00:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8010f04:	f7f4 f874 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010f08:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  int output_height = SizeOfDimension(output, 1);
 8010f0c:	2101      	movs	r1, #1
 8010f0e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8010f12:	f7f4 f86d 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8010f16:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if (input->type == kTfLiteInt8) {
 8010f1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010f1e:	781b      	ldrb	r3, [r3, #0]
 8010f20:	2b09      	cmp	r3, #9
 8010f22:	f040 808f 	bne.w	8011044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8010f26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f2e:	2b01      	cmp	r3, #1
 8010f30:	d014      	beq.n	8010f5c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	695c      	ldr	r4, [r3, #20]
 8010f36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f3e:	461a      	mov	r2, r3
 8010f40:	2301      	movs	r3, #1
 8010f42:	9303      	str	r3, [sp, #12]
 8010f44:	9202      	str	r2, [sp, #8]
 8010f46:	4b6c      	ldr	r3, [pc, #432]	; (80110f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	4b6c      	ldr	r3, [pc, #432]	; (80110fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
 8010f4c:	9300      	str	r3, [sp, #0]
 8010f4e:	2382      	movs	r3, #130	; 0x82
 8010f50:	4a63      	ldr	r2, [pc, #396]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010f52:	496b      	ldr	r1, [pc, #428]	; (8011100 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	47a0      	blx	r4
 8010f58:	2401      	movs	r4, #1
 8010f5a:	e1aa      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      kTfLiteAffineQuantization);

    // All per-channel quantized tensors need valid zero point and scale arrays.
    const auto* affine_quantization =
 8010f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8010f66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d10a      	bne.n	8010f84 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x18c>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	695c      	ldr	r4, [r3, #20]
 8010f72:	4b64      	ldr	r3, [pc, #400]	; (8011104 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
 8010f74:	9300      	str	r3, [sp, #0]
 8010f76:	2389      	movs	r3, #137	; 0x89
 8010f78:	4a59      	ldr	r2, [pc, #356]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010f7a:	495a      	ldr	r1, [pc, #360]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	47a0      	blx	r4
 8010f80:	2401      	movs	r4, #1
 8010f82:	e196      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8010f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10a      	bne.n	8010fa4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	695c      	ldr	r4, [r3, #20]
 8010f92:	4b5d      	ldr	r3, [pc, #372]	; (8011108 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	238a      	movs	r3, #138	; 0x8a
 8010f98:	4a51      	ldr	r2, [pc, #324]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010f9a:	4952      	ldr	r1, [pc, #328]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	47a0      	blx	r4
 8010fa0:	2401      	movs	r4, #1
 8010fa2:	e186      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8010fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fa8:	685b      	ldr	r3, [r3, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d10a      	bne.n	8010fc4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	695c      	ldr	r4, [r3, #20]
 8010fb2:	4b56      	ldr	r3, [pc, #344]	; (801110c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	238b      	movs	r3, #139	; 0x8b
 8010fb8:	4a49      	ldr	r2, [pc, #292]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010fba:	494a      	ldr	r1, [pc, #296]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	47a0      	blx	r4
 8010fc0:	2401      	movs	r4, #1
 8010fc2:	e176      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    TF_LITE_ENSURE(
 8010fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d018      	beq.n	8011002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8010fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010fdc:	6899      	ldr	r1, [r3, #8]
 8010fde:	4b4c      	ldr	r3, [pc, #304]	; (8011110 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	440b      	add	r3, r1
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d00a      	beq.n	8011002 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20a>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	695c      	ldr	r4, [r3, #20]
 8010ff0:	4b48      	ldr	r3, [pc, #288]	; (8011114 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	238c      	movs	r3, #140	; 0x8c
 8010ff6:	4a3a      	ldr	r2, [pc, #232]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 8010ff8:	493a      	ldr	r1, [pc, #232]	; (80110e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	47a0      	blx	r4
 8010ffe:	2401      	movs	r4, #1
 8011000:	e157      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
        context, affine_quantization->scale->size == 1 ||
                     affine_quantization->scale->size ==
                         filter->dims->data[kDepthwiseConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 8011002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	429a      	cmp	r2, r3
 8011014:	d016      	beq.n	8011044 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x24c>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	695c      	ldr	r4, [r3, #20]
 801101a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011026:	6852      	ldr	r2, [r2, #4]
 8011028:	6812      	ldr	r2, [r2, #0]
 801102a:	9203      	str	r2, [sp, #12]
 801102c:	9302      	str	r3, [sp, #8]
 801102e:	4b3a      	ldr	r3, [pc, #232]	; (8011118 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
 8011030:	9301      	str	r3, [sp, #4]
 8011032:	4b3a      	ldr	r3, [pc, #232]	; (801111c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
 8011034:	9300      	str	r3, [sp, #0]
 8011036:	2390      	movs	r3, #144	; 0x90
 8011038:	4a29      	ldr	r2, [pc, #164]	; (80110e0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
 801103a:	4931      	ldr	r1, [pc, #196]	; (8011100 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	47a0      	blx	r4
 8011040:	2401      	movs	r4, #1
 8011042:	e136      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
                      affine_quantization->zero_point->size);
  }

  // Allocate memory for per-channel quantization parameters
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
 8011044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011048:	689a      	ldr	r2, [r3, #8]
 801104a:	4b31      	ldr	r3, [pc, #196]	; (8011110 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	4413      	add	r3, r2
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  data->reference_op_data.per_channel_output_multiplier =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 801105c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8011060:	0092      	lsls	r2, r2, #2
 8011062:	4611      	mov	r1, r2
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	4798      	blx	r3
 8011068:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_multiplier =
 801106a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801106e:	625a      	str	r2, [r3, #36]	; 0x24
  data->reference_op_data.per_channel_output_shift =
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          context, num_channels * sizeof(int32_t)));
 8011074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
      reinterpret_cast<int32_t*>(context->AllocatePersistentBuffer(
 8011078:	0092      	lsls	r2, r2, #2
 801107a:	4611      	mov	r1, r2
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	4798      	blx	r3
 8011080:	4602      	mov	r2, r0
  data->reference_op_data.per_channel_output_shift =
 8011082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011086:	629a      	str	r2, [r3, #40]	; 0x28

  TF_LITE_ENSURE_STATUS(CalculateOpDataDepthwiseConv(
 8011088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801108c:	9306      	str	r3, [sp, #24]
 801108e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8011092:	9305      	str	r3, [sp, #20]
 8011094:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011098:	9304      	str	r3, [sp, #16]
 801109a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801109e:	9303      	str	r3, [sp, #12]
 80110a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80110a4:	9302      	str	r3, [sp, #8]
 80110a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80110aa:	9301      	str	r3, [sp, #4]
 80110ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80110b6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80110ba:	6839      	ldr	r1, [r7, #0]
 80110bc:	6878      	ldr	r0, [r7, #4]
 80110be:	f7fb f907 	bl	800c2d0 <_ZN6tflite28CalculateOpDataDepthwiseConvEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsiiiiii10TfLiteTypePNS_10OpDataConvE>
 80110c2:	4603      	mov	r3, r0
 80110c4:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 80110c8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d027      	beq.n	8011120 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x328>
 80110d0:	f897 40bf 	ldrb.w	r4, [r7, #191]	; 0xbf
 80110d4:	e0ed      	b.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
 80110d6:	bf00      	nop
 80110d8:	08028850 	.word	0x08028850
 80110dc:	08027fc0 	.word	0x08027fc0
 80110e0:	08027f60 	.word	0x08027f60
 80110e4:	08027fa8 	.word	0x08027fa8
 80110e8:	08028854 	.word	0x08028854
 80110ec:	08027fd4 	.word	0x08027fd4
 80110f0:	0802885c 	.word	0x0802885c
 80110f4:	08027fe8 	.word	0x08027fe8
 80110f8:	08028018 	.word	0x08028018
 80110fc:	08028034 	.word	0x08028034
 8011100:	08027ffc 	.word	0x08027ffc
 8011104:	08028050 	.word	0x08028050
 8011108:	08028064 	.word	0x08028064
 801110c:	08028080 	.word	0x08028080
 8011110:	08028860 	.word	0x08028860
 8011114:	080280a0 	.word	0x080280a0
 8011118:	08028124 	.word	0x08028124
 801111c:	0802814c 	.word	0x0802814c
      context, node, params, input_width, input_height, filter_width,
      filter_height, output_width, output_height, data_type,
      &data->reference_op_data));

  if (input->type == kTfLiteInt8) {
 8011120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b09      	cmp	r3, #9
 8011128:	f040 80c2 	bne.w	80112b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4b8>
    RuntimeShape input_shape = GetTensorShape(input);
 801112c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011130:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011134:	4618      	mov	r0, r3
 8011136:	f7f4 fddd 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape output_shape = GetTensorShape(output);
 801113a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801113e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8011142:	4618      	mov	r0, r3
 8011144:	f7f4 fdd6 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    RuntimeShape filter_shape = GetTensorShape(filter);
 8011148:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801114c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8011150:	4618      	mov	r0, r3
 8011152:	f7f4 fdcf 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011156:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801115a:	4618      	mov	r0, r3
 801115c:	f7f4 fd66 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011160:	4603      	mov	r3, r0
 8011162:	2b04      	cmp	r3, #4
 8011164:	d001      	beq.n	801116a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x372>
 8011166:	f010 fcb3 	bl	8021ad0 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801116a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801116e:	4618      	mov	r0, r3
 8011170:	f7f4 fd5c 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011174:	4603      	mov	r3, r0
 8011176:	2b04      	cmp	r3, #4
 8011178:	d001      	beq.n	801117e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x386>
 801117a:	f010 fca9 	bl	8021ad0 <abort>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801117e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011182:	4618      	mov	r0, r3
 8011184:	f7f4 fd52 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011188:	4603      	mov	r3, r0
 801118a:	2b04      	cmp	r3, #4
 801118c:	d001      	beq.n	8011192 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39a>
 801118e:	f010 fc9f 	bl	8021ad0 <abort>

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 8011192:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8011196:	f107 0094 	add.w	r0, r7, #148	; 0x94
 801119a:	2300      	movs	r3, #0
 801119c:	2100      	movs	r1, #0
 801119e:	f7fa fd3d 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80111a2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    const int output_depth = MatchingDim(output_shape, 3, filter_shape, 3);
 80111a6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80111aa:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80111ae:	2303      	movs	r3, #3
 80111b0:	2103      	movs	r1, #3
 80111b2:	f7fa fd33 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80111b6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    TFLITE_DCHECK_EQ(batch_size, 1); /* Only batch = 1 is supported */
 80111ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d001      	beq.n	80111c6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ce>
 80111c2:	f010 fc85 	bl	8021ad0 <abort>

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 80111c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80111ca:	657b      	str	r3, [r7, #84]	; 0x54
    input_dims.h = input_height;
 80111cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80111d0:	65bb      	str	r3, [r7, #88]	; 0x58
    input_dims.w = input_width;
 80111d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    input_dims.c = input_shape.Dims(3);
 80111d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80111dc:	2103      	movs	r1, #3
 80111de:	4618      	mov	r0, r3
 80111e0:	f7f9 fa90 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80111e4:	4603      	mov	r3, r0
 80111e6:	663b      	str	r3, [r7, #96]	; 0x60

    cmsis_nn_dims filter_dims;
    filter_dims.n = 1;
 80111e8:	2301      	movs	r3, #1
 80111ea:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = filter_height;
 80111ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80111f0:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = filter_width;
 80111f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80111f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = output_depth;
 80111f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80111fc:	653b      	str	r3, [r7, #80]	; 0x50

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80111fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011202:	637b      	str	r3, [r7, #52]	; 0x34
    output_dims.h = output_height;
 8011204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011208:	63bb      	str	r3, [r7, #56]	; 0x38
    output_dims.w = output_width;
 801120a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801120e:	63fb      	str	r3, [r7, #60]	; 0x3c
    output_dims.c = output_depth;
 8011210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011214:	643b      	str	r3, [r7, #64]	; 0x40

    cmsis_nn_dw_conv_params dw_conv_params;
    dw_conv_params.padding.h = data->reference_op_data.padding.height;
 8011216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	623b      	str	r3, [r7, #32]
    dw_conv_params.padding.w = data->reference_op_data.padding.width;
 801121e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	61fb      	str	r3, [r7, #28]

    const int32_t buf_size = arm_depthwise_conv_wrapper_s8_get_buffer_size(
 8011226:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801122a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801122e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8011232:	f107 0008 	add.w	r0, r7, #8
 8011236:	f007 fc4e 	bl	8018ad6 <arm_depthwise_conv_wrapper_s8_get_buffer_size>
 801123a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

//		  return kTfLiteError;
	}
	#endif

    if (buf_size > 0) {
 801123e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011242:	2b00      	cmp	r3, #0
 8011244:	dd13      	ble.n	801126e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x476>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801124e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8011252:	3234      	adds	r2, #52	; 0x34
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	4798      	blx	r3
 8011258:	4603      	mov	r3, r0
 801125a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 801125e:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011262:	2b00      	cmp	r3, #0
 8011264:	d008      	beq.n	8011278 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x480>
 8011266:	f897 40af 	ldrb.w	r4, [r7, #175]	; 0xaf
 801126a:	2500      	movs	r5, #0
 801126c:	e005      	b.n	801127a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x482>
          context, buf_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 801126e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011272:	f04f 32ff 	mov.w	r2, #4294967295
 8011276:	635a      	str	r2, [r3, #52]	; 0x34
    RuntimeShape filter_shape = GetTensorShape(filter);
 8011278:	2501      	movs	r5, #1
 801127a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801127e:	4618      	mov	r0, r3
 8011280:	f7f4 fcbe 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 8011284:	2d01      	cmp	r5, #1
 8011286:	d001      	beq.n	801128c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x494>
 8011288:	2500      	movs	r5, #0
 801128a:	e000      	b.n	801128e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x496>
    RuntimeShape output_shape = GetTensorShape(output);
 801128c:	2501      	movs	r5, #1
 801128e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8011292:	4618      	mov	r0, r3
 8011294:	f7f4 fcb4 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 8011298:	2d01      	cmp	r5, #1
 801129a:	d001      	beq.n	80112a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
 801129c:	2500      	movs	r5, #0
 801129e:	e000      	b.n	80112a2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4aa>
    RuntimeShape input_shape = GetTensorShape(input);
 80112a0:	2501      	movs	r5, #1
 80112a2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7f4 fcaa 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 80112ac:	2d01      	cmp	r5, #1
 80112ae:	d100      	bne.n	80112b2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x4ba>
    }
  }
  return kTfLiteOk;
 80112b0:	2400      	movs	r4, #0
 80112b2:	4623      	mov	r3, r4
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	37f8      	adds	r7, #248	; 0xf8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bdb0      	pop	{r4, r5, r7, pc}

080112bc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteDepthwiseConvParams& params,
                             const OpData& data, const TfLiteEvalTensor* input,
                             const TfLiteEvalTensor* filter,
                             const TfLiteEvalTensor* bias,
                             TfLiteEvalTensor* output) {
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	b0f1      	sub	sp, #452	; 0x1c4
 80112c0:	af08      	add	r7, sp, #32
 80112c2:	f107 0414 	add.w	r4, r7, #20
 80112c6:	6020      	str	r0, [r4, #0]
 80112c8:	f107 0010 	add.w	r0, r7, #16
 80112cc:	6001      	str	r1, [r0, #0]
 80112ce:	f107 010c 	add.w	r1, r7, #12
 80112d2:	600a      	str	r2, [r1, #0]
 80112d4:	f107 0208 	add.w	r2, r7, #8
 80112d8:	6013      	str	r3, [r2, #0]
  cmsis_nn_dw_conv_params dw_conv_params;
  dw_conv_params.dilation.h = params.dilation_height_factor;
 80112da:	f107 030c 	add.w	r3, r7, #12
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	699b      	ldr	r3, [r3, #24]
 80112e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  dw_conv_params.dilation.w = params.dilation_width_factor;
 80112e6:	f107 030c 	add.w	r3, r7, #12
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  // Call to reference implementation can be removed when dilation is supported
  // in the optimized implementations.
  if (1 == dw_conv_params.dilation.h && 1 == dw_conv_params.dilation.w) {
 80112f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	f040 8170 	bne.w	80115dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
 80112fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011300:	2b01      	cmp	r3, #1
 8011302:	f040 816b 	bne.w	80115dc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x320>
    dw_conv_params.input_offset = -data.reference_op_data.input_zero_point;
 8011306:	f107 0308 	add.w	r3, r7, #8
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	691b      	ldr	r3, [r3, #16]
 801130e:	425b      	negs	r3, r3
 8011310:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    dw_conv_params.output_offset = data.reference_op_data.output_zero_point;
 8011314:	f107 0308 	add.w	r3, r7, #8
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	699b      	ldr	r3, [r3, #24]
 801131c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    dw_conv_params.stride.h = params.stride_height;
 8011320:	f107 030c 	add.w	r3, r7, #12
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    dw_conv_params.stride.w = params.stride_width;
 801132c:	f107 030c 	add.w	r3, r7, #12
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	685b      	ldr	r3, [r3, #4]
 8011334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    dw_conv_params.padding.h = data.reference_op_data.padding.height;
 8011338:	f107 0308 	add.w	r3, r7, #8
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    dw_conv_params.padding.w = data.reference_op_data.padding.width;
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    // TODO(b/130439627): Use calculated value for clamping.
    dw_conv_params.activation.min = std::numeric_limits<int8_t>::min();
 8011350:	f7f3 fe0c 	bl	8004f6c <_ZNSt14numeric_limitsIaE3minEv>
 8011354:	4603      	mov	r3, r0
 8011356:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    dw_conv_params.activation.max = std::numeric_limits<int8_t>::max();
 801135a:	f7f3 fe10 	bl	8004f7e <_ZNSt14numeric_limitsIaE3maxEv>
 801135e:	4603      	mov	r3, r0
 8011360:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    dw_conv_params.ch_mult = params.depth_multiplier;
 8011364:	f107 030c 	add.w	r3, r7, #12
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        data.reference_op_data.per_channel_output_multiplier;
 8011370:	f107 0308 	add.w	r3, r7, #8
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    quant_params.multiplier =
 8011378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    quant_params.shift = data.reference_op_data.per_channel_output_shift;
 801137c:	f107 0308 	add.w	r3, r7, #8
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8011388:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801138c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011390:	4618      	mov	r0, r3
 8011392:	f7fb fae5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8011396:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801139a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 801139e:	4618      	mov	r0, r3
 80113a0:	f7fb fade 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80113a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80113a8:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fb fad7 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80113b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80113b6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fb fad0 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    TFLITE_DCHECK_LE(dw_conv_params.activation.min,
 80113c0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80113c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80113c8:	429a      	cmp	r2, r3
 80113ca:	dd01      	ble.n	80113d0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x114>
 80113cc:	f010 fb80 	bl	8021ad0 <abort>
                     dw_conv_params.activation.max);

    const int batch_size = MatchingDim(input_shape, 0, output_shape, 0);
 80113d0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80113d4:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80113d8:	2300      	movs	r3, #0
 80113da:	2100      	movs	r1, #0
 80113dc:	f7fa fc1e 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113e0:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
 80113e4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80113e8:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80113ec:	2303      	movs	r3, #3
 80113ee:	2103      	movs	r1, #3
 80113f0:	f7fa fc14 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113f4:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198

    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 80113f8:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 80113fc:	f7f9 ff6a 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	bf14      	ite	ne
 8011406:	2301      	movne	r3, #1
 8011408:	2300      	moveq	r3, #0
 801140a:	b2db      	uxtb	r3, r3
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00b      	beq.n	8011428 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8011410:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011414:	4618      	mov	r0, r3
 8011416:	f7f9 f9ad 	bl	800a774 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 801141a:	4602      	mov	r2, r0
 801141c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8011420:	4293      	cmp	r3, r2
 8011422:	d001      	beq.n	8011428 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x16c>
 8011424:	f010 fb54 	bl	8021ad0 <abort>
    }

    cmsis_nn_dims input_dims;
    input_dims.n = batch_size;
 8011428:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801142c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8011430:	601a      	str	r2, [r3, #0]
    input_dims.h = input_shape.Dims(1);
 8011432:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011436:	2101      	movs	r1, #1
 8011438:	4618      	mov	r0, r3
 801143a:	f7f9 f963 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801143e:	4602      	mov	r2, r0
 8011440:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011444:	605a      	str	r2, [r3, #4]
    input_dims.w = input_shape.Dims(2);
 8011446:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801144a:	2102      	movs	r1, #2
 801144c:	4618      	mov	r0, r3
 801144e:	f7f9 f959 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011452:	4602      	mov	r2, r0
 8011454:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011458:	609a      	str	r2, [r3, #8]
    input_dims.c = input_shape.Dims(3);
 801145a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801145e:	2103      	movs	r1, #3
 8011460:	4618      	mov	r0, r3
 8011462:	f7f9 f94f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011466:	4602      	mov	r2, r0
 8011468:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801146c:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims filter_dims;
    filter_dims.n = filter_shape.Dims(0);
 801146e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011472:	2100      	movs	r1, #0
 8011474:	4618      	mov	r0, r3
 8011476:	f7f9 f945 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801147a:	4602      	mov	r2, r0
 801147c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011480:	601a      	str	r2, [r3, #0]
    filter_dims.h = filter_shape.Dims(1);
 8011482:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011486:	2101      	movs	r1, #1
 8011488:	4618      	mov	r0, r3
 801148a:	f7f9 f93b 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801148e:	4602      	mov	r2, r0
 8011490:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011494:	605a      	str	r2, [r3, #4]
    filter_dims.w = filter_shape.Dims(2);
 8011496:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801149a:	2102      	movs	r1, #2
 801149c:	4618      	mov	r0, r3
 801149e:	f7f9 f931 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80114a2:	4602      	mov	r2, r0
 80114a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80114a8:	609a      	str	r2, [r3, #8]
    filter_dims.c = output_depth;
 80114aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80114ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80114b2:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims bias_dims;
    bias_dims.n = 1;
 80114b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80114b8:	2201      	movs	r2, #1
 80114ba:	601a      	str	r2, [r3, #0]
    bias_dims.h = 1;
 80114bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80114c0:	2201      	movs	r2, #1
 80114c2:	605a      	str	r2, [r3, #4]
    bias_dims.w = 1;
 80114c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80114c8:	2201      	movs	r2, #1
 80114ca:	609a      	str	r2, [r3, #8]
    bias_dims.c = output_depth;
 80114cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80114d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80114d4:	60da      	str	r2, [r3, #12]

    cmsis_nn_dims output_dims;
    output_dims.n = batch_size;
 80114d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80114de:	601a      	str	r2, [r3, #0]
    output_dims.h = output_shape.Dims(1);
 80114e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80114e4:	2101      	movs	r1, #1
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7f9 f90c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80114ec:	4602      	mov	r2, r0
 80114ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114f2:	605a      	str	r2, [r3, #4]
    output_dims.w = output_shape.Dims(2);
 80114f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80114f8:	2102      	movs	r1, #2
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f9 f902 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011500:	4602      	mov	r2, r0
 8011502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011506:	609a      	str	r2, [r3, #8]
    output_dims.c = output_depth;
 8011508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801150c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8011510:	60da      	str	r2, [r3, #12]

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 8011512:	f107 031c 	add.w	r3, r7, #28
 8011516:	2200      	movs	r2, #0
 8011518:	601a      	str	r2, [r3, #0]
    /* 'size' is unused */
    ctx.size = 0;
 801151a:	f107 031c 	add.w	r3, r7, #28
 801151e:	2200      	movs	r2, #0
 8011520:	605a      	str	r2, [r3, #4]

    if (data.buffer_idx > -1) {
 8011522:	f107 0308 	add.w	r3, r7, #8
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801152a:	2b00      	cmp	r3, #0
 801152c:	db0f      	blt.n	801154e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x292>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801152e:	f107 0314 	add.w	r3, r7, #20
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011536:	f107 0208 	add.w	r2, r7, #8
 801153a:	6812      	ldr	r2, [r2, #0]
 801153c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801153e:	f107 0214 	add.w	r2, r7, #20
 8011542:	6810      	ldr	r0, [r2, #0]
 8011544:	4798      	blx	r3
 8011546:	4602      	mov	r2, r0
 8011548:	f107 031c 	add.w	r3, r7, #28
 801154c:	601a      	str	r2, [r3, #0]
    }

    TFLITE_DCHECK_EQ(
 801154e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8011552:	f7f9 febf 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8011556:	4605      	mov	r5, r0
 8011558:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801155c:	f7f9 feba 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8011560:	4606      	mov	r6, r0
 8011562:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8011566:	f7fa f936 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 801156a:	6078      	str	r0, [r7, #4]
 801156c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 8011570:	f7f9 febf 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8011574:	4603      	mov	r3, r0
 8011576:	f107 0454 	add.w	r4, r7, #84	; 0x54
 801157a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801157e:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8011582:	f107 001c 	add.w	r0, r7, #28
 8011586:	9306      	str	r3, [sp, #24]
 8011588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801158c:	9305      	str	r3, [sp, #20]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	9304      	str	r3, [sp, #16]
 8011592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011596:	9303      	str	r3, [sp, #12]
 8011598:	9602      	str	r6, [sp, #8]
 801159a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	9500      	str	r5, [sp, #0]
 80115a2:	4623      	mov	r3, r4
 80115a4:	f007 fa34 	bl	8018a10 <arm_depthwise_conv_wrapper_s8>
 80115a8:	4603      	mov	r3, r0
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x2f6>
 80115ae:	f010 fa8f 	bl	8021ad0 <abort>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 80115b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7f4 fb22 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80115bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7f4 fb1d 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80115c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80115ca:	4618      	mov	r0, r3
 80115cc:	f7f4 fb18 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 80115d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7f4 fb13 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
            &ctx, &dw_conv_params, &quant_params, &input_dims,
            tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
            tflite::micro::GetTensorData<int8_t>(filter), &bias_dims,
            tflite::micro::GetTensorData<int32_t>(bias), &output_dims,
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
 80115da:	e06e      	b.n	80116ba <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_+0x3fe>
  } else {
    reference_integer_ops::DepthwiseConvPerChannel(
        DepthwiseConvParamsQuantized(params, data.reference_op_data),
 80115dc:	f107 0308 	add.w	r3, r7, #8
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80115e6:	f107 030c 	add.w	r3, r7, #12
 80115ea:	6819      	ldr	r1, [r3, #0]
 80115ec:	f7fa fe19 	bl	800c222 <_ZN6tflite28DepthwiseConvParamsQuantizedERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
        data.reference_op_data.per_channel_output_multiplier,
 80115f0:	f107 0308 	add.w	r3, r7, #8
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        data.reference_op_data.per_channel_output_shift,
 80115f8:	f107 0308 	add.w	r3, r7, #8
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
        tflite::micro::GetTensorShape(input),
 8011600:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8011604:	f8d7 11b8 	ldr.w	r1, [r7, #440]	; 0x1b8
 8011608:	4618      	mov	r0, r3
 801160a:	f7fb f9a9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801160e:	f8d7 01b8 	ldr.w	r0, [r7, #440]	; 0x1b8
 8011612:	f7f9 fe5f 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8011616:	4606      	mov	r6, r0
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8011618:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801161c:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8011620:	4618      	mov	r0, r3
 8011622:	f7fb f99d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8011626:	f8d7 01bc 	ldr.w	r0, [r7, #444]	; 0x1bc
 801162a:	f7f9 fe53 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 801162e:	6078      	str	r0, [r7, #4]
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8011630:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011634:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 8011638:	4618      	mov	r0, r3
 801163a:	f7fb f991 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 801163e:	f8d7 01c0 	ldr.w	r0, [r7, #448]	; 0x1c0
 8011642:	f7fa f8c8 	bl	800b7d6 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 8011646:	6038      	str	r0, [r7, #0]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8011648:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801164c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8011650:	4618      	mov	r0, r3
 8011652:	f7fb f985 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_integer_ops::DepthwiseConvPerChannel(
 8011656:	f8d7 01c4 	ldr.w	r0, [r7, #452]	; 0x1c4
 801165a:	f7f9 fe4a 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 801165e:	4603      	mov	r3, r0
 8011660:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8011664:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8011668:	9306      	str	r3, [sp, #24]
 801166a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801166e:	9305      	str	r3, [sp, #20]
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	9304      	str	r3, [sp, #16]
 8011674:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8011678:	9303      	str	r3, [sp, #12]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	9302      	str	r3, [sp, #8]
 801167e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8011682:	9301      	str	r3, [sp, #4]
 8011684:	9600      	str	r6, [sp, #0]
 8011686:	4613      	mov	r3, r2
 8011688:	462a      	mov	r2, r5
 801168a:	4621      	mov	r1, r4
 801168c:	f7ff f9dc 	bl	8010a48 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
        tflite::micro::GetTensorShape(output),
 8011690:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8011694:	4618      	mov	r0, r3
 8011696:	f7f4 fab3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(bias),
 801169a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801169e:	4618      	mov	r0, r3
 80116a0:	f7f4 faae 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(filter),
 80116a4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7f4 faa9 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorShape(input),
 80116ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7f4 faa4 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
        tflite::micro::GetTensorData<int8_t>(output));
  }
}
 80116b8:	bf00      	nop
 80116ba:	bf00      	nop
 80116bc:	f507 77d2 	add.w	r7, r7, #420	; 0x1a4
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080116c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80116c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116c6:	b0b7      	sub	sp, #220	; 0xdc
 80116c8:	af06      	add	r7, sp, #24
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	6039      	str	r1, [r7, #0]
	TFLITE_DCHECK(node->user_data != nullptr);
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	691b      	ldr	r3, [r3, #16]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d101      	bne.n	80116da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80116d6:	f010 f9fb 	bl	8021ad0 <abort>
	TFLITE_DCHECK(node->builtin_data != nullptr);
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	695b      	ldr	r3, [r3, #20]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d101      	bne.n	80116e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22>
 80116e2:	f010 f9f5 	bl	8021ad0 <abort>

	const auto& params =
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	695b      	ldr	r3, [r3, #20]
 80116ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	  *(reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data));
	#ifdef OVERLAY_FW
	OpData& data = *(static_cast<OpData*>(node->user_data));
	#else
	const OpData& data = *(static_cast<OpData*>(node->user_data));
 80116ee:	683b      	ldr	r3, [r7, #0]
 80116f0:	691b      	ldr	r3, [r3, #16]
 80116f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	#endif

	TfLiteEvalTensor* output =
	  tflite::micro::GetEvalOutput(context, node, kDepthwiseConvOutputTensor);
 80116f6:	4b60      	ldr	r3, [pc, #384]	; (8011878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	461a      	mov	r2, r3
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7f9 f8e4 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8011704:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	const TfLiteEvalTensor* input =
	  tflite::micro::GetEvalInput(context, node, kDepthwiseConvInputTensor);
 8011708:	4b5c      	ldr	r3, [pc, #368]	; (801187c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	461a      	mov	r2, r3
 801170e:	6839      	ldr	r1, [r7, #0]
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7f9 f8cb 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011716:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
	const TfLiteEvalTensor* filter =
	  tflite::micro::GetEvalInput(context, node, kDepthwiseConvWeightsTensor);
 801171a:	4b59      	ldr	r3, [pc, #356]	; (8011880 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	461a      	mov	r2, r3
 8011720:	6839      	ldr	r1, [r7, #0]
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f7f9 f8c2 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011728:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
	const TfLiteEvalTensor* bias =
	  (NumInputs(node) == 3)
 801172c:	6838      	ldr	r0, [r7, #0]
 801172e:	f7fa f838 	bl	800b7a2 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8011732:	4603      	mov	r3, r0
		  ? tflite::micro::GetEvalInput(context, node, kDepthwiseConvBiasTensor)
 8011734:	2b03      	cmp	r3, #3
 8011736:	d108      	bne.n	801174a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x86>
 8011738:	4b52      	ldr	r3, [pc, #328]	; (8011884 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	461a      	mov	r2, r3
 801173e:	6839      	ldr	r1, [r7, #0]
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7f9 f8b3 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8011746:	4603      	mov	r3, r0
 8011748:	e000      	b.n	801174c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
 801174a:	2300      	movs	r3, #0
		  : nullptr;
 801174c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
//		debugPrintPtr += 32;
	}
	#endif

	#else
	switch (input->type) {  // Already know in/out types are same.
 8011750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011754:	7a1b      	ldrb	r3, [r3, #8]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d002      	beq.n	8011760 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9c>
 801175a:	2b09      	cmp	r3, #9
 801175c:	d061      	beq.n	8011822 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15e>
 801175e:	e075      	b.n	801184c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x188>
	  case kTfLiteFloat32: {
		tflite::reference_ops::DepthwiseConv(
		  DepthwiseConvParamsFloat(params, data.reference_op_data),
 8011760:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011764:	f107 0308 	add.w	r3, r7, #8
 8011768:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 801176c:	4618      	mov	r0, r3
 801176e:	f7fa fd17 	bl	800c1a0 <_ZN6tflite24DepthwiseConvParamsFloatERK25TfLiteDepthwiseConvParamsRKNS_10OpDataConvE>
		  tflite::micro::GetTensorShape(input),
 8011772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011776:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801177a:	4618      	mov	r0, r3
 801177c:	f7fb f8f0 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		tflite::reference_ops::DepthwiseConv(
 8011780:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8011784:	f7f9 fd86 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8011788:	4606      	mov	r6, r0
		  tflite::micro::GetTensorData<float>(input),
		  tflite::micro::GetTensorShape(filter),
 801178a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801178e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8011792:	4618      	mov	r0, r3
 8011794:	f7fb f8e4 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		tflite::reference_ops::DepthwiseConv(
 8011798:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801179c:	f7f9 fd7a 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80117a0:	4604      	mov	r4, r0
		  tflite::micro::GetTensorData<float>(filter),
		  tflite::micro::GetTensorShape(bias),
 80117a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117a6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fb f8d8 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		tflite::reference_ops::DepthwiseConv(
 80117b0:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80117b4:	f7f9 fd6e 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80117b8:	4605      	mov	r5, r0
		  tflite::micro::GetTensorData<float>(bias),
		  tflite::micro::GetTensorShape(output),
 80117ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80117be:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fb f8cc 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
		tflite::reference_ops::DepthwiseConv(
 80117c8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80117cc:	f7f9 fd71 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80117d0:	4603      	mov	r3, r0
 80117d2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80117d6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80117da:	f107 0008 	add.w	r0, r7, #8
 80117de:	9304      	str	r3, [sp, #16]
 80117e0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	9502      	str	r5, [sp, #8]
 80117e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117ec:	9301      	str	r3, [sp, #4]
 80117ee:	9400      	str	r4, [sp, #0]
 80117f0:	4613      	mov	r3, r2
 80117f2:	4632      	mov	r2, r6
 80117f4:	f7fe ffa2 	bl	801073c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
		  tflite::micro::GetTensorShape(output),
 80117f8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7f4 f9ff 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		  tflite::micro::GetTensorShape(bias),
 8011802:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011806:	4618      	mov	r0, r3
 8011808:	f7f4 f9fa 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		  tflite::micro::GetTensorShape(filter),
 801180c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011810:	4618      	mov	r0, r3
 8011812:	f7f4 f9f5 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		  tflite::micro::GetTensorShape(input),
 8011816:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801181a:	4618      	mov	r0, r3
 801181c:	f7f4 f9f0 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
		  tflite::micro::GetTensorData<float>(output));
		break;
 8011820:	e025      	b.n	801186e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
	  }
	  case kTfLiteInt8:
		EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8011822:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011826:	9303      	str	r3, [sp, #12]
 8011828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801182c:	9302      	str	r3, [sp, #8]
 801182e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011832:	9301      	str	r3, [sp, #4]
 8011834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011838:	9300      	str	r3, [sp, #0]
 801183a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801183e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011842:	6839      	ldr	r1, [r7, #0]
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff fd39 	bl	80112bc <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeRK25TfLiteDepthwiseConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSD_SD_PSB_>
		      				  output);
		break;
 801184a:	e010      	b.n	801186e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1aa>
	  default:
		TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	695c      	ldr	r4, [r3, #20]
 8011850:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011854:	7a1b      	ldrb	r3, [r3, #8]
 8011856:	4618      	mov	r0, r3
 8011858:	f7f0 fee8 	bl	800262c <TfLiteTypeGetName>
 801185c:	4602      	mov	r2, r0
 801185e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011862:	7a1b      	ldrb	r3, [r3, #8]
 8011864:	4908      	ldr	r1, [pc, #32]	; (8011888 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
 8011866:	6878      	ldr	r0, [r7, #4]
 8011868:	47a0      	blx	r4
							 TfLiteTypeGetName(input->type), input->type);
	    return kTfLiteError;
 801186a:	2301      	movs	r3, #1
 801186c:	e000      	b.n	8011870 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    }
	#endif

  return kTfLiteOk;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	37c4      	adds	r7, #196	; 0xc4
 8011874:	46bd      	mov	sp, r7
 8011876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011878:	0802885c 	.word	0x0802885c
 801187c:	08028850 	.word	0x08028850
 8011880:	08028854 	.word	0x08028854
 8011884:	08028858 	.word	0x08028858
 8011888:	08028170 	.word	0x08028170

0801188c <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
 801188c:	b4b0      	push	{r4, r5, r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	4a07      	ldr	r2, [pc, #28]	; (80118b4 <_ZN6tflite26Register_DEPTHWISE_CONV_2DEv+0x28>)
 8011898:	461c      	mov	r4, r3
 801189a:	4615      	mov	r5, r2
 801189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80118a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80118a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bcb0      	pop	{r4, r5, r7}
 80118b0:	4770      	bx	lr
 80118b2:	bf00      	nop
 80118b4:	0802818c 	.word	0x0802818c

080118b8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
 80118b8:	b590      	push	{r4, r7, lr}
 80118ba:	ed2d 8b02 	vpush	{d8}
 80118be:	b0a7      	sub	sp, #156	; 0x9c
 80118c0:	af02      	add	r7, sp, #8
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	607a      	str	r2, [r7, #4]
 80118c8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80118ca:	68b8      	ldr	r0, [r7, #8]
 80118cc:	f7f4 f9ae 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80118d0:	4603      	mov	r3, r0
 80118d2:	2b04      	cmp	r3, #4
 80118d4:	d001      	beq.n	80118da <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 80118d6:	f010 f8fb 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80118da:	6838      	ldr	r0, [r7, #0]
 80118dc:	f7f4 f9a6 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b04      	cmp	r3, #4
 80118e4:	d001      	beq.n	80118ea <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 80118e6:	f010 f8f3 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80118ea:	2300      	movs	r3, #0
 80118ec:	683a      	ldr	r2, [r7, #0]
 80118ee:	2100      	movs	r1, #0
 80118f0:	68b8      	ldr	r0, [r7, #8]
 80118f2:	f7fa f993 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80118f6:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80118f8:	2303      	movs	r3, #3
 80118fa:	683a      	ldr	r2, [r7, #0]
 80118fc:	2103      	movs	r1, #3
 80118fe:	68b8      	ldr	r0, [r7, #8]
 8011900:	f7fa f98c 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011904:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8011906:	2101      	movs	r1, #1
 8011908:	68b8      	ldr	r0, [r7, #8]
 801190a:	f7f8 fefb 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801190e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8011910:	2102      	movs	r1, #2
 8011912:	68b8      	ldr	r0, [r7, #8]
 8011914:	f7f8 fef6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011918:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801191a:	2101      	movs	r1, #1
 801191c:	6838      	ldr	r0, [r7, #0]
 801191e:	f7f8 fef1 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011922:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8011924:	2102      	movs	r1, #2
 8011926:	6838      	ldr	r0, [r7, #0]
 8011928:	f7f8 feec 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801192c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801193a:	2300      	movs	r3, #0
 801193c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011940:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011946:	429a      	cmp	r2, r3
 8011948:	f280 80f0 	bge.w	8011b2c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x274>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801194c:	2300      	movs	r3, #0
 801194e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011952:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011958:	429a      	cmp	r2, r3
 801195a:	f280 80e1 	bge.w	8011b20 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x268>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801195e:	2300      	movs	r3, #0
 8011960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011964:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801196a:	429a      	cmp	r2, r3
 801196c:	f280 80d2 	bge.w	8011b14 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x25c>
        for (int channel = 0; channel < depth; ++channel) {
 8011970:	2300      	movs	r3, #0
 8011972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801197a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801197c:	429a      	cmp	r2, r3
 801197e:	f280 80c3 	bge.w	8011b08 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x250>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8011982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011986:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011988:	fb02 f303 	mul.w	r3, r2, r3
 801198c:	68fa      	ldr	r2, [r7, #12]
 801198e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8011992:	1a9b      	subs	r3, r3, r2
 8011994:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8011996:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801199a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801199c:	fb02 f303 	mul.w	r3, r2, r3
 80119a0:	68fa      	ldr	r2, [r7, #12]
 80119a2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80119a6:	1a9b      	subs	r3, r3, r2
 80119a8:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80119aa:	2300      	movs	r3, #0
 80119ac:	617b      	str	r3, [r7, #20]
 80119ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119b0:	425b      	negs	r3, r3
 80119b2:	61bb      	str	r3, [r7, #24]
 80119b4:	f107 0218 	add.w	r2, r7, #24
 80119b8:	f107 0314 	add.w	r3, r7, #20
 80119bc:	4611      	mov	r1, r2
 80119be:	4618      	mov	r0, r3
 80119c0:	f7f3 ffad 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 80119c4:	4603      	mov	r3, r0
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f103 0018 	add.w	r0, r3, #24
 80119d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80119d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119d4:	1ad3      	subs	r3, r2, r3
 80119d6:	61fb      	str	r3, [r7, #28]
 80119d8:	f107 031c 	add.w	r3, r7, #28
 80119dc:	4619      	mov	r1, r3
 80119de:	f7fa fd89 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 80119e2:	4603      	mov	r3, r0
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80119e8:	2300      	movs	r3, #0
 80119ea:	623b      	str	r3, [r7, #32]
 80119ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119ee:	425b      	negs	r3, r3
 80119f0:	627b      	str	r3, [r7, #36]	; 0x24
 80119f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80119f6:	f107 0320 	add.w	r3, r7, #32
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7f3 ff8e 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8011a02:	4603      	mov	r3, r0
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	f103 0014 	add.w	r0, r3, #20
 8011a0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	f7fa fd6a 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8011a20:	4603      	mov	r3, r0
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	63bb      	str	r3, [r7, #56]	; 0x38
          float total = 0.f;
 8011a26:	f04f 0300 	mov.w	r3, #0
 8011a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
          float filter_count = 0;
 8011a2c:	f04f 0300 	mov.w	r3, #0
 8011a30:	67bb      	str	r3, [r7, #120]	; 0x78
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a34:	677b      	str	r3, [r7, #116]	; 0x74
 8011a36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	da33      	bge.n	8011aa6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ee>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a40:	673b      	str	r3, [r7, #112]	; 0x70
 8011a42:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a46:	429a      	cmp	r2, r3
 8011a48:	da29      	bge.n	8011a9e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1e6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8011a4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a4e:	4413      	add	r3, r2
 8011a50:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8011a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011a56:	4413      	add	r3, r2
 8011a58:	633b      	str	r3, [r7, #48]	; 0x30
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a64:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011a68:	68b8      	ldr	r0, [r7, #8]
 8011a6a:	f7f9 ff29 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	687a      	ldr	r2, [r7, #4]
 8011a74:	4413      	add	r3, r2
 8011a76:	edd3 7a00 	vldr	s15, [r3]
              total +=
 8011a7a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8011a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a82:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              filter_count++;
 8011a86:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8011a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a92:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011a98:	3301      	adds	r3, #1
 8011a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8011a9c:	e7d1      	b.n	8011a42 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	677b      	str	r3, [r7, #116]	; 0x74
 8011aa4:	e7c7      	b.n	8011a36 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
            }
          }
          const float average = total / filter_count;
 8011aa6:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8011aaa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8011aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ab2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	edd3 8a0a 	vldr	s17, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011ac6:	9300      	str	r3, [sp, #0]
 8011ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011acc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011ad0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011ad4:	6838      	ldr	r0, [r7, #0]
 8011ad6:	f7f9 fef3 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011ada:	4603      	mov	r3, r0
 8011adc:	009b      	lsls	r3, r3, #2
 8011ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011ae2:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(average, params.float_activation_min,
 8011ae4:	eeb0 1a68 	vmov.f32	s2, s17
 8011ae8:	eef0 0a48 	vmov.f32	s1, s16
 8011aec:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8011af0:	f7fa fedf 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8011af4:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011af8:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8011afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b00:	3301      	adds	r3, #1
 8011b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b06:	e736      	b.n	8011976 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xbe>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011b12:	e727      	b.n	8011964 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xac>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011b18:	3301      	adds	r3, #1
 8011b1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011b1e:	e718      	b.n	8011952 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8011b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011b24:	3301      	adds	r3, #1
 8011b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011b2a:	e709      	b.n	8011940 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8011b2c:	bf00      	nop
 8011b2e:	3794      	adds	r7, #148	; 0x94
 8011b30:	46bd      	mov	sp, r7
 8011b32:	ecbd 8b02 	vpop	{d8}
 8011b36:	bd90      	pop	{r4, r7, pc}

08011b38 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8_t* input_data,
                        const RuntimeShape& output_shape,
                        uint8_t* output_data) {
 8011b38:	b590      	push	{r4, r7, lr}
 8011b3a:	b0a5      	sub	sp, #148	; 0x94
 8011b3c:	af02      	add	r7, sp, #8
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	69da      	ldr	r2, [r3, #28]
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6a1b      	ldr	r3, [r3, #32]
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	dd01      	ble.n	8011b56 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8011b52:	f00f ffbd 	bl	8021ad0 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011b56:	68b8      	ldr	r0, [r7, #8]
 8011b58:	f7f4 f868 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	d001      	beq.n	8011b66 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2e>
 8011b62:	f00f ffb5 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011b66:	6838      	ldr	r0, [r7, #0]
 8011b68:	f7f4 f860 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b04      	cmp	r3, #4
 8011b70:	d001      	beq.n	8011b76 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x3e>
 8011b72:	f00f ffad 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011b76:	2300      	movs	r3, #0
 8011b78:	683a      	ldr	r2, [r7, #0]
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	68b8      	ldr	r0, [r7, #8]
 8011b7e:	f7fa f84d 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011b82:	66b8      	str	r0, [r7, #104]	; 0x68
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8011b84:	2303      	movs	r3, #3
 8011b86:	683a      	ldr	r2, [r7, #0]
 8011b88:	2103      	movs	r1, #3
 8011b8a:	68b8      	ldr	r0, [r7, #8]
 8011b8c:	f7fa f846 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011b90:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_height = input_shape.Dims(1);
 8011b92:	2101      	movs	r1, #1
 8011b94:	68b8      	ldr	r0, [r7, #8]
 8011b96:	f7f8 fdb5 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011b9a:	6638      	str	r0, [r7, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
 8011b9c:	2102      	movs	r1, #2
 8011b9e:	68b8      	ldr	r0, [r7, #8]
 8011ba0:	f7f8 fdb0 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011ba4:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_height = output_shape.Dims(1);
 8011ba6:	2101      	movs	r1, #1
 8011ba8:	6838      	ldr	r0, [r7, #0]
 8011baa:	f7f8 fdab 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011bae:	65b8      	str	r0, [r7, #88]	; 0x58
  const int output_width = output_shape.Dims(2);
 8011bb0:	2102      	movs	r1, #2
 8011bb2:	6838      	ldr	r0, [r7, #0]
 8011bb4:	f7f8 fda6 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011bb8:	6578      	str	r0, [r7, #84]	; 0x54
  const int stride_height = params.stride_height;
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	653b      	str	r3, [r7, #80]	; 0x50
  const int stride_width = params.stride_width;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int batch = 0; batch < batches; ++batch) {
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011bcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011bd2:	429a      	cmp	r2, r3
 8011bd4:	f280 80e6 	bge.w	8011da4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011bd8:	2300      	movs	r3, #0
 8011bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011bde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011be4:	429a      	cmp	r2, r3
 8011be6:	f280 80d7 	bge.w	8011d98 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x260>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011bea:	2300      	movs	r3, #0
 8011bec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011bee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	f280 80ca 	bge.w	8011d8c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x254>
        for (int channel = 0; channel < depth; ++channel) {
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	67bb      	str	r3, [r7, #120]	; 0x78
 8011bfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011c00:	429a      	cmp	r2, r3
 8011c02:	f280 80bf 	bge.w	8011d84 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x24c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8011c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011c08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c0a:	fb02 f303 	mul.w	r3, r2, r3
 8011c0e:	68fa      	ldr	r2, [r7, #12]
 8011c10:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8011c14:	1a9b      	subs	r3, r3, r2
 8011c16:	64bb      	str	r3, [r7, #72]	; 0x48
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8011c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011c1e:	fb02 f303 	mul.w	r3, r2, r3
 8011c22:	68fa      	ldr	r2, [r7, #12]
 8011c24:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8011c28:	1a9b      	subs	r3, r3, r2
 8011c2a:	647b      	str	r3, [r7, #68]	; 0x44
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	617b      	str	r3, [r7, #20]
 8011c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c32:	425b      	negs	r3, r3
 8011c34:	61bb      	str	r3, [r7, #24]
 8011c36:	f107 0218 	add.w	r2, r7, #24
 8011c3a:	f107 0314 	add.w	r3, r7, #20
 8011c3e:	4611      	mov	r1, r2
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7f3 fe6c 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8011c46:	4603      	mov	r3, r0
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f103 0018 	add.w	r0, r3, #24
 8011c52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011c56:	1ad3      	subs	r3, r2, r3
 8011c58:	61fb      	str	r3, [r7, #28]
 8011c5a:	f107 031c 	add.w	r3, r7, #28
 8011c5e:	4619      	mov	r1, r3
 8011c60:	f7fa fc48 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8011c64:	4603      	mov	r3, r0
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_start = std::max(0, -in_y_origin);
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	623b      	str	r3, [r7, #32]
 8011c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c70:	425b      	negs	r3, r3
 8011c72:	627b      	str	r3, [r7, #36]	; 0x24
 8011c74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8011c78:	f107 0320 	add.w	r3, r7, #32
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7f3 fe4d 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8011c84:	4603      	mov	r3, r0
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	63bb      	str	r3, [r7, #56]	; 0x38
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f103 0014 	add.w	r0, r3, #20
 8011c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	f7fa fc29 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	637b      	str	r3, [r7, #52]	; 0x34
          int32_t acc = 0;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	613b      	str	r3, [r7, #16]
          int filter_count = 0;
 8011cac:	2300      	movs	r3, #0
 8011cae:	677b      	str	r3, [r7, #116]	; 0x74
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb2:	673b      	str	r3, [r7, #112]	; 0x70
 8011cb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	da2a      	bge.n	8011d12 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1da>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	da20      	bge.n	8011d0a <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1d2>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8011cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ccc:	4413      	add	r3, r2
 8011cce:	633b      	str	r3, [r7, #48]	; 0x30
              const int in_y = in_y_origin + filter_y;
 8011cd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011cd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011cd4:	4413      	add	r3, r2
 8011cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
 8011cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ce0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011ce4:	68b8      	ldr	r0, [r7, #8]
 8011ce6:	f7f9 fdeb 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011cea:	4603      	mov	r3, r0
 8011cec:	461a      	mov	r2, r3
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	781b      	ldrb	r3, [r3, #0]
              acc +=
 8011cf4:	461a      	mov	r2, r3
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	613b      	str	r3, [r7, #16]
              filter_count++;
 8011cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011cfe:	3301      	adds	r3, #1
 8011d00:	677b      	str	r3, [r7, #116]	; 0x74
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d04:	3301      	adds	r3, #1
 8011d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011d08:	e7da      	b.n	8011cc0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011d0c:	3301      	adds	r3, #1
 8011d0e:	673b      	str	r3, [r7, #112]	; 0x70
 8011d10:	e7d0      	b.n	8011cb4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
 8011d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d14:	0fda      	lsrs	r2, r3, #31
 8011d16:	4413      	add	r3, r2
 8011d18:	105b      	asrs	r3, r3, #1
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	441a      	add	r2, r3
 8011d20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011d22:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d26:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, params.quantized_activation_min);
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f103 021c 	add.w	r2, r3, #28
 8011d2e:	f107 0310 	add.w	r3, r7, #16
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7f3 fe1a 	bl	800596e <_ZSt3maxIlERKT_S2_S2_>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, params.quantized_activation_max);
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	f103 0220 	add.w	r2, r3, #32
 8011d46:	f107 0310 	add.w	r3, r7, #16
 8011d4a:	4611      	mov	r1, r2
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7f3 fdfa 	bl	8005946 <_ZSt3minIlERKT_S2_S2_>
 8011d52:	4603      	mov	r3, r0
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011d58:	693c      	ldr	r4, [r7, #16]
 8011d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d5c:	9300      	str	r3, [sp, #0]
 8011d5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011d64:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011d68:	6838      	ldr	r0, [r7, #0]
 8011d6a:	f7f9 fda9 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	461a      	mov	r2, r3
 8011d72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011d76:	4413      	add	r3, r2
 8011d78:	b2e2      	uxtb	r2, r4
 8011d7a:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8011d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011d7e:	3301      	adds	r3, #1
 8011d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8011d82:	e73b      	b.n	8011bfc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xc4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011d86:	3301      	adds	r3, #1
 8011d88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011d8a:	e730      	b.n	8011bee <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011d8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011d90:	3301      	adds	r3, #1
 8011d92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011d96:	e722      	b.n	8011bde <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa6>
  for (int batch = 0; batch < batches; ++batch) {
 8011d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011d9c:	3301      	adds	r3, #1
 8011d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011da2:	e713      	b.n	8011bcc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x94>
              static_cast<uint8_t>(acc);
        }
      }
    }
  }
}
 8011da4:	bf00      	nop
 8011da6:	378c      	adds	r7, #140	; 0x8c
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd90      	pop	{r4, r7, pc}

08011dac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8011dac:	b590      	push	{r4, r7, lr}
 8011dae:	ed2d 8b04 	vpush	{d8-d9}
 8011db2:	b0a5      	sub	sp, #148	; 0x94
 8011db4:	af02      	add	r7, sp, #8
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011dbe:	68b8      	ldr	r0, [r7, #8]
 8011dc0:	f7f3 ff34 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b04      	cmp	r3, #4
 8011dc8:	d001      	beq.n	8011dce <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8011dca:	f00f fe81 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011dce:	6838      	ldr	r0, [r7, #0]
 8011dd0:	f7f3 ff2c 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b04      	cmp	r3, #4
 8011dd8:	d001      	beq.n	8011dde <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8011dda:	f00f fe79 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011dde:	2300      	movs	r3, #0
 8011de0:	683a      	ldr	r2, [r7, #0]
 8011de2:	2100      	movs	r1, #0
 8011de4:	68b8      	ldr	r0, [r7, #8]
 8011de6:	f7f9 ff19 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011dea:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8011dec:	2303      	movs	r3, #3
 8011dee:	683a      	ldr	r2, [r7, #0]
 8011df0:	2103      	movs	r1, #3
 8011df2:	68b8      	ldr	r0, [r7, #8]
 8011df4:	f7f9 ff12 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011df8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8011dfa:	2101      	movs	r1, #1
 8011dfc:	68b8      	ldr	r0, [r7, #8]
 8011dfe:	f7f8 fc81 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e02:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8011e04:	2102      	movs	r1, #2
 8011e06:	68b8      	ldr	r0, [r7, #8]
 8011e08:	f7f8 fc7c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e0c:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8011e0e:	2101      	movs	r1, #1
 8011e10:	6838      	ldr	r0, [r7, #0]
 8011e12:	f7f8 fc77 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e16:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8011e18:	2102      	movs	r1, #2
 8011e1a:	6838      	ldr	r0, [r7, #0]
 8011e1c:	f7f8 fc72 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011e20:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	691b      	ldr	r3, [r3, #16]
 8011e2c:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8011e2e:	2300      	movs	r3, #0
 8011e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011e34:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	f280 80d4 	bge.w	8011fe8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011e40:	2300      	movs	r3, #0
 8011e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	f280 80c5 	bge.w	8011fdc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011e52:	2300      	movs	r3, #0
 8011e54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011e56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011e58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	f280 80b8 	bge.w	8011fd0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8011e60:	2300      	movs	r3, #0
 8011e62:	67bb      	str	r3, [r7, #120]	; 0x78
 8011e64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	f280 80ad 	bge.w	8011fc8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8011e6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011e70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011e72:	fb02 f303 	mul.w	r3, r2, r3
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8011e7c:	1a9b      	subs	r3, r3, r2
 8011e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8011e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011e86:	fb02 f303 	mul.w	r3, r2, r3
 8011e8a:	68fa      	ldr	r2, [r7, #12]
 8011e8c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8011e90:	1a9b      	subs	r3, r3, r2
 8011e92:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8011e94:	2300      	movs	r3, #0
 8011e96:	61bb      	str	r3, [r7, #24]
 8011e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e9a:	425b      	negs	r3, r3
 8011e9c:	61fb      	str	r3, [r7, #28]
 8011e9e:	f107 021c 	add.w	r2, r7, #28
 8011ea2:	f107 0318 	add.w	r3, r7, #24
 8011ea6:	4611      	mov	r1, r2
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7f3 fd38 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f103 0018 	add.w	r0, r3, #24
 8011eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	623b      	str	r3, [r7, #32]
 8011ec2:	f107 0320 	add.w	r3, r7, #32
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	f7fa fb14 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	681b      	ldr	r3, [r3, #0]
 8011ed0:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8011ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ed8:	425b      	negs	r3, r3
 8011eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8011edc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8011ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011ee4:	4611      	mov	r1, r2
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f3 fd19 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8011eec:	4603      	mov	r3, r0
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f103 0014 	add.w	r0, r3, #20
 8011ef8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011efc:	1ad3      	subs	r3, r2, r3
 8011efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011f04:	4619      	mov	r1, r3
 8011f06:	f7fa faf5 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8011f10:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8011f14:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f18:	677b      	str	r3, [r7, #116]	; 0x74
 8011f1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	da2b      	bge.n	8011f7a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f24:	673b      	str	r3, [r7, #112]	; 0x70
 8011f26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	da21      	bge.n	8011f72 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8011f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f32:	4413      	add	r3, r2
 8011f34:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8011f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f3a:	4413      	add	r3, r2
 8011f3c:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8011f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f40:	9300      	str	r3, [sp, #0]
 8011f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f46:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011f4a:	68b8      	ldr	r0, [r7, #8]
 8011f4c:	f7f9 fcb8 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011f50:	4603      	mov	r3, r0
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	441a      	add	r2, r3
 8011f58:	f107 0314 	add.w	r3, r7, #20
 8011f5c:	4611      	mov	r1, r2
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7f2 ffc7 	bl	8004ef2 <_ZSt3maxIfERKT_S2_S2_>
 8011f64:	4603      	mov	r3, r0
              max = std::max(
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8011f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	673b      	str	r3, [r7, #112]	; 0x70
 8011f70:	e7d9      	b.n	8011f26 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8011f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f74:	3301      	adds	r3, #1
 8011f76:	677b      	str	r3, [r7, #116]	; 0x74
 8011f78:	e7cf      	b.n	8011f1a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8011f7a:	ed97 8a05 	vldr	s16, [r7, #20]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f8c:	9300      	str	r3, [sp, #0]
 8011f8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011f90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011f94:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011f98:	6838      	ldr	r0, [r7, #0]
 8011f9a:	f7f9 fc91 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011fa6:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8011fa8:	eeb0 1a49 	vmov.f32	s2, s18
 8011fac:	eef0 0a68 	vmov.f32	s1, s17
 8011fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8011fb4:	f7fa fc7d 	bl	800c8b2 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 8011fb8:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8011fbc:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8011fc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8011fc6:	e74d      	b.n	8011e64 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011fca:	3301      	adds	r3, #1
 8011fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011fce:	e742      	b.n	8011e56 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011fda:	e734      	b.n	8011e46 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8011fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011fe6:	e725      	b.n	8011e34 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8011fe8:	bf00      	nop
 8011fea:	378c      	adds	r7, #140	; 0x8c
 8011fec:	46bd      	mov	sp, r7
 8011fee:	ecbd 8b04 	vpop	{d8-d9}
 8011ff2:	bd90      	pop	{r4, r7, pc}

08011ff4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b0a4      	sub	sp, #144	; 0x90
 8011ff8:	af02      	add	r7, sp, #8
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	607a      	str	r2, [r7, #4]
 8012000:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	69da      	ldr	r2, [r3, #28]
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	6a1b      	ldr	r3, [r3, #32]
 801200a:	429a      	cmp	r2, r3
 801200c:	dd01      	ble.n	8012012 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 801200e:	f00f fd5f 	bl	8021ad0 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	2b00      	cmp	r3, #0
 8012018:	da01      	bge.n	801201e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 801201a:	f00f fd59 	bl	8021ad0 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	6a1b      	ldr	r3, [r3, #32]
 8012022:	2bff      	cmp	r3, #255	; 0xff
 8012024:	dd01      	ble.n	801202a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 8012026:	f00f fd53 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801202a:	68b8      	ldr	r0, [r7, #8]
 801202c:	f7f3 fdfe 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012030:	4603      	mov	r3, r0
 8012032:	2b04      	cmp	r3, #4
 8012034:	d001      	beq.n	801203a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 8012036:	f00f fd4b 	bl	8021ad0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801203a:	6838      	ldr	r0, [r7, #0]
 801203c:	f7f3 fdf6 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012040:	4603      	mov	r3, r0
 8012042:	2b04      	cmp	r3, #4
 8012044:	d001      	beq.n	801204a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 8012046:	f00f fd43 	bl	8021ad0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801204a:	2300      	movs	r3, #0
 801204c:	683a      	ldr	r2, [r7, #0]
 801204e:	2100      	movs	r1, #0
 8012050:	68b8      	ldr	r0, [r7, #8]
 8012052:	f7f9 fde3 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012056:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012058:	2303      	movs	r3, #3
 801205a:	683a      	ldr	r2, [r7, #0]
 801205c:	2103      	movs	r1, #3
 801205e:	68b8      	ldr	r0, [r7, #8]
 8012060:	f7f9 fddc 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012064:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8012066:	2101      	movs	r1, #1
 8012068:	68b8      	ldr	r0, [r7, #8]
 801206a:	f7f8 fb4b 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801206e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8012070:	2102      	movs	r1, #2
 8012072:	68b8      	ldr	r0, [r7, #8]
 8012074:	f7f8 fb46 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012078:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801207a:	2101      	movs	r1, #1
 801207c:	6838      	ldr	r0, [r7, #0]
 801207e:	f7f8 fb41 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012082:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8012084:	2102      	movs	r1, #2
 8012086:	6838      	ldr	r0, [r7, #0]
 8012088:	f7f8 fb3c 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801208c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801209a:	2300      	movs	r3, #0
 801209c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80120a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80120a6:	429a      	cmp	r2, r3
 80120a8:	f280 80e1 	bge.w	801226e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80120ac:	2300      	movs	r3, #0
 80120ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80120b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80120b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80120b8:	429a      	cmp	r2, r3
 80120ba:	f280 80d2 	bge.w	8012262 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80120be:	2300      	movs	r3, #0
 80120c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80120c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80120c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80120c6:	429a      	cmp	r2, r3
 80120c8:	f280 80c5 	bge.w	8012256 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 80120cc:	2300      	movs	r3, #0
 80120ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80120d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80120d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80120d4:	429a      	cmp	r2, r3
 80120d6:	f280 80ba 	bge.w	801224e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80120da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80120dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80120de:	fb02 f303 	mul.w	r3, r2, r3
 80120e2:	68fa      	ldr	r2, [r7, #12]
 80120e4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80120ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80120f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80120f2:	fb02 f303 	mul.w	r3, r2, r3
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80120fc:	1a9b      	subs	r3, r3, r2
 80120fe:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8012100:	2300      	movs	r3, #0
 8012102:	617b      	str	r3, [r7, #20]
 8012104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012106:	425b      	negs	r3, r3
 8012108:	61bb      	str	r3, [r7, #24]
 801210a:	f107 0218 	add.w	r2, r7, #24
 801210e:	f107 0314 	add.w	r3, r7, #20
 8012112:	4611      	mov	r1, r2
 8012114:	4618      	mov	r0, r3
 8012116:	f7f3 fc02 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 801211a:	4603      	mov	r3, r0
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	f103 0018 	add.w	r0, r3, #24
 8012126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801212a:	1ad3      	subs	r3, r2, r3
 801212c:	61fb      	str	r3, [r7, #28]
 801212e:	f107 031c 	add.w	r3, r7, #28
 8012132:	4619      	mov	r1, r3
 8012134:	f7fa f9de 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8012138:	4603      	mov	r3, r0
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801213e:	2300      	movs	r3, #0
 8012140:	623b      	str	r3, [r7, #32]
 8012142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012144:	425b      	negs	r3, r3
 8012146:	627b      	str	r3, [r7, #36]	; 0x24
 8012148:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801214c:	f107 0320 	add.w	r3, r7, #32
 8012150:	4611      	mov	r1, r2
 8012152:	4618      	mov	r0, r3
 8012154:	f7f3 fbe3 	bl	800591e <_ZSt3maxIiERKT_S2_S2_>
 8012158:	4603      	mov	r3, r0
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	f103 0014 	add.w	r0, r3, #20
 8012164:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8012166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012168:	1ad3      	subs	r3, r2, r3
 801216a:	62bb      	str	r3, [r7, #40]	; 0x28
 801216c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012170:	4619      	mov	r1, r3
 8012172:	f7fa f9bf 	bl	800c4f4 <_ZSt3minIiERKT_S2_S2_>
 8012176:	4603      	mov	r3, r0
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8_t max = 0;
 801217c:	2300      	movs	r3, #0
 801217e:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8012180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012182:	677b      	str	r3, [r7, #116]	; 0x74
 8012184:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012188:	429a      	cmp	r2, r3
 801218a:	da2b      	bge.n	80121e4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801218c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801218e:	673b      	str	r3, [r7, #112]	; 0x70
 8012190:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012194:	429a      	cmp	r2, r3
 8012196:	da21      	bge.n	80121dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8012198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801219a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801219c:	4413      	add	r3, r2
 801219e:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80121a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121a4:	4413      	add	r3, r2
 80121a6:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80121a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121aa:	9300      	str	r3, [sp, #0]
 80121ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80121b4:	68b8      	ldr	r0, [r7, #8]
 80121b6:	f7f9 fb83 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80121ba:	4603      	mov	r3, r0
 80121bc:	461a      	mov	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	441a      	add	r2, r3
 80121c2:	f107 0313 	add.w	r3, r7, #19
 80121c6:	4611      	mov	r1, r2
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 fd67 	bl	8012c9c <_ZSt3maxIhERKT_S2_S2_>
 80121ce:	4603      	mov	r3, r0
              max = std::max(
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80121d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121d6:	3301      	adds	r3, #1
 80121d8:	673b      	str	r3, [r7, #112]	; 0x70
 80121da:	e7d9      	b.n	8012190 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80121dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121de:	3301      	adds	r3, #1
 80121e0:	677b      	str	r3, [r7, #116]	; 0x74
 80121e2:	e7cf      	b.n	8012184 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	69db      	ldr	r3, [r3, #28]
 80121e8:	b2db      	uxtb	r3, r3
 80121ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80121ee:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80121f2:	f107 0313 	add.w	r3, r7, #19
 80121f6:	4611      	mov	r1, r2
 80121f8:	4618      	mov	r0, r3
 80121fa:	f000 fd4f 	bl	8012c9c <_ZSt3maxIhERKT_S2_S2_>
 80121fe:	4603      	mov	r3, r0
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	6a1b      	ldr	r3, [r3, #32]
 8012208:	b2db      	uxtb	r3, r3
 801220a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801220e:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8012212:	f107 0313 	add.w	r3, r7, #19
 8012216:	4611      	mov	r1, r2
 8012218:	4618      	mov	r0, r3
 801221a:	f000 fd53 	bl	8012cc4 <_ZSt3minIhERKT_S2_S2_>
 801221e:	4603      	mov	r3, r0
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8012224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012226:	9300      	str	r3, [sp, #0]
 8012228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801222a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801222e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012232:	6838      	ldr	r0, [r7, #0]
 8012234:	f7f9 fb44 	bl	800b8c0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8012238:	4603      	mov	r3, r0
 801223a:	461a      	mov	r2, r3
 801223c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012240:	4413      	add	r3, r2
 8012242:	7cfa      	ldrb	r2, [r7, #19]
 8012244:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8012246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012248:	3301      	adds	r3, #1
 801224a:	67bb      	str	r3, [r7, #120]	; 0x78
 801224c:	e740      	b.n	80120d0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801224e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012250:	3301      	adds	r3, #1
 8012252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012254:	e735      	b.n	80120c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8012256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801225a:	3301      	adds	r3, #1
 801225c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012260:	e727      	b.n	80120b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 8012262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012266:	3301      	adds	r3, #1
 8012268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801226c:	e718      	b.n	80120a0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8_t>(max);
        }
      }
    }
  }
}
 801226e:	bf00      	nop
 8012270:	3788      	adds	r7, #136	; 0x88
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input, TfLiteTensor* output,
                             OpData* data) {
 8012276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012278:	b099      	sub	sp, #100	; 0x64
 801227a:	af08      	add	r7, sp, #32
 801227c:	6278      	str	r0, [r7, #36]	; 0x24
 801227e:	6239      	str	r1, [r7, #32]
 8012280:	61fa      	str	r2, [r7, #28]
 8012282:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8012284:	2101      	movs	r1, #1
 8012286:	69f8      	ldr	r0, [r7, #28]
 8012288:	f7f2 feb2 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801228c:	63f8      	str	r0, [r7, #60]	; 0x3c
  int width = SizeOfDimension(input, 2);
 801228e:	2102      	movs	r1, #2
 8012290:	69f8      	ldr	r0, [r7, #28]
 8012292:	f7f2 fead 	bl	8004ff0 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8012296:	63b8      	str	r0, [r7, #56]	; 0x38

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8012298:	6a3b      	ldr	r3, [r7, #32]
 801229a:	689d      	ldr	r5, [r3, #8]
 801229c:	6a3b      	ldr	r3, [r7, #32]
 801229e:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80122a4:	6a3a      	ldr	r2, [r7, #32]
 80122a6:	68d2      	ldr	r2, [r2, #12]
 80122a8:	6a39      	ldr	r1, [r7, #32]
 80122aa:	7809      	ldrb	r1, [r1, #0]
 80122ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	f107 0408 	add.w	r4, r7, #8
 80122b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80122b8:	9007      	str	r0, [sp, #28]
 80122ba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80122be:	9006      	str	r0, [sp, #24]
 80122c0:	9105      	str	r1, [sp, #20]
 80122c2:	9204      	str	r2, [sp, #16]
 80122c4:	9303      	str	r3, [sp, #12]
 80122c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c8:	9302      	str	r3, [sp, #8]
 80122ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122cc:	9301      	str	r3, [sp, #4]
 80122ce:	2301      	movs	r3, #1
 80122d0:	9300      	str	r3, [sp, #0]
 80122d2:	2301      	movs	r3, #1
 80122d4:	4632      	mov	r2, r6
 80122d6:	4629      	mov	r1, r5
 80122d8:	4620      	mov	r0, r4
 80122da:	f7f9 fd45 	bl	800bd68 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80122de:	687c      	ldr	r4, [r7, #4]
 80122e0:	f107 0308 	add.w	r3, r7, #8
 80122e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80122e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  if (input->type == kTfLiteFloat32) {
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	2b01      	cmp	r3, #1
 80122f0:	d10a      	bne.n	8012308 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0x92>
    CalculateActivationRange(params->activation, &data->activation_min_f32,
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	7d18      	ldrb	r0, [r3, #20]
 80122f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122f8:	f103 011c 	add.w	r1, r3, #28
 80122fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80122fe:	3320      	adds	r3, #32
 8012300:	461a      	mov	r2, r3
 8012302:	f7f9 ff0b 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
 8012306:	e01e      	b.n	8012346 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
                             &data->activation_max_f32);
  } else {
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	7d19      	ldrb	r1, [r3, #20]
 801230c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801230e:	f103 0214 	add.w	r2, r3, #20
 8012312:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012314:	3318      	adds	r3, #24
 8012316:	9300      	str	r3, [sp, #0]
 8012318:	4613      	mov	r3, r2
 801231a:	69ba      	ldr	r2, [r7, #24]
 801231c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801231e:	f7f3 fa93 	bl	8005848 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8012322:	4603      	mov	r3, r0
 8012324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xc0>
 8012330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012334:	e00c      	b.n	8012350 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xda>
        context, params->activation, output, &data->activation_min,
        &data->activation_max));
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 8012336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012338:	695a      	ldr	r2, [r3, #20]
 801233a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801233c:	699b      	ldr	r3, [r3, #24]
 801233e:	429a      	cmp	r2, r3
 8012340:	dd01      	ble.n	8012346 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE+0xd0>
 8012342:	f00f fbc5 	bl	8021ad0 <abort>
  }

  // Set buffer index to a reset value
  data->buffer_idx = -1;
 8012346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012348:	f04f 32ff 	mov.w	r2, #4294967295
 801234c:	611a      	str	r2, [r3, #16]

  return kTfLiteOk;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3744      	adds	r7, #68	; 0x44
 8012354:	46bd      	mov	sp, r7
 8012356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012358 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>:

void AverageEvalFloat(const TfLiteContext* context, const TfLiteNode* node,
                      const TfLitePoolParams* params, const OpData& data,
                      const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 8012358:	b590      	push	{r4, r7, lr}
 801235a:	b0a1      	sub	sp, #132	; 0x84
 801235c:	af02      	add	r7, sp, #8
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	607a      	str	r2, [r7, #4]
 8012364:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	7d1b      	ldrb	r3, [r3, #20]
 801236a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801236e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8012372:	4618      	mov	r0, r3
 8012374:	f7f9 fed2 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	689b      	ldr	r3, [r3, #8]
 801237c:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	691b      	ldr	r3, [r3, #16]
 8012388:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	68db      	ldr	r3, [r3, #12]
 801238e:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	b21b      	sxth	r3, r3
 8012396:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	b21b      	sxth	r3, r3
 801239e:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 80123a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123a2:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 80123a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80123a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80123a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123ac:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fa fad5 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 80123b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80123ba:	f7f8 ff6b 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 80123be:	4604      	mov	r4, r0
                             tflite::micro::GetTensorData<float>(input),
                             tflite::micro::GetTensorShape(output),
 80123c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80123c4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fa fac9 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80123ce:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80123d2:	f7f8 ff6e 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80123d6:	4602      	mov	r2, r0
 80123d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80123dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80123e0:	f107 0014 	add.w	r0, r7, #20
 80123e4:	9200      	str	r2, [sp, #0]
 80123e6:	4622      	mov	r2, r4
 80123e8:	f7ff fa66 	bl	80118b8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                             tflite::micro::GetTensorShape(output),
 80123ec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7f3 fc05 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80123f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80123fa:	4618      	mov	r0, r3
 80123fc:	f7f3 fc00 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<float>(output));
}
 8012400:	bf00      	nop
 8012402:	377c      	adds	r7, #124	; 0x7c
 8012404:	46bd      	mov	sp, r7
 8012406:	bd90      	pop	{r4, r7, pc}

08012408 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

void AverageEvalQuantized(TfLiteContext* context, const TfLiteNode* node,
                          const TfLitePoolParams* params, const OpData& data,
                          const TfLiteEvalTensor* input,
                          TfLiteEvalTensor* output) {
 8012408:	b590      	push	{r4, r7, lr}
 801240a:	b0c1      	sub	sp, #260	; 0x104
 801240c:	af04      	add	r7, sp, #16
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	60b9      	str	r1, [r7, #8]
 8012412:	607a      	str	r2, [r7, #4]
 8012414:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 8012416:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801241a:	7a1b      	ldrb	r3, [r3, #8]
 801241c:	2b03      	cmp	r3, #3
 801241e:	d006      	beq.n	801242e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 8012420:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012424:	7a1b      	ldrb	r3, [r3, #8]
 8012426:	2b09      	cmp	r3, #9
 8012428:	d001      	beq.n	801242e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x26>
 801242a:	f00f fb51 	bl	8021ad0 <abort>

  if (input->type == kTfLiteUInt8) {
 801242e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012432:	7a1b      	ldrb	r3, [r3, #8]
 8012434:	2b03      	cmp	r3, #3
 8012436:	d146      	bne.n	80124c6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xbe>
    PoolParams op_params;
    op_params.stride_height = params->stride_height;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	689b      	ldr	r3, [r3, #8]
 801243c:	61fb      	str	r3, [r7, #28]
    op_params.stride_width = params->stride_width;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	623b      	str	r3, [r7, #32]
    op_params.filter_height = params->filter_height;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	691b      	ldr	r3, [r3, #16]
 8012448:	627b      	str	r3, [r7, #36]	; 0x24
    op_params.filter_width = params->filter_width;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	62bb      	str	r3, [r7, #40]	; 0x28
    op_params.padding_values.height = data.padding.height;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	b21b      	sxth	r3, r3
 8012456:	82bb      	strh	r3, [r7, #20]
    op_params.padding_values.width = data.padding.width;
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	b21b      	sxth	r3, r3
 801245e:	827b      	strh	r3, [r7, #18]
    op_params.quantized_activation_min = data.activation_min;
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	695b      	ldr	r3, [r3, #20]
 8012464:	62fb      	str	r3, [r7, #44]	; 0x2c
    op_params.quantized_activation_max = data.activation_max;
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	699b      	ldr	r3, [r3, #24]
 801246a:	633b      	str	r3, [r7, #48]	; 0x30

    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 801246c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012470:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8012474:	4618      	mov	r0, r3
 8012476:	f7fa fa73 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801247a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 801247e:	f7f8 ff95 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8012482:	4604      	mov	r4, r0
                               tflite::micro::GetTensorData<uint8_t>(input),
                               tflite::micro::GetTensorShape(output),
 8012484:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012488:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801248c:	4618      	mov	r0, r3
 801248e:	f7fa fa67 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 8012492:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8012496:	f7f8 ff98 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 801249a:	4602      	mov	r2, r0
 801249c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80124a0:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 80124a4:	f107 0010 	add.w	r0, r7, #16
 80124a8:	9200      	str	r2, [sp, #0]
 80124aa:	4622      	mov	r2, r4
 80124ac:	f7ff fb44 	bl	8011b38 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                               tflite::micro::GetTensorShape(output),
 80124b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7f3 fba3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 80124ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80124be:	4618      	mov	r0, r3
 80124c0:	f7f3 fb9e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                       tflite::micro::GetTensorData<int8_t>(input),
                       &filter_dims, &output_dims,
                       tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  }
}
 80124c4:	e0ae      	b.n	8012624 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x21c>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80124c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80124ca:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80124ce:	4618      	mov	r0, r3
 80124d0:	f7fa fa46 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80124d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80124d8:	4618      	mov	r0, r3
 80124da:	f7f3 fba7 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b04      	cmp	r3, #4
 80124e2:	d001      	beq.n	80124e8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xe0>
 80124e4:	f00f faf4 	bl	8021ad0 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80124e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80124ec:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fa fa35 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80124f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f3 fb96 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012500:	4603      	mov	r3, r0
 8012502:	2b04      	cmp	r3, #4
 8012504:	d001      	beq.n	801250a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x102>
 8012506:	f00f fae3 	bl	8021ad0 <abort>
    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801250a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801250e:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8012512:	2303      	movs	r3, #3
 8012514:	2103      	movs	r1, #3
 8012516:	f7f9 fb81 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801251a:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    input_dims.n = 1;
 801251e:	2301      	movs	r3, #1
 8012520:	67fb      	str	r3, [r7, #124]	; 0x7c
    input_dims.h = input_shape.Dims(1);
 8012522:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012526:	2101      	movs	r1, #1
 8012528:	4618      	mov	r0, r3
 801252a:	f7f8 f8eb 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801252e:	4603      	mov	r3, r0
 8012530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    input_dims.w = input_shape.Dims(2);
 8012534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012538:	2102      	movs	r1, #2
 801253a:	4618      	mov	r0, r3
 801253c:	f7f8 f8e2 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012540:	4603      	mov	r3, r0
 8012542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    input_dims.c = depth;
 8012546:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801254a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    output_dims.n = 1;
 801254e:	2301      	movs	r3, #1
 8012550:	66fb      	str	r3, [r7, #108]	; 0x6c
    output_dims.h = output_shape.Dims(1);
 8012552:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012556:	2101      	movs	r1, #1
 8012558:	4618      	mov	r0, r3
 801255a:	f7f8 f8d3 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801255e:	4603      	mov	r3, r0
 8012560:	673b      	str	r3, [r7, #112]	; 0x70
    output_dims.w = output_shape.Dims(2);
 8012562:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012566:	2102      	movs	r1, #2
 8012568:	4618      	mov	r0, r3
 801256a:	f7f8 f8cb 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801256e:	4603      	mov	r3, r0
 8012570:	677b      	str	r3, [r7, #116]	; 0x74
    output_dims.c = depth;
 8012572:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012576:	67bb      	str	r3, [r7, #120]	; 0x78
    pool_params.stride.h = params->stride_height;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	65bb      	str	r3, [r7, #88]	; 0x58
    pool_params.stride.w = params->stride_width;
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	657b      	str	r3, [r7, #84]	; 0x54
    pool_params.padding.h = data.padding.height;
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	685b      	ldr	r3, [r3, #4]
 8012588:	663b      	str	r3, [r7, #96]	; 0x60
    pool_params.padding.w = data.padding.width;
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	65fb      	str	r3, [r7, #92]	; 0x5c
    pool_params.activation.min = data.activation_min;
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	695b      	ldr	r3, [r3, #20]
 8012594:	667b      	str	r3, [r7, #100]	; 0x64
    pool_params.activation.max = data.activation_max;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	66bb      	str	r3, [r7, #104]	; 0x68
    filter_dims.n = 1;
 801259c:	2301      	movs	r3, #1
 801259e:	647b      	str	r3, [r7, #68]	; 0x44
    filter_dims.h = params->filter_height;
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	691b      	ldr	r3, [r3, #16]
 80125a4:	64bb      	str	r3, [r7, #72]	; 0x48
    filter_dims.w = params->filter_width;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    filter_dims.c = 1;
 80125ac:	2301      	movs	r3, #1
 80125ae:	653b      	str	r3, [r7, #80]	; 0x50
    ctx.buf = nullptr;
 80125b0:	2300      	movs	r3, #0
 80125b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    ctx.size = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	643b      	str	r3, [r7, #64]	; 0x40
    if (data.buffer_idx > -1) {
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	691b      	ldr	r3, [r3, #16]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	db08      	blt.n	80125d2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x1ca>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125c4:	683a      	ldr	r2, [r7, #0]
 80125c6:	6912      	ldr	r2, [r2, #16]
 80125c8:	4611      	mov	r1, r2
 80125ca:	68f8      	ldr	r0, [r7, #12]
 80125cc:	4798      	blx	r3
 80125ce:	4603      	mov	r3, r0
 80125d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    TFLITE_DCHECK_EQ(
 80125d2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80125d6:	f7f8 fe7d 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 80125da:	4604      	mov	r4, r0
 80125dc:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80125e0:	f7f8 fe87 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 80125e4:	4603      	mov	r3, r0
 80125e6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80125ea:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80125ee:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80125f2:	9302      	str	r3, [sp, #8]
 80125f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80125f8:	9301      	str	r3, [sp, #4]
 80125fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80125fe:	9300      	str	r3, [sp, #0]
 8012600:	4623      	mov	r3, r4
 8012602:	f00b f9a8 	bl	801d956 <arm_avgpool_s8>
 8012606:	4603      	mov	r3, r0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d001      	beq.n	8012610 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x208>
 801260c:	f00f fa60 	bl	8021ad0 <abort>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8012610:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012614:	4618      	mov	r0, r3
 8012616:	f7f3 faf3 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 801261a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801261e:	4618      	mov	r0, r3
 8012620:	f7f3 faee 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8012624:	bf00      	nop
 8012626:	37f4      	adds	r7, #244	; 0xf4
 8012628:	46bd      	mov	sp, r7
 801262a:	bd90      	pop	{r4, r7, pc}

0801262c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, const OpData& data,
                  const TfLiteEvalTensor* input, TfLiteEvalTensor* output) {
 801262c:	b590      	push	{r4, r7, lr}
 801262e:	b0a1      	sub	sp, #132	; 0x84
 8012630:	af02      	add	r7, sp, #8
 8012632:	60f8      	str	r0, [r7, #12]
 8012634:	60b9      	str	r1, [r7, #8]
 8012636:	607a      	str	r2, [r7, #4]
 8012638:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	7d1b      	ldrb	r3, [r3, #20]
 801263e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8012642:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8012646:	4618      	mov	r0, r3
 8012648:	f7f9 fd68 	bl	800c11c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	689b      	ldr	r3, [r3, #8]
 8012650:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	691b      	ldr	r3, [r3, #16]
 801265c:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	68db      	ldr	r3, [r3, #12]
 8012662:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	b21b      	sxth	r3, r3
 801266a:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	b21b      	sxth	r3, r3
 8012672:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = data.activation_min_f32;
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	69db      	ldr	r3, [r3, #28]
 8012678:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = data.activation_max_f32;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	6a1b      	ldr	r3, [r3, #32]
 801267e:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012684:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8012688:	4618      	mov	r0, r3
 801268a:	f7fa f969 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 801268e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8012692:	f7f8 fdff 	bl	800b294 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8012696:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<float>(input),
                         tflite::micro::GetTensorShape(output),
 8012698:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801269c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fa f95d 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80126a6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80126aa:	f7f8 fe02 	bl	800b2b2 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 80126ae:	4602      	mov	r2, r0
 80126b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80126b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80126b8:	f107 0014 	add.w	r0, r7, #20
 80126bc:	9200      	str	r2, [sp, #0]
 80126be:	4622      	mov	r2, r4
 80126c0:	f7ff fb74 	bl	8011dac <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         tflite::micro::GetTensorShape(output),
 80126c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f3 fa99 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 80126ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f3 fa94 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<float>(output));
}
 80126d8:	bf00      	nop
 80126da:	377c      	adds	r7, #124	; 0x7c
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd90      	pop	{r4, r7, pc}

080126e0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>:

void MaxEvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node,
                           TfLitePoolParams* params, const OpData& data,
                           const TfLiteEvalTensor* input,
                           TfLiteEvalTensor* output) {
 80126e0:	b590      	push	{r4, r7, lr}
 80126e2:	b09f      	sub	sp, #124	; 0x7c
 80126e4:	af02      	add	r7, sp, #8
 80126e6:	60f8      	str	r0, [r7, #12]
 80126e8:	60b9      	str	r1, [r7, #8]
 80126ea:	607a      	str	r2, [r7, #4]
 80126ec:	603b      	str	r3, [r7, #0]
  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	689b      	ldr	r3, [r3, #8]
 80126f2:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data.padding.height;
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	b21b      	sxth	r3, r3
 801270c:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data.padding.width;
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	b21b      	sxth	r3, r3
 8012714:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = data.activation_min;
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	695b      	ldr	r3, [r3, #20]
 801271a:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = data.activation_max;
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	699b      	ldr	r3, [r3, #24]
 8012720:	637b      	str	r3, [r7, #52]	; 0x34
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012726:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 801272a:	4618      	mov	r0, r3
 801272c:	f7fa f918 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8012730:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012734:	f7f8 fe3a 	bl	800b3ac <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8012738:	4604      	mov	r4, r0
                         tflite::micro::GetTensorData<uint8_t>(input),
                         tflite::micro::GetTensorShape(output),
 801273a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801273e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8012742:	4618      	mov	r0, r3
 8012744:	f7fa f90c 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012748:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801274c:	f7f8 fe3d 	bl	800b3ca <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8012750:	4602      	mov	r2, r0
 8012752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012756:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801275a:	f107 0014 	add.w	r0, r7, #20
 801275e:	9200      	str	r2, [sp, #0]
 8012760:	4622      	mov	r2, r4
 8012762:	f7ff fc47 	bl	8011ff4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
                         tflite::micro::GetTensorShape(output),
 8012766:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801276a:	4618      	mov	r0, r3
 801276c:	f7f3 fa48 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 8012770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012774:	4618      	mov	r0, r3
 8012776:	f7f3 fa43 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
                         tflite::micro::GetTensorData<uint8_t>(output));
}
 801277a:	bf00      	nop
 801277c:	3774      	adds	r7, #116	; 0x74
 801277e:	46bd      	mov	sp, r7
 8012780:	bd90      	pop	{r4, r7, pc}

08012782 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>:

TfLiteStatus MaxEvalInt8(TfLiteContext* context, const TfLiteNode* node,
                         const TfLitePoolParams* params, const OpData& data,
                         const TfLiteEvalTensor* input,
                         TfLiteEvalTensor* output) {
 8012782:	b590      	push	{r4, r7, lr}
 8012784:	b0ab      	sub	sp, #172	; 0xac
 8012786:	af04      	add	r7, sp, #16
 8012788:	60f8      	str	r0, [r7, #12]
 801278a:	60b9      	str	r1, [r7, #8]
 801278c:	607a      	str	r2, [r7, #4]
 801278e:	603b      	str	r3, [r7, #0]
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8012790:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012794:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8012798:	4618      	mov	r0, r3
 801279a:	f7fa f8e1 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 801279e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80127a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80127a6:	4618      	mov	r0, r3
 80127a8:	f7fa f8da 	bl	800c960 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80127ac:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80127b0:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 80127b4:	2303      	movs	r3, #3
 80127b6:	2103      	movs	r1, #3
 80127b8:	f7f9 fa30 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80127bc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

  cmsis_nn_dims input_dims;
  input_dims.n = 1;
 80127c0:	2301      	movs	r3, #1
 80127c2:	657b      	str	r3, [r7, #84]	; 0x54
  input_dims.h = input_shape.Dims(1);
 80127c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80127c8:	2101      	movs	r1, #1
 80127ca:	4618      	mov	r0, r3
 80127cc:	f7f7 ff9a 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80127d0:	4603      	mov	r3, r0
 80127d2:	65bb      	str	r3, [r7, #88]	; 0x58
  input_dims.w = input_shape.Dims(2);
 80127d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80127d8:	2102      	movs	r1, #2
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f7 ff92 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80127e0:	4603      	mov	r3, r0
 80127e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  input_dims.c = depth;
 80127e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80127e8:	663b      	str	r3, [r7, #96]	; 0x60

  cmsis_nn_dims output_dims;
  output_dims.n = 1;
 80127ea:	2301      	movs	r3, #1
 80127ec:	647b      	str	r3, [r7, #68]	; 0x44
  output_dims.h = output_shape.Dims(1);
 80127ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80127f2:	2101      	movs	r1, #1
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7f7 ff85 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 80127fa:	4603      	mov	r3, r0
 80127fc:	64bb      	str	r3, [r7, #72]	; 0x48
  output_dims.w = output_shape.Dims(2);
 80127fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012802:	2102      	movs	r1, #2
 8012804:	4618      	mov	r0, r3
 8012806:	f7f7 ff7d 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 801280a:	4603      	mov	r3, r0
 801280c:	64fb      	str	r3, [r7, #76]	; 0x4c
  output_dims.c = depth;
 801280e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012812:	653b      	str	r3, [r7, #80]	; 0x50

  cmsis_nn_pool_params pool_params;
  pool_params.stride.h = params->stride_height;
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	633b      	str	r3, [r7, #48]	; 0x30
  pool_params.stride.w = params->stride_width;
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	685b      	ldr	r3, [r3, #4]
 801281e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pool_params.padding.h = data.padding.height;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	63bb      	str	r3, [r7, #56]	; 0x38
  pool_params.padding.w = data.padding.width;
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	637b      	str	r3, [r7, #52]	; 0x34
  pool_params.activation.min = data.activation_min;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	63fb      	str	r3, [r7, #60]	; 0x3c
  pool_params.activation.max = data.activation_max;
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	699b      	ldr	r3, [r3, #24]
 8012836:	643b      	str	r3, [r7, #64]	; 0x40

  cmsis_nn_dims filter_dims;
  filter_dims.n = 1;
 8012838:	2301      	movs	r3, #1
 801283a:	61fb      	str	r3, [r7, #28]
  filter_dims.h = params->filter_height;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	691b      	ldr	r3, [r3, #16]
 8012840:	623b      	str	r3, [r7, #32]
  filter_dims.w = params->filter_width;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	68db      	ldr	r3, [r3, #12]
 8012846:	627b      	str	r3, [r7, #36]	; 0x24
  filter_dims.c = 1;
 8012848:	2301      	movs	r3, #1
 801284a:	62bb      	str	r3, [r7, #40]	; 0x28

  cmsis_nn_context ctx;
  ctx.buf = nullptr;
 801284c:	2300      	movs	r3, #0
 801284e:	617b      	str	r3, [r7, #20]
  ctx.size = 0;
 8012850:	2300      	movs	r3, #0
 8012852:	61bb      	str	r3, [r7, #24]
  if (data.buffer_idx > -1) {
 8012854:	683b      	ldr	r3, [r7, #0]
 8012856:	691b      	ldr	r3, [r3, #16]
 8012858:	2b00      	cmp	r3, #0
 801285a:	db08      	blt.n	801286e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0xec>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012860:	683a      	ldr	r2, [r7, #0]
 8012862:	6912      	ldr	r2, [r2, #16]
 8012864:	4611      	mov	r1, r2
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	4798      	blx	r3
 801286a:	4603      	mov	r3, r0
 801286c:	617b      	str	r3, [r7, #20]
  }

  TFLITE_DCHECK_EQ(
 801286e:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8012872:	f7f8 fd2f 	bl	800b2d4 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8012876:	4604      	mov	r4, r0
 8012878:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801287c:	f7f8 fd39 	bl	800b2f2 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8012880:	4603      	mov	r3, r0
 8012882:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012886:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801288a:	f107 0014 	add.w	r0, r7, #20
 801288e:	9302      	str	r3, [sp, #8]
 8012890:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012894:	9301      	str	r3, [sp, #4]
 8012896:	f107 031c 	add.w	r3, r7, #28
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	4623      	mov	r3, r4
 801289e:	f00b fa91 	bl	801ddc4 <arm_max_pool_s8>
 80128a2:	4603      	mov	r3, r0
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d001      	beq.n	80128ac <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_+0x12a>
 80128a8:	f00f f912 	bl	8021ad0 <abort>
                      tflite::micro::GetTensorData<int8_t>(input), &filter_dims,
                      &output_dims,
                      tflite::micro::GetTensorData<int8_t>(output)),
      ARM_MATH_SUCCESS);

  return kTfLiteOk;
 80128ac:	2400      	movs	r4, #0
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 80128ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7f3 f9a4 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 80128b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f3 f99f 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80128c2:	4623      	mov	r3, r4
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	379c      	adds	r7, #156	; 0x9c
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd90      	pop	{r4, r7, pc}

080128cc <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d101      	bne.n	80128e4 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x18>
 80128e0:	f00f f8f6 	bl	8021ad0 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128e8:	2124      	movs	r1, #36	; 0x24
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	4798      	blx	r3
 80128ee:	4603      	mov	r3, r0
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3710      	adds	r7, #16
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 80128f8:	b590      	push	{r4, r7, lr}
 80128fa:	b08b      	sub	sp, #44	; 0x2c
 80128fc:	af02      	add	r7, sp, #8
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	691b      	ldr	r3, [r3, #16]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d101      	bne.n	801290e <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801290a:	f00f f8e1 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	695b      	ldr	r3, [r3, #20]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d101      	bne.n	801291a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8012916:	f00f f8db 	bl	8021ad0 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	691b      	ldr	r3, [r3, #16]
 801291e:	61fb      	str	r3, [r7, #28]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	695b      	ldr	r3, [r3, #20]
 8012924:	61bb      	str	r3, [r7, #24]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012926:	2200      	movs	r2, #0
 8012928:	6839      	ldr	r1, [r7, #0]
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7f2 fc27 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012930:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d10b      	bne.n	8012950 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x58>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	695c      	ldr	r4, [r3, #20]
 801293c:	4b19      	ldr	r3, [pc, #100]	; (80129a4 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 801293e:	9300      	str	r3, [sp, #0]
 8012940:	f44f 73a2 	mov.w	r3, #324	; 0x144
 8012944:	4a18      	ldr	r2, [pc, #96]	; (80129a8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8012946:	4919      	ldr	r1, [pc, #100]	; (80129ac <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	47a0      	blx	r4
 801294c:	2301      	movs	r3, #1
 801294e:	e024      	b.n	801299a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012950:	2200      	movs	r2, #0
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f2 fc22 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801295a:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, output != nullptr);
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d10b      	bne.n	801297a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x82>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	695c      	ldr	r4, [r3, #20]
 8012966:	4b12      	ldr	r3, [pc, #72]	; (80129b0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	f44f 73a3 	mov.w	r3, #326	; 0x146
 801296e:	4a0e      	ldr	r2, [pc, #56]	; (80129a8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb0>)
 8012970:	490e      	ldr	r1, [pc, #56]	; (80129ac <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	47a0      	blx	r4
 8012976:	2301      	movs	r3, #1
 8012978:	e00f      	b.n	801299a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 801297a:	69fb      	ldr	r3, [r7, #28]
 801297c:	9300      	str	r3, [sp, #0]
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	697a      	ldr	r2, [r7, #20]
 8012982:	69b9      	ldr	r1, [r7, #24]
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f7ff fc76 	bl	8012276 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 801298a:	4603      	mov	r3, r0
 801298c:	73fb      	strb	r3, [r7, #15]
 801298e:	7bfb      	ldrb	r3, [r7, #15]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d001      	beq.n	8012998 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa0>
 8012994:	7bfb      	ldrb	r3, [r7, #15]
 8012996:	e000      	b.n	801299a <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>

  return kTfLiteOk;
 8012998:	2300      	movs	r3, #0
}
 801299a:	4618      	mov	r0, r3
 801299c:	3724      	adds	r7, #36	; 0x24
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd90      	pop	{r4, r7, pc}
 80129a2:	bf00      	nop
 80129a4:	080282fc 	.word	0x080282fc
 80129a8:	080282a4 	.word	0x080282a4
 80129ac:	080282e4 	.word	0x080282e4
 80129b0:	08028310 	.word	0x08028310

080129b4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 80129b4:	b5b0      	push	{r4, r5, r7, lr}
 80129b6:	b09a      	sub	sp, #104	; 0x68
 80129b8:	af02      	add	r7, sp, #8
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
 80129be:	2400      	movs	r4, #0
  TFLITE_DCHECK(node->user_data != nullptr);
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	691b      	ldr	r3, [r3, #16]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d101      	bne.n	80129cc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x18>
 80129c8:	f00f f882 	bl	8021ad0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	695b      	ldr	r3, [r3, #20]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d101      	bne.n	80129d8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x24>
 80129d4:	f00f f87c 	bl	8021ad0 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	691b      	ldr	r3, [r3, #16]
 80129dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	695b      	ldr	r3, [r3, #20]
 80129e2:	65bb      	str	r3, [r7, #88]	; 0x58

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80129e4:	2200      	movs	r2, #0
 80129e6:	6839      	ldr	r1, [r7, #0]
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7f2 fbc8 	bl	800517e <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80129ee:	6578      	str	r0, [r7, #84]	; 0x54
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80129f0:	2200      	movs	r2, #0
 80129f2:	6839      	ldr	r1, [r7, #0]
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f7f2 fbd2 	bl	800519e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80129fa:	6538      	str	r0, [r7, #80]	; 0x50

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));
 80129fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129fe:	9300      	str	r3, [sp, #0]
 8012a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012a06:	6878      	ldr	r0, [r7, #4]
 8012a08:	f7ff fc35 	bl	8012276 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEP13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorPS9_PNS3_6OpDataE>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8012a12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d002      	beq.n	8012a20 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
 8012a1a:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8012a1e:	e064      	b.n	8012aea <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>

  if (input->type == kTfLiteInt8) {
 8012a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b09      	cmp	r3, #9
 8012a26:	d15f      	bne.n	8012ae8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x134>
    RuntimeShape input_shape = GetTensorShape(input);
 8012a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7f3 f960 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8012a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f3 f8f7 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b04      	cmp	r3, #4
 8012a42:	d001      	beq.n	8012a48 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x94>
 8012a44:	f00f f844 	bl	8021ad0 <abort>

    RuntimeShape output_shape = GetTensorShape(output);
 8012a48:	f107 030c 	add.w	r3, r7, #12
 8012a4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7f3 f950 	bl	8005cf4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8012a54:	f107 030c 	add.w	r3, r7, #12
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f3 f8e7 	bl	8005c2c <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	2b04      	cmp	r3, #4
 8012a62:	d001      	beq.n	8012a68 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>
 8012a64:	f00f f834 	bl	8021ad0 <abort>

    const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8012a68:	f107 020c 	add.w	r2, r7, #12
 8012a6c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012a70:	2303      	movs	r3, #3
 8012a72:	2103      	movs	r1, #3
 8012a74:	f7f9 f8d2 	bl	800bc1c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012a78:	64b8      	str	r0, [r7, #72]	; 0x48
    const int output_width = output_shape.Dims(2);
 8012a7a:	f107 030c 	add.w	r3, r7, #12
 8012a7e:	2102      	movs	r1, #2
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7f7 fe3f 	bl	800a704 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012a86:	6478      	str	r0, [r7, #68]	; 0x44

    const int32_t buffer_size =
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 8012a88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8012a8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012a8c:	f00b f86d 	bl	801db6a <arm_avgpool_s8_get_buffer_size>
 8012a90:	6438      	str	r0, [r7, #64]	; 0x40

    if (buffer_size > 0) {
 8012a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	dd11      	ble.n	8012abc <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x108>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012a9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012aa0:	3210      	adds	r2, #16
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	4798      	blx	r3
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012aac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d007      	beq.n	8012ac4 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x110>
 8012ab4:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8012ab8:	2500      	movs	r5, #0
 8012aba:	e004      	b.n	8012ac6 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x112>
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 8012abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012abe:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac2:	611a      	str	r2, [r3, #16]
    RuntimeShape output_shape = GetTensorShape(output);
 8012ac4:	2501      	movs	r5, #1
 8012ac6:	f107 030c 	add.w	r3, r7, #12
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f3 f898 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 8012ad0:	2d01      	cmp	r5, #1
 8012ad2:	d001      	beq.n	8012ad8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x124>
 8012ad4:	2500      	movs	r5, #0
 8012ad6:	e000      	b.n	8012ada <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x126>
    RuntimeShape input_shape = GetTensorShape(input);
 8012ad8:	2501      	movs	r5, #1
 8012ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f3 f88e 	bl	8005c00 <_ZN6tflite12RuntimeShapeD1Ev>
 8012ae4:	2d01      	cmp	r5, #1
 8012ae6:	d100      	bne.n	8012aea <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x136>
    }
  }
  return kTfLiteOk;
 8012ae8:	2400      	movs	r4, #0
 8012aea:	4623      	mov	r3, r4
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	3760      	adds	r7, #96	; 0x60
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bdb0      	pop	{r4, r5, r7, pc}

08012af4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 8012af4:	b590      	push	{r4, r7, lr}
 8012af6:	b089      	sub	sp, #36	; 0x24
 8012af8:	af02      	add	r7, sp, #8
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d101      	bne.n	8012b0a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012b06:	f00e ffe3 	bl	8021ad0 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	695b      	ldr	r3, [r3, #20]
 8012b0e:	617b      	str	r3, [r7, #20]

  #ifdef OVERLAY_FW
  TFLITE_DCHECK(node->user_data != nullptr);
  OpData& data = *(static_cast<OpData*>(node->user_data));
  #else
  TFLITE_DCHECK(node->user_data != nullptr);
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d101      	bne.n	8012b1c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8012b18:	f00e ffda 	bl	8021ad0 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	613b      	str	r3, [r7, #16]
  #endif

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8012b22:	2200      	movs	r2, #0
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7f7 fec0 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012b2c:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8012b2e:	2200      	movs	r2, #0
 8012b30:	6839      	ldr	r1, [r7, #0]
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f7f7 feca 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012b38:	60b8      	str	r0, [r7, #8]
//	}
//	#endif

  #else
  // Inputs and outputs share the same type, guaranteed by the converter.
  switch (input->type) {
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	7a1b      	ldrb	r3, [r3, #8]
 8012b3e:	2b09      	cmp	r3, #9
 8012b40:	d011      	beq.n	8012b66 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8012b42:	2b09      	cmp	r3, #9
 8012b44:	dc1a      	bgt.n	8012b7c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d002      	beq.n	8012b50 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8012b4a:	2b03      	cmp	r3, #3
 8012b4c:	d00b      	beq.n	8012b66 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8012b4e:	e015      	b.n	8012b7c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32:
      AverageEvalFloat(context, node, params, data, input, output);
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	9301      	str	r3, [sp, #4]
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	9300      	str	r3, [sp, #0]
 8012b58:	693b      	ldr	r3, [r7, #16]
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	6839      	ldr	r1, [r7, #0]
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f7ff fbfa 	bl	8012358 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116AverageEvalFloatEPK13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSG_>
      break;
 8012b64:	e018      	b.n	8012b98 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      AverageEvalQuantized(context, node, params, data, input, output);
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	9301      	str	r3, [sp, #4]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	697a      	ldr	r2, [r7, #20]
 8012b72:	6839      	ldr	r1, [r7, #0]
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7ff fc47 	bl	8012408 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_120AverageEvalQuantizedEP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8012b7a:	e00d      	b.n	8012b98 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    default:
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	695c      	ldr	r4, [r3, #20]
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	7a1b      	ldrb	r3, [r3, #8]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ef fd51 	bl	800262c <TfLiteTypeGetName>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	4905      	ldr	r1, [pc, #20]	; (8012ba4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
 8012b90:	6878      	ldr	r0, [r7, #4]
 8012b92:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa6>
  }
  #endif
  return kTfLiteOk;
 8012b98:	2300      	movs	r3, #0
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	371c      	adds	r7, #28
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd90      	pop	{r4, r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08028324 	.word	0x08028324

08012ba8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 8012ba8:	b590      	push	{r4, r7, lr}
 8012baa:	b089      	sub	sp, #36	; 0x24
 8012bac:	af02      	add	r7, sp, #8
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d101      	bne.n	8012bbe <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8012bba:	f00e ff89 	bl	8021ad0 <abort>
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	695b      	ldr	r3, [r3, #20]
 8012bc2:	617b      	str	r3, [r7, #20]

  TFLITE_DCHECK(node->user_data != nullptr);
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	691b      	ldr	r3, [r3, #16]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d101      	bne.n	8012bd0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28>
 8012bcc:	f00e ff80 	bl	8021ad0 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	691b      	ldr	r3, [r3, #16]
 8012bd4:	613b      	str	r3, [r7, #16]

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	6839      	ldr	r1, [r7, #0]
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7f7 fe66 	bl	800a8ac <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8012be0:	60f8      	str	r0, [r7, #12]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8012be2:	2200      	movs	r2, #0
 8012be4:	6839      	ldr	r1, [r7, #0]
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7f7 fe70 	bl	800a8cc <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8012bec:	60b8      	str	r0, [r7, #8]

  switch (input->type) {
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	7a1b      	ldrb	r3, [r3, #8]
 8012bf2:	2b09      	cmp	r3, #9
 8012bf4:	d01c      	beq.n	8012c30 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 8012bf6:	2b09      	cmp	r3, #9
 8012bf8:	dc25      	bgt.n	8012c46 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d002      	beq.n	8012c04 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 8012bfe:	2b03      	cmp	r3, #3
 8012c00:	d00b      	beq.n	8012c1a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x72>
 8012c02:	e020      	b.n	8012c46 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, data, input, output);
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	9301      	str	r3, [sp, #4]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	9300      	str	r3, [sp, #0]
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	697a      	ldr	r2, [r7, #20]
 8012c10:	6839      	ldr	r1, [r7, #0]
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7ff fd0a 	bl	801262c <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8012c18:	e023      	b.n	8012c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteUInt8:
      MaxEvalQuantizedUInt8(context, node, params, data, input, output);
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	693b      	ldr	r3, [r7, #16]
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	6839      	ldr	r1, [r7, #0]
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff fd59 	bl	80126e0 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_121MaxEvalQuantizedUInt8EP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSD_>
      break;
 8012c2e:	e018      	b.n	8012c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	9301      	str	r3, [sp, #4]
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	697a      	ldr	r2, [r7, #20]
 8012c3c:	6839      	ldr	r1, [r7, #0]
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f7ff fd9f 	bl	8012782 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_111MaxEvalInt8EP13TfLiteContextPK10TfLiteNodePK16TfLitePoolParamsRKNS3_6OpDataEPK16TfLiteEvalTensorPSF_>
      break;
 8012c44:	e00d      	b.n	8012c62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xba>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	695c      	ldr	r4, [r3, #20]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	7a1b      	ldrb	r3, [r3, #8]
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7ef fcec 	bl	800262c <TfLiteTypeGetName>
 8012c54:	4603      	mov	r3, r0
 8012c56:	461a      	mov	r2, r3
 8012c58:	4904      	ldr	r1, [pc, #16]	; (8012c6c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xc4>)
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	e000      	b.n	8012c64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xbc>
  }
  return kTfLiteOk;
 8012c62:	2300      	movs	r3, #0
}
 8012c64:	4618      	mov	r0, r3
 8012c66:	371c      	adds	r7, #28
 8012c68:	46bd      	mov	sp, r7
 8012c6a:	bd90      	pop	{r4, r7, pc}
 8012c6c:	08028350 	.word	0x08028350

08012c70 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
 8012c70:	b4b0      	push	{r4, r5, r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
          /*prepare=*/pooling::AveragePrepare,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	4a07      	ldr	r2, [pc, #28]	; (8012c98 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x28>)
 8012c7c:	461c      	mov	r4, r3
 8012c7e:	4615      	mov	r5, r2
 8012c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012c84:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	bcb0      	pop	{r4, r5, r7}
 8012c94:	4770      	bx	lr
 8012c96:	bf00      	nop
 8012c98:	08028374 	.word	0x08028374

08012c9c <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	781a      	ldrb	r2, [r3, #0]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d201      	bcs.n	8012cb6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	e000      	b.n	8012cb8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8012cb6:	687b      	ldr	r3, [r7, #4]
    }
 8012cb8:	4618      	mov	r0, r3
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	781a      	ldrb	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	781b      	ldrb	r3, [r3, #0]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d201      	bcs.n	8012cde <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	e000      	b.n	8012ce0 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8012cde:	687b      	ldr	r3, [r7, #4]
    }
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <DebugLog>:
#include <stdio.h>
extern UART_HandleTypeDef huart3;
extern volatile uint8_t * debugPrintPtr;

// On mbed platforms, we set up a serial port and write to it for debug logging.
extern "C" void DebugLog(const char* s) {
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
//  char uart_buf[200];
  int uart_buf_len;

  uart_buf_len = sprintf((char *)debugPrintPtr, "%s", s);
 8012cf4:	4b08      	ldr	r3, [pc, #32]	; (8012d18 <DebugLog+0x2c>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	687a      	ldr	r2, [r7, #4]
 8012cfa:	4908      	ldr	r1, [pc, #32]	; (8012d1c <DebugLog+0x30>)
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f00f fb8d 	bl	802241c <siprintf>
 8012d02:	60f8      	str	r0, [r7, #12]
//  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
  debugPrintPtr += 32;
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <DebugLog+0x2c>)
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	3320      	adds	r3, #32
 8012d0a:	4a03      	ldr	r2, [pc, #12]	; (8012d18 <DebugLog+0x2c>)
 8012d0c:	6013      	str	r3, [r2, #0]

//  static Serial pc(USBTX, USBRX);
//  pc.printf("%s", s);
}
 8012d0e:	bf00      	nop
 8012d10:	3710      	adds	r7, #16
 8012d12:	46bd      	mov	sp, r7
 8012d14:	bd80      	pop	{r7, pc}
 8012d16:	bf00      	nop
 8012d18:	20000000 	.word	0x20000000
 8012d1c:	080283b4 	.word	0x080283b4

08012d20 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8012d20:	b480      	push	{r7}
 8012d22:	b083      	sub	sp, #12
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	4a04      	ldr	r2, [pc, #16]	; (8012d3c <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	601a      	str	r2, [r3, #0]
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4618      	mov	r0, r3
 8012d32:	370c      	adds	r7, #12
 8012d34:	46bd      	mov	sp, r7
 8012d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3a:	4770      	bx	lr
 8012d3c:	0802888c 	.word	0x0802888c

08012d40 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8012d40:	b480      	push	{r7}
 8012d42:	b083      	sub	sp, #12
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	4a04      	ldr	r2, [pc, #16]	; (8012d5c <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	601a      	str	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	0802888c 	.word	0x0802888c

08012d60 <_ZN6tflite13MemoryPlannerD0Ev>:
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7ff ffe9 	bl	8012d40 <_ZN6tflite13MemoryPlannerD1Ev>
 8012d6e:	2104      	movs	r1, #4
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f00e fdc5 	bl	8021900 <_ZdlPvj>
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3708      	adds	r7, #8
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8012d86:	2328      	movs	r3, #40	; 0x28
 8012d88:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8012d8a:	2328      	movs	r3, #40	; 0x28
  }
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr

08012d98 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8012d98:	b480      	push	{r7}
 8012d9a:	b089      	sub	sp, #36	; 0x24
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8012da4:	2300      	movs	r3, #0
 8012da6:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8012da8:	2301      	movs	r3, #1
 8012daa:	61bb      	str	r3, [r7, #24]
 8012dac:	69ba      	ldr	r2, [r7, #24]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	da4c      	bge.n	8012e4e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012dba:	3b01      	subs	r3, #1
 8012dbc:	009b      	lsls	r3, r3, #2
 8012dbe:	68fa      	ldr	r2, [r7, #12]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	68f9      	ldr	r1, [r7, #12]
 8012dca:	440b      	add	r3, r1
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	da39      	bge.n	8012e46 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012dd8:	3b01      	subs	r3, #1
 8012dda:	009b      	lsls	r3, r3, #2
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	4413      	add	r3, r2
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8012de4:	69bb      	ldr	r3, [r7, #24]
 8012de6:	009b      	lsls	r3, r3, #2
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	441a      	add	r2, r3
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012df2:	3b01      	subs	r3, #1
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	68f9      	ldr	r1, [r7, #12]
 8012df8:	440b      	add	r3, r1
 8012dfa:	6812      	ldr	r2, [r2, #0]
 8012dfc:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	68fa      	ldr	r2, [r7, #12]
 8012e04:	4413      	add	r3, r2
 8012e06:	697a      	ldr	r2, [r7, #20]
 8012e08:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012e10:	3b01      	subs	r3, #1
 8012e12:	009b      	lsls	r3, r3, #2
 8012e14:	68ba      	ldr	r2, [r7, #8]
 8012e16:	4413      	add	r3, r2
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	009b      	lsls	r3, r3, #2
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	441a      	add	r2, r3
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	68b9      	ldr	r1, [r7, #8]
 8012e30:	440b      	add	r3, r1
 8012e32:	6812      	ldr	r2, [r2, #0]
 8012e34:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	693a      	ldr	r2, [r7, #16]
 8012e40:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8012e42:	2301      	movs	r3, #1
 8012e44:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	3301      	adds	r3, #1
 8012e4a:	61bb      	str	r3, [r7, #24]
 8012e4c:	e7ae      	b.n	8012dac <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8012e4e:	7ffb      	ldrb	r3, [r7, #31]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d000      	beq.n	8012e56 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8012e54:	e7a6      	b.n	8012da4 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8012e56:	bf00      	nop
 8012e58:	3724      	adds	r7, #36	; 0x24
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e60:	4770      	bx	lr
	...

08012e64 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8012e64:	b590      	push	{r4, r7, lr}
 8012e66:	b087      	sub	sp, #28
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	60f8      	str	r0, [r7, #12]
 8012e6c:	60b9      	str	r1, [r7, #8]
 8012e6e:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff ff54 	bl	8012d20 <_ZN6tflite13MemoryPlannerC1Ev>
 8012e78:	4a22      	ldr	r2, [pc, #136]	; (8012f04 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	2200      	movs	r2, #0
 8012e82:	609a      	str	r2, [r3, #8]
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2201      	movs	r2, #1
 8012e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8012e8c:	687c      	ldr	r4, [r7, #4]
 8012e8e:	f7ff ff77 	bl	8012d80 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8012e92:	4603      	mov	r3, r0
 8012e94:	fbb4 f3f3 	udiv	r3, r4, r3
 8012e98:	461a      	mov	r2, r3
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	697a      	ldr	r2, [r7, #20]
 8012ea6:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	011b      	lsls	r3, r3, #4
 8012eae:	697a      	ldr	r2, [r7, #20]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	697a      	ldr	r2, [r7, #20]
 8012eb8:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	009b      	lsls	r3, r3, #2
 8012ec0:	697a      	ldr	r2, [r7, #20]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	697a      	ldr	r2, [r7, #20]
 8012eca:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	009b      	lsls	r3, r3, #2
 8012ed2:	697a      	ldr	r2, [r7, #20]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	697a      	ldr	r2, [r7, #20]
 8012edc:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	4613      	mov	r3, r2
 8012ee6:	005b      	lsls	r3, r3, #1
 8012ee8:	4413      	add	r3, r2
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	461a      	mov	r2, r3
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	697a      	ldr	r2, [r7, #20]
 8012ef8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	4618      	mov	r0, r3
 8012efe:	371c      	adds	r7, #28
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd90      	pop	{r4, r7, pc}
 8012f04:	0802886c 	.word	0x0802886c

08012f08 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b082      	sub	sp, #8
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
 8012f10:	4a05      	ldr	r2, [pc, #20]	; (8012f28 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	601a      	str	r2, [r3, #0]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff ff11 	bl	8012d40 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	4618      	mov	r0, r3
 8012f22:	3708      	adds	r7, #8
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}
 8012f28:	0802886c 	.word	0x0802886c

08012f2c <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
}
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff ffe7 	bl	8012f08 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8012f3a:	212c      	movs	r1, #44	; 0x2c
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f00e fcdf 	bl	8021900 <_ZdlPvj>
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	4618      	mov	r0, r3
 8012f46:	3708      	adds	r7, #8
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}

08012f4c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b086      	sub	sp, #24
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	60f8      	str	r0, [r7, #12]
 8012f54:	60b9      	str	r1, [r7, #8]
 8012f56:	607a      	str	r2, [r7, #4]
 8012f58:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	689a      	ldr	r2, [r3, #8]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	db08      	blt.n	8012f78 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	4913      	ldr	r1, [pc, #76]	; (8012fbc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8012f6e:	68b8      	ldr	r0, [r7, #8]
 8012f70:	f7ef fbd8 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8012f74:	2301      	movs	r3, #1
 8012f76:	e01d      	b.n	8012fb4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	68da      	ldr	r2, [r3, #12]
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	689b      	ldr	r3, [r3, #8]
 8012f80:	011b      	lsls	r3, r3, #4
 8012f82:	4413      	add	r3, r2
 8012f84:	617b      	str	r3, [r7, #20]
  current->size = size;
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	683a      	ldr	r2, [r7, #0]
 8012f90:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	6a3a      	ldr	r2, [r7, #32]
 8012f96:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9e:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	1c5a      	adds	r2, r3, #1
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2201      	movs	r2, #1
 8012fae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8012fb2:	2300      	movs	r3, #0
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3718      	adds	r7, #24
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}
 8012fbc:	080283b8 	.word	0x080283b8

08012fc0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b089      	sub	sp, #36	; 0x24
 8012fc4:	af02      	add	r7, sp, #8
 8012fc6:	60f8      	str	r0, [r7, #12]
 8012fc8:	60b9      	str	r1, [r7, #8]
 8012fca:	607a      	str	r2, [r7, #4]
 8012fcc:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	68da      	ldr	r2, [r3, #12]
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	689b      	ldr	r3, [r3, #8]
 8012fd6:	011b      	lsls	r3, r3, #4
 8012fd8:	4413      	add	r3, r2
 8012fda:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3308      	adds	r3, #8
 8012fe2:	681c      	ldr	r4, [r3, #0]
 8012fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe6:	9300      	str	r3, [sp, #0]
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	687a      	ldr	r2, [r7, #4]
 8012fec:	68b9      	ldr	r1, [r7, #8]
 8012fee:	68f8      	ldr	r0, [r7, #12]
 8012ff0:	47a0      	blx	r4
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	bf14      	ite	ne
 8012ff8:	2301      	movne	r3, #1
 8012ffa:	2300      	moveq	r3, #0
 8012ffc:	b2db      	uxtb	r3, r3
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8013002:	2301      	movs	r3, #1
 8013004:	e003      	b.n	801300e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801300a:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 801300c:	2300      	movs	r3, #0
}
 801300e:	4618      	mov	r0, r3
 8013010:	371c      	adds	r7, #28
 8013012:	46bd      	mov	sp, r7
 8013014:	bd90      	pop	{r4, r7, pc}

08013016 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8013016:	b480      	push	{r7}
 8013018:	b087      	sub	sp, #28
 801301a:	af00      	add	r7, sp, #0
 801301c:	60f8      	str	r0, [r7, #12]
 801301e:	60b9      	str	r1, [r7, #8]
 8013020:	607a      	str	r2, [r7, #4]
 8013022:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	68da      	ldr	r2, [r3, #12]
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 801302e:	4413      	add	r3, r2
 8013030:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	689b      	ldr	r3, [r3, #8]
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	429a      	cmp	r2, r3
 801303a:	da01      	bge.n	8013040 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 801303c:	2300      	movs	r3, #0
 801303e:	e007      	b.n	8013050 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	68db      	ldr	r3, [r3, #12]
 8013044:	687a      	ldr	r2, [r7, #4]
 8013046:	429a      	cmp	r2, r3
 8013048:	dd01      	ble.n	801304e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 801304a:	2300      	movs	r3, #0
 801304c:	e000      	b.n	8013050 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 801304e:	2301      	movs	r3, #1
}
 8013050:	4618      	mov	r0, r3
 8013052:	371c      	adds	r7, #28
 8013054:	46bd      	mov	sp, r7
 8013056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305a:	4770      	bx	lr

0801305c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 801305c:	b580      	push	{r7, lr}
 801305e:	b086      	sub	sp, #24
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 801306a:	2300      	movs	r3, #0
 801306c:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d10b      	bne.n	801308c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	699a      	ldr	r2, [r3, #24]
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	6a1b      	ldr	r3, [r3, #32]
 801307c:	4619      	mov	r1, r3
 801307e:	460b      	mov	r3, r1
 8013080:	005b      	lsls	r3, r3, #1
 8013082:	440b      	add	r3, r1
 8013084:	009b      	lsls	r3, r3, #2
 8013086:	4413      	add	r3, r2
 8013088:	613b      	str	r3, [r7, #16]
 801308a:	e011      	b.n	80130b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	689b      	ldr	r3, [r3, #8]
 8013090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013094:	d101      	bne.n	801309a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8013096:	2300      	movs	r3, #0
 8013098:	e029      	b.n	80130ee <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	699a      	ldr	r2, [r3, #24]
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	4619      	mov	r1, r3
 80130a4:	460b      	mov	r3, r1
 80130a6:	005b      	lsls	r3, r3, #1
 80130a8:	440b      	add	r3, r1
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	4413      	add	r3, r2
 80130ae:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	6939      	ldr	r1, [r7, #16]
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7ff ffad 	bl	8013016 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d002      	beq.n	80130c8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	617b      	str	r3, [r7, #20]
      break;
 80130c6:	e011      	b.n	80130ec <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	689b      	ldr	r3, [r3, #8]
 80130cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130d0:	d00b      	beq.n	80130ea <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	699a      	ldr	r2, [r3, #24]
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	4619      	mov	r1, r3
 80130dc:	460b      	mov	r3, r1
 80130de:	005b      	lsls	r3, r3, #1
 80130e0:	440b      	add	r3, r1
 80130e2:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 80130e4:	4413      	add	r3, r2
 80130e6:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 80130e8:	e7e2      	b.n	80130b0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 80130ea:	bf00      	nop
  } while (true);
  return result;
 80130ec:	697b      	ldr	r3, [r7, #20]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3718      	adds	r7, #24
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}

080130f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 80130f6:	b580      	push	{r7, lr}
 80130f8:	b098      	sub	sp, #96	; 0x60
 80130fa:	af00      	add	r7, sp, #0
 80130fc:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013104:	f083 0301 	eor.w	r3, r3, #1
 8013108:	b2db      	uxtb	r3, r3
 801310a:	2b00      	cmp	r3, #0
 801310c:	f040 815f 	bne.w	80133ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	2b00      	cmp	r3, #0
 8013116:	f000 815a 	beq.w	80133ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 801312c:	2300      	movs	r3, #0
 801312e:	657b      	str	r3, [r7, #84]	; 0x54
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	689b      	ldr	r3, [r3, #8]
 8013134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013136:	429a      	cmp	r2, r3
 8013138:	da4d      	bge.n	80131d6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	68da      	ldr	r2, [r3, #12]
 801313e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013140:	011b      	lsls	r3, r3, #4
 8013142:	4413      	add	r3, r2
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801314a:	d11e      	bne.n	801318a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 801314c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801314e:	3b01      	subs	r3, #1
 8013150:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	68da      	ldr	r2, [r3, #12]
 8013156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013158:	011b      	lsls	r3, r3, #4
 801315a:	441a      	add	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6919      	ldr	r1, [r3, #16]
 8013160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	440b      	add	r3, r1
 8013166:	6812      	ldr	r2, [r2, #0]
 8013168:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	695a      	ldr	r2, [r3, #20]
 801316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013170:	009b      	lsls	r3, r3, #2
 8013172:	4413      	add	r3, r2
 8013174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013176:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801317c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801317e:	009b      	lsls	r3, r3, #2
 8013180:	4413      	add	r3, r2
 8013182:	f04f 32ff 	mov.w	r2, #4294967295
 8013186:	601a      	str	r2, [r3, #0]
 8013188:	e021      	b.n	80131ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	68da      	ldr	r2, [r3, #12]
 801318e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013190:	011b      	lsls	r3, r3, #4
 8013192:	441a      	add	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6919      	ldr	r1, [r3, #16]
 8013198:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801319a:	009b      	lsls	r3, r3, #2
 801319c:	440b      	add	r3, r1
 801319e:	6812      	ldr	r2, [r2, #0]
 80131a0:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	695a      	ldr	r2, [r3, #20]
 80131a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131a8:	009b      	lsls	r3, r3, #2
 80131aa:	4413      	add	r3, r2
 80131ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131ae:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68da      	ldr	r2, [r3, #12]
 80131b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131b6:	011b      	lsls	r3, r3, #4
 80131b8:	441a      	add	r2, r3
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80131be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131c0:	009b      	lsls	r3, r3, #2
 80131c2:	440b      	add	r3, r1
 80131c4:	6852      	ldr	r2, [r2, #4]
 80131c6:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 80131c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131ca:	3301      	adds	r3, #1
 80131cc:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 80131ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80131d0:	3301      	adds	r3, #1
 80131d2:	657b      	str	r3, [r7, #84]	; 0x54
 80131d4:	e7ac      	b.n	8013130 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	691a      	ldr	r2, [r3, #16]
 80131da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131dc:	009b      	lsls	r3, r3, #2
 80131de:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	695a      	ldr	r2, [r3, #20]
 80131e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131e6:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80131e8:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 80131ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	461a      	mov	r2, r3
 80131f4:	f7ff fdd0 	bl	8012d98 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	2200      	movs	r2, #0
 80131fc:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	2201      	movs	r2, #1
 8013202:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	699a      	ldr	r2, [r3, #24]
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6a1b      	ldr	r3, [r3, #32]
 801320c:	4619      	mov	r1, r3
 801320e:	460b      	mov	r3, r1
 8013210:	005b      	lsls	r3, r3, #1
 8013212:	440b      	add	r3, r1
 8013214:	009b      	lsls	r3, r3, #2
 8013216:	4413      	add	r3, r2
 8013218:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 801321a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801321c:	f04f 32ff 	mov.w	r2, #4294967295
 8013220:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	695b      	ldr	r3, [r3, #20]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 801322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801322c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801322e:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	68da      	ldr	r2, [r3, #12]
 8013234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013236:	011b      	lsls	r3, r3, #4
 8013238:	4413      	add	r3, r2
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013240:	d106      	bne.n	8013250 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	4413      	add	r3, r2
 801324c:	2200      	movs	r2, #0
 801324e:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	4413      	add	r3, r2
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801325e:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 8013260:	2301      	movs	r3, #1
 8013262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	689b      	ldr	r3, [r3, #8]
 8013268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801326a:	429a      	cmp	r2, r3
 801326c:	f280 80b0 	bge.w	80133d0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	695a      	ldr	r2, [r3, #20]
 8013274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68da      	ldr	r2, [r3, #12]
 8013282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013284:	011b      	lsls	r3, r3, #4
 8013286:	4413      	add	r3, r2
 8013288:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 8013290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013292:	689b      	ldr	r3, [r3, #8]
 8013294:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8013296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013298:	68db      	ldr	r3, [r3, #12]
 801329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 801329c:	2300      	movs	r3, #0
 801329e:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 80132a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132a8:	d12d      	bne.n	8013306 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 80132aa:	2300      	movs	r3, #0
 80132ac:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
 80132ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80132b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7ff fed1 	bl	801305c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 80132ba:	62b8      	str	r0, [r7, #40]	; 0x28
            prior_entry, wanted_first_time_used, wanted_last_time_used);

        if (prior_entry) {
 80132bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d012      	beq.n	80132e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	68da      	ldr	r2, [r3, #12]
 80132c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 80132cc:	4413      	add	r3, r2
 80132ce:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 80132d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132d6:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 80132d8:	4413      	add	r3, r2
 80132da:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 80132dc:	6a3a      	ldr	r2, [r7, #32]
 80132de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132e0:	429a      	cmp	r2, r3
 80132e2:	dd01      	ble.n	80132e8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 80132e4:	6a3b      	ldr	r3, [r7, #32]
 80132e6:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 80132e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d00f      	beq.n	801330e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 80132ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f0:	681a      	ldr	r2, [r3, #0]
 80132f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132f4:	1ad3      	subs	r3, r2, r3
 80132f6:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80132f8:	69fa      	ldr	r2, [r7, #28]
 80132fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132fc:	429a      	cmp	r2, r3
 80132fe:	da08      	bge.n	8013312 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 8013300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013302:	647b      	str	r3, [r7, #68]	; 0x44
      }
 8013304:	e7d3      	b.n	80132ae <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 8013306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	64bb      	str	r3, [r7, #72]	; 0x48
 801330c:	e002      	b.n	8013314 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 801330e:	bf00      	nop
 8013310:	e000      	b.n	8013314 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 8013312:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801331a:	009b      	lsls	r3, r3, #2
 801331c:	4413      	add	r3, r2
 801331e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013320:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	699a      	ldr	r2, [r3, #24]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	69db      	ldr	r3, [r3, #28]
 801332a:	4619      	mov	r1, r3
 801332c:	460b      	mov	r3, r1
 801332e:	005b      	lsls	r3, r3, #1
 8013330:	440b      	add	r3, r1
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	4413      	add	r3, r2
 8013336:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 8013338:	69bb      	ldr	r3, [r7, #24]
 801333a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801333c:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 801333e:	69bb      	ldr	r3, [r7, #24]
 8013340:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013342:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	69db      	ldr	r3, [r3, #28]
 8013348:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	69db      	ldr	r3, [r3, #28]
 801334e:	1c5a      	adds	r2, r3, #1
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8013354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801335a:	429a      	cmp	r2, r3
 801335c:	da09      	bge.n	8013372 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6a1a      	ldr	r2, [r3, #32]
 8013366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013368:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	697a      	ldr	r2, [r7, #20]
 801336e:	621a      	str	r2, [r3, #32]
 8013370:	e029      	b.n	80133c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 8013372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013374:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 8013376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013378:	689b      	ldr	r3, [r3, #8]
 801337a:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 801337c:	693b      	ldr	r3, [r7, #16]
 801337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013382:	d107      	bne.n	8013394 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8013384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013386:	697a      	ldr	r2, [r7, #20]
 8013388:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	f04f 32ff 	mov.w	r2, #4294967295
 8013390:	609a      	str	r2, [r3, #8]
          break;
 8013392:	e018      	b.n	80133c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6999      	ldr	r1, [r3, #24]
 8013398:	693a      	ldr	r2, [r7, #16]
 801339a:	4613      	mov	r3, r2
 801339c:	005b      	lsls	r3, r3, #1
 801339e:	4413      	add	r3, r2
 80133a0:	009b      	lsls	r3, r3, #2
 80133a2:	440b      	add	r3, r1
 80133a4:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80133ac:	429a      	cmp	r2, r3
 80133ae:	da07      	bge.n	80133c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 80133b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133b2:	689a      	ldr	r2, [r3, #8]
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 80133b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80133ba:	697a      	ldr	r2, [r7, #20]
 80133bc:	609a      	str	r2, [r3, #8]
          break;
 80133be:	e002      	b.n	80133c6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	643b      	str	r3, [r7, #64]	; 0x40
      }
 80133c4:	e7d7      	b.n	8013376 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 80133c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133c8:	3301      	adds	r3, #1
 80133ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133cc:	e74a      	b.n	8013264 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 80133ce:	bf00      	nop
    }
  }
}
 80133d0:	3760      	adds	r7, #96	; 0x60
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}

080133d6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 80133d6:	b580      	push	{r7, lr}
 80133d8:	b086      	sub	sp, #24
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 80133de:	6878      	ldr	r0, [r7, #4]
 80133e0:	f7ff fe89 	bl	80130f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	689b      	ldr	r3, [r3, #8]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d101      	bne.n	80133f0 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	e035      	b.n	801345c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	699a      	ldr	r2, [r3, #24]
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6a1b      	ldr	r3, [r3, #32]
 80133f8:	4619      	mov	r1, r3
 80133fa:	460b      	mov	r3, r1
 80133fc:	005b      	lsls	r3, r3, #1
 80133fe:	440b      	add	r3, r1
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	4413      	add	r3, r2
 8013404:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	613b      	str	r3, [r7, #16]
  while (entry) {
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d024      	beq.n	801345a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	68da      	ldr	r2, [r3, #12]
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 801341a:	4413      	add	r3, r2
 801341c:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	4413      	add	r3, r2
 8013428:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 801342a:	68ba      	ldr	r2, [r7, #8]
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	429a      	cmp	r2, r3
 8013430:	d901      	bls.n	8013436 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	689b      	ldr	r3, [r3, #8]
 801343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801343e:	d00b      	beq.n	8013458 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	699a      	ldr	r2, [r3, #24]
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	689b      	ldr	r3, [r3, #8]
 8013448:	4619      	mov	r1, r3
 801344a:	460b      	mov	r3, r1
 801344c:	005b      	lsls	r3, r3, #1
 801344e:	440b      	add	r3, r1
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	617b      	str	r3, [r7, #20]
  while (entry) {
 8013456:	e7d8      	b.n	801340a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 8013458:	bf00      	nop
  }
  return max_size;
 801345a:	693b      	ldr	r3, [r7, #16]
}
 801345c:	4618      	mov	r0, r3
 801345e:	3718      	adds	r7, #24
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8013464:	b480      	push	{r7}
 8013466:	b083      	sub	sp, #12
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	689b      	ldr	r3, [r3, #8]
 8013470:	4618      	mov	r0, r3
 8013472:	370c      	adds	r7, #12
 8013474:	46bd      	mov	sp, r7
 8013476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801347a:	4770      	bx	lr

0801347c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 801347c:	b580      	push	{r7, lr}
 801347e:	b084      	sub	sp, #16
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	607a      	str	r2, [r7, #4]
 8013488:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 801348a:	68f8      	ldr	r0, [r7, #12]
 801348c:	f7ff fe33 	bl	80130f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2b00      	cmp	r3, #0
 8013494:	db04      	blt.n	80134a0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	689b      	ldr	r3, [r3, #8]
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	429a      	cmp	r2, r3
 801349e:	db08      	blt.n	80134b2 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	689b      	ldr	r3, [r3, #8]
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	4909      	ldr	r1, [pc, #36]	; (80134cc <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 80134a8:	68b8      	ldr	r0, [r7, #8]
 80134aa:	f7ef f93b 	bl	8002724 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 80134ae:	2301      	movs	r3, #1
 80134b0:	e008      	b.n	80134c4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	4413      	add	r3, r2
 80134bc:	681a      	ldr	r2, [r3, #0]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80134c2:	2300      	movs	r3, #0
}
 80134c4:	4618      	mov	r0, r3
 80134c6:	3710      	adds	r7, #16
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}
 80134cc:	08028448 	.word	0x08028448

080134d0 <arm_elementwise_add_s8>:
                                  const int32_t out_mult,
                                  const int32_t out_shift,
                                  const int32_t out_activation_min,
                                  const int32_t out_activation_max,
                                  const uint32_t block_size)
{
 80134d0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80134d4:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
 80134d8:	af00      	add	r7, sp, #0
 80134da:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80134de:	6020      	str	r0, [r4, #0]
 80134e0:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80134e4:	6001      	str	r1, [r0, #0]
 80134e6:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80134ea:	600a      	str	r2, [r1, #0]
 80134ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80134f0:	6013      	str	r3, [r2, #0]

    int32_t offset_1_packed, offset_2_packed;

    int8_t r1, r2, r3, r4;

    offset_1_packed = (input_1_offset << 16U) | (input_1_offset & 0x0FFFFL);
 80134f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	041a      	lsls	r2, r3, #16
 80134fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	b29b      	uxth	r3, r3
 8013502:	4313      	orrs	r3, r2
 8013504:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
    offset_2_packed = (input_2_offset << 16U) | (input_2_offset & 0x0FFFFL);
 8013508:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801350c:	041a      	lsls	r2, r3, #16
 801350e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8013512:	b29b      	uxth	r3, r3
 8013514:	4313      	orrs	r3, r2
 8013516:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec

    loop_count = block_size >> 2;
 801351a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801351e:	089b      	lsrs	r3, r3, #2
 8013520:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4

    while (loop_count > 0U)
 8013524:	f001 b96d 	b.w	8014802 <arm_elementwise_add_s8+0x1332>
 8013528:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801352c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	6013      	str	r3, [r2, #0]
 8013534:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8013538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801353c:	6013      	str	r3, [r2, #0]
 801353e:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8013542:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801354c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8013550:	6013      	str	r3, [r2, #0]
  @return        q31 value
 */
__STATIC_FORCEINLINE q31_t arm_nn_read_q7x4_ia(const q7_t **in_q7)
{
    q31_t val;
    memcpy(&val, *in_q7, 4);
 8013552:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	461a      	mov	r2, r3
 801355e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8013562:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013564:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	1d1a      	adds	r2, r3, #4
 801356e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	601a      	str	r2, [r3, #0]

    return (val);
 8013576:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801357a:	681a      	ldr	r2, [r3, #0]
 * @brief read and expand one q7 word into two q15 words with reordering
 */

__STATIC_FORCEINLINE const q7_t *read_and_pad_reordered(const q7_t *source, q31_t *out1, q31_t *out2)
{
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 801357c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8013580:	601a      	str	r2, [r3, #0]
#ifndef ARM_MATH_BIG_ENDIAN
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 8013582:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801358c:	601a      	str	r2, [r3, #0]
 801358e:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 8013592:	2308      	movs	r3, #8
 8013594:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013596:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 801359a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	f003 031f 	and.w	r3, r3, #31
 80135a4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80135a6:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d103      	bne.n	80135b8 <arm_elementwise_add_s8+0xe8>
    return op1;
 80135b0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80135b4:	681a      	ldr	r2, [r3, #0]
 80135b6:	e006      	b.n	80135c6 <arm_elementwise_add_s8+0xf6>
  return (op1 >> op2) | (op1 << (32U - op2));
 80135b8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80135bc:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80135c0:	6812      	ldr	r2, [r2, #0]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	41da      	rors	r2, r3
 80135c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80135ca:	601a      	str	r2, [r3, #0]

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80135cc:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	fa2f f283 	sxtb16	r2, r3
 80135d6:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80135da:	601a      	str	r2, [r3, #0]
  return(result);
 80135dc:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	461a      	mov	r2, r3
 80135e4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80135ec:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80135f6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80135f8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	fa2f f283 	sxtb16	r2, r3
 8013602:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8013606:	601a      	str	r2, [r3, #0]
  return(result);
 8013608:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	461a      	mov	r2, r3
 8013610:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	601a      	str	r2, [r3, #0]
#else
    *out1 = __SXTB16(__ROR((uint32_t)inA, 8));
    *out2 = __SXTB16(inA);
#endif

    return source;
 8013618:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801361c:	681a      	ldr	r2, [r3, #0]
    {
        /* 4 outputs are calculated in one loop. The order of calculation is follows the order of output sign extension
           intrinsic */
        input_1_vect = read_and_pad_reordered(input_1_vect, &b_1, &a_1);
 801361e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013622:	601a      	str	r2, [r3, #0]
 8013624:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8013628:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	6013      	str	r3, [r2, #0]
 8013630:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8013634:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013638:	6013      	str	r3, [r2, #0]
 801363a:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 801363e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8013648:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801364c:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801364e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	461a      	mov	r2, r3
 801365a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801365e:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8013660:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	1d1a      	adds	r2, r3, #4
 801366a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	601a      	str	r2, [r3, #0]
    return (val);
 8013672:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8013676:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8013678:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801367c:	601a      	str	r2, [r3, #0]
    *out2 = __SXTB16(__ROR((uint32_t)inA, 8));
 801367e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8013688:	601a      	str	r2, [r3, #0]
 801368a:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801368e:	2308      	movs	r3, #8
 8013690:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 8013692:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8013696:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	f003 031f 	and.w	r3, r3, #31
 80136a0:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 80136a2:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d103      	bne.n	80136b4 <arm_elementwise_add_s8+0x1e4>
    return op1;
 80136ac:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	e006      	b.n	80136c2 <arm_elementwise_add_s8+0x1f2>
  return (op1 >> op2) | (op1 << (32U - op2));
 80136b4:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 80136b8:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 80136bc:	6812      	ldr	r2, [r2, #0]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	41da      	rors	r2, r3
 80136c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80136c6:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80136c8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	fa2f f283 	sxtb16	r2, r3
 80136d2:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80136d6:	601a      	str	r2, [r3, #0]
  return(result);
 80136d8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	461a      	mov	r2, r3
 80136e0:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	601a      	str	r2, [r3, #0]
    *out1 = __SXTB16(inA);
 80136e8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80136f2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 80136f4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	fa2f f283 	sxtb16	r2, r3
 80136fe:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8013702:	601a      	str	r2, [r3, #0]
  return(result);
 8013704:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	461a      	mov	r2, r3
 801370c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	601a      	str	r2, [r3, #0]
    return source;
 8013714:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8013718:	681a      	ldr	r2, [r3, #0]
        input_2_vect = read_and_pad_reordered(input_2_vect, &b_2, &a_2);
 801371a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801371e:	601a      	str	r2, [r3, #0]

        a_1 = __SADD16(a_1, offset_1_packed);
 8013720:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	4619      	mov	r1, r3
 8013728:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 801372c:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8013730:	6019      	str	r1, [r3, #0]
 8013732:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013738:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	fa92 f203 	sadd16	r2, r2, r3
 8013748:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801374c:	601a      	str	r2, [r3, #0]
  return(result);
 801374e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	461a      	mov	r2, r3
 8013756:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801375a:	601a      	str	r2, [r3, #0]
        b_1 = __SADD16(b_1, offset_1_packed);
 801375c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	4619      	mov	r1, r3
 8013764:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	; 0x3f0
 8013768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801376c:	6019      	str	r1, [r3, #0]
 801376e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8013772:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8013774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	fa92 f203 	sadd16	r2, r2, r3
 8013784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013788:	601a      	str	r2, [r3, #0]
  return(result);
 801378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	461a      	mov	r2, r3
 8013792:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013796:	601a      	str	r2, [r3, #0]

        a_2 = __SADD16(a_2, offset_2_packed);
 8013798:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	4619      	mov	r1, r3
 80137a0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80137a4:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80137a8:	6019      	str	r1, [r3, #0]
 80137aa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80137ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137b0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	fa92 f203 	sadd16	r2, r2, r3
 80137c0:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80137c4:	601a      	str	r2, [r3, #0]
  return(result);
 80137c6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	461a      	mov	r2, r3
 80137ce:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80137d2:	601a      	str	r2, [r3, #0]
        b_2 = __SADD16(b_2, offset_2_packed);
 80137d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4619      	mov	r1, r3
 80137dc:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80137e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80137e4:	6019      	str	r1, [r3, #0]
 80137e6:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80137ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("sadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80137ec:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	fa92 f203 	sadd16	r2, r2, r3
 80137fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013800:	601a      	str	r2, [r3, #0]
  return(result);
 8013802:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	461a      	mov	r2, r3
 801380a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801380e:	601a      	str	r2, [r3, #0]

        /* Sum 1 */
        input_1 = (int16_t)(b_1 & 0x0FFFFL) << left_shift;
 8013810:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	b21b      	sxth	r3, r3
 8013818:	461a      	mov	r2, r3
 801381a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801381e:	fa02 f303 	lsl.w	r3, r2, r3
 8013822:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8013826:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 801382a:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801382e:	6013      	str	r3, [r2, #0]
 8013830:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8013834:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	6013      	str	r3, [r2, #0]
 *                  this function.
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_doubling_high_mult_no_sat(const q31_t m1, const q31_t m2)
{
    q31_t result = 0;
 801383c:	f507 7209 	add.w	r2, r7, #548	; 0x224
 8013840:	2300      	movs	r3, #0
 8013842:	6013      	str	r3, [r2, #0]
    union arm_nn_long_long mult;

    // Rounding offset to add for a right shift of 31
    mult.word.low = 1 << 30;
 8013844:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8013848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801384c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801384e:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8013852:	2300      	movs	r3, #0
 8013854:	6053      	str	r3, [r2, #4]

    // Gets resolved as a SMLAL instruction
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013856:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 801385a:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4618      	mov	r0, r3
 8013862:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013866:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	461a      	mov	r2, r3
 801386e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013872:	fb02 f501 	mul.w	r5, r2, r1
 8013876:	fb00 f403 	mul.w	r4, r0, r3
 801387a:	442c      	add	r4, r5
 801387c:	fba0 2302 	umull	r2, r3, r0, r2
 8013880:	18e1      	adds	r1, r4, r3
 8013882:	460b      	mov	r3, r1
 8013884:	eb18 0102 	adds.w	r1, r8, r2
 8013888:	6239      	str	r1, [r7, #32]
 801388a:	eb49 0303 	adc.w	r3, r9, r3
 801388e:	627b      	str	r3, [r7, #36]	; 0x24
 8013890:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8013894:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

    // Utilize all of the upper 32 bits. This is the doubling step
    // as well.
    result = (int32_t)(mult.long_long >> 31);
 8013898:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 801389c:	f04f 0000 	mov.w	r0, #0
 80138a0:	f04f 0100 	mov.w	r1, #0
 80138a4:	0fd0      	lsrs	r0, r2, #31
 80138a6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80138aa:	17d9      	asrs	r1, r3, #31
 80138ac:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80138b0:	4603      	mov	r3, r0
 80138b2:	6013      	str	r3, [r2, #0]

    return result;
 80138b4:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80138b8:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
 80138ba:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80138be:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80138c2:	4259      	negs	r1, r3
 80138c4:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80138c8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80138cc:	6013      	str	r3, [r2, #0]
 80138ce:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80138d2:	6019      	str	r1, [r3, #0]
 * @return          Rounded result of division. Midpoint is rounded away from zero.
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent)
{
    q31_t result = 0;
 80138d4:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80138d8:	2300      	movs	r3, #0
 80138da:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80138dc:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80138e0:	2201      	movs	r2, #1
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	fa02 f303 	lsl.w	r3, r2, r3
 80138e8:	f507 720e 	add.w	r2, r7, #568	; 0x238
 80138ec:	3b01      	subs	r3, #1
 80138ee:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80138f0:	f507 710d 	add.w	r1, r7, #564	; 0x234
 80138f4:	f507 7211 	add.w	r2, r7, #580	; 0x244
 80138f8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80138fc:	6812      	ldr	r2, [r2, #0]
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4013      	ands	r3, r2
 8013902:	600b      	str	r3, [r1, #0]

    // Basic division
    result = dividend >> exponent;
 8013904:	f507 710f 	add.w	r1, r7, #572	; 0x23c
 8013908:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801390c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8013910:	6812      	ldr	r2, [r2, #0]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	fa42 f303 	asr.w	r3, r2, r3
 8013918:	600b      	str	r3, [r1, #0]

    // Adjust 'result' for rounding (mid point away from zero)
    q31_t threshold = remainder_mask >> 1;
 801391a:	f507 720c 	add.w	r2, r7, #560	; 0x230
 801391e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	105b      	asrs	r3, r3, #1
 8013926:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013928:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	da06      	bge.n	8013940 <arm_elementwise_add_s8+0x470>
    {
        threshold++;
 8013932:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8013936:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	3301      	adds	r3, #1
 801393e:	6013      	str	r3, [r2, #0]
    }
    if (remainder > threshold)
 8013940:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8013944:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8013948:	6812      	ldr	r2, [r2, #0]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	429a      	cmp	r2, r3
 801394e:	dd06      	ble.n	801395e <arm_elementwise_add_s8+0x48e>
    {
        result++;
 8013950:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 8013954:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	3301      	adds	r3, #1
 801395c:	6013      	str	r3, [r2, #0]
    }

    return result;
 801395e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        input_2 = (int16_t)(b_2 & 0x0FFFFL) << left_shift;
 8013968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	b21b      	sxth	r3, r3
 8013970:	461a      	mov	r2, r3
 8013972:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8013976:	fa02 f303 	lsl.w	r3, r2, r3
 801397a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 801397e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8013982:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013986:	6013      	str	r3, [r2, #0]
 8013988:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801398c:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8013990:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013992:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8013996:	2300      	movs	r3, #0
 8013998:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801399a:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801399e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80139a2:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80139a4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80139a8:	2300      	movs	r3, #0
 80139aa:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80139ac:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80139b0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	4618      	mov	r0, r3
 80139b8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80139bc:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	461a      	mov	r2, r3
 80139c4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80139c8:	fb02 f501 	mul.w	r5, r2, r1
 80139cc:	fb00 f403 	mul.w	r4, r0, r3
 80139d0:	442c      	add	r4, r5
 80139d2:	fba0 2302 	umull	r2, r3, r0, r2
 80139d6:	18e1      	adds	r1, r4, r3
 80139d8:	460b      	mov	r3, r1
 80139da:	eb18 0102 	adds.w	r1, r8, r2
 80139de:	62b9      	str	r1, [r7, #40]	; 0x28
 80139e0:	eb49 0303 	adc.w	r3, r9, r3
 80139e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139e6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80139ea:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
    result = (int32_t)(mult.long_long >> 31);
 80139ee:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80139f2:	f04f 0000 	mov.w	r0, #0
 80139f6:	f04f 0100 	mov.w	r1, #0
 80139fa:	0fd0      	lsrs	r0, r2, #31
 80139fc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013a00:	17d9      	asrs	r1, r3, #31
 8013a02:	f507 7212 	add.w	r2, r7, #584	; 0x248
 8013a06:	4603      	mov	r3, r0
 8013a08:	6013      	str	r3, [r2, #0]
    return result;
 8013a0a:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8013a0e:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(input_2, input_2_mult, input_2_shift);
 8013a10:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8013a14:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8013a18:	4259      	negs	r1, r3
 8013a1a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013a1e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013a22:	6013      	str	r3, [r2, #0]
 8013a24:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013a28:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013a2a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8013a2e:	2300      	movs	r3, #0
 8013a30:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013a32:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013a36:	2201      	movs	r2, #1
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a3e:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 8013a42:	3b01      	subs	r3, #1
 8013a44:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013a46:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8013a4a:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013a4e:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8013a52:	6812      	ldr	r2, [r2, #0]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4013      	ands	r3, r2
 8013a58:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013a5a:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8013a5e:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013a62:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8013a66:	6812      	ldr	r2, [r2, #0]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	fa42 f303 	asr.w	r3, r2, r3
 8013a6e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013a70:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8013a74:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	105b      	asrs	r3, r3, #1
 8013a7c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013a7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	da06      	bge.n	8013a96 <arm_elementwise_add_s8+0x5c6>
        threshold++;
 8013a88:	f507 7215 	add.w	r2, r7, #596	; 0x254
 8013a8c:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	3301      	adds	r3, #1
 8013a94:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013a96:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8013a9a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8013a9e:	6812      	ldr	r2, [r2, #0]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	dd06      	ble.n	8013ab4 <arm_elementwise_add_s8+0x5e4>
        result++;
 8013aa6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8013aaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	6013      	str	r3, [r2, #0]
    return result;
 8013ab4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        sum = input_1 + input_2;
 8013abe:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8013ac2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8013acc:	f507 721d 	add.w	r2, r7, #628	; 0x274
 8013ad0:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8013ad4:	6013      	str	r3, [r2, #0]
 8013ad6:	f507 721c 	add.w	r2, r7, #624	; 0x270
 8013ada:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8013ade:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013ae0:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013ae8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8013aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013af0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013af2:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8013af6:	2300      	movs	r3, #0
 8013af8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013afa:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 8013afe:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013b0a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	461a      	mov	r2, r3
 8013b12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013b16:	fb02 f501 	mul.w	r5, r2, r1
 8013b1a:	fb00 f403 	mul.w	r4, r0, r3
 8013b1e:	442c      	add	r4, r5
 8013b20:	fba0 2302 	umull	r2, r3, r0, r2
 8013b24:	18e1      	adds	r1, r4, r3
 8013b26:	460b      	mov	r3, r1
 8013b28:	eb18 0102 	adds.w	r1, r8, r2
 8013b2c:	6339      	str	r1, [r7, #48]	; 0x30
 8013b2e:	eb49 0303 	adc.w	r3, r9, r3
 8013b32:	637b      	str	r3, [r7, #52]	; 0x34
 8013b34:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013b38:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
    result = (int32_t)(mult.long_long >> 31);
 8013b3c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8013b40:	f04f 0000 	mov.w	r0, #0
 8013b44:	f04f 0100 	mov.w	r1, #0
 8013b48:	0fd0      	lsrs	r0, r2, #31
 8013b4a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013b4e:	17d9      	asrs	r1, r3, #31
 8013b50:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8013b54:	4603      	mov	r3, r0
 8013b56:	6013      	str	r3, [r2, #0]
    return result;
 8013b58:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8013b5c:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(sum, out_mult, out_shift);
 8013b5e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8013b62:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013b66:	4259      	negs	r1, r3
 8013b68:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8013b6c:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8013b70:	6013      	str	r3, [r2, #0]
 8013b72:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8013b76:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013b78:	f507 7221 	add.w	r2, r7, #644	; 0x284
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013b80:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8013b84:	2201      	movs	r2, #1
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	fa02 f303 	lsl.w	r3, r2, r3
 8013b8c:	f507 7220 	add.w	r2, r7, #640	; 0x280
 8013b90:	3b01      	subs	r3, #1
 8013b92:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013b94:	f507 711f 	add.w	r1, r7, #636	; 0x27c
 8013b98:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8013b9c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8013ba0:	6812      	ldr	r2, [r2, #0]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	4013      	ands	r3, r2
 8013ba6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013ba8:	f507 7121 	add.w	r1, r7, #644	; 0x284
 8013bac:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8013bb0:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8013bb4:	6812      	ldr	r2, [r2, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	fa42 f303 	asr.w	r3, r2, r3
 8013bbc:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013bbe:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8013bc2:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	105b      	asrs	r3, r3, #1
 8013bca:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013bcc:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	da06      	bge.n	8013be4 <arm_elementwise_add_s8+0x714>
        threshold++;
 8013bd6:	f507 721e 	add.w	r2, r7, #632	; 0x278
 8013bda:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	3301      	adds	r3, #1
 8013be2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013be4:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8013be8:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8013bec:	6812      	ldr	r2, [r2, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	429a      	cmp	r2, r3
 8013bf2:	dd06      	ble.n	8013c02 <arm_elementwise_add_s8+0x732>
        result++;
 8013bf4:	f507 7221 	add.w	r2, r7, #644	; 0x284
 8013bf8:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	6013      	str	r3, [r2, #0]
    return result;
 8013c02:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum += out_offset;
 8013c0c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8013c10:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8013c14:	4413      	add	r3, r2
 8013c16:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MAX(sum, out_activation_min);
 8013c1a:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8013c1e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8013c22:	4293      	cmp	r3, r2
 8013c24:	bfb8      	it	lt
 8013c26:	4613      	movlt	r3, r2
 8013c28:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MIN(sum, out_activation_max);
 8013c2c:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8013c30:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8013c34:	4293      	cmp	r3, r2
 8013c36:	bfa8      	it	ge
 8013c38:	4613      	movge	r3, r2
 8013c3a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        r1 = (q7_t)sum;
 8013c3e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8013c42:	f887 33df 	strb.w	r3, [r7, #991]	; 0x3df

        /* Sum 3 */
        input_1 = (int16_t)((b_1 >> 16) & 0x0FFFFL) << left_shift;
 8013c46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	141b      	asrs	r3, r3, #16
 8013c4e:	b21b      	sxth	r3, r3
 8013c50:	461a      	mov	r2, r3
 8013c52:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8013c56:	fa02 f303 	lsl.w	r3, r2, r3
 8013c5a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8013c5e:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8013c62:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8013c66:	6013      	str	r3, [r2, #0]
 8013c68:	f507 7225 	add.w	r2, r7, #660	; 0x294
 8013c6c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013c74:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8013c78:	2300      	movs	r3, #0
 8013c7a:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013c7c:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8013c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013c84:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013c86:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013c8e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8013c92:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	4618      	mov	r0, r3
 8013c9a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013c9e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013caa:	fb02 f501 	mul.w	r5, r2, r1
 8013cae:	fb00 f403 	mul.w	r4, r0, r3
 8013cb2:	442c      	add	r4, r5
 8013cb4:	fba0 2302 	umull	r2, r3, r0, r2
 8013cb8:	18e1      	adds	r1, r4, r3
 8013cba:	460b      	mov	r3, r1
 8013cbc:	eb18 0102 	adds.w	r1, r8, r2
 8013cc0:	63b9      	str	r1, [r7, #56]	; 0x38
 8013cc2:	eb49 0303 	adc.w	r3, r9, r3
 8013cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013cc8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8013ccc:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
    result = (int32_t)(mult.long_long >> 31);
 8013cd0:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8013cd4:	f04f 0000 	mov.w	r0, #0
 8013cd8:	f04f 0100 	mov.w	r1, #0
 8013cdc:	0fd0      	lsrs	r0, r2, #31
 8013cde:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013ce2:	17d9      	asrs	r1, r3, #31
 8013ce4:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8013ce8:	4603      	mov	r3, r0
 8013cea:	6013      	str	r3, [r2, #0]
    return result;
 8013cec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8013cf0:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
 8013cf2:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8013cf6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8013cfa:	4259      	negs	r1, r3
 8013cfc:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8013d00:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8013d04:	6013      	str	r3, [r2, #0]
 8013d06:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8013d0a:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013d0c:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8013d10:	2300      	movs	r3, #0
 8013d12:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013d14:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8013d18:	2201      	movs	r2, #1
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8013d20:	f507 7229 	add.w	r2, r7, #676	; 0x2a4
 8013d24:	3b01      	subs	r3, #1
 8013d26:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013d28:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
 8013d2c:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8013d30:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8013d34:	6812      	ldr	r2, [r2, #0]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4013      	ands	r3, r2
 8013d3a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013d3c:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8013d40:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8013d44:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8013d48:	6812      	ldr	r2, [r2, #0]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	fa42 f303 	asr.w	r3, r2, r3
 8013d50:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013d52:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8013d56:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	105b      	asrs	r3, r3, #1
 8013d5e:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013d60:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	da06      	bge.n	8013d78 <arm_elementwise_add_s8+0x8a8>
        threshold++;
 8013d6a:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8013d6e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8013d72:	681b      	ldr	r3, [r3, #0]
 8013d74:	3301      	adds	r3, #1
 8013d76:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013d78:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
 8013d7c:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8013d80:	6812      	ldr	r2, [r2, #0]
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	dd06      	ble.n	8013d96 <arm_elementwise_add_s8+0x8c6>
        result++;
 8013d88:	f507 722a 	add.w	r2, r7, #680	; 0x2a8
 8013d8c:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	3301      	adds	r3, #1
 8013d94:	6013      	str	r3, [r2, #0]
    return result;
 8013d96:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        input_2 = (int16_t)((b_2 >> 16) & 0x0FFFFL) << left_shift;
 8013da0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	141b      	asrs	r3, r3, #16
 8013da8:	b21b      	sxth	r3, r3
 8013daa:	461a      	mov	r2, r3
 8013dac:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8013db0:	fa02 f303 	lsl.w	r3, r2, r3
 8013db4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8013db8:	f507 722f 	add.w	r2, r7, #700	; 0x2bc
 8013dbc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8013dc6:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8013dca:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013dcc:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013dd4:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8013dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013ddc:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013dde:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8013de2:	2300      	movs	r3, #0
 8013de4:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013de6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8013dea:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4618      	mov	r0, r3
 8013df2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013df6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013e02:	fb02 f501 	mul.w	r5, r2, r1
 8013e06:	fb00 f403 	mul.w	r4, r0, r3
 8013e0a:	442c      	add	r4, r5
 8013e0c:	fba0 2302 	umull	r2, r3, r0, r2
 8013e10:	18e1      	adds	r1, r4, r3
 8013e12:	460b      	mov	r3, r1
 8013e14:	eb18 0102 	adds.w	r1, r8, r2
 8013e18:	6439      	str	r1, [r7, #64]	; 0x40
 8013e1a:	eb49 0303 	adc.w	r3, r9, r3
 8013e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8013e20:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8013e24:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
    result = (int32_t)(mult.long_long >> 31);
 8013e28:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8013e2c:	f04f 0000 	mov.w	r0, #0
 8013e30:	f04f 0100 	mov.w	r1, #0
 8013e34:	0fd0      	lsrs	r0, r2, #31
 8013e36:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013e3a:	17d9      	asrs	r1, r3, #31
 8013e3c:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8013e40:	4603      	mov	r3, r0
 8013e42:	6013      	str	r3, [r2, #0]
    return result;
 8013e44:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8013e48:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(input_2, input_2_mult, input_2_shift);
 8013e4a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8013e4e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8013e52:	4259      	negs	r1, r3
 8013e54:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8013e58:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013e5c:	6013      	str	r3, [r2, #0]
 8013e5e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8013e62:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013e64:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8013e68:	2300      	movs	r3, #0
 8013e6a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013e6c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8013e70:	2201      	movs	r2, #1
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	fa02 f303 	lsl.w	r3, r2, r3
 8013e78:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 8013e7c:	3b01      	subs	r3, #1
 8013e7e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013e80:	f507 7131 	add.w	r1, r7, #708	; 0x2c4
 8013e84:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8013e88:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8013e8c:	6812      	ldr	r2, [r2, #0]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4013      	ands	r3, r2
 8013e92:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013e94:	f507 7133 	add.w	r1, r7, #716	; 0x2cc
 8013e98:	f507 7235 	add.w	r2, r7, #724	; 0x2d4
 8013e9c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8013ea0:	6812      	ldr	r2, [r2, #0]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	fa42 f303 	asr.w	r3, r2, r3
 8013ea8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013eaa:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8013eae:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	105b      	asrs	r3, r3, #1
 8013eb6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8013eb8:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	da06      	bge.n	8013ed0 <arm_elementwise_add_s8+0xa00>
        threshold++;
 8013ec2:	f507 7230 	add.w	r2, r7, #704	; 0x2c0
 8013ec6:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	3301      	adds	r3, #1
 8013ece:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8013ed0:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 8013ed4:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8013ed8:	6812      	ldr	r2, [r2, #0]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	dd06      	ble.n	8013eee <arm_elementwise_add_s8+0xa1e>
        result++;
 8013ee0:	f507 7233 	add.w	r2, r7, #716	; 0x2cc
 8013ee4:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	3301      	adds	r3, #1
 8013eec:	6013      	str	r3, [r2, #0]
    return result;
 8013eee:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        sum = input_1 + input_2;
 8013ef8:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8013efc:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8013f00:	4413      	add	r3, r2
 8013f02:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8013f06:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8013f0a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8013f0e:	6013      	str	r3, [r2, #0]
 8013f10:	f507 7237 	add.w	r2, r7, #732	; 0x2dc
 8013f14:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8013f18:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8013f1a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8013f1e:	2300      	movs	r3, #0
 8013f20:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 8013f22:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8013f26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f2a:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8013f2c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8013f30:	2300      	movs	r3, #0
 8013f32:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8013f34:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8013f38:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	4618      	mov	r0, r3
 8013f40:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013f44:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013f50:	fb02 f501 	mul.w	r5, r2, r1
 8013f54:	fb00 f403 	mul.w	r4, r0, r3
 8013f58:	442c      	add	r4, r5
 8013f5a:	fba0 2302 	umull	r2, r3, r0, r2
 8013f5e:	18e1      	adds	r1, r4, r3
 8013f60:	460b      	mov	r3, r1
 8013f62:	eb18 0102 	adds.w	r1, r8, r2
 8013f66:	64b9      	str	r1, [r7, #72]	; 0x48
 8013f68:	eb49 0303 	adc.w	r3, r9, r3
 8013f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f6e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013f72:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
    result = (int32_t)(mult.long_long >> 31);
 8013f76:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8013f7a:	f04f 0000 	mov.w	r0, #0
 8013f7e:	f04f 0100 	mov.w	r1, #0
 8013f82:	0fd0      	lsrs	r0, r2, #31
 8013f84:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8013f88:	17d9      	asrs	r1, r3, #31
 8013f8a:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8013f8e:	4603      	mov	r3, r0
 8013f90:	6013      	str	r3, [r2, #0]
    return result;
 8013f92:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8013f96:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(sum, out_mult, out_shift);
 8013f98:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8013f9c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8013fa0:	4259      	negs	r1, r3
 8013fa2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8013fa6:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8013faa:	6013      	str	r3, [r2, #0]
 8013fac:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8013fb0:	6019      	str	r1, [r3, #0]
    q31_t result = 0;
 8013fb2:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8013fba:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8013fc6:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
 8013fca:	3b01      	subs	r3, #1
 8013fcc:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8013fce:	f507 713a 	add.w	r1, r7, #744	; 0x2e8
 8013fd2:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8013fd6:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8013fda:	6812      	ldr	r2, [r2, #0]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	4013      	ands	r3, r2
 8013fe0:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8013fe2:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8013fe6:	f507 723e 	add.w	r2, r7, #760	; 0x2f8
 8013fea:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8013fee:	6812      	ldr	r2, [r2, #0]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	fa42 f303 	asr.w	r3, r2, r3
 8013ff6:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 8013ff8:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8013ffc:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	105b      	asrs	r3, r3, #1
 8014004:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8014006:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	da06      	bge.n	801401e <arm_elementwise_add_s8+0xb4e>
        threshold++;
 8014010:	f507 7239 	add.w	r2, r7, #740	; 0x2e4
 8014014:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	3301      	adds	r3, #1
 801401c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801401e:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8014022:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8014026:	6812      	ldr	r2, [r2, #0]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	429a      	cmp	r2, r3
 801402c:	dd06      	ble.n	801403c <arm_elementwise_add_s8+0xb6c>
        result++;
 801402e:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 8014032:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	3301      	adds	r3, #1
 801403a:	6013      	str	r3, [r2, #0]
    return result;
 801403c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum += out_offset;
 8014046:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801404a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801404e:	4413      	add	r3, r2
 8014050:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MAX(sum, out_activation_min);
 8014054:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014058:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801405c:	4293      	cmp	r3, r2
 801405e:	bfb8      	it	lt
 8014060:	4613      	movlt	r3, r2
 8014062:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MIN(sum, out_activation_max);
 8014066:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801406a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801406e:	4293      	cmp	r3, r2
 8014070:	bfa8      	it	ge
 8014072:	4613      	movge	r3, r2
 8014074:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        r3 = (q7_t)sum;
 8014078:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801407c:	f887 33de 	strb.w	r3, [r7, #990]	; 0x3de

        /* Sum 2 */
        input_1 = (int16_t)(a_1 & 0x0FFFFL) << left_shift;
 8014080:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	b21b      	sxth	r3, r3
 8014088:	461a      	mov	r2, r3
 801408a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801408e:	fa02 f303 	lsl.w	r3, r2, r3
 8014092:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8014096:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801409a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 801409e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
    q31_t result = 0;
 80140a8:	2300      	movs	r3, #0
 80140aa:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    mult.word.low = 1 << 30;
 80140ae:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80140b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80140b6:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80140b8:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80140bc:	2300      	movs	r3, #0
 80140be:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80140c0:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80140c4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 80140c8:	4618      	mov	r0, r3
 80140ca:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80140ce:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 80140d2:	461a      	mov	r2, r3
 80140d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80140d8:	fb02 f501 	mul.w	r5, r2, r1
 80140dc:	fb00 f403 	mul.w	r4, r0, r3
 80140e0:	442c      	add	r4, r5
 80140e2:	fba0 2302 	umull	r2, r3, r0, r2
 80140e6:	18e1      	adds	r1, r4, r3
 80140e8:	460b      	mov	r3, r1
 80140ea:	eb18 0102 	adds.w	r1, r8, r2
 80140ee:	6539      	str	r1, [r7, #80]	; 0x50
 80140f0:	eb49 0303 	adc.w	r3, r9, r3
 80140f4:	657b      	str	r3, [r7, #84]	; 0x54
 80140f6:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80140fa:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0
    result = (int32_t)(mult.long_long >> 31);
 80140fe:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8014102:	f04f 0000 	mov.w	r0, #0
 8014106:	f04f 0100 	mov.w	r1, #0
 801410a:	0fd0      	lsrs	r0, r2, #31
 801410c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014110:	17d9      	asrs	r1, r3, #31
 8014112:	4603      	mov	r3, r0
 8014114:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    return result;
 8014118:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
 801411c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8014120:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8014124:	425a      	negs	r2, r3
 8014126:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801412a:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 801412e:	f8c7 2318 	str.w	r2, [r7, #792]	; 0x318
    q31_t result = 0;
 8014132:	2300      	movs	r3, #0
 8014134:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014138:	2201      	movs	r2, #1
 801413a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801413e:	fa02 f303 	lsl.w	r3, r2, r3
 8014142:	3b01      	subs	r3, #1
 8014144:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
    int32_t remainder = remainder_mask & dividend;
 8014148:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801414c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8014150:	4013      	ands	r3, r2
 8014152:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
    result = dividend >> exponent;
 8014156:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 801415a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 801415e:	fa42 f303 	asr.w	r3, r2, r3
 8014162:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    q31_t threshold = remainder_mask >> 1;
 8014166:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 801416a:	105b      	asrs	r3, r3, #1
 801416c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    if (result < 0)
 8014170:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8014174:	2b00      	cmp	r3, #0
 8014176:	da04      	bge.n	8014182 <arm_elementwise_add_s8+0xcb2>
        threshold++;
 8014178:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801417c:	3301      	adds	r3, #1
 801417e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    if (remainder > threshold)
 8014182:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8014186:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 801418a:	429a      	cmp	r2, r3
 801418c:	dd04      	ble.n	8014198 <arm_elementwise_add_s8+0xcc8>
        result++;
 801418e:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8014192:	3301      	adds	r3, #1
 8014194:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    return result;
 8014198:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801419c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        input_2 = (int16_t)(a_2 & 0x0FFFFL) << left_shift;
 80141a0:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	b21b      	sxth	r3, r3
 80141a8:	461a      	mov	r2, r3
 80141aa:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80141ae:	fa02 f303 	lsl.w	r3, r2, r3
 80141b2:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80141b6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80141ba:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80141be:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80141c2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    q31_t result = 0;
 80141c6:	2300      	movs	r3, #0
 80141c8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    mult.word.low = 1 << 30;
 80141cc:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80141d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80141d4:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80141d6:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80141da:	2300      	movs	r3, #0
 80141dc:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80141de:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80141e2:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80141e6:	4618      	mov	r0, r3
 80141e8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80141ec:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80141f0:	461a      	mov	r2, r3
 80141f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80141f6:	fb02 f501 	mul.w	r5, r2, r1
 80141fa:	fb00 f403 	mul.w	r4, r0, r3
 80141fe:	442c      	add	r4, r5
 8014200:	fba0 2302 	umull	r2, r3, r0, r2
 8014204:	18e1      	adds	r1, r4, r3
 8014206:	460b      	mov	r3, r1
 8014208:	eb18 0102 	adds.w	r1, r8, r2
 801420c:	65b9      	str	r1, [r7, #88]	; 0x58
 801420e:	eb49 0303 	adc.w	r3, r9, r3
 8014212:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014214:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8014218:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 801421c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8014220:	f04f 0000 	mov.w	r0, #0
 8014224:	f04f 0100 	mov.w	r1, #0
 8014228:	0fd0      	lsrs	r0, r2, #31
 801422a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801422e:	17d9      	asrs	r1, r3, #31
 8014230:	4603      	mov	r3, r0
 8014232:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    return result;
 8014236:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
        SAT_INPUT(input_2, input_2_mult, input_2_shift);
 801423a:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 801423e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8014242:	425a      	negs	r2, r3
 8014244:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014248:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 801424c:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
    q31_t result = 0;
 8014250:	2300      	movs	r3, #0
 8014252:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014256:	2201      	movs	r2, #1
 8014258:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801425c:	fa02 f303 	lsl.w	r3, r2, r3
 8014260:	3b01      	subs	r3, #1
 8014262:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
    int32_t remainder = remainder_mask & dividend;
 8014266:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 801426a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 801426e:	4013      	ands	r3, r2
 8014270:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    result = dividend >> exponent;
 8014274:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8014278:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 801427c:	fa42 f303 	asr.w	r3, r2, r3
 8014280:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    q31_t threshold = remainder_mask >> 1;
 8014284:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8014288:	105b      	asrs	r3, r3, #1
 801428a:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    if (result < 0)
 801428e:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8014292:	2b00      	cmp	r3, #0
 8014294:	da04      	bge.n	80142a0 <arm_elementwise_add_s8+0xdd0>
        threshold++;
 8014296:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 801429a:	3301      	adds	r3, #1
 801429c:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    if (remainder > threshold)
 80142a0:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80142a4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80142a8:	429a      	cmp	r2, r3
 80142aa:	dd04      	ble.n	80142b6 <arm_elementwise_add_s8+0xde6>
        result++;
 80142ac:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80142b0:	3301      	adds	r3, #1
 80142b2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    return result;
 80142b6:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80142ba:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        sum = input_1 + input_2;
 80142be:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 80142c2:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80142c6:	4413      	add	r3, r2
 80142c8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80142cc:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80142d0:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 80142d4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80142d8:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
    q31_t result = 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    mult.word.low = 1 << 30;
 80142e2:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80142e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80142ea:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 80142ec:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80142f0:	2300      	movs	r3, #0
 80142f2:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80142f4:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 80142f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80142fc:	4618      	mov	r0, r3
 80142fe:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8014302:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8014306:	461a      	mov	r2, r3
 8014308:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801430c:	fb02 f501 	mul.w	r5, r2, r1
 8014310:	fb00 f403 	mul.w	r4, r0, r3
 8014314:	442c      	add	r4, r5
 8014316:	fba0 2302 	umull	r2, r3, r0, r2
 801431a:	18e1      	adds	r1, r4, r3
 801431c:	460b      	mov	r3, r1
 801431e:	eb18 0102 	adds.w	r1, r8, r2
 8014322:	6639      	str	r1, [r7, #96]	; 0x60
 8014324:	eb49 0303 	adc.w	r3, r9, r3
 8014328:	667b      	str	r3, [r7, #100]	; 0x64
 801432a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 801432e:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 8014332:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8014336:	f04f 0000 	mov.w	r0, #0
 801433a:	f04f 0100 	mov.w	r1, #0
 801433e:	0fd0      	lsrs	r0, r2, #31
 8014340:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014344:	17d9      	asrs	r1, r3, #31
 8014346:	4603      	mov	r3, r0
 8014348:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
    return result;
 801434c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
        SAT_INPUT(sum, out_mult, out_shift);
 8014350:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8014354:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8014358:	425a      	negs	r2, r3
 801435a:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801435e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8014362:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
    q31_t result = 0;
 8014366:	2300      	movs	r3, #0
 8014368:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    const q31_t remainder_mask = (1 << exponent) - 1;
 801436c:	2201      	movs	r2, #1
 801436e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8014372:	fa02 f303 	lsl.w	r3, r2, r3
 8014376:	3b01      	subs	r3, #1
 8014378:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    int32_t remainder = remainder_mask & dividend;
 801437c:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8014380:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8014384:	4013      	ands	r3, r2
 8014386:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    result = dividend >> exponent;
 801438a:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 801438e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8014392:	fa42 f303 	asr.w	r3, r2, r3
 8014396:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    q31_t threshold = remainder_mask >> 1;
 801439a:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801439e:	105b      	asrs	r3, r3, #1
 80143a0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    if (result < 0)
 80143a4:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	da04      	bge.n	80143b6 <arm_elementwise_add_s8+0xee6>
        threshold++;
 80143ac:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80143b0:	3301      	adds	r3, #1
 80143b2:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    if (remainder > threshold)
 80143b6:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 80143ba:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80143be:	429a      	cmp	r2, r3
 80143c0:	dd04      	ble.n	80143cc <arm_elementwise_add_s8+0xefc>
        result++;
 80143c2:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80143c6:	3301      	adds	r3, #1
 80143c8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    return result;
 80143cc:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80143d0:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum += out_offset;
 80143d4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80143d8:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80143dc:	4413      	add	r3, r2
 80143de:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MAX(sum, out_activation_min);
 80143e2:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80143e6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 80143ea:	4293      	cmp	r3, r2
 80143ec:	bfb8      	it	lt
 80143ee:	4613      	movlt	r3, r2
 80143f0:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MIN(sum, out_activation_max);
 80143f4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 80143f8:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80143fc:	4293      	cmp	r3, r2
 80143fe:	bfa8      	it	ge
 8014400:	4613      	movge	r3, r2
 8014402:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        r2 = (q7_t)sum;
 8014406:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801440a:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd

        /* Sum 4 */
        input_1 = (int16_t)((a_1 >> 16) & 0x0FFFFL) << left_shift;
 801440e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	141b      	asrs	r3, r3, #16
 8014416:	b21b      	sxth	r3, r3
 8014418:	461a      	mov	r2, r3
 801441a:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801441e:	fa02 f303 	lsl.w	r3, r2, r3
 8014422:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8014426:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801442a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
 801442e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    q31_t result = 0;
 8014438:	2300      	movs	r3, #0
 801443a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
    mult.word.low = 1 << 30;
 801443e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8014442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014446:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8014448:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801444c:	2300      	movs	r3, #0
 801444e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014450:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8014454:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8014458:	4618      	mov	r0, r3
 801445a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801445e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8014462:	461a      	mov	r2, r3
 8014464:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014468:	fb02 f501 	mul.w	r5, r2, r1
 801446c:	fb00 f403 	mul.w	r4, r0, r3
 8014470:	442c      	add	r4, r5
 8014472:	fba0 2302 	umull	r2, r3, r0, r2
 8014476:	18e1      	adds	r1, r4, r3
 8014478:	460b      	mov	r3, r1
 801447a:	eb18 0102 	adds.w	r1, r8, r2
 801447e:	66b9      	str	r1, [r7, #104]	; 0x68
 8014480:	eb49 0303 	adc.w	r3, r9, r3
 8014484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014486:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 801448a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 801448e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8014492:	f04f 0000 	mov.w	r0, #0
 8014496:	f04f 0100 	mov.w	r1, #0
 801449a:	0fd0      	lsrs	r0, r2, #31
 801449c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80144a0:	17d9      	asrs	r1, r3, #31
 80144a2:	4603      	mov	r3, r0
 80144a4:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
    return result;
 80144a8:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
        SAT_INPUT(input_1, input_1_mult, input_1_shift);
 80144ac:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80144b0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80144b4:	425a      	negs	r2, r3
 80144b6:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80144ba:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 80144be:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
    q31_t result = 0;
 80144c2:	2300      	movs	r3, #0
 80144c4:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    const q31_t remainder_mask = (1 << exponent) - 1;
 80144c8:	2201      	movs	r2, #1
 80144ca:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80144ce:	fa02 f303 	lsl.w	r3, r2, r3
 80144d2:	3b01      	subs	r3, #1
 80144d4:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    int32_t remainder = remainder_mask & dividend;
 80144d8:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 80144dc:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80144e0:	4013      	ands	r3, r2
 80144e2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
    result = dividend >> exponent;
 80144e6:	f8d7 2388 	ldr.w	r2, [r7, #904]	; 0x388
 80144ea:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80144ee:	fa42 f303 	asr.w	r3, r2, r3
 80144f2:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    q31_t threshold = remainder_mask >> 1;
 80144f6:	f8d7 337c 	ldr.w	r3, [r7, #892]	; 0x37c
 80144fa:	105b      	asrs	r3, r3, #1
 80144fc:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    if (result < 0)
 8014500:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8014504:	2b00      	cmp	r3, #0
 8014506:	da04      	bge.n	8014512 <arm_elementwise_add_s8+0x1042>
        threshold++;
 8014508:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801450c:	3301      	adds	r3, #1
 801450e:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
    if (remainder > threshold)
 8014512:	f8d7 2378 	ldr.w	r2, [r7, #888]	; 0x378
 8014516:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801451a:	429a      	cmp	r2, r3
 801451c:	dd04      	ble.n	8014528 <arm_elementwise_add_s8+0x1058>
        result++;
 801451e:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8014522:	3301      	adds	r3, #1
 8014524:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    return result;
 8014528:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 801452c:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

        input_2 = (int16_t)((a_2 >> 16) & 0x0FFFFL) << left_shift;
 8014530:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	141b      	asrs	r3, r3, #16
 8014538:	b21b      	sxth	r3, r3
 801453a:	461a      	mov	r2, r3
 801453c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8014540:	fa02 f303 	lsl.w	r3, r2, r3
 8014544:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8014548:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 801454c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8014550:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8014554:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
    q31_t result = 0;
 8014558:	2300      	movs	r3, #0
 801455a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    mult.word.low = 1 << 30;
 801455e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8014562:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014566:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 8014568:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801456c:	2300      	movs	r3, #0
 801456e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014570:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8014574:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8014578:	4618      	mov	r0, r3
 801457a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801457e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8014582:	461a      	mov	r2, r3
 8014584:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014588:	fb02 f501 	mul.w	r5, r2, r1
 801458c:	fb00 f403 	mul.w	r4, r0, r3
 8014590:	442c      	add	r4, r5
 8014592:	fba0 2302 	umull	r2, r3, r0, r2
 8014596:	18e1      	adds	r1, r4, r3
 8014598:	460b      	mov	r3, r1
 801459a:	eb18 0102 	adds.w	r1, r8, r2
 801459e:	6739      	str	r1, [r7, #112]	; 0x70
 80145a0:	eb49 0303 	adc.w	r3, r9, r3
 80145a4:	677b      	str	r3, [r7, #116]	; 0x74
 80145a6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80145aa:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 80145ae:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80145b2:	f04f 0000 	mov.w	r0, #0
 80145b6:	f04f 0100 	mov.w	r1, #0
 80145ba:	0fd0      	lsrs	r0, r2, #31
 80145bc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80145c0:	17d9      	asrs	r1, r3, #31
 80145c2:	4603      	mov	r3, r0
 80145c4:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    return result;
 80145c8:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
        SAT_INPUT(input_2, input_2_mult, input_2_shift);
 80145cc:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80145d0:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 80145d4:	425a      	negs	r2, r3
 80145d6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80145da:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 80145de:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
    q31_t result = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    const q31_t remainder_mask = (1 << exponent) - 1;
 80145e8:	2201      	movs	r2, #1
 80145ea:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 80145ee:	fa02 f303 	lsl.w	r3, r2, r3
 80145f2:	3b01      	subs	r3, #1
 80145f4:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
    int32_t remainder = remainder_mask & dividend;
 80145f8:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 80145fc:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8014600:	4013      	ands	r3, r2
 8014602:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
    result = dividend >> exponent;
 8014606:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 801460a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 801460e:	fa42 f303 	asr.w	r3, r2, r3
 8014612:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    q31_t threshold = remainder_mask >> 1;
 8014616:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 801461a:	105b      	asrs	r3, r3, #1
 801461c:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
    if (result < 0)
 8014620:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8014624:	2b00      	cmp	r3, #0
 8014626:	da04      	bge.n	8014632 <arm_elementwise_add_s8+0x1162>
        threshold++;
 8014628:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 801462c:	3301      	adds	r3, #1
 801462e:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
    if (remainder > threshold)
 8014632:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 8014636:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 801463a:	429a      	cmp	r2, r3
 801463c:	dd04      	ble.n	8014648 <arm_elementwise_add_s8+0x1178>
        result++;
 801463e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 8014642:	3301      	adds	r3, #1
 8014644:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    return result;
 8014648:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 801464c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        sum = input_1 + input_2;
 8014650:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8014654:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014658:	4413      	add	r3, r2
 801465a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 801465e:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8014662:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
 8014666:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801466a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
    q31_t result = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    mult.word.low = 1 << 30;
 8014674:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801467c:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801467e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8014682:	2300      	movs	r3, #0
 8014684:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014686:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 801468a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	; 0x3b8
 801468e:	4618      	mov	r0, r3
 8014690:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8014694:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8014698:	461a      	mov	r2, r3
 801469a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801469e:	fb02 f501 	mul.w	r5, r2, r1
 80146a2:	fb00 f403 	mul.w	r4, r0, r3
 80146a6:	442c      	add	r4, r5
 80146a8:	fba0 2302 	umull	r2, r3, r0, r2
 80146ac:	18e1      	adds	r1, r4, r3
 80146ae:	460b      	mov	r3, r1
 80146b0:	eb18 0102 	adds.w	r1, r8, r2
 80146b4:	67b9      	str	r1, [r7, #120]	; 0x78
 80146b6:	eb49 0303 	adc.w	r3, r9, r3
 80146ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80146bc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80146c0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
    result = (int32_t)(mult.long_long >> 31);
 80146c4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80146c8:	f04f 0000 	mov.w	r0, #0
 80146cc:	f04f 0100 	mov.w	r1, #0
 80146d0:	0fd0      	lsrs	r0, r2, #31
 80146d2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80146d6:	17d9      	asrs	r1, r3, #31
 80146d8:	4603      	mov	r3, r0
 80146da:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
    return result;
 80146de:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
        SAT_INPUT(sum, out_mult, out_shift);
 80146e2:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 80146e6:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 80146ea:	425a      	negs	r2, r3
 80146ec:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 80146f0:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80146f4:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
    q31_t result = 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    const q31_t remainder_mask = (1 << exponent) - 1;
 80146fe:	2201      	movs	r2, #1
 8014700:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8014704:	fa02 f303 	lsl.w	r3, r2, r3
 8014708:	3b01      	subs	r3, #1
 801470a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
    int32_t remainder = remainder_mask & dividend;
 801470e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8014712:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8014716:	4013      	ands	r3, r2
 8014718:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
    result = dividend >> exponent;
 801471c:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8014720:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8014724:	fa42 f303 	asr.w	r3, r2, r3
 8014728:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    q31_t threshold = remainder_mask >> 1;
 801472c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8014730:	105b      	asrs	r3, r3, #1
 8014732:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
    if (result < 0)
 8014736:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 801473a:	2b00      	cmp	r3, #0
 801473c:	da04      	bge.n	8014748 <arm_elementwise_add_s8+0x1278>
        threshold++;
 801473e:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8014742:	3301      	adds	r3, #1
 8014744:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
    if (remainder > threshold)
 8014748:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801474c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	; 0x3bc
 8014750:	429a      	cmp	r2, r3
 8014752:	dd04      	ble.n	801475e <arm_elementwise_add_s8+0x128e>
        result++;
 8014754:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8014758:	3301      	adds	r3, #1
 801475a:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
    return result;
 801475e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8014762:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum += out_offset;
 8014766:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801476a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801476e:	4413      	add	r3, r2
 8014770:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MAX(sum, out_activation_min);
 8014774:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014778:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801477c:	4293      	cmp	r3, r2
 801477e:	bfb8      	it	lt
 8014780:	4613      	movlt	r3, r2
 8014782:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MIN(sum, out_activation_max);
 8014786:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 801478a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801478e:	4293      	cmp	r3, r2
 8014790:	bfa8      	it	ge
 8014792:	4613      	movge	r3, r2
 8014794:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        r4 = (q7_t)sum;
 8014798:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801479c:	f887 33dc 	strb.w	r3, [r7, #988]	; 0x3dc

        write_q7x4_ia(&output, __PACKq7(r1, r2, r3, r4));
 80147a0:	f997 33df 	ldrsb.w	r3, [r7, #991]	; 0x3df
 80147a4:	b2da      	uxtb	r2, r3
 80147a6:	f997 33dd 	ldrsb.w	r3, [r7, #989]	; 0x3dd
 80147aa:	021b      	lsls	r3, r3, #8
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	431a      	orrs	r2, r3
 80147b0:	f997 33de 	ldrsb.w	r3, [r7, #990]	; 0x3de
 80147b4:	041b      	lsls	r3, r3, #16
 80147b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80147ba:	431a      	orrs	r2, r3
 80147bc:	f997 33dc 	ldrsb.w	r3, [r7, #988]	; 0x3dc
 80147c0:	061b      	lsls	r3, r3, #24
 80147c2:	431a      	orrs	r2, r3
 80147c4:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 80147c8:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
 80147cc:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 */
__STATIC_FORCEINLINE void write_q7x4_ia (
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
 80147d0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80147d4:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80147d8:	6013      	str	r3, [r2, #0]
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 80147da:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	6013      	str	r3, [r2, #0]
  (*pQ7)[1] = (val >> 8) & 0x0FF;
  (*pQ7)[2] = (val >> 16) & 0x0FF;
  (*pQ7)[3] = (val >> 24) & 0x0FF;

#endif
  *pQ7 += 4;
 80147e8:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	1d1a      	adds	r2, r3, #4
 80147f0:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80147f4:	601a      	str	r2, [r3, #0]
}
 80147f6:	bf00      	nop

        loop_count--;
 80147f8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 80147fc:	3b01      	subs	r3, #1
 80147fe:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    while (loop_count > 0U)
 8014802:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8014806:	2b00      	cmp	r3, #0
 8014808:	f47e ae8e 	bne.w	8013528 <arm_elementwise_add_s8+0x58>
    }

    loop_count = block_size & 0x3;
 801480c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8014810:	f003 0303 	and.w	r3, r3, #3
 8014814:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
#else
    loop_count = block_size;
#endif

    while (loop_count > 0U)
 8014818:	e29c      	b.n	8014d54 <arm_elementwise_add_s8+0x1884>
    {
        /* C = A + B */

        input_1 = (*input_1_vect++ + input_1_offset) << left_shift;
 801481a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8014824:	1c59      	adds	r1, r3, #1
 8014826:	6011      	str	r1, [r2, #0]
 8014828:	f993 3000 	ldrsb.w	r3, [r3]
 801482c:	461a      	mov	r2, r3
 801482e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	441a      	add	r2, r3
 8014836:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801483a:	fa02 f303 	lsl.w	r3, r2, r3
 801483e:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        input_2 = (*input_2_vect++ + input_2_offset) << left_shift;
 8014842:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801484c:	1c59      	adds	r1, r3, #1
 801484e:	6011      	str	r1, [r2, #0]
 8014850:	f993 3000 	ldrsb.w	r3, [r3]
 8014854:	461a      	mov	r2, r3
 8014856:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801485a:	441a      	add	r2, r3
 801485c:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8014860:	fa02 f303 	lsl.w	r3, r2, r3
 8014864:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8014868:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801486c:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8014870:	601a      	str	r2, [r3, #0]
 8014872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014876:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801487a:	6812      	ldr	r2, [r2, #0]
 801487c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801487e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8014882:	2200      	movs	r2, #0
 8014884:	601a      	str	r2, [r3, #0]
    q63_t mult = 1 << 30;
 8014886:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801488a:	f04f 0300 	mov.w	r3, #0
 801488e:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
    if ((m1 < 0) ^ (m2 < 0))
 8014892:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	0fdb      	lsrs	r3, r3, #31
 801489a:	b2da      	uxtb	r2, r3
 801489c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	0fdb      	lsrs	r3, r3, #31
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	4053      	eors	r3, r2
 80148a8:	b2db      	uxtb	r3, r3
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d00e      	beq.n	80148cc <arm_elementwise_add_s8+0x13fc>
        mult = 1 - mult;
 80148ae:	f04f 0001 	mov.w	r0, #1
 80148b2:	f04f 0100 	mov.w	r1, #0
 80148b6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80148ba:	1a84      	subs	r4, r0, r2
 80148bc:	61bc      	str	r4, [r7, #24]
 80148be:	eb61 0303 	sbc.w	r3, r1, r3
 80148c2:	61fb      	str	r3, [r7, #28]
 80148c4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80148c8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    mult = mult + (q63_t)m1 * m2;
 80148cc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80148d8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80148dc:	6809      	ldr	r1, [r1, #0]
 80148de:	4608      	mov	r0, r1
 80148e0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80148e4:	fb00 f503 	mul.w	r5, r0, r3
 80148e8:	fb02 f401 	mul.w	r4, r2, r1
 80148ec:	442c      	add	r4, r5
 80148ee:	fba2 2300 	umull	r2, r3, r2, r0
 80148f2:	18e1      	adds	r1, r4, r3
 80148f4:	460b      	mov	r3, r1
 80148f6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80148fa:	1884      	adds	r4, r0, r2
 80148fc:	613c      	str	r4, [r7, #16]
 80148fe:	eb41 0303 	adc.w	r3, r1, r3
 8014902:	617b      	str	r3, [r7, #20]
 8014904:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8014908:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
    result = (int32_t)(mult / (1ll << 31));
 801490c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8014910:	2a00      	cmp	r2, #0
 8014912:	f173 0100 	sbcs.w	r1, r3, #0
 8014916:	da06      	bge.n	8014926 <arm_elementwise_add_s8+0x1456>
 8014918:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801491c:	f04f 0100 	mov.w	r1, #0
 8014920:	1812      	adds	r2, r2, r0
 8014922:	eb41 0303 	adc.w	r3, r1, r3
 8014926:	f04f 0000 	mov.w	r0, #0
 801492a:	f04f 0100 	mov.w	r1, #0
 801492e:	0fd0      	lsrs	r0, r2, #31
 8014930:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014934:	17d9      	asrs	r1, r3, #31
 8014936:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801493a:	4602      	mov	r2, r0
 801493c:	601a      	str	r2, [r3, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801493e:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8014942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014946:	6812      	ldr	r2, [r2, #0]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	429a      	cmp	r2, r3
 801494c:	d10a      	bne.n	8014964 <arm_elementwise_add_s8+0x1494>
 801494e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014958:	d104      	bne.n	8014964 <arm_elementwise_add_s8+0x1494>
        result = Q31_MAX;
 801495a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801495e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8014962:	601a      	str	r2, [r3, #0]
    return result;
 8014964:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8014968:	681b      	ldr	r3, [r3, #0]

        input_1 = arm_nn_doubling_high_mult(input_1, input_1_mult);
 801496a:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
        input_1 = arm_nn_divide_by_power_of_two(input_1, -input_1_shift);
 801496e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8014972:	425a      	negs	r2, r3
 8014974:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8014978:	f8d7 13e8 	ldr.w	r1, [r7, #1000]	; 0x3e8
 801497c:	6019      	str	r1, [r3, #0]
 801497e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014982:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014984:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8014988:	2200      	movs	r2, #0
 801498a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801498c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8014990:	2201      	movs	r2, #1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	409a      	lsls	r2, r3
 8014996:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801499a:	3a01      	subs	r2, #1
 801499c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801499e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80149a2:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80149a6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80149aa:	6809      	ldr	r1, [r1, #0]
 80149ac:	6812      	ldr	r2, [r2, #0]
 80149ae:	400a      	ands	r2, r1
 80149b0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80149b2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80149b6:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80149ba:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80149be:	6809      	ldr	r1, [r1, #0]
 80149c0:	6812      	ldr	r2, [r2, #0]
 80149c2:	fa41 f202 	asr.w	r2, r1, r2
 80149c6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80149c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149cc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80149d0:	6812      	ldr	r2, [r2, #0]
 80149d2:	1052      	asrs	r2, r2, #1
 80149d4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80149d6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	da06      	bge.n	80149ee <arm_elementwise_add_s8+0x151e>
        threshold++;
 80149e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80149e8:	6812      	ldr	r2, [r2, #0]
 80149ea:	3201      	adds	r2, #1
 80149ec:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80149ee:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 80149f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80149f6:	6812      	ldr	r2, [r2, #0]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	429a      	cmp	r2, r3
 80149fc:	dd06      	ble.n	8014a0c <arm_elementwise_add_s8+0x153c>
        result++;
 80149fe:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8014a02:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8014a06:	6812      	ldr	r2, [r2, #0]
 8014a08:	3201      	adds	r2, #1
 8014a0a:	601a      	str	r2, [r3, #0]
    return result;
 8014a0c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8014a16:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014a1a:	f8d7 23e4 	ldr.w	r2, [r7, #996]	; 0x3e4
 8014a1e:	601a      	str	r2, [r3, #0]
 8014a20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a24:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 8014a28:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014a2a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8014a2e:	2200      	movs	r2, #0
 8014a30:	601a      	str	r2, [r3, #0]
    q63_t mult = 1 << 30;
 8014a32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014a36:	f04f 0300 	mov.w	r3, #0
 8014a3a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
    if ((m1 < 0) ^ (m2 < 0))
 8014a3e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	0fdb      	lsrs	r3, r3, #31
 8014a46:	b2da      	uxtb	r2, r3
 8014a48:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	0fdb      	lsrs	r3, r3, #31
 8014a50:	b2db      	uxtb	r3, r3
 8014a52:	4053      	eors	r3, r2
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d00e      	beq.n	8014a78 <arm_elementwise_add_s8+0x15a8>
        mult = 1 - mult;
 8014a5a:	f04f 0001 	mov.w	r0, #1
 8014a5e:	f04f 0100 	mov.w	r1, #0
 8014a62:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8014a66:	1a84      	subs	r4, r0, r2
 8014a68:	60bc      	str	r4, [r7, #8]
 8014a6a:	eb61 0303 	sbc.w	r3, r1, r3
 8014a6e:	60fb      	str	r3, [r7, #12]
 8014a70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014a74:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    mult = mult + (q63_t)m1 * m2;
 8014a78:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	461a      	mov	r2, r3
 8014a80:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014a84:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8014a88:	6809      	ldr	r1, [r1, #0]
 8014a8a:	4608      	mov	r0, r1
 8014a8c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8014a90:	fb00 f503 	mul.w	r5, r0, r3
 8014a94:	fb02 f401 	mul.w	r4, r2, r1
 8014a98:	442c      	add	r4, r5
 8014a9a:	fba2 2300 	umull	r2, r3, r2, r0
 8014a9e:	18e1      	adds	r1, r4, r3
 8014aa0:	460b      	mov	r3, r1
 8014aa2:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	; 0x150
 8014aa6:	1884      	adds	r4, r0, r2
 8014aa8:	603c      	str	r4, [r7, #0]
 8014aaa:	eb41 0303 	adc.w	r3, r1, r3
 8014aae:	607b      	str	r3, [r7, #4]
 8014ab0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014ab4:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
    result = (int32_t)(mult / (1ll << 31));
 8014ab8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8014abc:	2a00      	cmp	r2, #0
 8014abe:	f173 0100 	sbcs.w	r1, r3, #0
 8014ac2:	da06      	bge.n	8014ad2 <arm_elementwise_add_s8+0x1602>
 8014ac4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014ac8:	f04f 0100 	mov.w	r1, #0
 8014acc:	1812      	adds	r2, r2, r0
 8014ace:	eb41 0303 	adc.w	r3, r1, r3
 8014ad2:	f04f 0000 	mov.w	r0, #0
 8014ad6:	f04f 0100 	mov.w	r1, #0
 8014ada:	0fd0      	lsrs	r0, r2, #31
 8014adc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8014ae0:	17d9      	asrs	r1, r3, #31
 8014ae2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8014ae6:	4602      	mov	r2, r0
 8014ae8:	601a      	str	r2, [r3, #0]
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8014aea:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8014aee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8014af2:	6812      	ldr	r2, [r2, #0]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d10a      	bne.n	8014b10 <arm_elementwise_add_s8+0x1640>
 8014afa:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014b04:	d104      	bne.n	8014b10 <arm_elementwise_add_s8+0x1640>
        result = Q31_MAX;
 8014b06:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8014b0a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8014b0e:	601a      	str	r2, [r3, #0]
    return result;
 8014b10:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8014b14:	681b      	ldr	r3, [r3, #0]

        input_2 = arm_nn_doubling_high_mult(input_2, input_2_mult);
 8014b16:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
        input_2 = arm_nn_divide_by_power_of_two(input_2, -input_2_shift);
 8014b1a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8014b1e:	425a      	negs	r2, r3
 8014b20:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8014b24:	f8d7 13e4 	ldr.w	r1, [r7, #996]	; 0x3e4
 8014b28:	6019      	str	r1, [r3, #0]
 8014b2a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8014b2e:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014b30:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014b34:	2200      	movs	r2, #0
 8014b36:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014b38:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	409a      	lsls	r2, r3
 8014b42:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8014b46:	3a01      	subs	r2, #1
 8014b48:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8014b4a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8014b4e:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8014b52:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014b56:	6809      	ldr	r1, [r1, #0]
 8014b58:	6812      	ldr	r2, [r2, #0]
 8014b5a:	400a      	ands	r2, r1
 8014b5c:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8014b5e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014b62:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8014b66:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8014b6a:	6809      	ldr	r1, [r1, #0]
 8014b6c:	6812      	ldr	r2, [r2, #0]
 8014b6e:	fa41 f202 	asr.w	r2, r1, r2
 8014b72:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8014b74:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8014b78:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	1052      	asrs	r2, r2, #1
 8014b80:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8014b82:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	da06      	bge.n	8014b9a <arm_elementwise_add_s8+0x16ca>
        threshold++;
 8014b8c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8014b90:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8014b94:	6812      	ldr	r2, [r2, #0]
 8014b96:	3201      	adds	r2, #1
 8014b98:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8014b9a:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8014b9e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8014ba2:	6812      	ldr	r2, [r2, #0]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	dd06      	ble.n	8014bb8 <arm_elementwise_add_s8+0x16e8>
        result++;
 8014baa:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014bae:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8014bb2:	6812      	ldr	r2, [r2, #0]
 8014bb4:	3201      	adds	r2, #1
 8014bb6:	601a      	str	r2, [r3, #0]
    return result;
 8014bb8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4

        sum = input_1 + input_2;
 8014bc2:	f8d7 23e8 	ldr.w	r2, [r7, #1000]	; 0x3e8
 8014bc6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8014bca:	4413      	add	r3, r2
 8014bcc:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8014bd0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8014bd4:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014bd8:	601a      	str	r2, [r3, #0]
 8014bda:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8014bde:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8014be2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014be4:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8014be8:	2200      	movs	r2, #0
 8014bea:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8014bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8014bf4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8014bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8014bfe:	e9d7 8942 	ldrd	r8, r9, [r7, #264]	; 0x108
 8014c02:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8014c0e:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	461a      	mov	r2, r3
 8014c16:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8014c1a:	fb02 f501 	mul.w	r5, r2, r1
 8014c1e:	fb00 f403 	mul.w	r4, r0, r3
 8014c22:	442c      	add	r4, r5
 8014c24:	fba0 2302 	umull	r2, r3, r0, r2
 8014c28:	18e1      	adds	r1, r4, r3
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	eb18 0a02 	adds.w	sl, r8, r2
 8014c30:	eb49 0b03 	adc.w	fp, r9, r3
 8014c34:	e9c7 ab42 	strd	sl, fp, [r7, #264]	; 0x108
    result = (int32_t)(mult.long_long >> 31);
 8014c38:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	; 0x108
 8014c3c:	f04f 0200 	mov.w	r2, #0
 8014c40:	f04f 0300 	mov.w	r3, #0
 8014c44:	0fc2      	lsrs	r2, r0, #31
 8014c46:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8014c4a:	17cb      	asrs	r3, r1, #31
 8014c4c:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8014c50:	4613      	mov	r3, r2
 8014c52:	600b      	str	r3, [r1, #0]
    return result;
 8014c54:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8014c58:	681b      	ldr	r3, [r3, #0]
        SAT_INPUT(sum, out_mult, out_shift);
 8014c5a:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8014c5e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8014c62:	425a      	negs	r2, r3
 8014c64:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8014c68:	f8d7 13e0 	ldr.w	r1, [r7, #992]	; 0x3e0
 8014c6c:	6019      	str	r1, [r3, #0]
 8014c6e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8014c72:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8014c74:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014c78:	2200      	movs	r2, #0
 8014c7a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8014c7c:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8014c80:	2201      	movs	r2, #1
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	409a      	lsls	r2, r3
 8014c86:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8014c8a:	3a01      	subs	r2, #1
 8014c8c:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8014c8e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8014c92:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8014c96:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8014c9a:	6809      	ldr	r1, [r1, #0]
 8014c9c:	6812      	ldr	r2, [r2, #0]
 8014c9e:	400a      	ands	r2, r1
 8014ca0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8014ca2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014ca6:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8014caa:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8014cae:	6809      	ldr	r1, [r1, #0]
 8014cb0:	6812      	ldr	r2, [r2, #0]
 8014cb2:	fa41 f202 	asr.w	r2, r1, r2
 8014cb6:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8014cb8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8014cbc:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8014cc0:	6812      	ldr	r2, [r2, #0]
 8014cc2:	1052      	asrs	r2, r2, #1
 8014cc4:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8014cc6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	da06      	bge.n	8014cde <arm_elementwise_add_s8+0x180e>
        threshold++;
 8014cd0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8014cd4:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8014cd8:	6812      	ldr	r2, [r2, #0]
 8014cda:	3201      	adds	r2, #1
 8014cdc:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8014cde:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8014ce2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8014ce6:	6812      	ldr	r2, [r2, #0]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	429a      	cmp	r2, r3
 8014cec:	dd06      	ble.n	8014cfc <arm_elementwise_add_s8+0x182c>
        result++;
 8014cee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014cf2:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8014cf6:	6812      	ldr	r2, [r2, #0]
 8014cf8:	3201      	adds	r2, #1
 8014cfa:	601a      	str	r2, [r3, #0]
    return result;
 8014cfc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum += out_offset;
 8014d06:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014d0a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8014d0e:	4413      	add	r3, r2
 8014d10:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        sum = MAX(sum, out_activation_min);
 8014d14:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014d18:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8014d1c:	4293      	cmp	r3, r2
 8014d1e:	bfb8      	it	lt
 8014d20:	4613      	movlt	r3, r2
 8014d22:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        sum = MIN(sum, out_activation_max);
 8014d26:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014d2a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	bfa8      	it	ge
 8014d32:	4613      	movge	r3, r2
 8014d34:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

        *output++ = (q7_t)sum;
 8014d38:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8014d3c:	1c5a      	adds	r2, r3, #1
 8014d3e:	f8c7 242c 	str.w	r2, [r7, #1068]	; 0x42c
 8014d42:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8014d46:	b252      	sxtb	r2, r2
 8014d48:	701a      	strb	r2, [r3, #0]

        /* Decrement loop counter */
        loop_count--;
 8014d4a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8014d4e:	3b01      	subs	r3, #1
 8014d50:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
    while (loop_count > 0U)
 8014d54:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f47f ad5e 	bne.w	801481a <arm_elementwise_add_s8+0x134a>
    }

#endif /* ARM_MATH_MVEI */

    return (ARM_MATH_SUCCESS);
 8014d5e:	2300      	movs	r3, #0
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	f507 777f 	add.w	r7, r7, #1020	; 0x3fc
 8014d66:	46bd      	mov	sp, r7
 8014d68:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014d6c:	4770      	bx	lr

08014d6e <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output_data)
{
 8014d6e:	b580      	push	{r7, lr}
 8014d70:	b08e      	sub	sp, #56	; 0x38
 8014d72:	af08      	add	r7, sp, #32
 8014d74:	60f8      	str	r0, [r7, #12]
 8014d76:	60b9      	str	r1, [r7, #8]
 8014d78:	607a      	str	r2, [r7, #4]
 8014d7a:	603b      	str	r3, [r7, #0]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	75fb      	strb	r3, [r7, #23]
    if (output_dims->w % 4 != 0)
 8014d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	f003 0303 	and.w	r3, r3, #3
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d002      	beq.n	8014d92 <arm_convolve_1_x_n_s8+0x24>
    {
        status = ARM_MATH_SIZE_MISMATCH;
 8014d8c:	23fd      	movs	r3, #253	; 0xfd
 8014d8e:	75fb      	strb	r3, [r7, #23]
        goto out;
 8014d90:	e015      	b.n	8014dbe <arm_convolve_1_x_n_s8+0x50>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 8014d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d94:	9306      	str	r3, [sp, #24]
 8014d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d98:	9305      	str	r3, [sp, #20]
 8014d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d9c:	9304      	str	r3, [sp, #16]
 8014d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da0:	9303      	str	r3, [sp, #12]
 8014da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014da4:	9302      	str	r3, [sp, #8]
 8014da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014da8:	9301      	str	r3, [sp, #4]
 8014daa:	6a3b      	ldr	r3, [r7, #32]
 8014dac:	9300      	str	r3, [sp, #0]
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	687a      	ldr	r2, [r7, #4]
 8014db2:	68b9      	ldr	r1, [r7, #8]
 8014db4:	68f8      	ldr	r0, [r7, #12]
 8014db6:	f000 f87d 	bl	8014eb4 <arm_convolve_s8>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	75fb      	strb	r3, [r7, #23]
                             output_data);
#endif

out:
    /* Return to application */
    return status;
 8014dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3718      	adds	r7, #24
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}

08014dca <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 8014dca:	b480      	push	{r7}
 8014dcc:	b083      	sub	sp, #12
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	6078      	str	r0, [r7, #4]
 8014dd2:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	683a      	ldr	r2, [r7, #0]
 8014dda:	6892      	ldr	r2, [r2, #8]
 8014ddc:	fb02 f303 	mul.w	r3, r2, r3
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	6852      	ldr	r2, [r2, #4]
 8014de4:	fb02 f303 	mul.w	r3, r2, r3
 8014de8:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	370c      	adds	r7, #12
 8014dee:	46bd      	mov	sp, r7
 8014df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df4:	4770      	bx	lr

08014df6 <arm_convolve_1x1_s8_fast>:
                                    const q7_t *filter_data,
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
 8014df6:	b5b0      	push	{r4, r5, r7, lr}
 8014df8:	b092      	sub	sp, #72	; 0x48
 8014dfa:	af0a      	add	r7, sp, #40	; 0x28
 8014dfc:	60f8      	str	r0, [r7, #12]
 8014dfe:	60b9      	str	r1, [r7, #8]
 8014e00:	607a      	str	r2, [r7, #4]
 8014e02:	603b      	str	r3, [r7, #0]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	68db      	ldr	r3, [r3, #12]
 8014e08:	f003 0303 	and.w	r3, r3, #3
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d10f      	bne.n	8014e30 <arm_convolve_1x1_s8_fast+0x3a>
 8014e10:	68bb      	ldr	r3, [r7, #8]
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d10b      	bne.n	8014e30 <arm_convolve_1x1_s8_fast+0x3a>
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	695b      	ldr	r3, [r3, #20]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d107      	bne.n	8014e30 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	689b      	ldr	r3, [r3, #8]
    if (input_dims->c % 4 != 0 || conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 8014e24:	2b01      	cmp	r3, #1
 8014e26:	d103      	bne.n	8014e30 <arm_convolve_1x1_s8_fast+0x3a>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	2b01      	cmp	r3, #1
 8014e2e:	d002      	beq.n	8014e36 <arm_convolve_1x1_s8_fast+0x40>
    {
        return ARM_MATH_SIZE_MISMATCH;
 8014e30:	f06f 0302 	mvn.w	r3, #2
 8014e34:	e02f      	b.n	8014e96 <arm_convolve_1x1_s8_fast+0xa0>
    }

#else
    /* Run the following code as reference implementation for Cortex-M processors with or without DSP extension */

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 8014e36:	683b      	ldr	r3, [r7, #0]
 8014e38:	689b      	ldr	r3, [r3, #8]
 8014e3a:	683a      	ldr	r2, [r7, #0]
 8014e3c:	6852      	ldr	r2, [r2, #4]
 8014e3e:	fb02 f303 	mul.w	r3, r2, r3
 8014e42:	683a      	ldr	r2, [r7, #0]
 8014e44:	6812      	ldr	r2, [r2, #0]
 8014e46:	fb02 f303 	mul.w	r3, r2, r3
 8014e4a:	61fb      	str	r3, [r7, #28]
    const int32_t rhs_rows = output_dims->c;
 8014e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e4e:	68db      	ldr	r3, [r3, #12]
 8014e50:	61bb      	str	r3, [r7, #24]
    const int32_t rhs_cols = input_dims->c;
 8014e52:	683b      	ldr	r3, [r7, #0]
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	617b      	str	r3, [r7, #20]

    arm_nn_mat_mult_nt_t_s8(input_data,
                            filter_data,
                            bias_data,
                            output_data,
                            quant_params->multiplier,
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	681b      	ldr	r3, [r3, #0]
                            quant_params->shift,
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	6852      	ldr	r2, [r2, #4]
    arm_nn_mat_mult_nt_t_s8(input_data,
 8014e60:	68b9      	ldr	r1, [r7, #8]
 8014e62:	6809      	ldr	r1, [r1, #0]
 8014e64:	68b8      	ldr	r0, [r7, #8]
 8014e66:	6840      	ldr	r0, [r0, #4]
 8014e68:	68bc      	ldr	r4, [r7, #8]
 8014e6a:	6a24      	ldr	r4, [r4, #32]
 8014e6c:	68bd      	ldr	r5, [r7, #8]
 8014e6e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8014e70:	9508      	str	r5, [sp, #32]
 8014e72:	9407      	str	r4, [sp, #28]
 8014e74:	9006      	str	r0, [sp, #24]
 8014e76:	9105      	str	r1, [sp, #20]
 8014e78:	6979      	ldr	r1, [r7, #20]
 8014e7a:	9104      	str	r1, [sp, #16]
 8014e7c:	69b9      	ldr	r1, [r7, #24]
 8014e7e:	9103      	str	r1, [sp, #12]
 8014e80:	69f9      	ldr	r1, [r7, #28]
 8014e82:	9102      	str	r1, [sp, #8]
 8014e84:	9201      	str	r2, [sp, #4]
 8014e86:	9300      	str	r3, [sp, #0]
 8014e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e90:	f005 f95a 	bl	801a148 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3720      	adds	r7, #32
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bdb0      	pop	{r4, r5, r7, pc}

08014e9e <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
 8014e9e:	b480      	push	{r7}
 8014ea0:	b083      	sub	sp, #12
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	6078      	str	r0, [r7, #4]
    (void)input_dims;
    return 0;
 8014ea6:	2300      	movs	r3, #0
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	370c      	adds	r7, #12
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims *bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims *output_dims,
                           q7_t *output_data)
{
 8014eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014eb8:	b0db      	sub	sp, #364	; 0x16c
 8014eba:	af08      	add	r7, sp, #32
 8014ebc:	f107 040c 	add.w	r4, r7, #12
 8014ec0:	6020      	str	r0, [r4, #0]
 8014ec2:	f107 0008 	add.w	r0, r7, #8
 8014ec6:	6001      	str	r1, [r0, #0]
 8014ec8:	1d39      	adds	r1, r7, #4
 8014eca:	600a      	str	r2, [r1, #0]
 8014ecc:	463a      	mov	r2, r7
 8014ece:	6013      	str	r3, [r2, #0]
    (void)bias_dims;
    q15_t *buffer_a = (q15_t *)ctx->buf;
 8014ed0:	f107 030c 	add.w	r3, r7, #12
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    const uint16_t input_batches = input_dims->n;
 8014edc:	463b      	mov	r3, r7
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
    const uint16_t input_x = input_dims->w;
 8014ee6:	463b      	mov	r3, r7
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
    const uint16_t input_y = input_dims->h;
 8014ef0:	463b      	mov	r3, r7
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	685b      	ldr	r3, [r3, #4]
 8014ef6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
    const uint16_t input_ch = input_dims->c;
 8014efa:	463b      	mov	r3, r7
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
    const uint16_t kernel_x = filter_dims->w;
 8014f04:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014f08:	689b      	ldr	r3, [r3, #8]
 8014f0a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
    const uint16_t kernel_y = filter_dims->h;
 8014f0e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
    const uint16_t output_x = output_dims->w;
 8014f18:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014f1c:	689b      	ldr	r3, [r3, #8]
 8014f1e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
    const uint16_t output_y = output_dims->h;
 8014f22:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    const uint16_t output_ch = output_dims->c;
 8014f2c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8014f30:	68db      	ldr	r3, [r3, #12]
 8014f32:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    const uint16_t pad_x = conv_params->padding.w;
 8014f36:	f107 0308 	add.w	r3, r7, #8
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
    const uint16_t pad_y = conv_params->padding.h;
 8014f42:	f107 0308 	add.w	r3, r7, #8
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	695b      	ldr	r3, [r3, #20]
 8014f4a:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
    const uint16_t stride_x = conv_params->stride.w;
 8014f4e:	f107 0308 	add.w	r3, r7, #8
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	689b      	ldr	r3, [r3, #8]
 8014f56:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
    const uint16_t stride_y = conv_params->stride.h;
 8014f5a:	f107 0308 	add.w	r3, r7, #8
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    const int32_t input_offset = conv_params->input_offset;
 8014f66:	f107 0308 	add.w	r3, r7, #8
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const int32_t out_offset = conv_params->output_offset;
 8014f72:	f107 0308 	add.w	r3, r7, #8
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	685b      	ldr	r3, [r3, #4]
 8014f7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    const int32_t out_activation_min = conv_params->activation.min;
 8014f7e:	f107 0308 	add.w	r3, r7, #8
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	6a1b      	ldr	r3, [r3, #32]
 8014f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    const int32_t out_activation_max = conv_params->activation.max;
 8014f8a:	f107 0308 	add.w	r3, r7, #8
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    int32_t *output_mult = quant_params->multiplier;
 8014f96:	1d3b      	adds	r3, r7, #4
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    int32_t *output_shift = quant_params->shift;
 8014fa0:	1d3b      	adds	r3, r7, #4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8014faa:	2300      	movs	r3, #0
 8014fac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8014fb0:	e337      	b.n	8015622 <arm_convolve_s8+0x76e>
		#ifdef OVERLAY_FW
		uint32_t receptiveFieldSize = 4 * kernel_x * kernel_y * input_ch;
		if ( receptiveFieldSize < TENSOR_BUFFER_SIZE )
			buffer_a  = (q15_t *)&oc_input2_tensors_buffers_1[0];
		#endif
        q15_t *two_column_buf = buffer_a;
 8014fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014fb6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
        q7_t *out = output_data;
 8014fba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8014fbe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        /* This part implements the im2col function */
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8014fc8:	e0da      	b.n	8015180 <arm_convolve_s8+0x2cc>
        {
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8014fd0:	e0ca      	b.n	8015168 <arm_convolve_s8+0x2b4>
            {
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 8014fd2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8014fd6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8014fda:	fb02 f203 	mul.w	r2, r2, r3
 8014fde:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8014fe2:	1ad3      	subs	r3, r2, r3
 8014fe4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8014fe8:	e065      	b.n	80150b6 <arm_convolve_s8+0x202>
                {	// i_ker_x and i_ker_y used to index through pixels in input image receptive field that produced output pixel i_out_x, i_out_y
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 8014fea:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8014fee:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014ff2:	fb02 f203 	mul.w	r2, r2, r3
 8014ff6:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8014ffa:	1ad3      	subs	r3, r2, r3
 8014ffc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8015000:	e044      	b.n	801508c <arm_convolve_s8+0x1d8>
                    {
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)		// only true when padding used
 8015002:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8015006:	2b00      	cmp	r3, #0
 8015008:	db0f      	blt.n	801502a <arm_convolve_s8+0x176>
 801500a:	f8b7 3112 	ldrh.w	r3, [r7, #274]	; 0x112
 801500e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015012:	429a      	cmp	r2, r3
 8015014:	da09      	bge.n	801502a <arm_convolve_s8+0x176>
 8015016:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801501a:	2b00      	cmp	r3, #0
 801501c:	db05      	blt.n	801502a <arm_convolve_s8+0x176>
 801501e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8015022:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8015026:	429a      	cmp	r2, r3
 8015028:	db09      	blt.n	801503e <arm_convolve_s8+0x18a>
                        {
                            /* Filling 0 for out-of-bound paddings */
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 801502a:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	461a      	mov	r2, r3
 8015032:	2100      	movs	r1, #0
 8015034:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8015038:	f00c fdfc 	bl	8021c34 <memset>
 801503c:	e019      	b.n	8015072 <arm_convolve_s8+0x1be>
                        }
                        else
                        {
                            /* Copying the pixel data to column */
                        	// subtract the amount of data that has already been processed and this should work fine
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch,
 801503e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8015042:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8015046:	fb02 f203 	mul.w	r2, r2, r3
 801504a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801504e:	4413      	add	r3, r2
 8015050:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8015054:	fb02 f303 	mul.w	r3, r2, r3
 8015058:	461a      	mov	r2, r3
 801505a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801505e:	1898      	adds	r0, r3, r2
 8015060:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8015064:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8015068:	b21b      	sxth	r3, r3
 801506a:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801506e:	f008 fb6f 	bl	801d750 <arm_q7_to_q15_with_offset>
                                                      two_column_buf,
                                                      input_ch,
                                                      input_offset);
                        }
                        // one pixel at a time added to im2col buffer
                        two_column_buf += input_ch; // two column since two 16 bit operands in multiplication with 32 bit multiplier?
 8015072:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801507c:	4413      	add	r3, r2
 801507e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 8015082:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8015086:	3301      	adds	r3, #1
 8015088:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 801508c:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
 8015090:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015094:	fb02 f203 	mul.w	r2, r2, r3
 8015098:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 801509c:	1ad2      	subs	r2, r2, r3
 801509e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80150a2:	4413      	add	r3, r2
 80150a4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80150a8:	429a      	cmp	r2, r3
 80150aa:	dbaa      	blt.n	8015002 <arm_convolve_s8+0x14e>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 80150ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80150b0:	3301      	adds	r3, #1
 80150b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80150b6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80150ba:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80150be:	fb02 f203 	mul.w	r2, r2, r3
 80150c2:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80150c6:	1ad2      	subs	r2, r2, r3
 80150c8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80150cc:	4413      	add	r3, r2
 80150ce:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80150d2:	429a      	cmp	r2, r3
 80150d4:	db89      	blt.n	8014fea <arm_convolve_s8+0x136>
                    }
                }

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 80150d6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80150da:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 80150de:	fb02 f303 	mul.w	r3, r2, r3
 80150e2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80150e6:	fb02 f303 	mul.w	r3, r2, r3
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80150f0:	4413      	add	r3, r2
 80150f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d131      	bne.n	801515e <arm_convolve_s8+0x2aa>
                {
                    out = arm_nn_mat_mult_kernel_s8_s16(filter_data,
 80150fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80150fe:	b21b      	sxth	r3, r3
 8015100:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015104:	b212      	sxth	r2, r2
 8015106:	f8b7 0110 	ldrh.w	r0, [r7, #272]	; 0x110
 801510a:	f8b7 110c 	ldrh.w	r1, [r7, #268]	; 0x10c
 801510e:	fb10 f101 	smulbb	r1, r0, r1
 8015112:	b289      	uxth	r1, r1
 8015114:	f8b7 010e 	ldrh.w	r0, [r7, #270]	; 0x10e
 8015118:	fb10 f101 	smulbb	r1, r0, r1
 801511c:	b289      	uxth	r1, r1
 801511e:	f8b7 4106 	ldrh.w	r4, [r7, #262]	; 0x106
 8015122:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8015126:	9006      	str	r0, [sp, #24]
 8015128:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 801512c:	9005      	str	r0, [sp, #20]
 801512e:	9104      	str	r1, [sp, #16]
 8015130:	9203      	str	r2, [sp, #12]
 8015132:	9302      	str	r3, [sp, #8]
 8015134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015138:	9301      	str	r3, [sp, #4]
 801513a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801513e:	9300      	str	r3, [sp, #0]
 8015140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015144:	4622      	mov	r2, r4
 8015146:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801514a:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 801514e:	f003 fcdb 	bl	8018b08 <arm_nn_mat_mult_kernel_s8_s16>
 8015152:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
                                                        input_ch * kernel_y * kernel_x,
                                                        bias_data,
                                                        out);

                    /* counter reset */
                    two_column_buf = buffer_a;
 8015156:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801515a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 801515e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8015162:	3301      	adds	r3, #1
 8015164:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8015168:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 801516c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8015170:	429a      	cmp	r2, r3
 8015172:	f6ff af2e 	blt.w	8014fd2 <arm_convolve_s8+0x11e>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 8015176:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801517a:	3301      	adds	r3, #1
 801517c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8015180:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
 8015184:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8015188:	429a      	cmp	r2, r3
 801518a:	f6ff af1e 	blt.w	8014fca <arm_convolve_s8+0x116>
                }
            }
        }

        /* left-over because odd number of output pixels */
        if (two_column_buf != buffer_a)
 801518e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8015192:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8015196:	429a      	cmp	r2, r3
 8015198:	f000 821e 	beq.w	80155d8 <arm_convolve_s8+0x724>
        {
            const q7_t *ker_a = filter_data;
 801519c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80151a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
            int i;

            for (i = 0; i < output_ch; i++)
 80151a4:	2300      	movs	r3, #0
 80151a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80151aa:	e20e      	b.n	80155ca <arm_convolve_s8+0x716>
            {
                /* Load the accumulator with bias first */
                q31_t sum = 0;
 80151ac:	2300      	movs	r3, #0
 80151ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                if (bias_data)
 80151b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d008      	beq.n	80151cc <arm_convolve_s8+0x318>
                {
                    sum = bias_data[i];
 80151ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80151be:	009b      	lsls	r3, r3, #2
 80151c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80151c4:	4413      	add	r3, r2
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                }

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;
 80151cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80151d0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80151d4:	601a      	str	r2, [r3, #0]

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 80151d6:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 80151da:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 80151de:	fb02 f303 	mul.w	r3, r2, r3
 80151e2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80151e6:	fb02 f303 	mul.w	r3, r2, r3
 80151ea:	109b      	asrs	r3, r3, #2
 80151ec:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

                while (col_count)
 80151f0:	e0ea      	b.n	80153c8 <arm_convolve_s8+0x514>
 80151f2:	f107 031c 	add.w	r3, r7, #28
 80151f6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80151fa:	601a      	str	r2, [r3, #0]
 80151fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015204:	f107 0320 	add.w	r3, r7, #32
 8015208:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801520c:	f107 031c 	add.w	r3, r7, #28
 8015210:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    memcpy(&val, *in_q7, 4);
 8015214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	461a      	mov	r2, r3
 801521e:	f107 0318 	add.w	r3, r7, #24
 8015222:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8015224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	1d1a      	adds	r2, r3, #4
 801522c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8015230:	601a      	str	r2, [r3, #0]
    return (val);
 8015232:	f107 0318 	add.w	r3, r7, #24
 8015236:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8015238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 801523c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015244:	2308      	movs	r3, #8
 8015246:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  op2 %= 32U;
 801524a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801524e:	f003 031f 	and.w	r3, r3, #31
 8015252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (op2 == 0U)
 8015256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801525a:	2b00      	cmp	r3, #0
 801525c:	d102      	bne.n	8015264 <arm_convolve_s8+0x3b0>
    return op1;
 801525e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015262:	e005      	b.n	8015270 <arm_convolve_s8+0x3bc>
  return (op1 >> op2) | (op1 << (32U - op2));
 8015264:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8015268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801526c:	fa62 f303 	ror.w	r3, r2, r3
 8015270:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015274:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015278:	fa2f f383 	sxtb16	r3, r3
 801527c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return(result);
 8015280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015284:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    q31_t inAbuf2 = __SXTB16(inA);
 8015288:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801528c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8015290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015294:	fa2f f383 	sxtb16	r3, r3
 8015298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return(result);
 801529c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80152a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 80152a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80152aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80152ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80152b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80152b2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80152b4:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 80152b8:	677b      	str	r3, [r7, #116]	; 0x74
 80152ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80152bc:	461a      	mov	r2, r3
 80152be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80152c2:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 80152c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80152c8:	673b      	str	r3, [r7, #112]	; 0x70
 80152ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80152ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80152d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80152d4:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 80152d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80152da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80152dc:	461a      	mov	r2, r3
 80152de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80152e2:	601a      	str	r2, [r3, #0]
    return source;
 80152e4:	f107 031c 	add.w	r3, r7, #28
 80152e8:	681b      	ldr	r3, [r3, #0]
                {
                    q31_t ker_a1, ker_a2;
                    q31_t ip_b1, ip_b2;

                    ker_a = read_and_pad(ker_a, &ker_a1, &ker_a2);
 80152ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80152ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80152f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    memcpy(&val, *in_q15, 4);
 80152f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	461a      	mov	r2, r3
 8015300:	f107 0314 	add.w	r3, r7, #20
 8015304:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8015306:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	1d1a      	adds	r2, r3, #4
 801530e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8015312:	601a      	str	r2, [r3, #0]
    return (val);
 8015314:	f107 0314 	add.w	r3, r7, #20
 8015318:	681b      	ldr	r3, [r3, #0]

                    ip_b1 = arm_nn_read_q15x2_ia(&ip_as_col);
 801531a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                    sum = __SMLAD(ker_a1, ip_b1, sum);
 801531e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	4619      	mov	r1, r3
 8015326:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801532a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801532e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8015332:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015336:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801533a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801533e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8015342:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8015346:	fb23 1302 	smlad	r3, r3, r2, r1
 801534a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return(result);
 801534e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8015352:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8015356:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801535a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    memcpy(&val, *in_q15, 4);
 801535e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	461a      	mov	r2, r3
 8015368:	f107 0310 	add.w	r3, r7, #16
 801536c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801536e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	1d1a      	adds	r2, r3, #4
 8015376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801537a:	601a      	str	r2, [r3, #0]
    return (val);
 801537c:	f107 0310 	add.w	r3, r7, #16
 8015380:	681b      	ldr	r3, [r3, #0]
                    ip_b2 = arm_nn_read_q15x2_ia(&ip_as_col);
 8015382:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    sum = __SMLAD(ker_a2, ip_b2, sum);
 8015386:	f107 0320 	add.w	r3, r7, #32
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	4619      	mov	r1, r3
 801538e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8015392:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8015396:	f8c7 10d4 	str.w	r1, [r7, #212]	; 0xd4
 801539a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801539e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80153a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80153a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80153aa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80153ae:	fb23 1302 	smlad	r3, r3, r2, r1
 80153b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  return(result);
 80153b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80153ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                    col_count--;
 80153be:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80153c2:	3b01      	subs	r3, #1
 80153c4:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 80153c8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	f47f af10 	bne.w	80151f2 <arm_convolve_s8+0x33e>
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 80153d2:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80153d6:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80153da:	fb12 f303 	smulbb	r3, r2, r3
 80153de:	b29b      	uxth	r3, r3
 80153e0:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80153e4:	fb12 f303 	smulbb	r3, r2, r3
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	f003 0303 	and.w	r3, r3, #3
 80153ee:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 80153f2:	e021      	b.n	8015438 <arm_convolve_s8+0x584>
                {
                    q7_t ker_a1 = *ker_a++;
 80153f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80153f8:	1c5a      	adds	r2, r3, #1
 80153fa:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
                    q15_t ip_b1 = *ip_as_col++;
 8015404:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	1c99      	adds	r1, r3, #2
 801540c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015410:	6011      	str	r1, [r2, #0]
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
                    sum += ker_a1 * ip_b1;
 8015418:	f997 30e3 	ldrsb.w	r3, [r7, #227]	; 0xe3
 801541c:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	; 0xe0
 8015420:	fb02 f303 	mul.w	r3, r2, r3
 8015424:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015428:	4413      	add	r3, r2
 801542a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                    col_count--;
 801542e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8015432:	3b01      	subs	r3, #1
 8015434:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
                while (col_count)
 8015438:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 801543c:	2b00      	cmp	r3, #0
 801543e:	d1d9      	bne.n	80153f4 <arm_convolve_s8+0x540>
                }

                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 8015440:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015444:	009b      	lsls	r3, r3, #2
 8015446:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801544a:	4413      	add	r3, r2
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8015458:	440b      	add	r3, r1
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8015460:	6679      	str	r1, [r7, #100]	; 0x64
 8015462:	663a      	str	r2, [r7, #96]	; 0x60
 8015464:	65fb      	str	r3, [r7, #92]	; 0x5c
 * @return          Returns (val * multiplier)/(2 ^ shift)
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015468:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801546c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801546e:	fa02 f303 	lsl.w	r3, r2, r3
 8015472:	65bb      	str	r3, [r7, #88]	; 0x58
 8015474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015476:	657b      	str	r3, [r7, #84]	; 0x54
    q31_t result = 0;
 8015478:	2300      	movs	r3, #0
 801547a:	653b      	str	r3, [r7, #80]	; 0x50
    mult.word.low = 1 << 30;
 801547c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015480:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015484:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8015486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801548a:	2200      	movs	r2, #0
 801548c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801548e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8015492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015494:	4618      	mov	r0, r3
 8015496:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801549a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801549c:	461a      	mov	r2, r3
 801549e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80154a2:	fb02 fc01 	mul.w	ip, r2, r1
 80154a6:	fb00 f603 	mul.w	r6, r0, r3
 80154aa:	4466      	add	r6, ip
 80154ac:	fba0 2302 	umull	r2, r3, r0, r2
 80154b0:	18f1      	adds	r1, r6, r3
 80154b2:	460b      	mov	r3, r1
 80154b4:	eb14 0802 	adds.w	r8, r4, r2
 80154b8:	eb45 0903 	adc.w	r9, r5, r3
 80154bc:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 80154c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80154c4:	f04f 0200 	mov.w	r2, #0
 80154c8:	f04f 0300 	mov.w	r3, #0
 80154cc:	0fc2      	lsrs	r2, r0, #31
 80154ce:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80154d2:	17cb      	asrs	r3, r1, #31
 80154d4:	4613      	mov	r3, r2
 80154d6:	653b      	str	r3, [r7, #80]	; 0x50
    return result;
 80154d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80154da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154dc:	2b00      	cmp	r3, #0
 80154de:	dc02      	bgt.n	80154e6 <arm_convolve_s8+0x632>
 80154e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154e2:	425b      	negs	r3, r3
 80154e4:	e000      	b.n	80154e8 <arm_convolve_s8+0x634>
 80154e6:	2300      	movs	r3, #0
 80154e8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80154ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80154ee:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80154f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80154f4:	2200      	movs	r2, #0
 80154f6:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80154f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80154fc:	2201      	movs	r2, #1
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	409a      	lsls	r2, r3
 8015502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015506:	3a01      	subs	r2, #1
 8015508:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801550a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801550e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015512:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015514:	6812      	ldr	r2, [r2, #0]
 8015516:	400a      	ands	r2, r1
 8015518:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801551a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801551e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015522:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8015524:	6812      	ldr	r2, [r2, #0]
 8015526:	fa41 f202 	asr.w	r2, r1, r2
 801552a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801552c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015530:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015534:	6812      	ldr	r2, [r2, #0]
 8015536:	1052      	asrs	r2, r2, #1
 8015538:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801553a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2b00      	cmp	r3, #0
 8015542:	da06      	bge.n	8015552 <arm_convolve_s8+0x69e>
        threshold++;
 8015544:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015548:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801554c:	6812      	ldr	r2, [r2, #0]
 801554e:	3201      	adds	r2, #1
 8015550:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8015552:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8015556:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801555a:	6812      	ldr	r2, [r2, #0]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	429a      	cmp	r2, r3
 8015560:	dd06      	ble.n	8015570 <arm_convolve_s8+0x6bc>
        result++;
 8015562:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015566:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801556a:	6812      	ldr	r2, [r2, #0]
 801556c:	3201      	adds	r2, #1
 801556e:	601a      	str	r2, [r3, #0]
    return result;
 8015570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015574:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015576:	bf00      	nop
 8015578:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum += out_offset;
 801557c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8015580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015584:	4413      	add	r3, r2
 8015586:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MAX(sum, out_activation_min);
 801558a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801558e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8015592:	4293      	cmp	r3, r2
 8015594:	bfb8      	it	lt
 8015596:	4613      	movlt	r3, r2
 8015598:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                sum = MIN(sum, out_activation_max);
 801559c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80155a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80155a4:	4293      	cmp	r3, r2
 80155a6:	bfa8      	it	ge
 80155a8:	4613      	movge	r3, r2
 80155aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                *out++ = (q7_t)sum;
 80155ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80155b2:	1c5a      	adds	r2, r3, #1
 80155b4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80155b8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80155bc:	b252      	sxtb	r2, r2
 80155be:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_ch; i++)
 80155c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80155c4:	3301      	adds	r3, #1
 80155c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80155ca:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80155ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80155d2:	429a      	cmp	r2, r3
 80155d4:	f6ff adea 	blt.w	80151ac <arm_convolve_s8+0x2f8>
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 80155d8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80155dc:	f8b7 2112 	ldrh.w	r2, [r7, #274]	; 0x112
 80155e0:	fb02 f303 	mul.w	r3, r2, r3
 80155e4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 80155e8:	fb02 f303 	mul.w	r3, r2, r3
 80155ec:	461a      	mov	r2, r3
 80155ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80155f2:	4413      	add	r3, r2
 80155f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
        output_data += (output_x * output_y * output_ch);
 80155f8:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80155fc:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8015600:	fb02 f303 	mul.w	r3, r2, r3
 8015604:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8015608:	fb02 f303 	mul.w	r3, r2, r3
 801560c:	461a      	mov	r2, r3
 801560e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015612:	4413      	add	r3, r2
 8015614:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 8015618:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801561c:	3301      	adds	r3, #1
 801561e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8015622:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8015626:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801562a:	429a      	cmp	r2, r3
 801562c:	f6ff acc1 	blt.w	8014fb2 <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 8015630:	2300      	movs	r3, #0
}
 8015632:	4618      	mov	r0, r3
 8015634:	f507 77a6 	add.w	r7, r7, #332	; 0x14c
 8015638:	46bd      	mov	sp, r7
 801563a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801563e <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 801563e:	b480      	push	{r7}
 8015640:	b083      	sub	sp, #12
 8015642:	af00      	add	r7, sp, #0
 8015644:	6078      	str	r0, [r7, #4]
 8015646:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	683a      	ldr	r2, [r7, #0]
 801564e:	6892      	ldr	r2, [r2, #8]
 8015650:	fb02 f303 	mul.w	r3, r2, r3
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	6852      	ldr	r2, [r2, #4]
 8015658:	fb02 f303 	mul.w	r3, r2, r3
 801565c:	009b      	lsls	r3, r3, #2
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 801565e:	4618      	mov	r0, r3
 8015660:	370c      	adds	r7, #12
 8015662:	46bd      	mov	sp, r7
 8015664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015668:	4770      	bx	lr

0801566a <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims *bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims *output_dims,
                                   q7_t *output_data)
{
 801566a:	b580      	push	{r7, lr}
 801566c:	b08c      	sub	sp, #48	; 0x30
 801566e:	af08      	add	r7, sp, #32
 8015670:	60f8      	str	r0, [r7, #12]
 8015672:	60b9      	str	r1, [r7, #8]
 8015674:	607a      	str	r2, [r7, #4]
 8015676:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	691b      	ldr	r3, [r3, #16]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d12f      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
 8015680:	68bb      	ldr	r3, [r7, #8]
 8015682:	695b      	ldr	r3, [r3, #20]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d12b      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	f003 0303 	and.w	r3, r3, #3
 8015690:	2b00      	cmp	r3, #0
 8015692:	d125      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1)) // zero-padding, unit stride, 1x1 conv with x4 input channels, used often
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8015698:	2b01      	cmp	r3, #1
 801569a:	d121      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1)) // zero-padding, unit stride, 1x1 conv with x4 input channels, used often
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	68db      	ldr	r3, [r3, #12]
 80156a0:	2b01      	cmp	r3, #1
 80156a2:	d11d      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
 80156a4:	69fb      	ldr	r3, [r7, #28]
 80156a6:	689b      	ldr	r3, [r3, #8]
 80156a8:	2b01      	cmp	r3, #1
 80156aa:	d119      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d115      	bne.n	80156e0 <arm_convolve_wrapper_s8+0x76>
    {
        return arm_convolve_1x1_s8_fast(ctx,
 80156b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b6:	9306      	str	r3, [sp, #24]
 80156b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ba:	9305      	str	r3, [sp, #20]
 80156bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156be:	9304      	str	r3, [sp, #16]
 80156c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c2:	9303      	str	r3, [sp, #12]
 80156c4:	6a3b      	ldr	r3, [r7, #32]
 80156c6:	9302      	str	r3, [sp, #8]
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	9301      	str	r3, [sp, #4]
 80156cc:	69bb      	ldr	r3, [r7, #24]
 80156ce:	9300      	str	r3, [sp, #0]
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	68b9      	ldr	r1, [r7, #8]
 80156d6:	68f8      	ldr	r0, [r7, #12]
 80156d8:	f7ff fb8d 	bl	8014df6 <arm_convolve_1x1_s8_fast>
 80156dc:	4603      	mov	r3, r0
 80156de:	e040      	b.n	8015762 <arm_convolve_wrapper_s8+0xf8>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 80156e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e2:	685b      	ldr	r3, [r3, #4]
 80156e4:	2b01      	cmp	r3, #1
 80156e6:	d127      	bne.n	8015738 <arm_convolve_wrapper_s8+0xce>
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d123      	bne.n	8015738 <arm_convolve_wrapper_s8+0xce>
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	2b01      	cmp	r3, #1
 80156f6:	d11f      	bne.n	8015738 <arm_convolve_wrapper_s8+0xce>
 80156f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	f003 0303 	and.w	r3, r3, #3
 8015700:	2b00      	cmp	r3, #0
 8015702:	d119      	bne.n	8015738 <arm_convolve_wrapper_s8+0xce>
             (input_dims->n == 1)) // row vector, row filter case, x4 output channels, 1x1 conv with stride 2. this case
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 8015708:	2b01      	cmp	r3, #1
 801570a:	d115      	bne.n	8015738 <arm_convolve_wrapper_s8+0xce>
    {
        return arm_convolve_1_x_n_s8(ctx,
 801570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801570e:	9306      	str	r3, [sp, #24]
 8015710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015712:	9305      	str	r3, [sp, #20]
 8015714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015716:	9304      	str	r3, [sp, #16]
 8015718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571a:	9303      	str	r3, [sp, #12]
 801571c:	6a3b      	ldr	r3, [r7, #32]
 801571e:	9302      	str	r3, [sp, #8]
 8015720:	69fb      	ldr	r3, [r7, #28]
 8015722:	9301      	str	r3, [sp, #4]
 8015724:	69bb      	ldr	r3, [r7, #24]
 8015726:	9300      	str	r3, [sp, #0]
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	68b9      	ldr	r1, [r7, #8]
 801572e:	68f8      	ldr	r0, [r7, #12]
 8015730:	f7ff fb1d 	bl	8014d6e <arm_convolve_1_x_n_s8>
 8015734:	4603      	mov	r3, r0
 8015736:	e014      	b.n	8015762 <arm_convolve_wrapper_s8+0xf8>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 8015738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801573a:	9306      	str	r3, [sp, #24]
 801573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015742:	9304      	str	r3, [sp, #16]
 8015744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015746:	9303      	str	r3, [sp, #12]
 8015748:	6a3b      	ldr	r3, [r7, #32]
 801574a:	9302      	str	r3, [sp, #8]
 801574c:	69fb      	ldr	r3, [r7, #28]
 801574e:	9301      	str	r3, [sp, #4]
 8015750:	69bb      	ldr	r3, [r7, #24]
 8015752:	9300      	str	r3, [sp, #0]
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	68b9      	ldr	r1, [r7, #8]
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f7ff fbaa 	bl	8014eb4 <arm_convolve_s8>
 8015760:	4603      	mov	r3, r0
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 8015762:	4618      	mov	r0, r3
 8015764:	3710      	adds	r7, #16
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}

0801576a <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params *conv_params,
                                                const cmsis_nn_dims *input_dims,
                                                const cmsis_nn_dims *filter_dims,
                                                const cmsis_nn_dims *output_dims)
{
 801576a:	b580      	push	{r7, lr}
 801576c:	b084      	sub	sp, #16
 801576e:	af00      	add	r7, sp, #0
 8015770:	60f8      	str	r0, [r7, #12]
 8015772:	60b9      	str	r1, [r7, #8]
 8015774:	607a      	str	r2, [r7, #4]
 8015776:	603b      	str	r3, [r7, #0]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	691b      	ldr	r3, [r3, #16]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d11e      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	695b      	ldr	r3, [r3, #20]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d11a      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	68db      	ldr	r3, [r3, #12]
 801578c:	f003 0303 	and.w	r3, r3, #3
 8015790:	2b00      	cmp	r3, #0
 8015792:	d114      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	689b      	ldr	r3, [r3, #8]
    if ((conv_params->padding.w == 0) && (conv_params->padding.h == 0) && (input_dims->c % 4 == 0) &&
 8015798:	2b01      	cmp	r3, #1
 801579a:	d110      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
        (conv_params->stride.w == 1) && (conv_params->stride.h == 1) && (filter_dims->w == 1) && (filter_dims->h == 1))
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	68db      	ldr	r3, [r3, #12]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d10c      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	689b      	ldr	r3, [r3, #8]
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d108      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	2b01      	cmp	r3, #1
 80157b2:	d104      	bne.n	80157be <arm_convolve_wrapper_s8_get_buffer_size+0x54>
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 80157b4:	68b8      	ldr	r0, [r7, #8]
 80157b6:	f7ff fb72 	bl	8014e9e <arm_convolve_1x1_s8_fast_get_buffer_size>
 80157ba:	4603      	mov	r3, r0
 80157bc:	e020      	b.n	8015800 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	685b      	ldr	r3, [r3, #4]
 80157c2:	2b01      	cmp	r3, #1
 80157c4:	d117      	bne.n	80157f6 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	685b      	ldr	r3, [r3, #4]
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d113      	bne.n	80157f6 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	685b      	ldr	r3, [r3, #4]
 80157d2:	2b01      	cmp	r3, #1
 80157d4:	d10f      	bne.n	80157f6 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	689b      	ldr	r3, [r3, #8]
 80157da:	f003 0303 	and.w	r3, r3, #3
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d109      	bne.n	80157f6 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
             (input_dims->n == 1))
 80157e2:	68bb      	ldr	r3, [r7, #8]
 80157e4:	681b      	ldr	r3, [r3, #0]
    else if ((output_dims->h == 1) && (input_dims->h == 1) && (filter_dims->h == 1) && (output_dims->w % 4 == 0) &&
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d105      	bne.n	80157f6 <arm_convolve_wrapper_s8_get_buffer_size+0x8c>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 80157ea:	6879      	ldr	r1, [r7, #4]
 80157ec:	68b8      	ldr	r0, [r7, #8]
 80157ee:	f7ff faec 	bl	8014dca <arm_convolve_1_x_n_s8_get_buffer_size>
 80157f2:	4603      	mov	r3, r0
 80157f4:	e004      	b.n	8015800 <arm_convolve_wrapper_s8_get_buffer_size+0x96>
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	68b8      	ldr	r0, [r7, #8]
 80157fa:	f7ff ff20 	bl	801563e <arm_convolve_s8_get_buffer_size>
 80157fe:	4603      	mov	r3, r0
    }
}
 8015800:	4618      	mov	r0, r3
 8015802:	3710      	adds	r7, #16
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}

08015808 <arm_depthwise_conv_3x3_s8>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 8015808:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801580c:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
 8015810:	af00      	add	r7, sp, #0
 8015812:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8015816:	6020      	str	r0, [r4, #0]
 8015818:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801581c:	6001      	str	r1, [r0, #0]
 801581e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8015822:	600a      	str	r2, [r1, #0]
 8015824:	f107 0220 	add.w	r2, r7, #32
 8015828:	6013      	str	r3, [r2, #0]
    (void)ctx;
    (void)bias_dims;

    const int32_t input_x = input_dims->w;
 801582a:	f107 0320 	add.w	r3, r7, #32
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	689b      	ldr	r3, [r3, #8]
 8015832:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    const int32_t input_y = input_dims->h;
 8015836:	f107 0320 	add.w	r3, r7, #32
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	685b      	ldr	r3, [r3, #4]
 801583e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    const int32_t input_ch = input_dims->c;
 8015842:	f107 0320 	add.w	r3, r7, #32
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	68db      	ldr	r3, [r3, #12]
 801584a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    const int32_t output_ch = output_dims->c;
 801584e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8015852:	68db      	ldr	r3, [r3, #12]
 8015854:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    const int32_t pad_x = dw_conv_params->padding.w;
 8015858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	695b      	ldr	r3, [r3, #20]
 8015860:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    const int32_t pad_y = dw_conv_params->padding.h;
 8015864:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	699b      	ldr	r3, [r3, #24]
 801586c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    const int32_t stride_x = dw_conv_params->stride.w;
 8015870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    const int32_t stride_y = dw_conv_params->stride.h;
 801587c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	691b      	ldr	r3, [r3, #16]
 8015884:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    const int32_t *output_shift = quant_params->shift;
 8015888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    const int32_t *output_mult = quant_params->multiplier;
 8015894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    const int32_t output_x = output_dims->w;
 80158a0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80158a4:	689b      	ldr	r3, [r3, #8]
 80158a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    const int32_t output_y = output_dims->h;
 80158aa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    const int32_t output_offset = dw_conv_params->output_offset;
 80158b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    const int32_t input_offset = dw_conv_params->input_offset;
 80158c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	681b      	ldr	r3, [r3, #0]
 80158c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    const int32_t output_activation_min = dw_conv_params->activation.min;
 80158cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    const int32_t output_activation_max = dw_conv_params->activation.max;
 80158d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 80158e4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80158e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d003      	beq.n	80158f8 <arm_depthwise_conv_3x3_s8+0xf0>
    {
        return ARM_MATH_SIZE_MISMATCH;
 80158f0:	f06f 0302 	mvn.w	r3, #2
 80158f4:	f000 bf70 	b.w	80167d8 <arm_depthwise_conv_3x3_s8+0xfd0>
    }
    /* Check input constraints pad_x <= 1 */
    if (pad_x > 1 || filter_dims->w != 3 || filter_dims->h != 3)
 80158f8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	dc09      	bgt.n	8015914 <arm_depthwise_conv_3x3_s8+0x10c>
 8015900:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	2b03      	cmp	r3, #3
 8015908:	d104      	bne.n	8015914 <arm_depthwise_conv_3x3_s8+0x10c>
 801590a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	2b03      	cmp	r3, #3
 8015912:	d003      	beq.n	801591c <arm_depthwise_conv_3x3_s8+0x114>
    {
        return ARM_MATH_ARGUMENT_ERROR;
 8015914:	f04f 33ff 	mov.w	r3, #4294967295
 8015918:	f000 bf5e 	b.w	80167d8 <arm_depthwise_conv_3x3_s8+0xfd0>
    }

    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801591c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8015920:	425b      	negs	r3, r3
 8015922:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8015926:	2300      	movs	r3, #0
 8015928:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 801592c:	2300      	movs	r3, #0
 801592e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8015932:	f000 bf49 	b.w	80167c8 <arm_depthwise_conv_3x3_s8+0xfc0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8015936:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801593a:	425b      	negs	r3, r3
 801593c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8015940:	2300      	movs	r3, #0
 8015942:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8015946:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801594a:	2b00      	cmp	r3, #0
 801594c:	dc03      	bgt.n	8015956 <arm_depthwise_conv_3x3_s8+0x14e>
 801594e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015952:	425b      	negs	r3, r3
 8015954:	e000      	b.n	8015958 <arm_depthwise_conv_3x3_s8+0x150>
 8015956:	2300      	movs	r3, #0
 8015958:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 801595c:	f000 bf21 	b.w	80167a2 <arm_depthwise_conv_3x3_s8+0xf9a>
        {
            int32_t in_ch = 0;
 8015960:	2300      	movs	r3, #0
 8015962:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
            int32_t ker_w_start = MAX(0, -in_w);
 8015966:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801596a:	2b00      	cmp	r3, #0
 801596c:	dc03      	bgt.n	8015976 <arm_depthwise_conv_3x3_s8+0x16e>
 801596e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8015972:	425b      	negs	r3, r3
 8015974:	e000      	b.n	8015978 <arm_depthwise_conv_3x3_s8+0x170>
 8015976:	2300      	movs	r3, #0
 8015978:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

            for (; in_ch <= (input_ch - 4); in_ch += 4)
 801597c:	f000 bd50 	b.w	8016420 <arm_depthwise_conv_3x3_s8+0xc18>
            {
                int32_t out_buff0 = bias[in_ch + 0];
 8015980:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801598a:	4413      	add	r3, r2
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                int32_t out_buff1 = bias[in_ch + 1];
 8015992:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015996:	3301      	adds	r3, #1
 8015998:	009b      	lsls	r3, r3, #2
 801599a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801599e:	4413      	add	r3, r2
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                int32_t out_buff2 = bias[in_ch + 2];
 80159a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80159aa:	3302      	adds	r3, #2
 80159ac:	009b      	lsls	r3, r3, #2
 80159ae:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80159b2:	4413      	add	r3, r2
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                int32_t out_buff3 = bias[in_ch + 3];
 80159ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80159be:	3303      	adds	r3, #3
 80159c0:	009b      	lsls	r3, r3, #2
 80159c2:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80159c6:	4413      	add	r3, r2
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 80159ce:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80159d2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80159d6:	4413      	add	r3, r2
 80159d8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80159dc:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 80159e0:	fb01 f202 	mul.w	r2, r1, r2
 80159e4:	fb02 f303 	mul.w	r3, r2, r3
 80159e8:	4619      	mov	r1, r3
 80159ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80159ee:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80159f2:	fb02 f303 	mul.w	r3, r2, r3
 80159f6:	18ca      	adds	r2, r1, r3
 80159f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80159fc:	4413      	add	r3, r2
 80159fe:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8015a02:	4413      	add	r3, r2
 8015a04:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 8015a08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015a0c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8015a10:	fb02 f203 	mul.w	r2, r2, r3
 8015a14:	4613      	mov	r3, r2
 8015a16:	005b      	lsls	r3, r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015a20:	4413      	add	r3, r2
 8015a22:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015a26:	4413      	add	r3, r2
 8015a28:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8015a2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8015a30:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8015a34:	e17a      	b.n	8015d2c <arm_depthwise_conv_3x3_s8+0x524>
                {
                    int32_t in_val = 0;
 8015a36:	2300      	movs	r3, #0
 8015a38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    int32_t ker_val = 0;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    if (ker_w_start == 0)
 8015a42:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d169      	bne.n	8015b1e <arm_depthwise_conv_3x3_s8+0x316>
 8015a4a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8015a4e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8015a52:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015a5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a5e:	601a      	str	r2, [r3, #0]
    return (val);
 8015a60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015a64:	681b      	ldr	r3, [r3, #0]
                    {
                        in_val = arm_nn_read_q7x4(input_ptr);
 8015a66:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8015a6a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8015a6e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8015a72:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015a7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a7e:	601a      	str	r2, [r3, #0]
    return (val);
 8015a80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015a84:	681b      	ldr	r3, [r3, #0]
                        ker_val = arm_nn_read_q7x4(kernel_ptr);
 8015a86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8015a8a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015a8e:	b25b      	sxtb	r3, r3
 8015a90:	461a      	mov	r2, r3
 8015a92:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015a96:	4413      	add	r3, r2
 8015a98:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015a9c:	b252      	sxtb	r2, r2
 8015a9e:	fb02 f303 	mul.w	r3, r2, r3
 8015aa2:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8015aa6:	4413      	add	r3, r2
 8015aa8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8015aac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015ab0:	121b      	asrs	r3, r3, #8
 8015ab2:	b25b      	sxtb	r3, r3
 8015ab4:	461a      	mov	r2, r3
 8015ab6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015aba:	4413      	add	r3, r2
 8015abc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015ac0:	1212      	asrs	r2, r2, #8
 8015ac2:	b252      	sxtb	r2, r2
 8015ac4:	fb02 f303 	mul.w	r3, r2, r3
 8015ac8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8015acc:	4413      	add	r3, r2
 8015ace:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8015ad2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015ad6:	141b      	asrs	r3, r3, #16
 8015ad8:	b25b      	sxtb	r3, r3
 8015ada:	461a      	mov	r2, r3
 8015adc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015ae0:	4413      	add	r3, r2
 8015ae2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015ae6:	1412      	asrs	r2, r2, #16
 8015ae8:	b252      	sxtb	r2, r2
 8015aea:	fb02 f303 	mul.w	r3, r2, r3
 8015aee:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8015af2:	4413      	add	r3, r2
 8015af4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8015af8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015afc:	161b      	asrs	r3, r3, #24
 8015afe:	b25b      	sxtb	r3, r3
 8015b00:	461a      	mov	r2, r3
 8015b02:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015b06:	4413      	add	r3, r2
 8015b08:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015b0c:	1612      	asrs	r2, r2, #24
 8015b0e:	b252      	sxtb	r2, r2
 8015b10:	fb02 f303 	mul.w	r3, r2, r3
 8015b14:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8015b18:	4413      	add	r3, r2
 8015b1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    in_val = arm_nn_read_q7x4(input_ptr + input_ch);
 8015b1e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015b22:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8015b26:	4413      	add	r3, r2
 8015b28:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8015b2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015b34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015b38:	601a      	str	r2, [r3, #0]
    return (val);
 8015b3a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                    ker_val = arm_nn_read_q7x4(kernel_ptr + input_ch);
 8015b44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015b48:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8015b52:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b5e:	601a      	str	r2, [r3, #0]
    return (val);
 8015b60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                    out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8015b6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015b6e:	b25b      	sxtb	r3, r3
 8015b70:	461a      	mov	r2, r3
 8015b72:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015b76:	4413      	add	r3, r2
 8015b78:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015b7c:	b252      	sxtb	r2, r2
 8015b7e:	fb02 f303 	mul.w	r3, r2, r3
 8015b82:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8015b86:	4413      	add	r3, r2
 8015b88:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                    out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8015b8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015b90:	121b      	asrs	r3, r3, #8
 8015b92:	b25b      	sxtb	r3, r3
 8015b94:	461a      	mov	r2, r3
 8015b96:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015b9a:	4413      	add	r3, r2
 8015b9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015ba0:	1212      	asrs	r2, r2, #8
 8015ba2:	b252      	sxtb	r2, r2
 8015ba4:	fb02 f303 	mul.w	r3, r2, r3
 8015ba8:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8015bac:	4413      	add	r3, r2
 8015bae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                    out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8015bb2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015bb6:	141b      	asrs	r3, r3, #16
 8015bb8:	b25b      	sxtb	r3, r3
 8015bba:	461a      	mov	r2, r3
 8015bbc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015bc0:	4413      	add	r3, r2
 8015bc2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015bc6:	1412      	asrs	r2, r2, #16
 8015bc8:	b252      	sxtb	r2, r2
 8015bca:	fb02 f303 	mul.w	r3, r2, r3
 8015bce:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8015bd2:	4413      	add	r3, r2
 8015bd4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                    out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8015bd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015bdc:	161b      	asrs	r3, r3, #24
 8015bde:	b25b      	sxtb	r3, r3
 8015be0:	461a      	mov	r2, r3
 8015be2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015be6:	4413      	add	r3, r2
 8015be8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015bec:	1612      	asrs	r2, r2, #24
 8015bee:	b252      	sxtb	r2, r2
 8015bf0:	fb02 f303 	mul.w	r3, r2, r3
 8015bf4:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8015bf8:	4413      	add	r3, r2
 8015bfa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                    if ((input_x - in_w) >= 3)
 8015bfe:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8015c02:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8015c06:	1ad3      	subs	r3, r2, r3
 8015c08:	2b02      	cmp	r3, #2
 8015c0a:	dd73      	ble.n	8015cf4 <arm_depthwise_conv_3x3_s8+0x4ec>
                    {
                        in_val = arm_nn_read_q7x4(input_ptr + (input_ch << 1));
 8015c0c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015c10:	005b      	lsls	r3, r3, #1
 8015c12:	461a      	mov	r2, r3
 8015c14:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8015c18:	4413      	add	r3, r2
 8015c1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8015c1e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8015c22:	681b      	ldr	r3, [r3, #0]
 8015c24:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c2a:	601a      	str	r2, [r3, #0]
    return (val);
 8015c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
                        ker_val = arm_nn_read_q7x4(kernel_ptr + (input_ch << 1));
 8015c36:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015c3a:	005b      	lsls	r3, r3, #1
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8015c42:	4413      	add	r3, r2
 8015c44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8015c48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8015c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c54:	601a      	str	r2, [r3, #0]
    return (val);
 8015c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

                        out_buff0 += ((int8_t)in_val + input_offset) * (int8_t)ker_val;
 8015c60:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015c64:	b25b      	sxtb	r3, r3
 8015c66:	461a      	mov	r2, r3
 8015c68:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015c6c:	4413      	add	r3, r2
 8015c6e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015c72:	b252      	sxtb	r2, r2
 8015c74:	fb02 f303 	mul.w	r3, r2, r3
 8015c78:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8015c7c:	4413      	add	r3, r2
 8015c7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                        out_buff1 += ((int8_t)(in_val >> 8) + input_offset) * (int8_t)(ker_val >> 8);
 8015c82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015c86:	121b      	asrs	r3, r3, #8
 8015c88:	b25b      	sxtb	r3, r3
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015c90:	4413      	add	r3, r2
 8015c92:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015c96:	1212      	asrs	r2, r2, #8
 8015c98:	b252      	sxtb	r2, r2
 8015c9a:	fb02 f303 	mul.w	r3, r2, r3
 8015c9e:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8015ca2:	4413      	add	r3, r2
 8015ca4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                        out_buff2 += ((int8_t)(in_val >> 16) + input_offset) * (int8_t)(ker_val >> 16);
 8015ca8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015cac:	141b      	asrs	r3, r3, #16
 8015cae:	b25b      	sxtb	r3, r3
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015cb6:	4413      	add	r3, r2
 8015cb8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015cbc:	1412      	asrs	r2, r2, #16
 8015cbe:	b252      	sxtb	r2, r2
 8015cc0:	fb02 f303 	mul.w	r3, r2, r3
 8015cc4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8015cc8:	4413      	add	r3, r2
 8015cca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                        out_buff3 += ((int8_t)(in_val >> 24) + input_offset) * (int8_t)(ker_val >> 24);
 8015cce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8015cd2:	161b      	asrs	r3, r3, #24
 8015cd4:	b25b      	sxtb	r3, r3
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8015cdc:	4413      	add	r3, r2
 8015cde:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8015ce2:	1612      	asrs	r2, r2, #24
 8015ce4:	b252      	sxtb	r2, r2
 8015ce6:	fb02 f303 	mul.w	r3, r2, r3
 8015cea:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8015cee:	4413      	add	r3, r2
 8015cf0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
                    }

                    input_ptr += (input_ch * input_x);
 8015cf4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8015cf8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8015cfc:	fb02 f303 	mul.w	r3, r2, r3
 8015d00:	461a      	mov	r2, r3
 8015d02:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8015d06:	4413      	add	r3, r2
 8015d08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
                    kernel_ptr += (input_ch * 3);
 8015d0c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8015d10:	4613      	mov	r3, r2
 8015d12:	005b      	lsls	r3, r3, #1
 8015d14:	4413      	add	r3, r2
 8015d16:	461a      	mov	r2, r3
 8015d18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8015d1c:	4413      	add	r3, r2
 8015d1e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8015d22:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8015d26:	3301      	adds	r3, #1
 8015d28:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8015d2c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8015d30:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	2b03      	cmp	r3, #3
 8015d38:	bfa8      	it	ge
 8015d3a:	2303      	movge	r3, #3
 8015d3c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8015d40:	429a      	cmp	r2, r3
 8015d42:	f6ff ae78 	blt.w	8015a36 <arm_depthwise_conv_3x3_s8+0x22e>
                }

                out_buff0 = arm_nn_requantize(out_buff0, output_mult[in_ch + 0], output_shift[in_ch + 0]);
 8015d46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015d4a:	009b      	lsls	r3, r3, #2
 8015d4c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8015d50:	4413      	add	r3, r2
 8015d52:	6819      	ldr	r1, [r3, #0]
 8015d54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015d58:	009b      	lsls	r3, r3, #2
 8015d5a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8015d5e:	4413      	add	r3, r2
 8015d60:	681a      	ldr	r2, [r3, #0]
 8015d62:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8015d66:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8015d6a:	6018      	str	r0, [r3, #0]
 8015d6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8015d70:	6019      	str	r1, [r3, #0]
 8015d72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8015d76:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015d78:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d82:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8015d86:	6812      	ldr	r2, [r2, #0]
 8015d88:	409a      	lsls	r2, r3
 8015d8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015d8e:	601a      	str	r2, [r3, #0]
 8015d90:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015d94:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8015d98:	6812      	ldr	r2, [r2, #0]
 8015d9a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8015d9c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015da0:	2200      	movs	r2, #0
 8015da2:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8015da4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015dac:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8015dae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015db2:	2200      	movs	r2, #0
 8015db4:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8015db6:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8015dba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8015dc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	461a      	mov	r2, r3
 8015dce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8015dd2:	fb02 f501 	mul.w	r5, r2, r1
 8015dd6:	fb00 f403 	mul.w	r4, r0, r3
 8015dda:	442c      	add	r4, r5
 8015ddc:	fba0 2302 	umull	r2, r3, r0, r2
 8015de0:	18e1      	adds	r1, r4, r3
 8015de2:	460b      	mov	r3, r1
 8015de4:	eb18 0102 	adds.w	r1, r8, r2
 8015de8:	60b9      	str	r1, [r7, #8]
 8015dea:	eb49 0303 	adc.w	r3, r9, r3
 8015dee:	60fb      	str	r3, [r7, #12]
 8015df0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8015df4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 8015df8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8015dfc:	f04f 0200 	mov.w	r2, #0
 8015e00:	f04f 0300 	mov.w	r3, #0
 8015e04:	0fc2      	lsrs	r2, r0, #31
 8015e06:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8015e0a:	17cb      	asrs	r3, r1, #31
 8015e0c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8015e10:	4613      	mov	r3, r2
 8015e12:	600b      	str	r3, [r1, #0]
    return result;
 8015e14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015e18:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015e1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	dc04      	bgt.n	8015e2e <arm_depthwise_conv_3x3_s8+0x626>
 8015e24:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	425b      	negs	r3, r3
 8015e2c:	e000      	b.n	8015e30 <arm_depthwise_conv_3x3_s8+0x628>
 8015e2e:	2300      	movs	r3, #0
 8015e30:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8015e34:	6011      	str	r1, [r2, #0]
 8015e36:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015e3a:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015e3c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015e40:	2200      	movs	r2, #0
 8015e42:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015e44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8015e48:	2201      	movs	r2, #1
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	409a      	lsls	r2, r3
 8015e4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015e52:	3a01      	subs	r2, #1
 8015e54:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8015e56:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8015e5a:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8015e5e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8015e62:	6809      	ldr	r1, [r1, #0]
 8015e64:	6812      	ldr	r2, [r2, #0]
 8015e66:	400a      	ands	r2, r1
 8015e68:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8015e6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015e6e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8015e72:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8015e76:	6809      	ldr	r1, [r1, #0]
 8015e78:	6812      	ldr	r2, [r2, #0]
 8015e7a:	fa41 f202 	asr.w	r2, r1, r2
 8015e7e:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8015e80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015e84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8015e88:	6812      	ldr	r2, [r2, #0]
 8015e8a:	1052      	asrs	r2, r2, #1
 8015e8c:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8015e8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	da06      	bge.n	8015ea6 <arm_depthwise_conv_3x3_s8+0x69e>
        threshold++;
 8015e98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015e9c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8015ea0:	6812      	ldr	r2, [r2, #0]
 8015ea2:	3201      	adds	r2, #1
 8015ea4:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8015ea6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8015eaa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8015eae:	6812      	ldr	r2, [r2, #0]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	dd06      	ble.n	8015ec4 <arm_depthwise_conv_3x3_s8+0x6bc>
        result++;
 8015eb6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015eba:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8015ebe:	6812      	ldr	r2, [r2, #0]
 8015ec0:	3201      	adds	r2, #1
 8015ec2:	601a      	str	r2, [r3, #0]
    return result;
 8015ec4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8015ec8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015eca:	bf00      	nop
 8015ecc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = arm_nn_requantize(out_buff1, output_mult[in_ch + 1], output_shift[in_ch + 1]);
 8015ed0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	009b      	lsls	r3, r3, #2
 8015ed8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8015edc:	4413      	add	r3, r2
 8015ede:	6819      	ldr	r1, [r3, #0]
 8015ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015ee4:	3301      	adds	r3, #1
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8015eec:	4413      	add	r3, r2
 8015eee:	681a      	ldr	r2, [r3, #0]
 8015ef0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8015ef4:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 8015ef8:	6018      	str	r0, [r3, #0]
 8015efa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8015efe:	6019      	str	r1, [r3, #0]
 8015f00:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015f04:	601a      	str	r2, [r3, #0]
 8015f06:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f10:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8015f14:	6812      	ldr	r2, [r2, #0]
 8015f16:	409a      	lsls	r2, r3
 8015f18:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8015f1c:	601a      	str	r2, [r3, #0]
 8015f1e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015f22:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8015f26:	6812      	ldr	r2, [r2, #0]
 8015f28:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8015f2a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8015f2e:	2200      	movs	r2, #0
 8015f30:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8015f32:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8015f3a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8015f3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015f40:	2200      	movs	r2, #0
 8015f42:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8015f44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8015f48:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8015f54:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	461a      	mov	r2, r3
 8015f5c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8015f60:	fb02 f501 	mul.w	r5, r2, r1
 8015f64:	fb00 f403 	mul.w	r4, r0, r3
 8015f68:	442c      	add	r4, r5
 8015f6a:	fba0 2302 	umull	r2, r3, r0, r2
 8015f6e:	18e1      	adds	r1, r4, r3
 8015f70:	460b      	mov	r3, r1
 8015f72:	eb18 0102 	adds.w	r1, r8, r2
 8015f76:	6139      	str	r1, [r7, #16]
 8015f78:	eb49 0303 	adc.w	r3, r9, r3
 8015f7c:	617b      	str	r3, [r7, #20]
 8015f7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015f82:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 8015f86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8015f8a:	f04f 0200 	mov.w	r2, #0
 8015f8e:	f04f 0300 	mov.w	r3, #0
 8015f92:	0fc2      	lsrs	r2, r0, #31
 8015f94:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8015f98:	17cb      	asrs	r3, r1, #31
 8015f9a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8015f9e:	4613      	mov	r3, r2
 8015fa0:	600b      	str	r3, [r1, #0]
    return result;
 8015fa2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8015fa6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8015fa8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	dc04      	bgt.n	8015fbc <arm_depthwise_conv_3x3_s8+0x7b4>
 8015fb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	425b      	negs	r3, r3
 8015fba:	e000      	b.n	8015fbe <arm_depthwise_conv_3x3_s8+0x7b6>
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8015fc2:	6011      	str	r1, [r2, #0]
 8015fc4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8015fc8:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8015fca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8015fce:	2200      	movs	r2, #0
 8015fd0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8015fd2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	409a      	lsls	r2, r3
 8015fdc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8015fe0:	3a01      	subs	r2, #1
 8015fe2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8015fe4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8015fe8:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8015fec:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8015ff0:	6809      	ldr	r1, [r1, #0]
 8015ff2:	6812      	ldr	r2, [r2, #0]
 8015ff4:	400a      	ands	r2, r1
 8015ff6:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8015ff8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8015ffc:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8016000:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8016004:	6809      	ldr	r1, [r1, #0]
 8016006:	6812      	ldr	r2, [r2, #0]
 8016008:	fa41 f202 	asr.w	r2, r1, r2
 801600c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801600e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8016012:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8016016:	6812      	ldr	r2, [r2, #0]
 8016018:	1052      	asrs	r2, r2, #1
 801601a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801601c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	da06      	bge.n	8016034 <arm_depthwise_conv_3x3_s8+0x82c>
        threshold++;
 8016026:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801602a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801602e:	6812      	ldr	r2, [r2, #0]
 8016030:	3201      	adds	r2, #1
 8016032:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8016034:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8016038:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801603c:	6812      	ldr	r2, [r2, #0]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	429a      	cmp	r2, r3
 8016042:	dd06      	ble.n	8016052 <arm_depthwise_conv_3x3_s8+0x84a>
        result++;
 8016044:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8016048:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801604c:	6812      	ldr	r2, [r2, #0]
 801604e:	3201      	adds	r2, #1
 8016050:	601a      	str	r2, [r3, #0]
    return result;
 8016052:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8016056:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016058:	bf00      	nop
 801605a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = arm_nn_requantize(out_buff2, output_mult[in_ch + 2], output_shift[in_ch + 2]);
 801605e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016062:	3302      	adds	r3, #2
 8016064:	009b      	lsls	r3, r3, #2
 8016066:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801606a:	4413      	add	r3, r2
 801606c:	681a      	ldr	r2, [r3, #0]
 801606e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016072:	3302      	adds	r3, #2
 8016074:	009b      	lsls	r3, r3, #2
 8016076:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 801607a:	440b      	add	r3, r1
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 8016082:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8016086:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 801608a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801608e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016092:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016096:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801609a:	fa02 f303 	lsl.w	r3, r2, r3
 801609e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80160a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80160a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    q31_t result = 0;
 80160aa:	2300      	movs	r3, #0
 80160ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    mult.word.low = 1 << 30;
 80160b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80160b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80160b8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80160ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80160be:	2200      	movs	r2, #0
 80160c0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80160c2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80160c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80160ca:	4618      	mov	r0, r3
 80160cc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80160d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80160d4:	461a      	mov	r2, r3
 80160d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80160da:	fb02 f501 	mul.w	r5, r2, r1
 80160de:	fb00 f403 	mul.w	r4, r0, r3
 80160e2:	442c      	add	r4, r5
 80160e4:	fba0 2302 	umull	r2, r3, r0, r2
 80160e8:	18e1      	adds	r1, r4, r3
 80160ea:	460b      	mov	r3, r1
 80160ec:	eb18 0102 	adds.w	r1, r8, r2
 80160f0:	61b9      	str	r1, [r7, #24]
 80160f2:	eb49 0303 	adc.w	r3, r9, r3
 80160f6:	61fb      	str	r3, [r7, #28]
 80160f8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80160fc:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 8016100:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8016104:	f04f 0200 	mov.w	r2, #0
 8016108:	f04f 0300 	mov.w	r3, #0
 801610c:	0fc2      	lsrs	r2, r0, #31
 801610e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016112:	17cb      	asrs	r3, r1, #31
 8016114:	4613      	mov	r3, r2
 8016116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    return result;
 801611a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801611e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016122:	2b00      	cmp	r3, #0
 8016124:	dc03      	bgt.n	801612e <arm_depthwise_conv_3x3_s8+0x926>
 8016126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801612a:	425b      	negs	r3, r3
 801612c:	e000      	b.n	8016130 <arm_depthwise_conv_3x3_s8+0x928>
 801612e:	2300      	movs	r3, #0
 8016130:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8016134:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    q31_t result = 0;
 8016138:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801613c:	2200      	movs	r2, #0
 801613e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016140:	2201      	movs	r2, #1
 8016142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016146:	409a      	lsls	r2, r3
 8016148:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801614c:	3a01      	subs	r2, #1
 801614e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8016150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016154:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8016158:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801615c:	6812      	ldr	r2, [r2, #0]
 801615e:	400a      	ands	r2, r1
 8016160:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8016162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016166:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 801616a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801616e:	fa41 f202 	asr.w	r2, r1, r2
 8016172:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8016174:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8016178:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801617c:	6812      	ldr	r2, [r2, #0]
 801617e:	1052      	asrs	r2, r2, #1
 8016180:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8016182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	2b00      	cmp	r3, #0
 801618a:	da06      	bge.n	801619a <arm_depthwise_conv_3x3_s8+0x992>
        threshold++;
 801618c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8016190:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8016194:	6812      	ldr	r2, [r2, #0]
 8016196:	3201      	adds	r2, #1
 8016198:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801619a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801619e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80161a2:	6812      	ldr	r2, [r2, #0]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	dd06      	ble.n	80161b8 <arm_depthwise_conv_3x3_s8+0x9b0>
        result++;
 80161aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80161ae:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80161b2:	6812      	ldr	r2, [r2, #0]
 80161b4:	3201      	adds	r2, #1
 80161b6:	601a      	str	r2, [r3, #0]
    return result;
 80161b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80161bc:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80161be:	bf00      	nop
 80161c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = arm_nn_requantize(out_buff3, output_mult[in_ch + 3], output_shift[in_ch + 3]);
 80161c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80161c8:	3303      	adds	r3, #3
 80161ca:	009b      	lsls	r3, r3, #2
 80161cc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80161d0:	4413      	add	r3, r2
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80161d8:	3303      	adds	r3, #3
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80161e0:	440b      	add	r3, r1
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	f8d7 11e8 	ldr.w	r1, [r7, #488]	; 0x1e8
 80161e8:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 80161ec:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 80161f0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80161f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80161f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161fc:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016200:	fa02 f303 	lsl.w	r3, r2, r3
 8016204:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8016208:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801620c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    q31_t result = 0;
 8016210:	2300      	movs	r3, #0
 8016212:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    mult.word.low = 1 << 30;
 8016216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801621a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801621e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016220:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016224:	2200      	movs	r2, #0
 8016226:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016228:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 801622c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016230:	4618      	mov	r0, r3
 8016232:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016236:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801623a:	461a      	mov	r2, r3
 801623c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016240:	fb02 f501 	mul.w	r5, r2, r1
 8016244:	fb00 f403 	mul.w	r4, r0, r3
 8016248:	442c      	add	r4, r5
 801624a:	fba0 2302 	umull	r2, r3, r0, r2
 801624e:	18e1      	adds	r1, r4, r3
 8016250:	460b      	mov	r3, r1
 8016252:	eb18 0a02 	adds.w	sl, r8, r2
 8016256:	eb49 0b03 	adc.w	fp, r9, r3
 801625a:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 801625e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8016262:	f04f 0200 	mov.w	r2, #0
 8016266:	f04f 0300 	mov.w	r3, #0
 801626a:	0fc2      	lsrs	r2, r0, #31
 801626c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016270:	17cb      	asrs	r3, r1, #31
 8016272:	4613      	mov	r3, r2
 8016274:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    return result;
 8016278:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801627c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016280:	2b00      	cmp	r3, #0
 8016282:	dc03      	bgt.n	801628c <arm_depthwise_conv_3x3_s8+0xa84>
 8016284:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016288:	425b      	negs	r3, r3
 801628a:	e000      	b.n	801628e <arm_depthwise_conv_3x3_s8+0xa86>
 801628c:	2300      	movs	r3, #0
 801628e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8016292:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    q31_t result = 0;
 8016296:	2300      	movs	r3, #0
 8016298:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    const q31_t remainder_mask = (1 << exponent) - 1;
 801629c:	2201      	movs	r2, #1
 801629e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80162a2:	fa02 f303 	lsl.w	r3, r2, r3
 80162a6:	3b01      	subs	r3, #1
 80162a8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    int32_t remainder = remainder_mask & dividend;
 80162ac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80162b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80162b4:	4013      	ands	r3, r2
 80162b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    result = dividend >> exponent;
 80162ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80162be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80162c2:	fa42 f303 	asr.w	r3, r2, r3
 80162c6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    q31_t threshold = remainder_mask >> 1;
 80162ca:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80162ce:	105b      	asrs	r3, r3, #1
 80162d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (result < 0)
 80162d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80162d8:	2b00      	cmp	r3, #0
 80162da:	da04      	bge.n	80162e6 <arm_depthwise_conv_3x3_s8+0xade>
        threshold++;
 80162dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80162e0:	3301      	adds	r3, #1
 80162e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    if (remainder > threshold)
 80162e6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80162ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80162ee:	429a      	cmp	r2, r3
 80162f0:	dd04      	ble.n	80162fc <arm_depthwise_conv_3x3_s8+0xaf4>
        result++;
 80162f2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80162f6:	3301      	adds	r3, #1
 80162f8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    return result;
 80162fc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016300:	bf00      	nop
 8016302:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 += output_offset;
 8016306:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801630a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801630e:	4413      	add	r3, r2
 8016310:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 += output_offset;
 8016314:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8016318:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801631c:	4413      	add	r3, r2
 801631e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 += output_offset;
 8016322:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8016326:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801632a:	4413      	add	r3, r2
 801632c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 += output_offset;
 8016330:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8016334:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8016338:	4413      	add	r3, r2
 801633a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                out_buff0 = MIN(MAX(out_buff0, output_activation_min), output_activation_max);
 801633e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8016342:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8016346:	4293      	cmp	r3, r2
 8016348:	bfb8      	it	lt
 801634a:	4613      	movlt	r3, r2
 801634c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8016350:	4293      	cmp	r3, r2
 8016352:	bfa8      	it	ge
 8016354:	4613      	movge	r3, r2
 8016356:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
                out_buff1 = MIN(MAX(out_buff1, output_activation_min), output_activation_max);
 801635a:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801635e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8016362:	4293      	cmp	r3, r2
 8016364:	bfb8      	it	lt
 8016366:	4613      	movlt	r3, r2
 8016368:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801636c:	4293      	cmp	r3, r2
 801636e:	bfa8      	it	ge
 8016370:	4613      	movge	r3, r2
 8016372:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
                out_buff2 = MIN(MAX(out_buff2, output_activation_min), output_activation_max);
 8016376:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801637a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801637e:	4293      	cmp	r3, r2
 8016380:	bfb8      	it	lt
 8016382:	4613      	movlt	r3, r2
 8016384:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8016388:	4293      	cmp	r3, r2
 801638a:	bfa8      	it	ge
 801638c:	4613      	movge	r3, r2
 801638e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
                out_buff3 = MIN(MAX(out_buff3, output_activation_min), output_activation_max);
 8016392:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8016396:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801639a:	4293      	cmp	r3, r2
 801639c:	bfb8      	it	lt
 801639e:	4613      	movlt	r3, r2
 80163a0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80163a4:	4293      	cmp	r3, r2
 80163a6:	bfa8      	it	ge
 80163a8:	4613      	movge	r3, r2
 80163aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

                output[out_idx++] = (int8_t)out_buff0;
 80163ae:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80163b2:	1c5a      	adds	r2, r3, #1
 80163b4:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80163b8:	461a      	mov	r2, r3
 80163ba:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80163be:	4413      	add	r3, r2
 80163c0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80163c4:	b252      	sxtb	r2, r2
 80163c6:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff1;
 80163c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80163cc:	1c5a      	adds	r2, r3, #1
 80163ce:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80163d2:	461a      	mov	r2, r3
 80163d4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80163d8:	4413      	add	r3, r2
 80163da:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80163de:	b252      	sxtb	r2, r2
 80163e0:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff2;
 80163e2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80163e6:	1c5a      	adds	r2, r3, #1
 80163e8:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 80163ec:	461a      	mov	r2, r3
 80163ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80163f2:	4413      	add	r3, r2
 80163f4:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80163f8:	b252      	sxtb	r2, r2
 80163fa:	701a      	strb	r2, [r3, #0]
                output[out_idx++] = (int8_t)out_buff3;
 80163fc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8016400:	1c5a      	adds	r2, r3, #1
 8016402:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8016406:	461a      	mov	r2, r3
 8016408:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801640c:	4413      	add	r3, r2
 801640e:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8016412:	b252      	sxtb	r2, r2
 8016414:	701a      	strb	r2, [r3, #0]
            for (; in_ch <= (input_ch - 4); in_ch += 4)
 8016416:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801641a:	3304      	adds	r3, #4
 801641c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8016420:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016424:	3b03      	subs	r3, #3
 8016426:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 801642a:	429a      	cmp	r2, r3
 801642c:	f6ff aaa8 	blt.w	8015980 <arm_depthwise_conv_3x3_s8+0x178>
            }

            // Leftover
            for (; in_ch < input_ch; ++in_ch)
 8016430:	e1a4      	b.n	801677c <arm_depthwise_conv_3x3_s8+0xf74>
            {
                int32_t out_buff = bias[in_ch];
 8016432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016436:	009b      	lsls	r3, r3, #2
 8016438:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801643c:	4413      	add	r3, r2
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                const int8_t *input_ptr = input + (in_h + ker_h_start) * (input_ch * input_x) + in_w * input_ch + in_ch;
 8016444:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8016448:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801644c:	4413      	add	r3, r2
 801644e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8016452:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8016456:	fb01 f202 	mul.w	r2, r1, r2
 801645a:	fb02 f303 	mul.w	r3, r2, r3
 801645e:	4619      	mov	r1, r3
 8016460:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8016464:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8016468:	fb02 f303 	mul.w	r3, r2, r3
 801646c:	18ca      	adds	r2, r1, r3
 801646e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016472:	4413      	add	r3, r2
 8016474:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8016478:	4413      	add	r3, r2
 801647a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                const int8_t *kernel_ptr = kernel + ker_h_start * (input_ch * 3) + in_ch;
 801647e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016482:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8016486:	fb02 f203 	mul.w	r2, r2, r3
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	461a      	mov	r2, r3
 8016492:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016496:	4413      	add	r3, r2
 8016498:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801649c:	4413      	add	r3, r2
 801649e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 80164a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80164a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80164aa:	e06f      	b.n	801658c <arm_depthwise_conv_3x3_s8+0xd84>
                {
                    if (ker_w_start == 0)
 80164ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d112      	bne.n	80164da <arm_depthwise_conv_3x3_s8+0xcd2>
                    {
                        out_buff += (*(input_ptr) + input_offset) * *(kernel_ptr);
 80164b4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80164b8:	f993 3000 	ldrsb.w	r3, [r3]
 80164bc:	461a      	mov	r2, r3
 80164be:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80164c2:	4413      	add	r3, r2
 80164c4:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 80164c8:	f992 2000 	ldrsb.w	r2, [r2]
 80164cc:	fb02 f303 	mul.w	r3, r2, r3
 80164d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80164d4:	4413      	add	r3, r2
 80164d6:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    out_buff += (*(input_ptr + input_ch) + input_offset) * *(kernel_ptr + input_ch);
 80164da:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80164de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80164e2:	4413      	add	r3, r2
 80164e4:	f993 3000 	ldrsb.w	r3, [r3]
 80164e8:	461a      	mov	r2, r3
 80164ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80164ee:	4413      	add	r3, r2
 80164f0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80164f4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 80164f8:	440a      	add	r2, r1
 80164fa:	f992 2000 	ldrsb.w	r2, [r2]
 80164fe:	fb02 f303 	mul.w	r3, r2, r3
 8016502:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8016506:	4413      	add	r3, r2
 8016508:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

                    if ((input_x - in_w) >= 3)
 801650c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8016510:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8016514:	1ad3      	subs	r3, r2, r3
 8016516:	2b02      	cmp	r3, #2
 8016518:	dd1c      	ble.n	8016554 <arm_depthwise_conv_3x3_s8+0xd4c>
                    {
                        out_buff += (*(input_ptr + (input_ch << 1)) + input_offset) * *(kernel_ptr + (input_ch << 1));
 801651a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801651e:	005b      	lsls	r3, r3, #1
 8016520:	461a      	mov	r2, r3
 8016522:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016526:	4413      	add	r3, r2
 8016528:	f993 3000 	ldrsb.w	r3, [r3]
 801652c:	461a      	mov	r2, r3
 801652e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8016532:	4413      	add	r3, r2
 8016534:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8016538:	0052      	lsls	r2, r2, #1
 801653a:	4611      	mov	r1, r2
 801653c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8016540:	440a      	add	r2, r1
 8016542:	f992 2000 	ldrsb.w	r2, [r2]
 8016546:	fb02 f303 	mul.w	r3, r2, r3
 801654a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801654e:	4413      	add	r3, r2
 8016550:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                    }

                    input_ptr += (input_ch * input_x);
 8016554:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016558:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801655c:	fb02 f303 	mul.w	r3, r2, r3
 8016560:	461a      	mov	r2, r3
 8016562:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8016566:	4413      	add	r3, r2
 8016568:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
                    kernel_ptr += (input_ch * 3);
 801656c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8016570:	4613      	mov	r3, r2
 8016572:	005b      	lsls	r3, r3, #1
 8016574:	4413      	add	r3, r2
 8016576:	461a      	mov	r2, r3
 8016578:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801657c:	4413      	add	r3, r2
 801657e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
                for (int32_t ker_h = ker_h_start; ker_h < MIN(3, input_y - in_h); ++ker_h)
 8016582:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8016586:	3301      	adds	r3, #1
 8016588:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 801658c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8016590:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8016594:	1ad3      	subs	r3, r2, r3
 8016596:	2b03      	cmp	r3, #3
 8016598:	bfa8      	it	ge
 801659a:	2303      	movge	r3, #3
 801659c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80165a0:	429a      	cmp	r2, r3
 80165a2:	db83      	blt.n	80164ac <arm_depthwise_conv_3x3_s8+0xca4>
                }

                out_buff = arm_nn_requantize(out_buff, output_mult[in_ch], output_shift[in_ch]);
 80165a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80165ae:	4413      	add	r3, r2
 80165b0:	6819      	ldr	r1, [r3, #0]
 80165b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80165b6:	009b      	lsls	r3, r3, #2
 80165b8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80165bc:	4413      	add	r3, r2
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80165c4:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 80165c8:	6018      	str	r0, [r3, #0]
 80165ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80165ce:	6019      	str	r1, [r3, #0]
 80165d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80165e0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80165e4:	6812      	ldr	r2, [r2, #0]
 80165e6:	409a      	lsls	r2, r3
 80165e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80165ec:	601a      	str	r2, [r3, #0]
 80165ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80165f2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80165f6:	6812      	ldr	r2, [r2, #0]
 80165f8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80165fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80165fe:	2200      	movs	r2, #0
 8016600:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8016602:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801660a:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801660c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016610:	2200      	movs	r2, #0
 8016612:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016614:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8016618:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	4618      	mov	r0, r3
 8016620:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016624:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8016628:	681b      	ldr	r3, [r3, #0]
 801662a:	461a      	mov	r2, r3
 801662c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016630:	fb02 f501 	mul.w	r5, r2, r1
 8016634:	fb00 f403 	mul.w	r4, r0, r3
 8016638:	442c      	add	r4, r5
 801663a:	fba0 2302 	umull	r2, r3, r0, r2
 801663e:	18e1      	adds	r1, r4, r3
 8016640:	460b      	mov	r3, r1
 8016642:	eb18 0102 	adds.w	r1, r8, r2
 8016646:	6039      	str	r1, [r7, #0]
 8016648:	eb49 0303 	adc.w	r3, r9, r3
 801664c:	607b      	str	r3, [r7, #4]
 801664e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016652:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8016656:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 801665a:	f04f 0200 	mov.w	r2, #0
 801665e:	f04f 0300 	mov.w	r3, #0
 8016662:	0fc2      	lsrs	r2, r0, #31
 8016664:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016668:	17cb      	asrs	r3, r1, #31
 801666a:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801666e:	4613      	mov	r3, r2
 8016670:	600b      	str	r3, [r1, #0]
    return result;
 8016672:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8016676:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016678:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	dc04      	bgt.n	801668c <arm_depthwise_conv_3x3_s8+0xe84>
 8016682:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	425b      	negs	r3, r3
 801668a:	e000      	b.n	801668e <arm_depthwise_conv_3x3_s8+0xe86>
 801668c:	2300      	movs	r3, #0
 801668e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8016692:	6011      	str	r1, [r2, #0]
 8016694:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8016698:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801669a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801669e:	2200      	movs	r2, #0
 80166a0:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80166a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80166a6:	2201      	movs	r2, #1
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	409a      	lsls	r2, r3
 80166ac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80166b0:	3a01      	subs	r2, #1
 80166b2:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80166b4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80166b8:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80166bc:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80166c0:	6809      	ldr	r1, [r1, #0]
 80166c2:	6812      	ldr	r2, [r2, #0]
 80166c4:	400a      	ands	r2, r1
 80166c6:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80166c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80166cc:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80166d0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80166d4:	6809      	ldr	r1, [r1, #0]
 80166d6:	6812      	ldr	r2, [r2, #0]
 80166d8:	fa41 f202 	asr.w	r2, r1, r2
 80166dc:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80166de:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80166e2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80166e6:	6812      	ldr	r2, [r2, #0]
 80166e8:	1052      	asrs	r2, r2, #1
 80166ea:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80166ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	da06      	bge.n	8016704 <arm_depthwise_conv_3x3_s8+0xefc>
        threshold++;
 80166f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80166fa:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80166fe:	6812      	ldr	r2, [r2, #0]
 8016700:	3201      	adds	r2, #1
 8016702:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8016704:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8016708:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801670c:	6812      	ldr	r2, [r2, #0]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	429a      	cmp	r2, r3
 8016712:	dd06      	ble.n	8016722 <arm_depthwise_conv_3x3_s8+0xf1a>
        result++;
 8016714:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016718:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801671c:	6812      	ldr	r2, [r2, #0]
 801671e:	3201      	adds	r2, #1
 8016720:	601a      	str	r2, [r3, #0]
    return result;
 8016722:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016726:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016728:	bf00      	nop
 801672a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff += output_offset;
 801672e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8016732:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8016736:	4413      	add	r3, r2
 8016738:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                out_buff = MIN(MAX(out_buff, output_activation_min), output_activation_max);
 801673c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8016740:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8016744:	4293      	cmp	r3, r2
 8016746:	bfb8      	it	lt
 8016748:	4613      	movlt	r3, r2
 801674a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801674e:	4293      	cmp	r3, r2
 8016750:	bfa8      	it	ge
 8016752:	4613      	movge	r3, r2
 8016754:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
                output[out_idx++] = (int8_t)out_buff;
 8016758:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801675c:	1c5a      	adds	r2, r3, #1
 801675e:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8016762:	461a      	mov	r2, r3
 8016764:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8016768:	4413      	add	r3, r2
 801676a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801676e:	b252      	sxtb	r2, r2
 8016770:	701a      	strb	r2, [r3, #0]
            for (; in_ch < input_ch; ++in_ch)
 8016772:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8016776:	3301      	adds	r3, #1
 8016778:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 801677c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 8016780:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8016784:	429a      	cmp	r2, r3
 8016786:	f6ff ae54 	blt.w	8016432 <arm_depthwise_conv_3x3_s8+0xc2a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 801678a:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801678e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8016792:	4413      	add	r3, r2
 8016794:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8016798:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801679c:	3301      	adds	r3, #1
 801679e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 80167a2:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80167a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80167aa:	429a      	cmp	r2, r3
 80167ac:	f6ff a8d8 	blt.w	8015960 <arm_depthwise_conv_3x3_s8+0x158>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 80167b0:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80167b4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80167b8:	4413      	add	r3, r2
 80167ba:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80167be:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80167c2:	3301      	adds	r3, #1
 80167c4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80167c8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80167cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80167d0:	429a      	cmp	r2, r3
 80167d2:	f6ff a8b0 	blt.w	8015936 <arm_depthwise_conv_3x3_s8+0x12e>
            }
        }
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80167d6:	2300      	movs	r3, #0
}
 80167d8:	4618      	mov	r0, r3
 80167da:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80167de:	46bd      	mov	sp, r7
 80167e0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80167e4:	4770      	bx	lr

080167e6 <depthwise_conv_s8_mult_4>:
                                     const int32_t output_y,
                                     const int32_t output_offset,
                                     const int32_t input_offset,
                                     const int32_t output_activation_min,
                                     const int32_t output_activation_max)
{
 80167e6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80167ea:	b0d7      	sub	sp, #348	; 0x15c
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80167f2:	6020      	str	r0, [r4, #0]
 80167f4:	f107 0020 	add.w	r0, r7, #32
 80167f8:	6001      	str	r1, [r0, #0]
 80167fa:	f107 011c 	add.w	r1, r7, #28
 80167fe:	600a      	str	r2, [r1, #0]
 8016800:	f107 0218 	add.w	r2, r7, #24
 8016804:	6013      	str	r3, [r2, #0]
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 8016806:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801680a:	425b      	negs	r3, r3
 801680c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8016810:	2300      	movs	r3, #0
 8016812:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8016816:	2300      	movs	r3, #0
 8016818:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 801681c:	f000 bcb3 	b.w	8017186 <depthwise_conv_s8_mult_4+0x9a0>
    {
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8016820:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8016824:	425b      	negs	r3, r3
 8016826:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801682a:	2300      	movs	r3, #0
 801682c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8016830:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016834:	2b00      	cmp	r3, #0
 8016836:	dc03      	bgt.n	8016840 <depthwise_conv_s8_mult_4+0x5a>
 8016838:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801683c:	425b      	negs	r3, r3
 801683e:	e000      	b.n	8016842 <depthwise_conv_s8_mult_4+0x5c>
 8016840:	2300      	movs	r3, #0
 8016842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8016846:	f000 bc8b 	b.w	8017160 <depthwise_conv_s8_mult_4+0x97a>
        {
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801684a:	2300      	movs	r3, #0
 801684c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8016850:	2300      	movs	r3, #0
 8016852:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8016856:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801685a:	2b00      	cmp	r3, #0
 801685c:	dc03      	bgt.n	8016866 <depthwise_conv_s8_mult_4+0x80>
 801685e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016862:	425b      	negs	r3, r3
 8016864:	e000      	b.n	8016868 <depthwise_conv_s8_mult_4+0x82>
 8016866:	2300      	movs	r3, #0
 8016868:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801686c:	f000 bc65 	b.w	801713a <depthwise_conv_s8_mult_4+0x954>
                 ++in_ch, out_ch += ch_mult)
            {
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 8016870:	2300      	movs	r3, #0
 8016872:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8016876:	f000 bc4d 	b.w	8017114 <depthwise_conv_s8_mult_4+0x92e>
                {
                    int32_t out_buff[4];

                    out_buff[0] = bias[out_ch + 0 + mult_tile];
 801687a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801687e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016882:	4413      	add	r3, r2
 8016884:	009b      	lsls	r3, r3, #2
 8016886:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801688a:	4413      	add	r3, r2
 801688c:	681a      	ldr	r2, [r3, #0]
 801688e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016892:	601a      	str	r2, [r3, #0]
                    out_buff[1] = bias[out_ch + 1 + mult_tile];
 8016894:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801689e:	4413      	add	r3, r2
 80168a0:	009b      	lsls	r3, r3, #2
 80168a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80168a6:	4413      	add	r3, r2
 80168a8:	681a      	ldr	r2, [r3, #0]
 80168aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80168ae:	605a      	str	r2, [r3, #4]
                    out_buff[2] = bias[out_ch + 2 + mult_tile];
 80168b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80168b4:	1c9a      	adds	r2, r3, #2
 80168b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80168ba:	4413      	add	r3, r2
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80168c2:	4413      	add	r3, r2
 80168c4:	681a      	ldr	r2, [r3, #0]
 80168c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80168ca:	609a      	str	r2, [r3, #8]
                    out_buff[3] = bias[out_ch + 3 + mult_tile];
 80168cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80168d0:	1cda      	adds	r2, r3, #3
 80168d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80168d6:	4413      	add	r3, r2
 80168d8:	009b      	lsls	r3, r3, #2
 80168da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80168de:	4413      	add	r3, r2
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80168e6:	60da      	str	r2, [r3, #12]

                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 80168e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80168ec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80168f0:	e0cd      	b.n	8016a8e <depthwise_conv_s8_mult_4+0x2a8>
                    {
                        int32_t ker_idx = ker_h * (output_ch * kernel_x) + ker_w_start * output_ch + out_ch;
 80168f2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80168f6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80168fa:	fb02 f303 	mul.w	r3, r2, r3
 80168fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8016902:	fb02 f203 	mul.w	r2, r2, r3
 8016906:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801690a:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 801690e:	fb01 f303 	mul.w	r3, r1, r3
 8016912:	4413      	add	r3, r2
 8016914:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016918:	4413      	add	r3, r2
 801691a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        int32_t in_idx = (in_h + ker_h) * (input_ch * input_x) + in_w * input_ch + in_ch;
 801691e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8016922:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016926:	4413      	add	r3, r2
 8016928:	f107 0218 	add.w	r2, r7, #24
 801692c:	f107 0120 	add.w	r1, r7, #32
 8016930:	6812      	ldr	r2, [r2, #0]
 8016932:	6809      	ldr	r1, [r1, #0]
 8016934:	fb01 f202 	mul.w	r2, r1, r2
 8016938:	fb02 f203 	mul.w	r2, r2, r3
 801693c:	f107 0118 	add.w	r1, r7, #24
 8016940:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016944:	6809      	ldr	r1, [r1, #0]
 8016946:	fb01 f303 	mul.w	r3, r1, r3
 801694a:	4413      	add	r3, r2
 801694c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016950:	4413      	add	r3, r2
 8016952:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 8016956:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801695a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801695e:	e081      	b.n	8016a64 <depthwise_conv_s8_mult_4+0x27e>
                             ++ker_w, ker_idx += output_ch)
                        {
                            int32_t in_val = input[in_idx + ker_w * input_ch] + input_offset;
 8016960:	f107 0218 	add.w	r2, r7, #24
 8016964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016968:	6812      	ldr	r2, [r2, #0]
 801696a:	fb02 f203 	mul.w	r2, r2, r3
 801696e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8016972:	4413      	add	r3, r2
 8016974:	461a      	mov	r2, r3
 8016976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4413      	add	r3, r2
 801697e:	f993 3000 	ldrsb.w	r3, [r3]
 8016982:	461a      	mov	r2, r3
 8016984:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8016988:	4413      	add	r3, r2
 801698a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                            out_buff[0] += in_val * kernel[ker_idx + 0 + mult_tile];
 801698e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8016998:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801699c:	440b      	add	r3, r1
 801699e:	4619      	mov	r1, r3
 80169a0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80169a4:	440b      	add	r3, r1
 80169a6:	f993 3000 	ldrsb.w	r3, [r3]
 80169aa:	4619      	mov	r1, r3
 80169ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80169b0:	fb03 f301 	mul.w	r3, r3, r1
 80169b4:	441a      	add	r2, r3
 80169b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80169ba:	601a      	str	r2, [r3, #0]
                            out_buff[1] += in_val * kernel[ker_idx + 1 + mult_tile];
 80169bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80169c0:	685a      	ldr	r2, [r3, #4]
 80169c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80169c6:	1c59      	adds	r1, r3, #1
 80169c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80169cc:	440b      	add	r3, r1
 80169ce:	4619      	mov	r1, r3
 80169d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80169d4:	440b      	add	r3, r1
 80169d6:	f993 3000 	ldrsb.w	r3, [r3]
 80169da:	4619      	mov	r1, r3
 80169dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80169e0:	fb03 f301 	mul.w	r3, r3, r1
 80169e4:	441a      	add	r2, r3
 80169e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80169ea:	605a      	str	r2, [r3, #4]
                            out_buff[2] += in_val * kernel[ker_idx + 2 + mult_tile];
 80169ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80169f0:	689a      	ldr	r2, [r3, #8]
 80169f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80169f6:	1c99      	adds	r1, r3, #2
 80169f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80169fc:	440b      	add	r3, r1
 80169fe:	4619      	mov	r1, r3
 8016a00:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016a04:	440b      	add	r3, r1
 8016a06:	f993 3000 	ldrsb.w	r3, [r3]
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8016a10:	fb03 f301 	mul.w	r3, r3, r1
 8016a14:	441a      	add	r2, r3
 8016a16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016a1a:	609a      	str	r2, [r3, #8]
                            out_buff[3] += in_val * kernel[ker_idx + 3 + mult_tile];
 8016a1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016a20:	68da      	ldr	r2, [r3, #12]
 8016a22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016a26:	1cd9      	adds	r1, r3, #3
 8016a28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016a2c:	440b      	add	r3, r1
 8016a2e:	4619      	mov	r1, r3
 8016a30:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016a34:	440b      	add	r3, r1
 8016a36:	f993 3000 	ldrsb.w	r3, [r3]
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8016a40:	fb03 f301 	mul.w	r3, r3, r1
 8016a44:	441a      	add	r2, r3
 8016a46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016a4a:	60da      	str	r2, [r3, #12]
                             ++ker_w, ker_idx += output_ch)
 8016a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016a50:	3301      	adds	r3, #1
 8016a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8016a56:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8016a5a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a5e:	4413      	add	r3, r2
 8016a60:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                        for (int32_t ker_w = ker_w_start; ker_w < MIN(kernel_x, input_x - in_w);
 8016a64:	f107 0320 	add.w	r3, r7, #32
 8016a68:	681a      	ldr	r2, [r3, #0]
 8016a6a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8016a6e:	1ad2      	subs	r2, r2, r3
 8016a70:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8016a74:	4293      	cmp	r3, r2
 8016a76:	bfa8      	it	ge
 8016a78:	4613      	movge	r3, r2
 8016a7a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	f6ff af6e 	blt.w	8016960 <depthwise_conv_s8_mult_4+0x17a>
                    for (int32_t ker_h = ker_h_start; ker_h < MIN(kernel_y, input_y - in_h); ++ker_h)
 8016a84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016a88:	3301      	adds	r3, #1
 8016a8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8016a8e:	f107 031c 	add.w	r3, r7, #28
 8016a92:	681a      	ldr	r2, [r3, #0]
 8016a94:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8016a98:	1ad2      	subs	r2, r2, r3
 8016a9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	bfa8      	it	ge
 8016aa2:	4613      	movge	r3, r2
 8016aa4:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8016aa8:	429a      	cmp	r2, r3
 8016aaa:	f6ff af22 	blt.w	80168f2 <depthwise_conv_s8_mult_4+0x10c>
                    res = vmaxq_s32(res, vdupq_n_s32(output_activation_min));
                    res = vminq_s32(res, vdupq_n_s32(output_activation_max));
                    vstrbq_s32(output, res);
                    output += 4;
#else
                    out_buff[0] = arm_nn_requantize(
 8016aae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016ab2:	6819      	ldr	r1, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 8016ab4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016ab8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016abc:	4413      	add	r3, r2
 8016abe:	009b      	lsls	r3, r3, #2
 8016ac0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8016ac4:	4413      	add	r3, r2
                    out_buff[0] = arm_nn_requantize(
 8016ac6:	681a      	ldr	r2, [r3, #0]
                        out_buff[0], output_mult[out_ch + 0 + mult_tile], output_shift[out_ch + 0 + mult_tile]);
 8016ac8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8016acc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016ad0:	4403      	add	r3, r0
 8016ad2:	009b      	lsls	r3, r3, #2
 8016ad4:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8016ad8:	4403      	add	r3, r0
                    out_buff[0] = arm_nn_requantize(
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8016ae0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8016ae4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016aec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016af0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8016af4:	fa02 f303 	lsl.w	r3, r2, r3
 8016af8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016afa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016afe:	67bb      	str	r3, [r7, #120]	; 0x78
    q31_t result = 0;
 8016b00:	2300      	movs	r3, #0
 8016b02:	677b      	str	r3, [r7, #116]	; 0x74
    mult.word.low = 1 << 30;
 8016b04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016b0c:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016b0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b12:	2200      	movs	r2, #0
 8016b14:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016b16:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8016b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016b1c:	461a      	mov	r2, r3
 8016b1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016b22:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8016b24:	4608      	mov	r0, r1
 8016b26:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016b2a:	fb00 f503 	mul.w	r5, r0, r3
 8016b2e:	fb02 f401 	mul.w	r4, r2, r1
 8016b32:	442c      	add	r4, r5
 8016b34:	fba2 2300 	umull	r2, r3, r2, r0
 8016b38:	18e1      	adds	r1, r4, r3
 8016b3a:	460b      	mov	r3, r1
 8016b3c:	eb18 0102 	adds.w	r1, r8, r2
 8016b40:	6039      	str	r1, [r7, #0]
 8016b42:	eb49 0303 	adc.w	r3, r9, r3
 8016b46:	607b      	str	r3, [r7, #4]
 8016b48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8016b4c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    result = (int32_t)(mult.long_long >> 31);
 8016b50:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016b54:	f04f 0200 	mov.w	r2, #0
 8016b58:	f04f 0300 	mov.w	r3, #0
 8016b5c:	0fc2      	lsrs	r2, r0, #31
 8016b5e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016b62:	17cb      	asrs	r3, r1, #31
 8016b64:	4613      	mov	r3, r2
 8016b66:	677b      	str	r3, [r7, #116]	; 0x74
    return result;
 8016b68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	dc03      	bgt.n	8016b7a <depthwise_conv_s8_mult_4+0x394>
 8016b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b76:	425b      	negs	r3, r3
 8016b78:	e000      	b.n	8016b7c <depthwise_conv_s8_mult_4+0x396>
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	673a      	str	r2, [r7, #112]	; 0x70
 8016b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    q31_t result = 0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	66bb      	str	r3, [r7, #104]	; 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016b84:	2201      	movs	r2, #1
 8016b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b88:	fa02 f303 	lsl.w	r3, r2, r3
 8016b8c:	3b01      	subs	r3, #1
 8016b8e:	667b      	str	r3, [r7, #100]	; 0x64
    int32_t remainder = remainder_mask & dividend;
 8016b90:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016b94:	4013      	ands	r3, r2
 8016b96:	663b      	str	r3, [r7, #96]	; 0x60
    result = dividend >> exponent;
 8016b98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016b9c:	fa42 f303 	asr.w	r3, r2, r3
 8016ba0:	66bb      	str	r3, [r7, #104]	; 0x68
    q31_t threshold = remainder_mask >> 1;
 8016ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016ba4:	105b      	asrs	r3, r3, #1
 8016ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (result < 0)
 8016ba8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	da02      	bge.n	8016bb4 <depthwise_conv_s8_mult_4+0x3ce>
        threshold++;
 8016bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (remainder > threshold)
 8016bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016bb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	dd02      	ble.n	8016bc2 <depthwise_conv_s8_mult_4+0x3dc>
        result++;
 8016bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	66bb      	str	r3, [r7, #104]	; 0x68
    return result;
 8016bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016bc4:	bf00      	nop
 8016bc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016bca:	601a      	str	r2, [r3, #0]
                    out_buff[1] = arm_nn_requantize(
 8016bcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016bd0:	6859      	ldr	r1, [r3, #4]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 8016bd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016bd6:	1c5a      	adds	r2, r3, #1
 8016bd8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016bdc:	4413      	add	r3, r2
 8016bde:	009b      	lsls	r3, r3, #2
 8016be0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8016be4:	4413      	add	r3, r2
                    out_buff[1] = arm_nn_requantize(
 8016be6:	681a      	ldr	r2, [r3, #0]
                        out_buff[1], output_mult[out_ch + 1 + mult_tile], output_shift[out_ch + 1 + mult_tile]);
 8016be8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016bec:	1c58      	adds	r0, r3, #1
 8016bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016bf2:	4403      	add	r3, r0
 8016bf4:	009b      	lsls	r3, r3, #2
 8016bf6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8016bfa:	4403      	add	r3, r0
                    out_buff[1] = arm_nn_requantize(
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8016c02:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8016c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016c0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016c16:	fa02 f303 	lsl.w	r3, r2, r3
 8016c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8016c22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    q31_t result = 0;
 8016c26:	2300      	movs	r3, #0
 8016c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    mult.word.low = 1 << 30;
 8016c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016c34:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016c36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016c3e:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8016c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016c46:	461a      	mov	r2, r3
 8016c48:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016c4c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8016c50:	4608      	mov	r0, r1
 8016c52:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016c56:	fb00 f503 	mul.w	r5, r0, r3
 8016c5a:	fb02 f401 	mul.w	r4, r2, r1
 8016c5e:	442c      	add	r4, r5
 8016c60:	fba2 2300 	umull	r2, r3, r2, r0
 8016c64:	18e1      	adds	r1, r4, r3
 8016c66:	460b      	mov	r3, r1
 8016c68:	eb18 0102 	adds.w	r1, r8, r2
 8016c6c:	60b9      	str	r1, [r7, #8]
 8016c6e:	eb49 0303 	adc.w	r3, r9, r3
 8016c72:	60fb      	str	r3, [r7, #12]
 8016c74:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8016c78:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    result = (int32_t)(mult.long_long >> 31);
 8016c7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016c80:	f04f 0200 	mov.w	r2, #0
 8016c84:	f04f 0300 	mov.w	r3, #0
 8016c88:	0fc2      	lsrs	r2, r0, #31
 8016c8a:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016c8e:	17cb      	asrs	r3, r1, #31
 8016c90:	4613      	mov	r3, r2
 8016c92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return result;
 8016c96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016c9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	dc03      	bgt.n	8016caa <depthwise_conv_s8_mult_4+0x4c4>
 8016ca2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016ca6:	425b      	negs	r3, r3
 8016ca8:	e000      	b.n	8016cac <depthwise_conv_s8_mult_4+0x4c6>
 8016caa:	2300      	movs	r3, #0
 8016cac:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8016cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    q31_t result = 0;
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016cba:	2201      	movs	r2, #1
 8016cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    int32_t remainder = remainder_mask & dividend;
 8016cca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016cce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cd2:	4013      	ands	r3, r2
 8016cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    result = dividend >> exponent;
 8016cd8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8016cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016ce0:	fa42 f303 	asr.w	r3, r2, r3
 8016ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    q31_t threshold = remainder_mask >> 1;
 8016ce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cec:	105b      	asrs	r3, r3, #1
 8016cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (result < 0)
 8016cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	da04      	bge.n	8016d04 <depthwise_conv_s8_mult_4+0x51e>
        threshold++;
 8016cfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016cfe:	3301      	adds	r3, #1
 8016d00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (remainder > threshold)
 8016d04:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8016d08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	dd04      	ble.n	8016d1a <depthwise_conv_s8_mult_4+0x534>
        result++;
 8016d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016d14:	3301      	adds	r3, #1
 8016d16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return result;
 8016d1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016d1e:	bf00      	nop
 8016d20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016d24:	605a      	str	r2, [r3, #4]
                    out_buff[2] = arm_nn_requantize(
 8016d26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016d2a:	6899      	ldr	r1, [r3, #8]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 8016d2c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016d30:	1c9a      	adds	r2, r3, #2
 8016d32:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d36:	4413      	add	r3, r2
 8016d38:	009b      	lsls	r3, r3, #2
 8016d3a:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8016d3e:	4413      	add	r3, r2
                    out_buff[2] = arm_nn_requantize(
 8016d40:	681a      	ldr	r2, [r3, #0]
                        out_buff[2], output_mult[out_ch + 2 + mult_tile], output_shift[out_ch + 2 + mult_tile]);
 8016d42:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016d46:	1c98      	adds	r0, r3, #2
 8016d48:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d4c:	4403      	add	r3, r0
 8016d4e:	009b      	lsls	r3, r3, #2
 8016d50:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8016d54:	4403      	add	r3, r0
                    out_buff[2] = arm_nn_requantize(
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8016d5c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8016d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8016d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016d68:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d6c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8016d70:	fa02 f303 	lsl.w	r3, r2, r3
 8016d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8016d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    q31_t result = 0;
 8016d80:	2300      	movs	r3, #0
 8016d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    mult.word.low = 1 << 30;
 8016d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016d8e:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016d90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016d94:	2200      	movs	r2, #0
 8016d96:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016d98:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8016d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016da0:	461a      	mov	r2, r3
 8016da2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016da6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8016daa:	4608      	mov	r0, r1
 8016dac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016db0:	fb00 f503 	mul.w	r5, r0, r3
 8016db4:	fb02 f401 	mul.w	r4, r2, r1
 8016db8:	442c      	add	r4, r5
 8016dba:	fba2 2300 	umull	r2, r3, r2, r0
 8016dbe:	18e1      	adds	r1, r4, r3
 8016dc0:	460b      	mov	r3, r1
 8016dc2:	eb18 0102 	adds.w	r1, r8, r2
 8016dc6:	6139      	str	r1, [r7, #16]
 8016dc8:	eb49 0303 	adc.w	r3, r9, r3
 8016dcc:	617b      	str	r3, [r7, #20]
 8016dce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8016dd2:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 8016dd6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8016dda:	f04f 0200 	mov.w	r2, #0
 8016dde:	f04f 0300 	mov.w	r3, #0
 8016de2:	0fc2      	lsrs	r2, r0, #31
 8016de4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016de8:	17cb      	asrs	r3, r1, #31
 8016dea:	4613      	mov	r3, r2
 8016dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return result;
 8016df0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	dc03      	bgt.n	8016e04 <depthwise_conv_s8_mult_4+0x61e>
 8016dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e00:	425b      	negs	r3, r3
 8016e02:	e000      	b.n	8016e06 <depthwise_conv_s8_mult_4+0x620>
 8016e04:	2300      	movs	r3, #0
 8016e06:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8016e0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    q31_t result = 0;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016e14:	2201      	movs	r2, #1
 8016e16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e1e:	3b01      	subs	r3, #1
 8016e20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int32_t remainder = remainder_mask & dividend;
 8016e24:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016e2c:	4013      	ands	r3, r2
 8016e2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result = dividend >> exponent;
 8016e32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016e36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016e3a:	fa42 f303 	asr.w	r3, r2, r3
 8016e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    q31_t threshold = remainder_mask >> 1;
 8016e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8016e46:	105b      	asrs	r3, r3, #1
 8016e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (result < 0)
 8016e4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	da04      	bge.n	8016e5e <depthwise_conv_s8_mult_4+0x678>
        threshold++;
 8016e54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016e58:	3301      	adds	r3, #1
 8016e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (remainder > threshold)
 8016e5e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016e62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016e66:	429a      	cmp	r2, r3
 8016e68:	dd04      	ble.n	8016e74 <depthwise_conv_s8_mult_4+0x68e>
        result++;
 8016e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016e6e:	3301      	adds	r3, #1
 8016e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    return result;
 8016e74:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016e78:	bf00      	nop
 8016e7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016e7e:	609a      	str	r2, [r3, #8]
                    out_buff[3] = arm_nn_requantize(
 8016e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016e84:	68d9      	ldr	r1, [r3, #12]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 8016e86:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016e8a:	1cda      	adds	r2, r3, #3
 8016e8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016e90:	4413      	add	r3, r2
 8016e92:	009b      	lsls	r3, r3, #2
 8016e94:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8016e98:	4413      	add	r3, r2
                    out_buff[3] = arm_nn_requantize(
 8016e9a:	681a      	ldr	r2, [r3, #0]
                        out_buff[3], output_mult[out_ch + 3 + mult_tile], output_shift[out_ch + 3 + mult_tile]);
 8016e9c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8016ea0:	1cd8      	adds	r0, r3, #3
 8016ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016ea6:	4403      	add	r3, r0
 8016ea8:	009b      	lsls	r3, r3, #2
 8016eaa:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 8016eae:	4403      	add	r3, r0
                    out_buff[3] = arm_nn_requantize(
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8016eb6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8016eba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8016ebe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016ec2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ec6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8016eca:	fa02 f303 	lsl.w	r3, r2, r3
 8016ece:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8016ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016ed6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    q31_t result = 0;
 8016eda:	2300      	movs	r3, #0
 8016edc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    mult.word.low = 1 << 30;
 8016ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016ee4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8016ee8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8016eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016eee:	2200      	movs	r2, #0
 8016ef0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8016ef2:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8016ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8016efa:	461a      	mov	r2, r3
 8016efc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8016f00:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8016f04:	4608      	mov	r0, r1
 8016f06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8016f0a:	fb00 f503 	mul.w	r5, r0, r3
 8016f0e:	fb02 f401 	mul.w	r4, r2, r1
 8016f12:	442c      	add	r4, r5
 8016f14:	fba2 2300 	umull	r2, r3, r2, r0
 8016f18:	18e1      	adds	r1, r4, r3
 8016f1a:	460b      	mov	r3, r1
 8016f1c:	eb18 0a02 	adds.w	sl, r8, r2
 8016f20:	eb49 0b03 	adc.w	fp, r9, r3
 8016f24:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
    result = (int32_t)(mult.long_long >> 31);
 8016f28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016f2c:	f04f 0200 	mov.w	r2, #0
 8016f30:	f04f 0300 	mov.w	r3, #0
 8016f34:	0fc2      	lsrs	r2, r0, #31
 8016f36:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8016f3a:	17cb      	asrs	r3, r1, #31
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    return result;
 8016f42:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016f46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	dc03      	bgt.n	8016f56 <depthwise_conv_s8_mult_4+0x770>
 8016f4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016f52:	425b      	negs	r3, r3
 8016f54:	e000      	b.n	8016f58 <depthwise_conv_s8_mult_4+0x772>
 8016f56:	2300      	movs	r3, #0
 8016f58:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8016f5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    q31_t result = 0;
 8016f60:	2300      	movs	r3, #0
 8016f62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    const q31_t remainder_mask = (1 << exponent) - 1;
 8016f66:	2201      	movs	r2, #1
 8016f68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8016f70:	3b01      	subs	r3, #1
 8016f72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    int32_t remainder = remainder_mask & dividend;
 8016f76:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8016f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016f7e:	4013      	ands	r3, r2
 8016f80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    result = dividend >> exponent;
 8016f84:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8016f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8016f8c:	fa42 f303 	asr.w	r3, r2, r3
 8016f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    q31_t threshold = remainder_mask >> 1;
 8016f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016f98:	105b      	asrs	r3, r3, #1
 8016f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (result < 0)
 8016f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	da04      	bge.n	8016fb0 <depthwise_conv_s8_mult_4+0x7ca>
        threshold++;
 8016fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016faa:	3301      	adds	r3, #1
 8016fac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    if (remainder > threshold)
 8016fb0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8016fb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016fb8:	429a      	cmp	r2, r3
 8016fba:	dd04      	ble.n	8016fc6 <depthwise_conv_s8_mult_4+0x7e0>
        result++;
 8016fbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    return result;
 8016fc6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8016fca:	bf00      	nop
 8016fcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016fd0:	60da      	str	r2, [r3, #12]

                    out_buff[0] += output_offset;
 8016fd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016fd6:	681a      	ldr	r2, [r3, #0]
 8016fd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016fdc:	441a      	add	r2, r3
 8016fde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016fe2:	601a      	str	r2, [r3, #0]
                    out_buff[1] += output_offset;
 8016fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016fe8:	685a      	ldr	r2, [r3, #4]
 8016fea:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8016fee:	441a      	add	r2, r3
 8016ff0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016ff4:	605a      	str	r2, [r3, #4]
                    out_buff[2] += output_offset;
 8016ff6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016ffa:	689a      	ldr	r2, [r3, #8]
 8016ffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8017000:	441a      	add	r2, r3
 8017002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017006:	609a      	str	r2, [r3, #8]
                    out_buff[3] += output_offset;
 8017008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801700c:	68da      	ldr	r2, [r3, #12]
 801700e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8017012:	441a      	add	r2, r3
 8017014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017018:	60da      	str	r2, [r3, #12]

                    out_buff[0] = MIN(MAX(out_buff[0], output_activation_min), output_activation_max);
 801701a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801701e:	681a      	ldr	r2, [r3, #0]
 8017020:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017024:	429a      	cmp	r2, r3
 8017026:	bfb8      	it	lt
 8017028:	461a      	movlt	r2, r3
 801702a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801702e:	429a      	cmp	r2, r3
 8017030:	bfa8      	it	ge
 8017032:	461a      	movge	r2, r3
 8017034:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017038:	601a      	str	r2, [r3, #0]
                    out_buff[1] = MIN(MAX(out_buff[1], output_activation_min), output_activation_max);
 801703a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801703e:	685a      	ldr	r2, [r3, #4]
 8017040:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017044:	429a      	cmp	r2, r3
 8017046:	bfb8      	it	lt
 8017048:	461a      	movlt	r2, r3
 801704a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801704e:	429a      	cmp	r2, r3
 8017050:	bfa8      	it	ge
 8017052:	461a      	movge	r2, r3
 8017054:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017058:	605a      	str	r2, [r3, #4]
                    out_buff[2] = MIN(MAX(out_buff[2], output_activation_min), output_activation_max);
 801705a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801705e:	689a      	ldr	r2, [r3, #8]
 8017060:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017064:	429a      	cmp	r2, r3
 8017066:	bfb8      	it	lt
 8017068:	461a      	movlt	r2, r3
 801706a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801706e:	429a      	cmp	r2, r3
 8017070:	bfa8      	it	ge
 8017072:	461a      	movge	r2, r3
 8017074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017078:	609a      	str	r2, [r3, #8]
                    out_buff[3] = MIN(MAX(out_buff[3], output_activation_min), output_activation_max);
 801707a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801707e:	68da      	ldr	r2, [r3, #12]
 8017080:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8017084:	429a      	cmp	r2, r3
 8017086:	bfb8      	it	lt
 8017088:	461a      	movlt	r2, r3
 801708a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801708e:	429a      	cmp	r2, r3
 8017090:	bfa8      	it	ge
 8017092:	461a      	movge	r2, r3
 8017094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017098:	60da      	str	r2, [r3, #12]

                    output[out_idx++] = (int8_t)out_buff[0];
 801709a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801709e:	6819      	ldr	r1, [r3, #0]
 80170a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80170a4:	1c5a      	adds	r2, r3, #1
 80170a6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80170aa:	461a      	mov	r2, r3
 80170ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80170b0:	4413      	add	r3, r2
 80170b2:	b24a      	sxtb	r2, r1
 80170b4:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[1];
 80170b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80170ba:	6859      	ldr	r1, [r3, #4]
 80170bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80170c0:	1c5a      	adds	r2, r3, #1
 80170c2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80170c6:	461a      	mov	r2, r3
 80170c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80170cc:	4413      	add	r3, r2
 80170ce:	b24a      	sxtb	r2, r1
 80170d0:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[2];
 80170d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80170d6:	6899      	ldr	r1, [r3, #8]
 80170d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80170dc:	1c5a      	adds	r2, r3, #1
 80170de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80170e2:	461a      	mov	r2, r3
 80170e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80170e8:	4413      	add	r3, r2
 80170ea:	b24a      	sxtb	r2, r1
 80170ec:	701a      	strb	r2, [r3, #0]
                    output[out_idx++] = (int8_t)out_buff[3];
 80170ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80170f2:	68d9      	ldr	r1, [r3, #12]
 80170f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80170f8:	1c5a      	adds	r2, r3, #1
 80170fa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80170fe:	461a      	mov	r2, r3
 8017100:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8017104:	4413      	add	r3, r2
 8017106:	b24a      	sxtb	r2, r1
 8017108:	701a      	strb	r2, [r3, #0]
                for (int mult_tile = 0; mult_tile < ch_mult; mult_tile += 4)
 801710a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801710e:	3304      	adds	r3, #4
 8017110:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8017114:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8017118:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801711c:	429a      	cmp	r2, r3
 801711e:	f6ff abac 	blt.w	801687a <depthwise_conv_s8_mult_4+0x94>
                 ++in_ch, out_ch += ch_mult)
 8017122:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017126:	3301      	adds	r3, #1
 8017128:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801712c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017130:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8017134:	4413      	add	r3, r2
 8017136:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
            for (int32_t in_ch = 0, out_ch = 0, ker_w_start = MAX(0, -in_w); out_ch < output_ch;
 801713a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801713e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8017142:	429a      	cmp	r2, r3
 8017144:	f6ff ab94 	blt.w	8016870 <depthwise_conv_s8_mult_4+0x8a>
        for (int32_t in_w = -pad_x, out_w = 0, ker_h_start = MAX(0, -in_h); out_w < output_x; in_w += stride_x, ++out_w)
 8017148:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801714c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8017150:	4413      	add	r3, r2
 8017152:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8017156:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801715a:	3301      	adds	r3, #1
 801715c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017160:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8017164:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8017168:	429a      	cmp	r2, r3
 801716a:	f6ff ab6e 	blt.w	801684a <depthwise_conv_s8_mult_4+0x64>
    for (int32_t in_h = -pad_y, out_h = 0, out_idx = 0; out_h < output_y; in_h += stride_y, ++out_h)
 801716e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017172:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8017176:	4413      	add	r3, r2
 8017178:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801717c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017180:	3301      	adds	r3, #1
 8017182:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8017186:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801718a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801718e:	429a      	cmp	r2, r3
 8017190:	f6ff ab46 	blt.w	8016820 <depthwise_conv_s8_mult_4+0x3a>
#endif
                }
            }
        }
    }
}
 8017194:	bf00      	nop
 8017196:	bf00      	nop
 8017198:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 801719c:	46bd      	mov	sp, r7
 801719e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80171a2:	4770      	bx	lr

080171a4 <depthwise_conv_s8_generic>:
                                      const uint16_t output_y,
                                      const int32_t output_offset,
                                      const int32_t input_offset,
                                      const int32_t output_activation_min,
                                      const int32_t output_activation_max)
{
 80171a4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80171a8:	b0a4      	sub	sp, #144	; 0x90
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	60f8      	str	r0, [r7, #12]
 80171ae:	4608      	mov	r0, r1
 80171b0:	4611      	mov	r1, r2
 80171b2:	461a      	mov	r2, r3
 80171b4:	4603      	mov	r3, r0
 80171b6:	817b      	strh	r3, [r7, #10]
 80171b8:	460b      	mov	r3, r1
 80171ba:	813b      	strh	r3, [r7, #8]
 80171bc:	4613      	mov	r3, r2
 80171be:	80fb      	strh	r3, [r7, #6]
    (void)output_ch;
    int i_out = 0;
 80171c0:	2300      	movs	r3, #0
 80171c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 80171c6:	2300      	movs	r3, #0
 80171c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80171cc:	e165      	b.n	801749a <depthwise_conv_s8_generic+0x2f6>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 80171ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80171d2:	b29b      	uxth	r3, r3
 80171d4:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 80171d8:	fb12 f303 	smulbb	r3, r2, r3
 80171dc:	b29a      	uxth	r2, r3
 80171de:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80171e2:	1ad3      	subs	r3, r2, r3
 80171e4:	b29b      	uxth	r3, r3
 80171e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 80171ea:	2300      	movs	r3, #0
 80171ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80171f0:	e147      	b.n	8017482 <depthwise_conv_s8_generic+0x2de>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 80171f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80171f6:	b29b      	uxth	r3, r3
 80171f8:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
 80171fc:	fb12 f303 	smulbb	r3, r2, r3
 8017200:	b29a      	uxth	r2, r3
 8017202:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8017206:	1ad3      	subs	r3, r2, r3
 8017208:	b29b      	uxth	r3, r3
 801720a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 801720e:	2300      	movs	r3, #0
 8017210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017214:	e12a      	b.n	801746c <depthwise_conv_s8_generic+0x2c8>
            {
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 8017216:	2300      	movs	r3, #0
 8017218:	67fb      	str	r3, [r7, #124]	; 0x7c
 801721a:	e11c      	b.n	8017456 <depthwise_conv_s8_generic+0x2b2>
                {
                    const int idx_out_ch = i_ch_mult + i_input_ch * ch_mult;
 801721c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8017220:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017224:	fb02 f303 	mul.w	r3, r2, r3
 8017228:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801722a:	4413      	add	r3, r2
 801722c:	66bb      	str	r3, [r7, #104]	; 0x68
                    int32_t acc_0;
                    /* Condition for kernel start dimension: (base_idx_<x,y> + ker_<x,y>_start) >= 0 */
                    const int ker_y_start = MAX(0, -base_idx_y);
 801722e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8017232:	2b00      	cmp	r3, #0
 8017234:	dc03      	bgt.n	801723e <depthwise_conv_s8_generic+0x9a>
 8017236:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801723a:	425b      	negs	r3, r3
 801723c:	e000      	b.n	8017240 <depthwise_conv_s8_generic+0x9c>
 801723e:	2300      	movs	r3, #0
 8017240:	667b      	str	r3, [r7, #100]	; 0x64
                    const int ker_x_start = MAX(0, -base_idx_x);
 8017242:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8017246:	2b00      	cmp	r3, #0
 8017248:	dc03      	bgt.n	8017252 <depthwise_conv_s8_generic+0xae>
 801724a:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 801724e:	425b      	negs	r3, r3
 8017250:	e000      	b.n	8017254 <depthwise_conv_s8_generic+0xb0>
 8017252:	2300      	movs	r3, #0
 8017254:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Condition for kernel end dimension: (base_idx_<x,y> + ker_<x,y>_end) < input_<x,y> */
                    const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 8017256:	893a      	ldrh	r2, [r7, #8]
 8017258:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 801725c:	1ad2      	subs	r2, r2, r3
 801725e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8017262:	4293      	cmp	r3, r2
 8017264:	bfa8      	it	ge
 8017266:	4613      	movge	r3, r2
 8017268:	65fb      	str	r3, [r7, #92]	; 0x5c
                    const int ker_x_end = MIN(kernel_x, input_x - base_idx_x);
 801726a:	897a      	ldrh	r2, [r7, #10]
 801726c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 8017270:	1ad2      	subs	r2, r2, r3
 8017272:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8017276:	4293      	cmp	r3, r2
 8017278:	bfa8      	it	ge
 801727a:	4613      	movge	r3, r2
 801727c:	65bb      	str	r3, [r7, #88]	; 0x58
                    acc_0 = bias[idx_out_ch];
 801727e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017280:	009b      	lsls	r3, r3, #2
 8017282:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8017286:	4413      	add	r3, r2
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	67bb      	str	r3, [r7, #120]	; 0x78

                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801728c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801728e:	677b      	str	r3, [r7, #116]	; 0x74
 8017290:	e048      	b.n	8017324 <depthwise_conv_s8_generic+0x180>
                    {
                        const int32_t idx_y = base_idx_y + i_ker_y;
 8017292:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8017296:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017298:	4413      	add	r3, r2
 801729a:	657b      	str	r3, [r7, #84]	; 0x54
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 801729c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801729e:	673b      	str	r3, [r7, #112]	; 0x70
 80172a0:	e039      	b.n	8017316 <depthwise_conv_s8_generic+0x172>
                        {
                            const int32_t idx_x = base_idx_x + i_ker_x;
 80172a2:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 80172a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80172a8:	4413      	add	r3, r2
 80172aa:	653b      	str	r3, [r7, #80]	; 0x50
                            int32_t idx_0 = (idx_y * input_x + idx_x) * input_ch + i_input_ch;
 80172ac:	897b      	ldrh	r3, [r7, #10]
 80172ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80172b0:	fb02 f203 	mul.w	r2, r2, r3
 80172b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172b6:	4413      	add	r3, r2
 80172b8:	88fa      	ldrh	r2, [r7, #6]
 80172ba:	fb02 f303 	mul.w	r3, r2, r3
 80172be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80172c2:	4413      	add	r3, r2
 80172c4:	64fb      	str	r3, [r7, #76]	; 0x4c
                            int32_t ker_idx_0 = (i_ker_y * kernel_x + i_ker_x) * (input_ch * ch_mult) + idx_out_ch;
 80172c6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80172ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80172cc:	fb02 f203 	mul.w	r2, r2, r3
 80172d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80172d2:	4413      	add	r3, r2
 80172d4:	88fa      	ldrh	r2, [r7, #6]
 80172d6:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 80172da:	fb01 f202 	mul.w	r2, r1, r2
 80172de:	fb02 f303 	mul.w	r3, r2, r3
 80172e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80172e4:	4413      	add	r3, r2
 80172e6:	64bb      	str	r3, [r7, #72]	; 0x48

                            acc_0 += (input[idx_0] + input_offset) * kernel[ker_idx_0];
 80172e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80172ea:	68fa      	ldr	r2, [r7, #12]
 80172ec:	4413      	add	r3, r2
 80172ee:	f993 3000 	ldrsb.w	r3, [r3]
 80172f2:	461a      	mov	r2, r3
 80172f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80172f8:	4413      	add	r3, r2
 80172fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80172fc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8017300:	440a      	add	r2, r1
 8017302:	f992 2000 	ldrsb.w	r2, [r2]
 8017306:	fb02 f303 	mul.w	r3, r2, r3
 801730a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801730c:	4413      	add	r3, r2
 801730e:	67bb      	str	r3, [r7, #120]	; 0x78
                        for (int i_ker_x = ker_x_start; i_ker_x < ker_x_end; i_ker_x++)
 8017310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017312:	3301      	adds	r3, #1
 8017314:	673b      	str	r3, [r7, #112]	; 0x70
 8017316:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8017318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801731a:	429a      	cmp	r2, r3
 801731c:	dbc1      	blt.n	80172a2 <depthwise_conv_s8_generic+0xfe>
                    for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 801731e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017320:	3301      	adds	r3, #1
 8017322:	677b      	str	r3, [r7, #116]	; 0x74
 8017324:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017328:	429a      	cmp	r2, r3
 801732a:	dbb2      	blt.n	8017292 <depthwise_conv_s8_generic+0xee>
                        }
                    }

                    /* Requantize and clamp output to provided range */
                    acc_0 = arm_nn_requantize(acc_0, output_mult[idx_out_ch], output_shift[idx_out_ch]);
 801732c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801732e:	009b      	lsls	r3, r3, #2
 8017330:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8017334:	4413      	add	r3, r2
 8017336:	681a      	ldr	r2, [r3, #0]
 8017338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801733a:	009b      	lsls	r3, r3, #2
 801733c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8017340:	440b      	add	r3, r1
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017346:	6479      	str	r1, [r7, #68]	; 0x44
 8017348:	643a      	str	r2, [r7, #64]	; 0x40
 801734a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801734c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801734e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017354:	fa02 f303 	lsl.w	r3, r2, r3
 8017358:	63bb      	str	r3, [r7, #56]	; 0x38
 801735a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801735c:	637b      	str	r3, [r7, #52]	; 0x34
    q31_t result = 0;
 801735e:	2300      	movs	r3, #0
 8017360:	633b      	str	r3, [r7, #48]	; 0x30
    mult.word.low = 1 << 30;
 8017362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017366:	613b      	str	r3, [r7, #16]
    mult.word.high = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	617b      	str	r3, [r7, #20]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801736c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8017370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017372:	4618      	mov	r0, r3
 8017374:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8017378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801737a:	461a      	mov	r2, r3
 801737c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017380:	fb02 fc01 	mul.w	ip, r2, r1
 8017384:	fb00 f603 	mul.w	r6, r0, r3
 8017388:	4466      	add	r6, ip
 801738a:	fba0 2302 	umull	r2, r3, r0, r2
 801738e:	18f1      	adds	r1, r6, r3
 8017390:	460b      	mov	r3, r1
 8017392:	eb14 0802 	adds.w	r8, r4, r2
 8017396:	eb45 0903 	adc.w	r9, r5, r3
 801739a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    result = (int32_t)(mult.long_long >> 31);
 801739e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80173a2:	f04f 0200 	mov.w	r2, #0
 80173a6:	f04f 0300 	mov.w	r3, #0
 80173aa:	0fc2      	lsrs	r2, r0, #31
 80173ac:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80173b0:	17cb      	asrs	r3, r1, #31
 80173b2:	4613      	mov	r3, r2
 80173b4:	633b      	str	r3, [r7, #48]	; 0x30
    return result;
 80173b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80173b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	dc02      	bgt.n	80173c4 <depthwise_conv_s8_generic+0x220>
 80173be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173c0:	425b      	negs	r3, r3
 80173c2:	e000      	b.n	80173c6 <depthwise_conv_s8_generic+0x222>
 80173c4:	2300      	movs	r3, #0
 80173c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80173c8:	62bb      	str	r3, [r7, #40]	; 0x28
    q31_t result = 0;
 80173ca:	2300      	movs	r3, #0
 80173cc:	627b      	str	r3, [r7, #36]	; 0x24
    const q31_t remainder_mask = (1 << exponent) - 1;
 80173ce:	2201      	movs	r2, #1
 80173d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d2:	fa02 f303 	lsl.w	r3, r2, r3
 80173d6:	3b01      	subs	r3, #1
 80173d8:	623b      	str	r3, [r7, #32]
    int32_t remainder = remainder_mask & dividend;
 80173da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173dc:	6a3b      	ldr	r3, [r7, #32]
 80173de:	4013      	ands	r3, r2
 80173e0:	61fb      	str	r3, [r7, #28]
    result = dividend >> exponent;
 80173e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e6:	fa42 f303 	asr.w	r3, r2, r3
 80173ea:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t threshold = remainder_mask >> 1;
 80173ec:	6a3b      	ldr	r3, [r7, #32]
 80173ee:	105b      	asrs	r3, r3, #1
 80173f0:	61bb      	str	r3, [r7, #24]
    if (result < 0)
 80173f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	da02      	bge.n	80173fe <depthwise_conv_s8_generic+0x25a>
        threshold++;
 80173f8:	69bb      	ldr	r3, [r7, #24]
 80173fa:	3301      	adds	r3, #1
 80173fc:	61bb      	str	r3, [r7, #24]
    if (remainder > threshold)
 80173fe:	69fa      	ldr	r2, [r7, #28]
 8017400:	69bb      	ldr	r3, [r7, #24]
 8017402:	429a      	cmp	r2, r3
 8017404:	dd02      	ble.n	801740c <depthwise_conv_s8_generic+0x268>
        result++;
 8017406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017408:	3301      	adds	r3, #1
 801740a:	627b      	str	r3, [r7, #36]	; 0x24
    return result;
 801740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801740e:	bf00      	nop
 8017410:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 += output_offset;
 8017412:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8017414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017418:	4413      	add	r3, r2
 801741a:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MAX(acc_0, output_activation_min);
 801741c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801741e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8017422:	4293      	cmp	r3, r2
 8017424:	bfb8      	it	lt
 8017426:	4613      	movlt	r3, r2
 8017428:	67bb      	str	r3, [r7, #120]	; 0x78
                    acc_0 = MIN(acc_0, output_activation_max);
 801742a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801742c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8017430:	4293      	cmp	r3, r2
 8017432:	bfa8      	it	ge
 8017434:	4613      	movge	r3, r2
 8017436:	67bb      	str	r3, [r7, #120]	; 0x78

                    output[i_out++] = acc_0;
 8017438:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801743c:	1c5a      	adds	r2, r3, #1
 801743e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017442:	461a      	mov	r2, r3
 8017444:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8017448:	4413      	add	r3, r2
 801744a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801744c:	b252      	sxtb	r2, r2
 801744e:	701a      	strb	r2, [r3, #0]
                for (int i_ch_mult = 0; i_ch_mult < ch_mult; i_ch_mult++)
 8017450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017452:	3301      	adds	r3, #1
 8017454:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017456:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801745a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801745c:	429a      	cmp	r2, r3
 801745e:	f6ff aedd 	blt.w	801721c <depthwise_conv_s8_generic+0x78>
            for (int i_input_ch = 0; i_input_ch < input_ch; i_input_ch++)
 8017462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017466:	3301      	adds	r3, #1
 8017468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801746c:	88fb      	ldrh	r3, [r7, #6]
 801746e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017472:	429a      	cmp	r2, r3
 8017474:	f6ff aecf 	blt.w	8017216 <depthwise_conv_s8_generic+0x72>
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 8017478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801747c:	3301      	adds	r3, #1
 801747e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017482:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	; 0xdc
 8017486:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801748a:	429a      	cmp	r2, r3
 801748c:	f6ff aeb1 	blt.w	80171f2 <depthwise_conv_s8_generic+0x4e>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 8017490:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017494:	3301      	adds	r3, #1
 8017496:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801749a:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	; 0xe0
 801749e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80174a2:	429a      	cmp	r2, r3
 80174a4:	f6ff ae93 	blt.w	80171ce <depthwise_conv_s8_generic+0x2a>
                }
            }
        }
    }
}
 80174a8:	bf00      	nop
 80174aa:	bf00      	nop
 80174ac:	3790      	adds	r7, #144	; 0x90
 80174ae:	46bd      	mov	sp, r7
 80174b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80174b4:	4770      	bx	lr

080174b6 <arm_depthwise_conv_s8>:
                                 const q7_t *kernel,
                                 const cmsis_nn_dims *bias_dims,
                                 const int32_t *bias,
                                 const cmsis_nn_dims *output_dims,
                                 q7_t *output)
{
 80174b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ba:	b0a4      	sub	sp, #144	; 0x90
 80174bc:	af14      	add	r7, sp, #80	; 0x50
 80174be:	63f8      	str	r0, [r7, #60]	; 0x3c
 80174c0:	63b9      	str	r1, [r7, #56]	; 0x38
 80174c2:	637a      	str	r2, [r7, #52]	; 0x34
 80174c4:	633b      	str	r3, [r7, #48]	; 0x30
    (void)dw_conv_params->dilation;
    (void)bias_dims;
    (void)ctx;

    if (dw_conv_params->ch_mult % 4 == 0)
 80174c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	f003 0303 	and.w	r3, r3, #3
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d157      	bne.n	8017582 <arm_depthwise_conv_s8+0xcc>
    {
        depthwise_conv_s8_mult_4(input,
 80174d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d4:	689b      	ldr	r3, [r3, #8]
 80174d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80174d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174da:	685a      	ldr	r2, [r3, #4]
 80174dc:	62ba      	str	r2, [r7, #40]	; 0x28
 80174de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e0:	68d8      	ldr	r0, [r3, #12]
 80174e2:	6278      	str	r0, [r7, #36]	; 0x24
 80174e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80174e6:	68de      	ldr	r6, [r3, #12]
 80174e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ea:	689c      	ldr	r4, [r3, #8]
 80174ec:	623c      	str	r4, [r7, #32]
 80174ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80174f0:	689d      	ldr	r5, [r3, #8]
 80174f2:	61fd      	str	r5, [r7, #28]
 80174f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80174f6:	6859      	ldr	r1, [r3, #4]
 80174f8:	61b9      	str	r1, [r7, #24]
 80174fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174fc:	6958      	ldr	r0, [r3, #20]
 80174fe:	6178      	str	r0, [r7, #20]
 8017500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017502:	699b      	ldr	r3, [r3, #24]
 8017504:	613b      	str	r3, [r7, #16]
 8017506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017508:	68da      	ldr	r2, [r3, #12]
 801750a:	60fa      	str	r2, [r7, #12]
 801750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801750e:	691c      	ldr	r4, [r3, #16]
 8017510:	60bc      	str	r4, [r7, #8]
                                 dw_conv_params->padding.h,
                                 dw_conv_params->stride.w,
                                 dw_conv_params->stride.h,
                                 bias,
                                 output,
                                 quant_params->shift,
 8017512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017514:	685d      	ldr	r5, [r3, #4]
 8017516:	607d      	str	r5, [r7, #4]
                                 quant_params->multiplier,
 8017518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751a:	6819      	ldr	r1, [r3, #0]
 801751c:	6039      	str	r1, [r7, #0]
        depthwise_conv_s8_mult_4(input,
 801751e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017520:	689d      	ldr	r5, [r3, #8]
 8017522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017524:	685c      	ldr	r4, [r3, #4]
 8017526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017528:	6858      	ldr	r0, [r3, #4]
 801752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801752c:	6819      	ldr	r1, [r3, #0]
 801752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017536:	9312      	str	r3, [sp, #72]	; 0x48
 8017538:	9211      	str	r2, [sp, #68]	; 0x44
 801753a:	9110      	str	r1, [sp, #64]	; 0x40
 801753c:	900f      	str	r0, [sp, #60]	; 0x3c
 801753e:	940e      	str	r4, [sp, #56]	; 0x38
 8017540:	950d      	str	r5, [sp, #52]	; 0x34
 8017542:	6839      	ldr	r1, [r7, #0]
 8017544:	910c      	str	r1, [sp, #48]	; 0x30
 8017546:	687d      	ldr	r5, [r7, #4]
 8017548:	950b      	str	r5, [sp, #44]	; 0x2c
 801754a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801754c:	930a      	str	r3, [sp, #40]	; 0x28
 801754e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017550:	9309      	str	r3, [sp, #36]	; 0x24
 8017552:	68bc      	ldr	r4, [r7, #8]
 8017554:	9408      	str	r4, [sp, #32]
 8017556:	68fa      	ldr	r2, [r7, #12]
 8017558:	9207      	str	r2, [sp, #28]
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	9306      	str	r3, [sp, #24]
 801755e:	6978      	ldr	r0, [r7, #20]
 8017560:	9005      	str	r0, [sp, #20]
 8017562:	69b9      	ldr	r1, [r7, #24]
 8017564:	9104      	str	r1, [sp, #16]
 8017566:	69fd      	ldr	r5, [r7, #28]
 8017568:	9503      	str	r5, [sp, #12]
 801756a:	6a3c      	ldr	r4, [r7, #32]
 801756c:	9402      	str	r4, [sp, #8]
 801756e:	9601      	str	r6, [sp, #4]
 8017570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017572:	9300      	str	r3, [sp, #0]
 8017574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801757a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801757c:	f7ff f933 	bl	80167e6 <depthwise_conv_s8_mult_4>
 8017580:	e063      	b.n	801764a <arm_depthwise_conv_s8+0x194>
                                 dw_conv_params->activation.max);
    }
    else
    {
        depthwise_conv_s8_generic(input,
                                  input_dims->w,
 8017582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017584:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 8017586:	fa1f fc83 	uxth.w	ip, r3
                                  input_dims->h,
 801758a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758c:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 801758e:	fa1f fe83 	uxth.w	lr, r3
                                  input_dims->c,
 8017592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017594:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 8017596:	fa1f f883 	uxth.w	r8, r3
                                  kernel,
                                  output_dims->c,
 801759a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801759c:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 801759e:	b29e      	uxth	r6, r3
                                  dw_conv_params->ch_mult,
 80175a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a2:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  filter_dims->w,
 80175a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175aa:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 80175ac:	b29a      	uxth	r2, r3
 80175ae:	62ba      	str	r2, [r7, #40]	; 0x28
                                  filter_dims->h,
 80175b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175b2:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 80175b4:	b299      	uxth	r1, r3
 80175b6:	6279      	str	r1, [r7, #36]	; 0x24
                                  dw_conv_params->padding.w,
 80175b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ba:	695b      	ldr	r3, [r3, #20]
        depthwise_conv_s8_generic(input,
 80175bc:	b298      	uxth	r0, r3
 80175be:	6238      	str	r0, [r7, #32]
                                  dw_conv_params->padding.h,
 80175c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175c2:	699b      	ldr	r3, [r3, #24]
        depthwise_conv_s8_generic(input,
 80175c4:	b29c      	uxth	r4, r3
 80175c6:	61fc      	str	r4, [r7, #28]
                                  dw_conv_params->stride.w,
 80175c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ca:	68db      	ldr	r3, [r3, #12]
        depthwise_conv_s8_generic(input,
 80175cc:	b29d      	uxth	r5, r3
 80175ce:	61bd      	str	r5, [r7, #24]
                                  dw_conv_params->stride.h,
 80175d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175d2:	691b      	ldr	r3, [r3, #16]
        depthwise_conv_s8_generic(input,
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	617b      	str	r3, [r7, #20]
                                  bias,
                                  output,
                                  quant_params->shift,
 80175d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175da:	685a      	ldr	r2, [r3, #4]
 80175dc:	613a      	str	r2, [r7, #16]
                                  quant_params->multiplier,
 80175de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175e0:	6819      	ldr	r1, [r3, #0]
 80175e2:	60f9      	str	r1, [r7, #12]
                                  output_dims->w,
 80175e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175e6:	689b      	ldr	r3, [r3, #8]
        depthwise_conv_s8_generic(input,
 80175e8:	b29d      	uxth	r5, r3
                                  output_dims->h,
 80175ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80175ec:	685b      	ldr	r3, [r3, #4]
        depthwise_conv_s8_generic(input,
 80175ee:	b29c      	uxth	r4, r3
 80175f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f2:	6858      	ldr	r0, [r3, #4]
 80175f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f6:	6819      	ldr	r1, [r3, #0]
 80175f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80175fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017600:	9312      	str	r3, [sp, #72]	; 0x48
 8017602:	9211      	str	r2, [sp, #68]	; 0x44
 8017604:	9110      	str	r1, [sp, #64]	; 0x40
 8017606:	900f      	str	r0, [sp, #60]	; 0x3c
 8017608:	940e      	str	r4, [sp, #56]	; 0x38
 801760a:	950d      	str	r5, [sp, #52]	; 0x34
 801760c:	68f9      	ldr	r1, [r7, #12]
 801760e:	910c      	str	r1, [sp, #48]	; 0x30
 8017610:	693a      	ldr	r2, [r7, #16]
 8017612:	920b      	str	r2, [sp, #44]	; 0x2c
 8017614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017616:	930a      	str	r3, [sp, #40]	; 0x28
 8017618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801761a:	9309      	str	r3, [sp, #36]	; 0x24
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	9308      	str	r3, [sp, #32]
 8017620:	69bd      	ldr	r5, [r7, #24]
 8017622:	9507      	str	r5, [sp, #28]
 8017624:	69fc      	ldr	r4, [r7, #28]
 8017626:	9406      	str	r4, [sp, #24]
 8017628:	6a38      	ldr	r0, [r7, #32]
 801762a:	9005      	str	r0, [sp, #20]
 801762c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801762e:	9104      	str	r1, [sp, #16]
 8017630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017632:	9203      	str	r2, [sp, #12]
 8017634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017636:	9302      	str	r3, [sp, #8]
 8017638:	9601      	str	r6, [sp, #4]
 801763a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801763c:	9300      	str	r3, [sp, #0]
 801763e:	4643      	mov	r3, r8
 8017640:	4672      	mov	r2, lr
 8017642:	4661      	mov	r1, ip
 8017644:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017646:	f7ff fdad 	bl	80171a4 <depthwise_conv_s8_generic>
                                  dw_conv_params->activation.min,
                                  dw_conv_params->activation.max);
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
 801764a:	2300      	movs	r3, #0
}
 801764c:	4618      	mov	r0, r3
 801764e:	3740      	adds	r7, #64	; 0x40
 8017650:	46bd      	mov	sp, r7
 8017652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017656 <arm_depthwise_conv_s8_opt>:
                                     const q7_t *kernel,
                                     const cmsis_nn_dims *bias_dims,
                                     const int32_t *bias,
                                     const cmsis_nn_dims *output_dims,
                                     q7_t *output)
{
 8017656:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801765a:	f5ad 7d4a 	sub.w	sp, sp, #808	; 0x328
 801765e:	af00      	add	r7, sp, #0
 8017660:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8017664:	6020      	str	r0, [r4, #0]
 8017666:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801766a:	6001      	str	r1, [r0, #0]
 801766c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8017670:	600a      	str	r2, [r1, #0]
 8017672:	f107 0220 	add.w	r2, r7, #32
 8017676:	6013      	str	r3, [r2, #0]

    const int32_t input_ch = input_dims->c;
 8017678:	f107 0320 	add.w	r3, r7, #32
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    const int32_t output_ch = output_dims->c;
 8017684:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8017688:	68db      	ldr	r3, [r3, #12]
 801768a:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8

    /* Check input constraints input_ch == output_ch */
    if (input_ch != output_ch)
 801768e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8017692:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8017696:	429a      	cmp	r2, r3
 8017698:	d003      	beq.n	80176a2 <arm_depthwise_conv_s8_opt+0x4c>
    {
        return ARM_MATH_SIZE_MISMATCH;
 801769a:	f06f 0302 	mvn.w	r3, #2
 801769e:	f001 b99b 	b.w	80189d8 <arm_depthwise_conv_s8_opt+0x1382>
    }
#ifdef ARM_MATH_DSP
    const int32_t input_x = input_dims->w;
 80176a2:	f107 0320 	add.w	r3, r7, #32
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	689b      	ldr	r3, [r3, #8]
 80176aa:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
    const int32_t input_y = input_dims->h;
 80176ae:	f107 0320 	add.w	r3, r7, #32
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	685b      	ldr	r3, [r3, #4]
 80176b6:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    const int32_t kernel_x = filter_dims->w;
 80176ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80176be:	689b      	ldr	r3, [r3, #8]
 80176c0:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
    const int32_t kernel_y = filter_dims->h;
 80176c4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80176c8:	685b      	ldr	r3, [r3, #4]
 80176ca:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    const int32_t pad_x = dw_conv_params->padding.w;
 80176ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	695b      	ldr	r3, [r3, #20]
 80176d6:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    const int32_t pad_y = dw_conv_params->padding.h;
 80176da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	699b      	ldr	r3, [r3, #24]
 80176e2:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    const int32_t stride_x = dw_conv_params->stride.w;
 80176e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	68db      	ldr	r3, [r3, #12]
 80176ee:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
    const int32_t stride_y = dw_conv_params->stride.h;
 80176f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	691b      	ldr	r3, [r3, #16]
 80176fa:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
    const int32_t *output_shift = quant_params->shift;
 80176fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	685b      	ldr	r3, [r3, #4]
 8017706:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    const int32_t *output_mult = quant_params->multiplier;
 801770a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
    const int32_t output_x = output_dims->w;
 8017716:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801771a:	689b      	ldr	r3, [r3, #8]
 801771c:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
    const int32_t output_y = output_dims->h;
 8017720:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8017724:	685b      	ldr	r3, [r3, #4]
 8017726:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
    const int32_t output_offset = dw_conv_params->output_offset;
 801772a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	685b      	ldr	r3, [r3, #4]
 8017732:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    const int32_t input_offset = dw_conv_params->input_offset;
 8017736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    const int32_t output_activation_min = dw_conv_params->activation.min;
 8017742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801774a:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    const int32_t output_activation_max = dw_conv_params->activation.max;
 801774e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017756:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
    q15_t *buffer_a = (q15_t *)ctx->buf;
 801775a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	uint32_t receptiveFieldSize = 2 * kernel_x * kernel_y * input_ch;
	if ( receptiveFieldSize < TENSOR_BUFFER_SIZE )
		buffer_a  = (q15_t *)&oc_input2_tensors_buffers_1[0];
//    buffer_a  = (q15_t *)&oc_input2_tensors_buffers[1][0];
	#endif
    q15_t *const col_buffer_start = buffer_a;
 8017766:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801776a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
    q15_t *col_buffer = col_buffer_start;
 801776e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8017772:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    const int32_t *const bias_start_pos = bias;
 8017776:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 801777a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
    const q31_t *const out_mult_start_pos = output_mult;
 801777e:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8017782:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
    const q31_t *const out_shift_start_pos = output_shift;
 8017786:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 801778a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
    uint16_t row_count;
    uint16_t row_shift;

    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 801778e:	2300      	movs	r3, #0
 8017790:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8017794:	f001 b918 	b.w	80189c8 <arm_depthwise_conv_s8_opt+0x1372>
    {
        const int16_t base_idx_y = (i_out_y * stride_y) - pad_y;
 8017798:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 801779c:	b29a      	uxth	r2, r3
 801779e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	fb12 f303 	smulbb	r3, r2, r3
 80177a8:	b29a      	uxth	r2, r3
 80177aa:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80177ae:	b29b      	uxth	r3, r3
 80177b0:	1ad3      	subs	r3, r2, r3
 80177b2:	b29b      	uxth	r3, r3
 80177b4:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 80177b8:	2300      	movs	r3, #0
 80177ba:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80177be:	f001 b8f7 	b.w	80189b0 <arm_depthwise_conv_s8_opt+0x135a>
        {
            const int16_t base_idx_x = (i_out_x * stride_x) - pad_x;
 80177c2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 80177cc:	b29b      	uxth	r3, r3
 80177ce:	fb12 f303 	smulbb	r3, r2, r3
 80177d2:	b29a      	uxth	r2, r3
 80177d4:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80177d8:	b29b      	uxth	r3, r3
 80177da:	1ad3      	subs	r3, r2, r3
 80177dc:	b29b      	uxth	r3, r3
 80177de:	f8a7 3288 	strh.w	r3, [r7, #648]	; 0x288

            /* Out of bounds is only considered for the y axis as it provides a contiguous zero'ing opportunity than
               along the x axis */
            const int ker_y_start = MAX(0, -base_idx_y);
 80177e2:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	dc03      	bgt.n	80177f2 <arm_depthwise_conv_s8_opt+0x19c>
 80177ea:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 80177ee:	425b      	negs	r3, r3
 80177f0:	e000      	b.n	80177f4 <arm_depthwise_conv_s8_opt+0x19e>
 80177f2:	2300      	movs	r3, #0
 80177f4:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
            /* Condition for kernel end dimension: (base_idx_y + ker_y_end) < input_y */
            const int ker_y_end = MIN(kernel_y, input_y - base_idx_y);
 80177f8:	f9b7 328a 	ldrsh.w	r3, [r7, #650]	; 0x28a
 80177fc:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8017800:	1ad3      	subs	r3, r2, r3
 8017802:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8017806:	4293      	cmp	r3, r2
 8017808:	bfa8      	it	ge
 801780a:	4613      	movge	r3, r2
 801780c:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280

            int32_t index = 0;
 8017810:	2300      	movs	r3, #0
 8017812:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            if (ker_y_start != 0)
 8017816:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801781a:	2b00      	cmp	r3, #0
 801781c:	d023      	beq.n	8017866 <arm_depthwise_conv_s8_opt+0x210>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * ker_y_start * sizeof(q15_t));
 801781e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8017822:	005b      	lsls	r3, r3, #1
 8017824:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8017828:	18d0      	adds	r0, r2, r3
 801782a:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801782e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8017832:	fb02 f303 	mul.w	r3, r2, r3
 8017836:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 801783a:	fb02 f303 	mul.w	r3, r2, r3
 801783e:	005b      	lsls	r3, r3, #1
 8017840:	461a      	mov	r2, r3
 8017842:	2100      	movs	r1, #0
 8017844:	f00a f9f6 	bl	8021c34 <memset>
                index += (kernel_x * input_ch) * ker_y_start;
 8017848:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801784c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8017850:	fb02 f303 	mul.w	r3, r2, r3
 8017854:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 8017858:	fb02 f303 	mul.w	r3, r2, r3
 801785c:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8017860:	4413      	add	r3, r2
 8017862:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
            }

            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 8017866:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 801786a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801786e:	e064      	b.n	801793a <arm_depthwise_conv_s8_opt+0x2e4>
            {
                const int32_t idx_y = base_idx_y + i_ker_y;
 8017870:	f9b7 228a 	ldrsh.w	r2, [r7, #650]	; 0x28a
 8017874:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8017878:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 801787c:	440a      	add	r2, r1
 801787e:	601a      	str	r2, [r3, #0]

                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 8017880:	2300      	movs	r3, #0
 8017882:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8017886:	e04d      	b.n	8017924 <arm_depthwise_conv_s8_opt+0x2ce>
                {
                    const int32_t idx_x = base_idx_x + i_ker_x;
 8017888:	f9b7 2288 	ldrsh.w	r2, [r7, #648]	; 0x288
 801788c:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8017890:	f8d7 1304 	ldr.w	r1, [r7, #772]	; 0x304
 8017894:	440a      	add	r2, r1
 8017896:	601a      	str	r2, [r3, #0]
                    if (idx_x < 0 || idx_x >= input_x)
 8017898:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	db06      	blt.n	80178b0 <arm_depthwise_conv_s8_opt+0x25a>
 80178a2:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80178a6:	681a      	ldr	r2, [r3, #0]
 80178a8:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80178ac:	429a      	cmp	r2, r3
 80178ae:	db0d      	blt.n	80178cc <arm_depthwise_conv_s8_opt+0x276>
                    {
                        memset(&col_buffer[index], 0, input_ch * sizeof(q15_t));
 80178b0:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80178b4:	005b      	lsls	r3, r3, #1
 80178b6:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80178ba:	18d0      	adds	r0, r2, r3
 80178bc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80178c0:	005b      	lsls	r3, r3, #1
 80178c2:	461a      	mov	r2, r3
 80178c4:	2100      	movs	r1, #0
 80178c6:	f00a f9b5 	bl	8021c34 <memset>
 80178ca:	e01f      	b.n	801790c <arm_depthwise_conv_s8_opt+0x2b6>
                    }
                    else
                    {
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 80178cc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80178d6:	fb02 f203 	mul.w	r2, r2, r3
 80178da:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	4413      	add	r3, r2
 80178e2:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 80178e6:	fb02 f303 	mul.w	r3, r2, r3
 80178ea:	461a      	mov	r2, r3
 80178ec:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 80178f0:	1898      	adds	r0, r3, r2
                                                  &col_buffer[index],
 80178f2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 80178f6:	005b      	lsls	r3, r3, #1
                        arm_q7_to_q15_with_offset((q7_t *)input + (idx_y * input_x + idx_x) * input_ch,
 80178f8:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80178fc:	18d1      	adds	r1, r2, r3
 80178fe:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8017902:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8017906:	b21b      	sxth	r3, r3
 8017908:	f005 ff22 	bl	801d750 <arm_q7_to_q15_with_offset>
                                                  input_ch,
                                                  input_offset);
                    }
                    index += input_ch;
 801790c:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8017910:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017914:	4413      	add	r3, r2
 8017916:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
                for (int i_ker_x = 0; i_ker_x < kernel_x; i_ker_x++)
 801791a:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 801791e:	3301      	adds	r3, #1
 8017920:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8017924:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8017928:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801792c:	429a      	cmp	r2, r3
 801792e:	dbab      	blt.n	8017888 <arm_depthwise_conv_s8_opt+0x232>
            for (int i_ker_y = ker_y_start; i_ker_y < ker_y_end; i_ker_y++)
 8017930:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8017934:	3301      	adds	r3, #1
 8017936:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 801793a:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 801793e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8017942:	429a      	cmp	r2, r3
 8017944:	db94      	blt.n	8017870 <arm_depthwise_conv_s8_opt+0x21a>
                }
            }

            const int diff = kernel_y - ker_y_end;
 8017946:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 801794a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801794e:	1ad3      	subs	r3, r2, r3
 8017950:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
            if (diff != 0)
 8017954:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8017958:	2b00      	cmp	r3, #0
 801795a:	d014      	beq.n	8017986 <arm_depthwise_conv_s8_opt+0x330>
            {
                memset(&col_buffer[index], 0, (kernel_x * input_ch) * diff * sizeof(q15_t));
 801795c:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8017960:	005b      	lsls	r3, r3, #1
 8017962:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8017966:	18d0      	adds	r0, r2, r3
 8017968:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801796c:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8017970:	fb02 f303 	mul.w	r3, r2, r3
 8017974:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8017978:	fb02 f303 	mul.w	r3, r2, r3
 801797c:	005b      	lsls	r3, r3, #1
 801797e:	461a      	mov	r2, r3
 8017980:	2100      	movs	r1, #0
 8017982:	f00a f957 	bl	8021c34 <memset>
            }

            row_count = output_ch / 4;
 8017986:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801798a:	2b00      	cmp	r3, #0
 801798c:	da00      	bge.n	8017990 <arm_depthwise_conv_s8_opt+0x33a>
 801798e:	3303      	adds	r3, #3
 8017990:	109b      	asrs	r3, r3, #2
 8017992:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            row_shift = 0;
 8017996:	2300      	movs	r3, #0
 8017998:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318
            bias = bias_start_pos;
 801799c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80179a0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
            output_mult = out_mult_start_pos;
 80179a4:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80179a8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
            output_shift = out_shift_start_pos;
 80179ac:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80179b0:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

            while (row_count)
 80179b4:	f000 bea2 	b.w	80186fc <arm_depthwise_conv_s8_opt+0x10a6>
            {
                q31_t sum = *bias++;
 80179b8:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80179bc:	1d1a      	adds	r2, r3, #4
 80179be:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                q31_t sum_2 = *bias++;
 80179c8:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80179cc:	1d1a      	adds	r2, r3, #4
 80179ce:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                q31_t sum_3 = *bias++;
 80179d8:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80179dc:	1d1a      	adds	r2, r3, #4
 80179de:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                q31_t sum_4 = *bias++;
 80179e8:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80179ec:	1d1a      	adds	r2, r3, #4
 80179ee:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                uint16_t col_count = (kernel_x * kernel_y) / 2;
 80179f8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80179fc:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8017a00:	fb02 f303 	mul.w	r3, r2, r3
 8017a04:	0fda      	lsrs	r2, r3, #31
 8017a06:	4413      	add	r3, r2
 8017a08:	105b      	asrs	r3, r3, #1
 8017a0a:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                q15_t *col_pos = col_buffer_start + row_shift;
 8017a0e:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8017a18:	4413      	add	r3, r2
 8017a1a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                const q7_t *row_pos = kernel + row_shift;
 8017a1e:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8017a22:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8017a26:	4413      	add	r3, r2
 8017a28:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                row_shift += 4;
 8017a2c:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 8017a30:	3304      	adds	r3, #4
 8017a32:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                while (col_count)
 8017a36:	e25b      	b.n	8017ef0 <arm_depthwise_conv_s8_opt+0x89a>
 8017a38:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8017a3c:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8017a40:	601a      	str	r2, [r3, #0]
 8017a42:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	681b      	ldr	r3, [r3, #0]
 8017a4a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8017a4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017a50:	601a      	str	r2, [r3, #0]
    return (val);
 8017a52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017a56:	681b      	ldr	r3, [r3, #0]
                    /* General idea is to read 4 + 4 (input, kernel) pair and re-arrange them in the right order to
                    use in a SMLAD instruction . One run of this loop produces 4 partial outputs with 8 MACs. */
                    /* Note: variable names can be improved here to align with rows and columns. */
                    q31_t ip_a1, ip_a2, ip_b1, ip_b2, op_a, op_b, op_c;
                    /* Read 4 weights */
                    ip_b1 = arm_nn_read_q7x4(row_pos);
 8017a58:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
                    ip_a1 = arm_nn_read_q7x4(row_pos + input_ch);
 8017a5c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017a60:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8017a64:	441a      	add	r2, r3
 8017a66:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017a6a:	601a      	str	r2, [r3, #0]
 8017a6c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 8017a76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a7a:	601a      	str	r2, [r3, #0]
    return (val);
 8017a7c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8017a86:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8017a8a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8017a8e:	601a      	str	r2, [r3, #0]
 8017a90:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 8017a9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017a9e:	601a      	str	r2, [r3, #0]
    return (val);
 8017aa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017aa4:	681b      	ldr	r3, [r3, #0]
                    op_a = arm_nn_read_q15x2(col_pos);
 8017aa6:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch);
 8017aaa:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017aae:	005b      	lsls	r3, r3, #1
 8017ab0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8017ab4:	441a      	add	r2, r3
 8017ab6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8017aba:	601a      	str	r2, [r3, #0]
 8017abc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 8017ac6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017aca:	601a      	str	r2, [r3, #0]
    return (val);
 8017acc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    ip_a2 = __SXTB16(ip_b1);
 8017ad6:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8017ada:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8017ade:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017ae0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	fa2f f283 	sxtb16	r2, r3
 8017aea:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8017aee:	601a      	str	r2, [r3, #0]
  return(result);
 8017af0:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
                    ip_b1 = __SXTB16(__ROR(ip_b1, 8));
 8017afa:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8017afe:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8017b02:	601a      	str	r2, [r3, #0]
 8017b04:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8017b08:	2208      	movs	r2, #8
 8017b0a:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017b0c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8017b10:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8017b14:	6812      	ldr	r2, [r2, #0]
 8017b16:	f002 021f 	and.w	r2, r2, #31
 8017b1a:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017b1c:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8017b20:	681b      	ldr	r3, [r3, #0]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d103      	bne.n	8017b2e <arm_depthwise_conv_s8_opt+0x4d8>
    return op1;
 8017b26:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	e007      	b.n	8017b3e <arm_depthwise_conv_s8_opt+0x4e8>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017b2e:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8017b32:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8017b36:	6812      	ldr	r2, [r2, #0]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	fa62 f303 	ror.w	r3, r2, r3
 8017b3e:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8017b42:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017b44:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	fa2f f283 	sxtb16	r2, r3
 8017b4e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8017b52:	601a      	str	r2, [r3, #0]
  return(result);
 8017b54:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

                    ip_b2 = __SXTB16(ip_a1);
 8017b5e:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8017b62:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8017b66:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017b68:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	fa2f f283 	sxtb16	r2, r3
 8017b72:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8017b76:	601a      	str	r2, [r3, #0]
  return(result);
 8017b78:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
                    ip_a1 = __SXTB16(__ROR(ip_a1, 8));
 8017b82:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8017b86:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8017b8a:	601a      	str	r2, [r3, #0]
 8017b8c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8017b90:	2208      	movs	r2, #8
 8017b92:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8017b94:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8017b98:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8017b9c:	6812      	ldr	r2, [r2, #0]
 8017b9e:	f002 021f 	and.w	r2, r2, #31
 8017ba2:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8017ba4:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d103      	bne.n	8017bb6 <arm_depthwise_conv_s8_opt+0x560>
    return op1;
 8017bae:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	e007      	b.n	8017bc6 <arm_depthwise_conv_s8_opt+0x570>
  return (op1 >> op2) | (op1 << (32U - op2));
 8017bb6:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8017bba:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8017bbe:	6812      	ldr	r2, [r2, #0]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	fa62 f303 	ror.w	r3, r2, r3
 8017bc6:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8017bca:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8017bcc:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	fa2f f283 	sxtb16	r2, r3
 8017bd6:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8017bda:	601a      	str	r2, [r3, #0]
  return(result);
 8017bdc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268

                    op_c = __PKHBT(op_b, op_a, 16);
 8017be6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8017bea:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8017bee:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8017bf2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8017bf6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8017bfa:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8017bfe:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8017c02:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8017c06:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8017c0a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 8017c0e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8017c12:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8017c16:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8017c1a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 8017c1e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8017c22:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8017c26:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 8017c2a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8017c2e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8017c32:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHBT(ip_b2, ip_a2, 16);
 8017c36:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8017c3a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8017c3e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8017c42:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8017c46:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8017c4a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8017c4e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 8017c52:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 8017c56:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8017c5a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum = __SMLAD(op_c, op_b, sum);
 8017c5e:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8017c62:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017c66:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8017c6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8017c6e:	6018      	str	r0, [r3, #0]
 8017c70:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8017c74:	6019      	str	r1, [r3, #0]
 8017c76:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8017c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017c7c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 8017c86:	6812      	ldr	r2, [r2, #0]
 8017c88:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8017c8c:	6809      	ldr	r1, [r1, #0]
 8017c8e:	fb23 1202 	smlad	r2, r3, r2, r1
 8017c92:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8017c96:	601a      	str	r2, [r3, #0]
  return(result);
 8017c98:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300

                    op_b = __PKHBT(ip_b1, ip_a1, 16);
 8017ca2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8017ca6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8017caa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8017cae:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8017cb2:	601a      	str	r2, [r3, #0]
 8017cb4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8017cb8:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8017cbc:	6812      	ldr	r2, [r2, #0]
 8017cbe:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8017cc2:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8017cc6:	601a      	str	r2, [r3, #0]
 8017cc8:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_2 = __SMLAD(op_a, op_b, sum_2);
 8017cd2:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 8017cd6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017cda:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8017cde:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8017ce2:	6018      	str	r0, [r3, #0]
 8017ce4:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8017ce8:	6019      	str	r1, [r3, #0]
 8017cea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8017cee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017cf0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	f507 72ce 	add.w	r2, r7, #412	; 0x19c
 8017cfa:	6812      	ldr	r2, [r2, #0]
 8017cfc:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8017d00:	6809      	ldr	r1, [r1, #0]
 8017d02:	fb23 1202 	smlad	r2, r3, r2, r1
 8017d06:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8017d0a:	601a      	str	r2, [r3, #0]
  return(result);
 8017d0c:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8017d10:	681b      	ldr	r3, [r3, #0]
 8017d12:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc

                    op_a = arm_nn_read_q15x2(col_pos + 2);
 8017d16:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8017d1a:	1d1a      	adds	r2, r3, #4
 8017d1c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8017d20:	601a      	str	r2, [r3, #0]
 8017d22:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 8017d2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d30:	601a      	str	r2, [r3, #0]
    return (val);
 8017d32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = arm_nn_read_q15x2(col_pos + input_ch + 2);
 8017d3c:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017d40:	3302      	adds	r3, #2
 8017d42:	005b      	lsls	r3, r3, #1
 8017d44:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8017d48:	441a      	add	r2, r3
 8017d4a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8017d4e:	601a      	str	r2, [r3, #0]
 8017d50:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	461a      	mov	r2, r3
    memcpy(&val, in_q15, 4);
 8017d5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017d5e:	601a      	str	r2, [r3, #0]
    return (val);
 8017d60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

                    op_c = __PKHBT(op_b, op_a, 16);
 8017d6a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8017d6e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8017d72:	601a      	str	r2, [r3, #0]
 8017d74:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8017d78:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8017d7c:	601a      	str	r2, [r3, #0]
 8017d7e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 8017d88:	6812      	ldr	r2, [r2, #0]
 8017d8a:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8017d8e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017d92:	601a      	str	r2, [r3, #0]
 8017d94:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
                    op_a = __PKHTB(op_b, op_a, 16);
 8017d9e:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8017da2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8017da6:	601a      	str	r2, [r3, #0]
 8017da8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8017dac:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8017db0:	601a      	str	r2, [r3, #0]
 8017db2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8017dbc:	6812      	ldr	r2, [r2, #0]
 8017dbe:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8017dc2:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
                    op_b = __PKHTB(ip_a2, ip_b2, 16);
 8017dd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8017dd6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8017dda:	601a      	str	r2, [r3, #0]
 8017ddc:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8017de0:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8017de4:	601a      	str	r2, [r3, #0]
 8017de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	f507 7201 	add.w	r2, r7, #516	; 0x204
 8017df0:	6812      	ldr	r2, [r2, #0]
 8017df2:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8017df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8017dfa:	601a      	str	r2, [r3, #0]
 8017dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_3 = __SMLAD(op_c, op_b, sum_3);
 8017e06:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 8017e0a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017e0e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8017e12:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8017e16:	6018      	str	r0, [r3, #0]
 8017e18:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8017e1c:	6019      	str	r1, [r3, #0]
 8017e1e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8017e22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017e24:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8017e2e:	6812      	ldr	r2, [r2, #0]
 8017e30:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 8017e34:	6809      	ldr	r1, [r1, #0]
 8017e36:	fb23 1202 	smlad	r2, r3, r2, r1
 8017e3a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017e3e:	601a      	str	r2, [r3, #0]
  return(result);
 8017e40:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8

                    op_b = __PKHTB(ip_a1, ip_b1, 16);
 8017e4a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8017e4e:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8017e52:	601a      	str	r2, [r3, #0]
 8017e54:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8017e58:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8017e5c:	601a      	str	r2, [r3, #0]
 8017e5e:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8017e68:	6812      	ldr	r2, [r2, #0]
 8017e6a:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8017e6e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8017e72:	601a      	str	r2, [r3, #0]
 8017e74:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
                    sum_4 = __SMLAD(op_a, op_b, sum_4);
 8017e7e:	f8d7 0264 	ldr.w	r0, [r7, #612]	; 0x264
 8017e82:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8017e86:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8017e8a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8017e8e:	6018      	str	r0, [r3, #0]
 8017e90:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8017e94:	6019      	str	r1, [r3, #0]
 8017e96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8017e9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8017e9c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	f507 72b6 	add.w	r2, r7, #364	; 0x16c
 8017ea6:	6812      	ldr	r2, [r2, #0]
 8017ea8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8017eac:	6809      	ldr	r1, [r1, #0]
 8017eae:	fb23 1202 	smlad	r2, r3, r2, r1
 8017eb2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8017eb6:	601a      	str	r2, [r3, #0]
  return(result);
 8017eb8:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch << 1;
 8017ec2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017ec6:	005b      	lsls	r3, r3, #1
 8017ec8:	461a      	mov	r2, r3
 8017eca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8017ece:	4413      	add	r3, r2
 8017ed0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch << 1;
 8017ed4:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017ed8:	005b      	lsls	r3, r3, #1
 8017eda:	005b      	lsls	r3, r3, #1
 8017edc:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8017ee0:	4413      	add	r3, r2
 8017ee2:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
                    col_count--;
 8017ee6:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8017eea:	3b01      	subs	r3, #1
 8017eec:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 8017ef0:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	f47f ad9f 	bne.w	8017a38 <arm_depthwise_conv_s8_opt+0x3e2>
                }

                col_count = (kernel_x * kernel_y) & 0x1;
 8017efa:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8017efe:	b29a      	uxth	r2, r3
 8017f00:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8017f04:	b29b      	uxth	r3, r3
 8017f06:	fb12 f303 	smulbb	r3, r2, r3
 8017f0a:	b29b      	uxth	r3, r3
 8017f0c:	f003 0301 	and.w	r3, r3, #1
 8017f10:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 8017f14:	e059      	b.n	8017fca <arm_depthwise_conv_s8_opt+0x974>
                {
                    sum += row_pos[0] * col_pos[0];
 8017f16:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8017f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8017f1e:	461a      	mov	r2, r3
 8017f20:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8017f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f28:	fb03 f302 	mul.w	r3, r3, r2
 8017f2c:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8017f30:	4413      	add	r3, r2
 8017f32:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                    sum_2 += row_pos[1] * col_pos[1];
 8017f36:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8017f3a:	3301      	adds	r3, #1
 8017f3c:	f993 3000 	ldrsb.w	r3, [r3]
 8017f40:	461a      	mov	r2, r3
 8017f42:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8017f46:	3302      	adds	r3, #2
 8017f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f4c:	fb03 f302 	mul.w	r3, r3, r2
 8017f50:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8017f54:	4413      	add	r3, r2
 8017f56:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                    sum_3 += row_pos[2] * col_pos[2];
 8017f5a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8017f5e:	3302      	adds	r3, #2
 8017f60:	f993 3000 	ldrsb.w	r3, [r3]
 8017f64:	461a      	mov	r2, r3
 8017f66:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f70:	fb03 f302 	mul.w	r3, r3, r2
 8017f74:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8017f78:	4413      	add	r3, r2
 8017f7a:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                    sum_4 += row_pos[3] * col_pos[3];
 8017f7e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8017f82:	3303      	adds	r3, #3
 8017f84:	f993 3000 	ldrsb.w	r3, [r3]
 8017f88:	461a      	mov	r2, r3
 8017f8a:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8017f8e:	3306      	adds	r3, #6
 8017f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f94:	fb03 f302 	mul.w	r3, r3, r2
 8017f98:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8017f9c:	4413      	add	r3, r2
 8017f9e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4

                    row_pos += input_ch;
 8017fa2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017fa6:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8017faa:	4413      	add	r3, r2
 8017fac:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
                    col_pos += input_ch;
 8017fb0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 8017fb4:	005b      	lsls	r3, r3, #1
 8017fb6:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8017fba:	4413      	add	r3, r2
 8017fbc:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec

                    col_count--;
 8017fc0:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8017fc4:	3b01      	subs	r3, #1
 8017fc6:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
                while (col_count)
 8017fca:	f8b7 32f2 	ldrh.w	r3, [r7, #754]	; 0x2f2
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d1a1      	bne.n	8017f16 <arm_depthwise_conv_s8_opt+0x8c0>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 8017fd2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8017fd6:	1d1a      	adds	r2, r3, #4
 8017fd8:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 8017fdc:	6819      	ldr	r1, [r3, #0]
 8017fde:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8017fe2:	1d1a      	adds	r2, r3, #4
 8017fe4:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8017fee:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8017ff2:	6018      	str	r0, [r3, #0]
 8017ff4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8017ff8:	6019      	str	r1, [r3, #0]
 8017ffa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8017ffe:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018000:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801800a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801800e:	6812      	ldr	r2, [r2, #0]
 8018010:	409a      	lsls	r2, r3
 8018012:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8018016:	601a      	str	r2, [r3, #0]
 8018018:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801801c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8018020:	6812      	ldr	r2, [r2, #0]
 8018022:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018024:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018028:	2200      	movs	r2, #0
 801802a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801802c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8018030:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018034:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018036:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801803a:	2200      	movs	r2, #0
 801803c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801803e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8018042:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	4618      	mov	r0, r3
 801804a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801804e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	461a      	mov	r2, r3
 8018056:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801805a:	fb02 f501 	mul.w	r5, r2, r1
 801805e:	fb00 f403 	mul.w	r4, r0, r3
 8018062:	442c      	add	r4, r5
 8018064:	fba0 2302 	umull	r2, r3, r0, r2
 8018068:	18e1      	adds	r1, r4, r3
 801806a:	460b      	mov	r3, r1
 801806c:	eb18 0102 	adds.w	r1, r8, r2
 8018070:	60b9      	str	r1, [r7, #8]
 8018072:	eb49 0303 	adc.w	r3, r9, r3
 8018076:	60fb      	str	r3, [r7, #12]
 8018078:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801807c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    result = (int32_t)(mult.long_long >> 31);
 8018080:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018084:	f04f 0200 	mov.w	r2, #0
 8018088:	f04f 0300 	mov.w	r3, #0
 801808c:	0fc2      	lsrs	r2, r0, #31
 801808e:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018092:	17cb      	asrs	r3, r1, #31
 8018094:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8018098:	4613      	mov	r3, r2
 801809a:	600b      	str	r3, [r1, #0]
    return result;
 801809c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80180a0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80180a2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	dc04      	bgt.n	80180b6 <arm_depthwise_conv_s8_opt+0xa60>
 80180ac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	425b      	negs	r3, r3
 80180b4:	e000      	b.n	80180b8 <arm_depthwise_conv_s8_opt+0xa62>
 80180b6:	2300      	movs	r3, #0
 80180b8:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80180bc:	6011      	str	r1, [r2, #0]
 80180be:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80180c2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80180c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80180c8:	2200      	movs	r2, #0
 80180ca:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80180cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80180d0:	2201      	movs	r2, #1
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	409a      	lsls	r2, r3
 80180d6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80180da:	3a01      	subs	r2, #1
 80180dc:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80180de:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80180e2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80180e6:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80180ea:	6809      	ldr	r1, [r1, #0]
 80180ec:	6812      	ldr	r2, [r2, #0]
 80180ee:	400a      	ands	r2, r1
 80180f0:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80180f2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80180f6:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80180fa:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80180fe:	6809      	ldr	r1, [r1, #0]
 8018100:	6812      	ldr	r2, [r2, #0]
 8018102:	fa41 f202 	asr.w	r2, r1, r2
 8018106:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8018108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801810c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8018110:	6812      	ldr	r2, [r2, #0]
 8018112:	1052      	asrs	r2, r2, #1
 8018114:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018116:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	2b00      	cmp	r3, #0
 801811e:	da06      	bge.n	801812e <arm_depthwise_conv_s8_opt+0xad8>
        threshold++;
 8018120:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018124:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8018128:	6812      	ldr	r2, [r2, #0]
 801812a:	3201      	adds	r2, #1
 801812c:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801812e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8018132:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8018136:	6812      	ldr	r2, [r2, #0]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	429a      	cmp	r2, r3
 801813c:	dd06      	ble.n	801814c <arm_depthwise_conv_s8_opt+0xaf6>
        result++;
 801813e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018142:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8018146:	6812      	ldr	r2, [r2, #0]
 8018148:	3201      	adds	r2, #1
 801814a:	601a      	str	r2, [r3, #0]
    return result;
 801814c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8018150:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018152:	bf00      	nop
 8018154:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum += output_offset;
 8018158:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801815c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8018160:	4413      	add	r3, r2
 8018162:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MAX(sum, output_activation_min);
 8018166:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801816a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801816e:	4293      	cmp	r3, r2
 8018170:	bfb8      	it	lt
 8018172:	4613      	movlt	r3, r2
 8018174:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                sum = MIN(sum, output_activation_max);
 8018178:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 801817c:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8018180:	4293      	cmp	r3, r2
 8018182:	bfa8      	it	ge
 8018184:	4613      	movge	r3, r2
 8018186:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
                *output++ = (q7_t)sum;
 801818a:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801818e:	1c5a      	adds	r2, r3, #1
 8018190:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8018194:	f8d7 2300 	ldr.w	r2, [r7, #768]	; 0x300
 8018198:	b252      	sxtb	r2, r2
 801819a:	701a      	strb	r2, [r3, #0]

                sum_2 = arm_nn_requantize(sum_2, *output_mult++, *output_shift++);
 801819c:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80181a0:	1d1a      	adds	r2, r3, #4
 80181a2:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 80181a6:	6819      	ldr	r1, [r3, #0]
 80181a8:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80181ac:	1d1a      	adds	r2, r3, #4
 80181ae:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80181b8:	f8d7 02fc 	ldr.w	r0, [r7, #764]	; 0x2fc
 80181bc:	6018      	str	r0, [r3, #0]
 80181be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80181c2:	6019      	str	r1, [r3, #0]
 80181c4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80181c8:	601a      	str	r2, [r3, #0]
 80181ca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181d4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80181d8:	6812      	ldr	r2, [r2, #0]
 80181da:	409a      	lsls	r2, r3
 80181dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80181e0:	601a      	str	r2, [r3, #0]
 80181e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80181e6:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 80181ea:	6812      	ldr	r2, [r2, #0]
 80181ec:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80181ee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80181f2:	2200      	movs	r2, #0
 80181f4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80181f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80181fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80181fe:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018200:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8018204:	2200      	movs	r2, #0
 8018206:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8018208:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801820c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	4618      	mov	r0, r3
 8018214:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8018218:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	461a      	mov	r2, r3
 8018220:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018224:	fb02 f501 	mul.w	r5, r2, r1
 8018228:	fb00 f403 	mul.w	r4, r0, r3
 801822c:	442c      	add	r4, r5
 801822e:	fba0 2302 	umull	r2, r3, r0, r2
 8018232:	18e1      	adds	r1, r4, r3
 8018234:	460b      	mov	r3, r1
 8018236:	eb18 0102 	adds.w	r1, r8, r2
 801823a:	6139      	str	r1, [r7, #16]
 801823c:	eb49 0303 	adc.w	r3, r9, r3
 8018240:	617b      	str	r3, [r7, #20]
 8018242:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8018246:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 801824a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 801824e:	f04f 0200 	mov.w	r2, #0
 8018252:	f04f 0300 	mov.w	r3, #0
 8018256:	0fc2      	lsrs	r2, r0, #31
 8018258:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801825c:	17cb      	asrs	r3, r1, #31
 801825e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8018262:	4613      	mov	r3, r2
 8018264:	600b      	str	r3, [r1, #0]
    return result;
 8018266:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801826a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801826c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	dc04      	bgt.n	8018280 <arm_depthwise_conv_s8_opt+0xc2a>
 8018276:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	425b      	negs	r3, r3
 801827e:	e000      	b.n	8018282 <arm_depthwise_conv_s8_opt+0xc2c>
 8018280:	2300      	movs	r3, #0
 8018282:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8018286:	6011      	str	r1, [r2, #0]
 8018288:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801828c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801828e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8018292:	2200      	movs	r2, #0
 8018294:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018296:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801829a:	2201      	movs	r2, #1
 801829c:	681b      	ldr	r3, [r3, #0]
 801829e:	409a      	lsls	r2, r3
 80182a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80182a4:	3a01      	subs	r2, #1
 80182a6:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80182a8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80182ac:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80182b0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80182b4:	6809      	ldr	r1, [r1, #0]
 80182b6:	6812      	ldr	r2, [r2, #0]
 80182b8:	400a      	ands	r2, r1
 80182ba:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80182bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80182c0:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80182c4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80182c8:	6809      	ldr	r1, [r1, #0]
 80182ca:	6812      	ldr	r2, [r2, #0]
 80182cc:	fa41 f202 	asr.w	r2, r1, r2
 80182d0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80182d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80182d6:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80182da:	6812      	ldr	r2, [r2, #0]
 80182dc:	1052      	asrs	r2, r2, #1
 80182de:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80182e0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	da06      	bge.n	80182f8 <arm_depthwise_conv_s8_opt+0xca2>
        threshold++;
 80182ea:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80182ee:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80182f2:	6812      	ldr	r2, [r2, #0]
 80182f4:	3201      	adds	r2, #1
 80182f6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80182f8:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80182fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8018300:	6812      	ldr	r2, [r2, #0]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	429a      	cmp	r2, r3
 8018306:	dd06      	ble.n	8018316 <arm_depthwise_conv_s8_opt+0xcc0>
        result++;
 8018308:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801830c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8018310:	6812      	ldr	r2, [r2, #0]
 8018312:	3201      	adds	r2, #1
 8018314:	601a      	str	r2, [r3, #0]
    return result;
 8018316:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801831a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801831c:	bf00      	nop
 801831e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 += output_offset;
 8018322:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8018326:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801832a:	4413      	add	r3, r2
 801832c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MAX(sum_2, output_activation_min);
 8018330:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8018334:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8018338:	4293      	cmp	r3, r2
 801833a:	bfb8      	it	lt
 801833c:	4613      	movlt	r3, r2
 801833e:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                sum_2 = MIN(sum_2, output_activation_max);
 8018342:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8018346:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801834a:	4293      	cmp	r3, r2
 801834c:	bfa8      	it	ge
 801834e:	4613      	movge	r3, r2
 8018350:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
                *output++ = (q7_t)sum_2;
 8018354:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8018358:	1c5a      	adds	r2, r3, #1
 801835a:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 801835e:	f8d7 22fc 	ldr.w	r2, [r7, #764]	; 0x2fc
 8018362:	b252      	sxtb	r2, r2
 8018364:	701a      	strb	r2, [r3, #0]
                sum_3 = arm_nn_requantize(sum_3, *output_mult++, *output_shift++);
 8018366:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 801836a:	1d1a      	adds	r2, r3, #4
 801836c:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 8018370:	6819      	ldr	r1, [r3, #0]
 8018372:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8018376:	1d1a      	adds	r2, r3, #4
 8018378:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8018382:	f8d7 02f8 	ldr.w	r0, [r7, #760]	; 0x2f8
 8018386:	6018      	str	r0, [r3, #0]
 8018388:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801838c:	6019      	str	r1, [r3, #0]
 801838e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8018392:	601a      	str	r2, [r3, #0]
 8018394:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801839e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80183a2:	6812      	ldr	r2, [r2, #0]
 80183a4:	409a      	lsls	r2, r3
 80183a6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80183aa:	601a      	str	r2, [r3, #0]
 80183ac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80183b0:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80183b4:	6812      	ldr	r2, [r2, #0]
 80183b6:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80183b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80183bc:	2200      	movs	r2, #0
 80183be:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80183c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80183c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80183c8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80183ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80183ce:	2200      	movs	r2, #0
 80183d0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80183d2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 80183d6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	4618      	mov	r0, r3
 80183de:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80183e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	461a      	mov	r2, r3
 80183ea:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80183ee:	fb02 f501 	mul.w	r5, r2, r1
 80183f2:	fb00 f403 	mul.w	r4, r0, r3
 80183f6:	442c      	add	r4, r5
 80183f8:	fba0 2302 	umull	r2, r3, r0, r2
 80183fc:	18e1      	adds	r1, r4, r3
 80183fe:	460b      	mov	r3, r1
 8018400:	eb18 0102 	adds.w	r1, r8, r2
 8018404:	61b9      	str	r1, [r7, #24]
 8018406:	eb49 0303 	adc.w	r3, r9, r3
 801840a:	61fb      	str	r3, [r7, #28]
 801840c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8018410:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 8018414:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8018418:	f04f 0200 	mov.w	r2, #0
 801841c:	f04f 0300 	mov.w	r3, #0
 8018420:	0fc2      	lsrs	r2, r0, #31
 8018422:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018426:	17cb      	asrs	r3, r1, #31
 8018428:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 801842c:	4613      	mov	r3, r2
 801842e:	600b      	str	r3, [r1, #0]
    return result;
 8018430:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8018434:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018436:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	2b00      	cmp	r3, #0
 801843e:	dc04      	bgt.n	801844a <arm_depthwise_conv_s8_opt+0xdf4>
 8018440:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	425b      	negs	r3, r3
 8018448:	e000      	b.n	801844c <arm_depthwise_conv_s8_opt+0xdf6>
 801844a:	2300      	movs	r3, #0
 801844c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8018450:	6011      	str	r1, [r2, #0]
 8018452:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8018456:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8018458:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801845c:	2200      	movs	r2, #0
 801845e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018460:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8018464:	2201      	movs	r2, #1
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	409a      	lsls	r2, r3
 801846a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801846e:	3a01      	subs	r2, #1
 8018470:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8018476:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801847a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801847e:	6809      	ldr	r1, [r1, #0]
 8018480:	6812      	ldr	r2, [r2, #0]
 8018482:	400a      	ands	r2, r1
 8018484:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801848a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 801848e:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8018492:	6809      	ldr	r1, [r1, #0]
 8018494:	6812      	ldr	r2, [r2, #0]
 8018496:	fa41 f202 	asr.w	r2, r1, r2
 801849a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801849c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80184a0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80184a4:	6812      	ldr	r2, [r2, #0]
 80184a6:	1052      	asrs	r2, r2, #1
 80184a8:	601a      	str	r2, [r3, #0]
    if (result < 0)
 80184aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	da06      	bge.n	80184c2 <arm_depthwise_conv_s8_opt+0xe6c>
        threshold++;
 80184b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80184b8:	f507 7282 	add.w	r2, r7, #260	; 0x104
 80184bc:	6812      	ldr	r2, [r2, #0]
 80184be:	3201      	adds	r2, #1
 80184c0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 80184c2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80184c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80184ca:	6812      	ldr	r2, [r2, #0]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	dd06      	ble.n	80184e0 <arm_depthwise_conv_s8_opt+0xe8a>
        result++;
 80184d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80184d6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80184da:	6812      	ldr	r2, [r2, #0]
 80184dc:	3201      	adds	r2, #1
 80184de:	601a      	str	r2, [r3, #0]
    return result;
 80184e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80184e4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80184e6:	bf00      	nop
 80184e8:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 += output_offset;
 80184ec:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80184f0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80184f4:	4413      	add	r3, r2
 80184f6:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MAX(sum_3, output_activation_min);
 80184fa:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 80184fe:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8018502:	4293      	cmp	r3, r2
 8018504:	bfb8      	it	lt
 8018506:	4613      	movlt	r3, r2
 8018508:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                sum_3 = MIN(sum_3, output_activation_max);
 801850c:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 8018510:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8018514:	4293      	cmp	r3, r2
 8018516:	bfa8      	it	ge
 8018518:	4613      	movge	r3, r2
 801851a:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
                *output++ = (q7_t)sum_3;
 801851e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8018522:	1c5a      	adds	r2, r3, #1
 8018524:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8018528:	f8d7 22f8 	ldr.w	r2, [r7, #760]	; 0x2f8
 801852c:	b252      	sxtb	r2, r2
 801852e:	701a      	strb	r2, [r3, #0]

                sum_4 = arm_nn_requantize(sum_4, *output_mult++, *output_shift++);
 8018530:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8018534:	1d1a      	adds	r2, r3, #4
 8018536:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 801853a:	6819      	ldr	r1, [r3, #0]
 801853c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8018540:	1d1a      	adds	r2, r3, #4
 8018542:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 8018546:	681a      	ldr	r2, [r3, #0]
 8018548:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801854c:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 8018550:	6018      	str	r0, [r3, #0]
 8018552:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8018556:	6019      	str	r1, [r3, #0]
 8018558:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801855c:	601a      	str	r2, [r3, #0]
 801855e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018568:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801856c:	6812      	ldr	r2, [r2, #0]
 801856e:	409a      	lsls	r2, r3
 8018570:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8018574:	601a      	str	r2, [r3, #0]
 8018576:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801857a:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801857e:	6812      	ldr	r2, [r2, #0]
 8018580:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018582:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8018586:	2200      	movs	r2, #0
 8018588:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801858a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801858e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018592:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018594:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018598:	2200      	movs	r2, #0
 801859a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801859c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80185a0:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	4618      	mov	r0, r3
 80185a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80185ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	461a      	mov	r2, r3
 80185b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80185b8:	fb02 f501 	mul.w	r5, r2, r1
 80185bc:	fb00 f403 	mul.w	r4, r0, r3
 80185c0:	442c      	add	r4, r5
 80185c2:	fba0 2302 	umull	r2, r3, r0, r2
 80185c6:	18e1      	adds	r1, r4, r3
 80185c8:	460b      	mov	r3, r1
 80185ca:	eb18 0a02 	adds.w	sl, r8, r2
 80185ce:	eb49 0b03 	adc.w	fp, r9, r3
 80185d2:	e9c7 ab14 	strd	sl, fp, [r7, #80]	; 0x50
    result = (int32_t)(mult.long_long >> 31);
 80185d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80185da:	f04f 0200 	mov.w	r2, #0
 80185de:	f04f 0300 	mov.w	r3, #0
 80185e2:	0fc2      	lsrs	r2, r0, #31
 80185e4:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80185e8:	17cb      	asrs	r3, r1, #31
 80185ea:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80185ee:	4613      	mov	r3, r2
 80185f0:	600b      	str	r3, [r1, #0]
    return result;
 80185f2:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80185f6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80185f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	dc04      	bgt.n	801860c <arm_depthwise_conv_s8_opt+0xfb6>
 8018602:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	425b      	negs	r3, r3
 801860a:	e000      	b.n	801860e <arm_depthwise_conv_s8_opt+0xfb8>
 801860c:	2300      	movs	r3, #0
 801860e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8018612:	6011      	str	r1, [r2, #0]
 8018614:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8018618:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801861a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801861e:	2200      	movs	r2, #0
 8018620:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8018622:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8018626:	2201      	movs	r2, #1
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	409a      	lsls	r2, r3
 801862c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8018630:	3a01      	subs	r2, #1
 8018632:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8018634:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8018638:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 801863c:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8018640:	6809      	ldr	r1, [r1, #0]
 8018642:	6812      	ldr	r2, [r2, #0]
 8018644:	400a      	ands	r2, r1
 8018646:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8018648:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801864c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8018650:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8018654:	6809      	ldr	r1, [r1, #0]
 8018656:	6812      	ldr	r2, [r2, #0]
 8018658:	fa41 f202 	asr.w	r2, r1, r2
 801865c:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801865e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8018662:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8018666:	6812      	ldr	r2, [r2, #0]
 8018668:	1052      	asrs	r2, r2, #1
 801866a:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801866c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	da06      	bge.n	8018684 <arm_depthwise_conv_s8_opt+0x102e>
        threshold++;
 8018676:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801867a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801867e:	6812      	ldr	r2, [r2, #0]
 8018680:	3201      	adds	r2, #1
 8018682:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8018684:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8018688:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801868c:	6812      	ldr	r2, [r2, #0]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	429a      	cmp	r2, r3
 8018692:	dd06      	ble.n	80186a2 <arm_depthwise_conv_s8_opt+0x104c>
        result++;
 8018694:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8018698:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801869c:	6812      	ldr	r2, [r2, #0]
 801869e:	3201      	adds	r2, #1
 80186a0:	601a      	str	r2, [r3, #0]
    return result;
 80186a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80186a6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80186a8:	bf00      	nop
 80186aa:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 += output_offset;
 80186ae:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80186b2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80186b6:	4413      	add	r3, r2
 80186b8:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MAX(sum_4, output_activation_min);
 80186bc:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80186c0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80186c4:	4293      	cmp	r3, r2
 80186c6:	bfb8      	it	lt
 80186c8:	4613      	movlt	r3, r2
 80186ca:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                sum_4 = MIN(sum_4, output_activation_max);
 80186ce:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80186d2:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 80186d6:	4293      	cmp	r3, r2
 80186d8:	bfa8      	it	ge
 80186da:	4613      	movge	r3, r2
 80186dc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
                *output++ = (q7_t)sum_4;
 80186e0:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 80186e4:	1c5a      	adds	r2, r3, #1
 80186e6:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 80186ea:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 80186ee:	b252      	sxtb	r2, r2
 80186f0:	701a      	strb	r2, [r3, #0]

                row_count--;
 80186f2:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 80186f6:	3b01      	subs	r3, #1
 80186f8:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 80186fc:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 8018700:	2b00      	cmp	r3, #0
 8018702:	f47f a959 	bne.w	80179b8 <arm_depthwise_conv_s8_opt+0x362>
            }

            row_count = output_ch & 0x3;
 8018706:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 801870a:	b29b      	uxth	r3, r3
 801870c:	f003 0303 	and.w	r3, r3, #3
 8018710:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 8018714:	e13e      	b.n	8018994 <arm_depthwise_conv_s8_opt+0x133e>
            {
                q15_t *col_pos = col_buffer_start + row_shift;
 8018716:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801871a:	005b      	lsls	r3, r3, #1
 801871c:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8018720:	4413      	add	r3, r2
 8018722:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
                const q7_t *row_pos = kernel + row_shift;
 8018726:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801872a:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 801872e:	4413      	add	r3, r2
 8018730:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
                q31_t sum = *bias++;
 8018734:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8018738:	1d1a      	adds	r2, r3, #4
 801873a:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                const uint16_t col_count = (kernel_x * kernel_y);
 8018744:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8018748:	b29a      	uxth	r2, r3
 801874a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 801874e:	b29b      	uxth	r3, r3
 8018750:	fb12 f303 	smulbb	r3, r2, r3
 8018754:	f8a7 3272 	strh.w	r3, [r7, #626]	; 0x272
                row_shift += 1;
 8018758:	f8b7 3318 	ldrh.w	r3, [r7, #792]	; 0x318
 801875c:	3301      	adds	r3, #1
 801875e:	f8a7 3318 	strh.w	r3, [r7, #792]	; 0x318

                for (int i = 0; i < col_count; i++)
 8018762:	2300      	movs	r3, #0
 8018764:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8018768:	e024      	b.n	80187b4 <arm_depthwise_conv_s8_opt+0x115e>
                {
                    sum += row_pos[i * input_ch] * col_pos[i * input_ch];
 801876a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801876e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8018772:	fb02 f303 	mul.w	r3, r2, r3
 8018776:	461a      	mov	r2, r3
 8018778:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801877c:	4413      	add	r3, r2
 801877e:	f993 3000 	ldrsb.w	r3, [r3]
 8018782:	4619      	mov	r1, r3
 8018784:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8018788:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 801878c:	fb02 f303 	mul.w	r3, r2, r3
 8018790:	005b      	lsls	r3, r3, #1
 8018792:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8018796:	4413      	add	r3, r2
 8018798:	f9b3 3000 	ldrsh.w	r3, [r3]
 801879c:	fb03 f301 	mul.w	r3, r3, r1
 80187a0:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80187a4:	4413      	add	r3, r2
 80187a6:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                for (int i = 0; i < col_count; i++)
 80187aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80187ae:	3301      	adds	r3, #1
 80187b0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 80187b4:	f8b7 3272 	ldrh.w	r3, [r7, #626]	; 0x272
 80187b8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 80187bc:	429a      	cmp	r2, r3
 80187be:	dbd4      	blt.n	801876a <arm_depthwise_conv_s8_opt+0x1114>
                }
                sum = arm_nn_requantize(sum, *output_mult++, *output_shift++);
 80187c0:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 80187c4:	1d1a      	adds	r2, r3, #4
 80187c6:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 80187ca:	6819      	ldr	r1, [r3, #0]
 80187cc:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80187d0:	1d1a      	adds	r2, r3, #4
 80187d2:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80187dc:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 80187e0:	6018      	str	r0, [r3, #0]
 80187e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80187e6:	6019      	str	r1, [r3, #0]
 80187e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80187ec:	601a      	str	r2, [r3, #0]
 80187ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187f8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80187fc:	6812      	ldr	r2, [r2, #0]
 80187fe:	409a      	lsls	r2, r3
 8018800:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018804:	601a      	str	r2, [r3, #0]
 8018806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801880a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801880e:	6812      	ldr	r2, [r2, #0]
 8018810:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8018812:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018816:	2200      	movs	r2, #0
 8018818:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801881a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801881e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8018822:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8018824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018828:	2200      	movs	r2, #0
 801882a:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801882c:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8018830:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	4618      	mov	r0, r3
 8018838:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801883c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	461a      	mov	r2, r3
 8018844:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8018848:	fb02 f501 	mul.w	r5, r2, r1
 801884c:	fb00 f403 	mul.w	r4, r0, r3
 8018850:	442c      	add	r4, r5
 8018852:	fba0 2302 	umull	r2, r3, r0, r2
 8018856:	18e1      	adds	r1, r4, r3
 8018858:	460b      	mov	r3, r1
 801885a:	eb18 0102 	adds.w	r1, r8, r2
 801885e:	6039      	str	r1, [r7, #0]
 8018860:	eb49 0303 	adc.w	r3, r9, r3
 8018864:	607b      	str	r3, [r7, #4]
 8018866:	e9d7 3400 	ldrd	r3, r4, [r7]
 801886a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    result = (int32_t)(mult.long_long >> 31);
 801886e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8018872:	f04f 0200 	mov.w	r2, #0
 8018876:	f04f 0300 	mov.w	r3, #0
 801887a:	0fc2      	lsrs	r2, r0, #31
 801887c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8018880:	17cb      	asrs	r3, r1, #31
 8018882:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8018886:	4613      	mov	r3, r2
 8018888:	600b      	str	r3, [r1, #0]
    return result;
 801888a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801888e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018890:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	2b00      	cmp	r3, #0
 8018898:	dc04      	bgt.n	80188a4 <arm_depthwise_conv_s8_opt+0x124e>
 801889a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	425b      	negs	r3, r3
 80188a2:	e000      	b.n	80188a6 <arm_depthwise_conv_s8_opt+0x1250>
 80188a4:	2300      	movs	r3, #0
 80188a6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80188aa:	6011      	str	r1, [r2, #0]
 80188ac:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80188b0:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80188b2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80188b6:	2200      	movs	r2, #0
 80188b8:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80188ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80188be:	2201      	movs	r2, #1
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	409a      	lsls	r2, r3
 80188c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80188c8:	3a01      	subs	r2, #1
 80188ca:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 80188cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80188d0:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80188d4:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80188d8:	6809      	ldr	r1, [r1, #0]
 80188da:	6812      	ldr	r2, [r2, #0]
 80188dc:	400a      	ands	r2, r1
 80188de:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 80188e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80188e4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80188e8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80188ec:	6809      	ldr	r1, [r1, #0]
 80188ee:	6812      	ldr	r2, [r2, #0]
 80188f0:	fa41 f202 	asr.w	r2, r1, r2
 80188f4:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 80188f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80188fa:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80188fe:	6812      	ldr	r2, [r2, #0]
 8018900:	1052      	asrs	r2, r2, #1
 8018902:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8018904:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018908:	681b      	ldr	r3, [r3, #0]
 801890a:	2b00      	cmp	r3, #0
 801890c:	da06      	bge.n	801891c <arm_depthwise_conv_s8_opt+0x12c6>
        threshold++;
 801890e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8018912:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8018916:	6812      	ldr	r2, [r2, #0]
 8018918:	3201      	adds	r2, #1
 801891a:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801891c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8018920:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8018924:	6812      	ldr	r2, [r2, #0]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	429a      	cmp	r2, r3
 801892a:	dd06      	ble.n	801893a <arm_depthwise_conv_s8_opt+0x12e4>
        result++;
 801892c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018930:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8018934:	6812      	ldr	r2, [r2, #0]
 8018936:	3201      	adds	r2, #1
 8018938:	601a      	str	r2, [r3, #0]
    return result;
 801893a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801893e:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8018940:	bf00      	nop
 8018942:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum += output_offset;
 8018946:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801894a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801894e:	4413      	add	r3, r2
 8018950:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MAX(sum, output_activation_min);
 8018954:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8018958:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 801895c:	4293      	cmp	r3, r2
 801895e:	bfb8      	it	lt
 8018960:	4613      	movlt	r3, r2
 8018962:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                sum = MIN(sum, output_activation_max);
 8018966:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 801896a:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 801896e:	4293      	cmp	r3, r2
 8018970:	bfa8      	it	ge
 8018972:	4613      	movge	r3, r2
 8018974:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
                *output++ = (q7_t)sum;
 8018978:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801897c:	1c5a      	adds	r2, r3, #1
 801897e:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8018982:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8018986:	b252      	sxtb	r2, r2
 8018988:	701a      	strb	r2, [r3, #0]

                row_count--;
 801898a:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 801898e:	3b01      	subs	r3, #1
 8018990:	f8a7 331a 	strh.w	r3, [r7, #794]	; 0x31a
            while (row_count)
 8018994:	f8b7 331a 	ldrh.w	r3, [r7, #794]	; 0x31a
 8018998:	2b00      	cmp	r3, #0
 801899a:	f47f aebc 	bne.w	8018716 <arm_depthwise_conv_s8_opt+0x10c0>
            }

            // clear counter and pointers
            col_buffer = col_buffer_start;
 801899e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 80189a2:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
        for (int i_out_x = 0; i_out_x < output_x; i_out_x++)
 80189a6:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80189aa:	3301      	adds	r3, #1
 80189ac:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80189b0:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 80189b4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80189b8:	429a      	cmp	r2, r3
 80189ba:	f6fe af02 	blt.w	80177c2 <arm_depthwise_conv_s8_opt+0x16c>
    for (int i_out_y = 0; i_out_y < output_y; i_out_y++)
 80189be:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80189c2:	3301      	adds	r3, #1
 80189c4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80189c8:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 80189cc:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80189d0:	429a      	cmp	r2, r3
 80189d2:	f6fe aee1 	blt.w	8017798 <arm_depthwise_conv_s8_opt+0x142>
                                 output_dims,
                                 output);
#endif /* ARM_MATH_MVEI | ARM_MATH_DSP */

    /* Return to application */
    return ARM_MATH_SUCCESS;
 80189d6:	2300      	movs	r3, #0
}
 80189d8:	4618      	mov	r0, r3
 80189da:	f507 774a 	add.w	r7, r7, #808	; 0x328
 80189de:	46bd      	mov	sp, r7
 80189e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080189e4 <arm_depthwise_conv_s8_opt_get_buffer_size>:

int32_t arm_depthwise_conv_s8_opt_get_buffer_size(const cmsis_nn_dims *input_dims, const cmsis_nn_dims *filter_dims)
{
 80189e4:	b480      	push	{r7}
 80189e6:	b083      	sub	sp, #12
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	6039      	str	r1, [r7, #0]
#if defined(ARM_MATH_MVEI)
    /* The + 4 accounts for out of bounds read of the lhs buffers in the *_nt_t_* functions.  */
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t) + 4;
#elif defined(ARM_MATH_DSP)
    return (input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	683a      	ldr	r2, [r7, #0]
 80189f4:	6892      	ldr	r2, [r2, #8]
 80189f6:	fb02 f303 	mul.w	r3, r2, r3
 80189fa:	683a      	ldr	r2, [r7, #0]
 80189fc:	6852      	ldr	r2, [r2, #4]
 80189fe:	fb02 f303 	mul.w	r3, r2, r3
 8018a02:	005b      	lsls	r3, r3, #1
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 8018a04:	4618      	mov	r0, r3
 8018a06:	370c      	adds	r7, #12
 8018a08:	46bd      	mov	sp, r7
 8018a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0e:	4770      	bx	lr

08018a10 <arm_depthwise_conv_wrapper_s8>:
                                         const q7_t *filter,
                                         const cmsis_nn_dims *bias_dims,
                                         const int32_t *bias,
                                         const cmsis_nn_dims *output_dims,
                                         q7_t *output)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b08e      	sub	sp, #56	; 0x38
 8018a14:	af08      	add	r7, sp, #32
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
 8018a1c:	603b      	str	r3, [r7, #0]
    arm_status status = ARM_MATH_SUCCESS;
 8018a1e:	2300      	movs	r3, #0
 8018a20:	75fb      	strb	r3, [r7, #23]
    if (1 == dw_conv_params->ch_mult)
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	689b      	ldr	r3, [r3, #8]
 8018a26:	2b01      	cmp	r3, #1
 8018a28:	d139      	bne.n	8018a9e <arm_depthwise_conv_wrapper_s8+0x8e>
    {
#if !defined(ARM_MATH_MVEI)
        if ((filter_dims->w == 3) && (filter_dims->h == 3) && (dw_conv_params->padding.h <= 1))
 8018a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2c:	689b      	ldr	r3, [r3, #8]
 8018a2e:	2b03      	cmp	r3, #3
 8018a30:	d11e      	bne.n	8018a70 <arm_depthwise_conv_wrapper_s8+0x60>
 8018a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	2b03      	cmp	r3, #3
 8018a38:	d11a      	bne.n	8018a70 <arm_depthwise_conv_wrapper_s8+0x60>
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	699b      	ldr	r3, [r3, #24]
 8018a3e:	2b01      	cmp	r3, #1
 8018a40:	dc16      	bgt.n	8018a70 <arm_depthwise_conv_wrapper_s8+0x60>
        {
            status = arm_depthwise_conv_3x3_s8(ctx,
 8018a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a44:	9306      	str	r3, [sp, #24]
 8018a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a48:	9305      	str	r3, [sp, #20]
 8018a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a4c:	9304      	str	r3, [sp, #16]
 8018a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a50:	9303      	str	r3, [sp, #12]
 8018a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a54:	9302      	str	r3, [sp, #8]
 8018a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a58:	9301      	str	r3, [sp, #4]
 8018a5a:	6a3b      	ldr	r3, [r7, #32]
 8018a5c:	9300      	str	r3, [sp, #0]
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	68b9      	ldr	r1, [r7, #8]
 8018a64:	68f8      	ldr	r0, [r7, #12]
 8018a66:	f7fc fecf 	bl	8015808 <arm_depthwise_conv_3x3_s8>
 8018a6a:	4603      	mov	r3, r0
 8018a6c:	75fb      	strb	r3, [r7, #23]
 8018a6e:	e02c      	b.n	8018aca <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
        else
#endif
        {
            status = arm_depthwise_conv_s8_opt(ctx,
 8018a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a72:	9306      	str	r3, [sp, #24]
 8018a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a76:	9305      	str	r3, [sp, #20]
 8018a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a7a:	9304      	str	r3, [sp, #16]
 8018a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a7e:	9303      	str	r3, [sp, #12]
 8018a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a82:	9302      	str	r3, [sp, #8]
 8018a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a86:	9301      	str	r3, [sp, #4]
 8018a88:	6a3b      	ldr	r3, [r7, #32]
 8018a8a:	9300      	str	r3, [sp, #0]
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	687a      	ldr	r2, [r7, #4]
 8018a90:	68b9      	ldr	r1, [r7, #8]
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	f7fe fddf 	bl	8017656 <arm_depthwise_conv_s8_opt>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	75fb      	strb	r3, [r7, #23]
 8018a9c:	e015      	b.n	8018aca <arm_depthwise_conv_wrapper_s8+0xba>
                                               output);
        }
    }
    else
    {
        status = arm_depthwise_conv_s8(ctx,
 8018a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018aa0:	9306      	str	r3, [sp, #24]
 8018aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa4:	9305      	str	r3, [sp, #20]
 8018aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa8:	9304      	str	r3, [sp, #16]
 8018aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aac:	9303      	str	r3, [sp, #12]
 8018aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab0:	9302      	str	r3, [sp, #8]
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab4:	9301      	str	r3, [sp, #4]
 8018ab6:	6a3b      	ldr	r3, [r7, #32]
 8018ab8:	9300      	str	r3, [sp, #0]
 8018aba:	683b      	ldr	r3, [r7, #0]
 8018abc:	687a      	ldr	r2, [r7, #4]
 8018abe:	68b9      	ldr	r1, [r7, #8]
 8018ac0:	68f8      	ldr	r0, [r7, #12]
 8018ac2:	f7fe fcf8 	bl	80174b6 <arm_depthwise_conv_s8>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	75fb      	strb	r3, [r7, #23]
                                       output_dims,
                                       output);
    }

    /* Return to application */
    return status;
 8018aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018ace:	4618      	mov	r0, r3
 8018ad0:	3718      	adds	r7, #24
 8018ad2:	46bd      	mov	sp, r7
 8018ad4:	bd80      	pop	{r7, pc}

08018ad6 <arm_depthwise_conv_wrapper_s8_get_buffer_size>:

int32_t arm_depthwise_conv_wrapper_s8_get_buffer_size(const cmsis_nn_dw_conv_params *dw_conv_params,
                                                      const cmsis_nn_dims *input_dims,
                                                      const cmsis_nn_dims *filter_dims,
                                                      const cmsis_nn_dims *output_dims)
{
 8018ad6:	b580      	push	{r7, lr}
 8018ad8:	b086      	sub	sp, #24
 8018ada:	af00      	add	r7, sp, #0
 8018adc:	60f8      	str	r0, [r7, #12]
 8018ade:	60b9      	str	r1, [r7, #8]
 8018ae0:	607a      	str	r2, [r7, #4]
 8018ae2:	603b      	str	r3, [r7, #0]
    (void)dw_conv_params;
    int32_t size = 0;
 8018ae4:	2300      	movs	r3, #0
 8018ae6:	617b      	str	r3, [r7, #20]

    if (input_dims->c == output_dims->c)
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	68da      	ldr	r2, [r3, #12]
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	68db      	ldr	r3, [r3, #12]
 8018af0:	429a      	cmp	r2, r3
 8018af2:	d104      	bne.n	8018afe <arm_depthwise_conv_wrapper_s8_get_buffer_size+0x28>
    {
        size = arm_depthwise_conv_s8_opt_get_buffer_size(input_dims, filter_dims);
 8018af4:	6879      	ldr	r1, [r7, #4]
 8018af6:	68b8      	ldr	r0, [r7, #8]
 8018af8:	f7ff ff74 	bl	80189e4 <arm_depthwise_conv_s8_opt_get_buffer_size>
 8018afc:	6178      	str	r0, [r7, #20]
    }

    return size;
 8018afe:	697b      	ldr	r3, [r7, #20]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 8018b08:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8018b0c:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8018b16:	6020      	str	r0, [r4, #0]
 8018b18:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8018b1c:	6001      	str	r1, [r0, #0]
 8018b1e:	4611      	mov	r1, r2
 8018b20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8018b24:	6013      	str	r3, [r2, #0]
 8018b26:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8018b2a:	460b      	mov	r3, r1
 8018b2c:	8013      	strh	r3, [r2, #0]

#elif defined(ARM_MATH_DSP)
    // filters are rows in q8, receptive fields are columns in q16

    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;		// output of second filter, two filters applied simultaneously
 8018b2e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8018b32:	881b      	ldrh	r3, [r3, #0]
 8018b34:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8018b38:	4413      	add	r3, r2
 8018b3a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
    const int32_t *bias = output_bias;		// there should be 'output_ch' biases
 8018b3e:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 8018b42:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8

    uint16_t row_count = output_ch / 2;		// two filters applied simultaneously, divide by two since can do two multiplications simultaneously
 8018b46:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8018b4a:	881b      	ldrh	r3, [r3, #0]
 8018b4c:	085b      	lsrs	r3, r3, #1
 8018b4e:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    const q7_t *ip_a0 = input_a;			// pointer to first filter
 8018b52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
    /* this loop over rows in A */
    while (row_count)
 8018b5c:	f000 bee9 	b.w	8019932 <arm_nn_mat_mult_kernel_s8_s16+0xe2a>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;				// pointer to first receptive field, there should be two receptive fields from input image in here as 2 produced at a time by arm_convolve_s8() function
 8018b60:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8018b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	6013      	str	r3, [r2, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;		// get pointer to 2nd receptive field
 8018b6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8018b70:	681a      	ldr	r2, [r3, #0]
 8018b72:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8018b76:	005b      	lsls	r3, r3, #1
 8018b78:	441a      	add	r2, r3
 8018b7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018b7e:	601a      	str	r2, [r3, #0]

        /* align the second pointer for A */
        const q7_t *ip_a1 = ip_a0 + num_col_a;		// get pointer to 2nd filter
 8018b80:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8018b84:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8018b88:	4413      	add	r3, r2
 8018b8a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

        /* Init accumulator with bias for channel N and N + 1 */
        q31_t ch_0_out_0 = *bias;
 8018b8e:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        q31_t ch_0_out_1 = *bias++;
 8018b98:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8018b9c:	1d1a      	adds	r2, r3, #4
 8018b9e:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        q31_t ch_1_out_0 = *bias;
 8018ba8:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        q31_t ch_1_out_1 = *bias++;
 8018bb2:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8018bb6:	1d1a      	adds	r2, r3, #4
 8018bb8:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

        uint16_t col_count = num_col_a / 4;			// loop unrolled by factor of 4, receptive field which is factor of 4 will work best
 8018bc2:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8018bc6:	089b      	lsrs	r3, r3, #2
 8018bc8:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        /* accumulate over the vector */
        while (col_count)
 8018bcc:	e2a0      	b.n	8019110 <arm_nn_mat_mult_kernel_s8_s16+0x608>
 8018bce:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8018bd2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8018bd6:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8018bd8:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	461a      	mov	r2, r3
 8018be4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018be8:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018bea:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	1d1a      	adds	r2, r3, #4
 8018bf4:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	601a      	str	r2, [r3, #0]
    return (val);
 8018bfc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8018c00:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02, a11, a12;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);	// read 2 elements in one go from each input receptive field
 8018c02:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8018c06:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8018c0a:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8018c0e:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8018c10:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	461a      	mov	r2, r3
 8018c1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8018c20:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018c22:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	1d1a      	adds	r2, r3, #4
 8018c2c:	f507 7321 	add.w	r3, r7, #644	; 0x284
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	601a      	str	r2, [r3, #0]
    return (val);
 8018c34:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8018c38:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8018c3a:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 8018c3e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018c42:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8018c46:	601a      	str	r2, [r3, #0]
 8018c48:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8018c4c:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8018c50:	601a      	str	r2, [r3, #0]
 8018c52:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8018c56:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8018c5a:	601a      	str	r2, [r3, #0]
 8018c5c:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8018c60:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8018c64:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8018c66:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	461a      	mov	r2, r3
 8018c72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018c76:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018c78:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	1d1a      	adds	r2, r3, #4
 8018c82:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	601a      	str	r2, [r3, #0]
    return (val);
 8018c8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8018c8e:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018c90:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8018c94:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018c96:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8018c9a:	681a      	ldr	r2, [r3, #0]
 8018c9c:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8018ca0:	601a      	str	r2, [r3, #0]
 8018ca2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8018ca6:	2208      	movs	r2, #8
 8018ca8:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8018caa:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8018cae:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	f003 031f 	and.w	r3, r3, #31
 8018cb8:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 8018cba:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d103      	bne.n	8018ccc <arm_nn_mat_mult_kernel_s8_s16+0x1c4>
    return op1;
 8018cc4:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	e007      	b.n	8018cdc <arm_nn_mat_mult_kernel_s8_s16+0x1d4>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018ccc:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 8018cd0:	f507 712e 	add.w	r1, r7, #696	; 0x2b8
 8018cd4:	681a      	ldr	r2, [r3, #0]
 8018cd6:	680b      	ldr	r3, [r1, #0]
 8018cd8:	fa62 f303 	ror.w	r3, r2, r3
 8018cdc:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8018ce0:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018ce2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	fa2f f283 	sxtb16	r2, r3
 8018cec:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8018cf0:	601a      	str	r2, [r3, #0]
  return(result);
 8018cf2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8018cf6:	681a      	ldr	r2, [r3, #0]
 8018cf8:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8018cfc:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8018cfe:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8018d02:	681a      	ldr	r2, [r3, #0]
 8018d04:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018d08:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018d0a:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	fa2f f283 	sxtb16	r2, r3
 8018d14:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8018d18:	601a      	str	r2, [r3, #0]
  return(result);
 8018d1a:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 8018d1e:	681a      	ldr	r2, [r3, #0]
 8018d20:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8018d24:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8018d26:	f507 7227 	add.w	r2, r7, #668	; 0x29c
 8018d2a:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	6013      	str	r3, [r2, #0]
 8018d32:	f507 7226 	add.w	r2, r7, #664	; 0x298
 8018d36:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	6013      	str	r3, [r2, #0]
 8018d3e:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8018d42:	681a      	ldr	r2, [r3, #0]
 8018d44:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8018d4e:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8018d52:	601a      	str	r2, [r3, #0]
 8018d54:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018d64:	f507 7224 	add.w	r2, r7, #656	; 0x290
 8018d68:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	6013      	str	r3, [r2, #0]
 8018d70:	f507 7223 	add.w	r2, r7, #652	; 0x28c
 8018d74:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	6013      	str	r3, [r2, #0]
 8018d7c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8018d80:	681a      	ldr	r2, [r3, #0]
 8018d82:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8018d8c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8018d90:	601a      	str	r2, [r3, #0]
 8018d92:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	461a      	mov	r2, r3
 8018d9a:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	601a      	str	r2, [r3, #0]
    return source;
 8018da2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8018da6:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);	// read corresponding 2 elements from filter and extend to 16 bits in a01. same for a02
 8018da8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8018dac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018db0:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 8018db4:	601a      	str	r2, [r3, #0]
 8018db6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018dba:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8018dbe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8018dc2:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8018dc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018dca:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
    memcpy(&val, *in_q7, 4);
 8018dce:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018ddc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8018dde:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	1d1a      	adds	r2, r3, #4
 8018de6:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8018dea:	601a      	str	r2, [r3, #0]
    return (val);
 8018dec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8018df0:	681b      	ldr	r3, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8018df2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8018df6:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8018dfa:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8018dfe:	2308      	movs	r3, #8
 8018e00:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  op2 %= 32U;
 8018e04:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8018e08:	f003 031f 	and.w	r3, r3, #31
 8018e0c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
  if (op2 == 0U)
 8018e10:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d102      	bne.n	8018e1e <arm_nn_mat_mult_kernel_s8_s16+0x316>
    return op1;
 8018e18:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
 8018e1c:	e005      	b.n	8018e2a <arm_nn_mat_mult_kernel_s8_s16+0x322>
  return (op1 >> op2) | (op1 << (32U - op2));
 8018e1e:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 8018e22:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8018e26:	fa62 f303 	ror.w	r3, r2, r3
 8018e2a:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018e2e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8018e32:	fa2f f383 	sxtb16	r3, r3
 8018e36:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
  return(result);
 8018e3a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 8018e3e:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    q31_t inAbuf2 = __SXTB16(inA);
 8018e42:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 8018e46:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8018e4a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8018e4c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	fa2f f283 	sxtb16	r2, r3
 8018e56:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8018e5a:	601a      	str	r2, [r3, #0]
  return(result);
 8018e5c:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8018e66:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8018e68:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8018e6c:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8018e70:	601a      	str	r2, [r3, #0]
 8018e72:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8018e76:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	6013      	str	r3, [r2, #0]
 8018e7e:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 8018e82:	681a      	ldr	r2, [r3, #0]
 8018e84:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	eac2 4223 	pkhtb	r2, r2, r3, asr #16
 8018e8e:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8018e92:	601a      	str	r2, [r3, #0]
 8018e94:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	461a      	mov	r2, r3
 8018e9c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8018ea0:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8018ea2:	f507 7236 	add.w	r2, r7, #728	; 0x2d8
 8018ea6:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	6013      	str	r3, [r2, #0]
 8018eae:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8018eb2:	f8d7 22f4 	ldr.w	r2, [r7, #756]	; 0x2f4
 8018eb6:	601a      	str	r2, [r3, #0]
 8018eb8:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	eac2 4203 	pkhbt	r2, r2, r3, lsl #16
 8018ec8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8018ecc:	601a      	str	r2, [r3, #0]
 8018ece:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8018eda:	601a      	str	r2, [r3, #0]
    return source;
 8018edc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8018ee0:	681b      	ldr	r3, [r3, #0]
            ip_a1 = read_and_pad(ip_a1, &a11, &a12);
 8018ee2:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);	// get output of first two elements in b0 with 1st filter
 8018ee6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	4619      	mov	r1, r3
 8018eee:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8018ef2:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8018ef6:	f8c7 1324 	str.w	r1, [r7, #804]	; 0x324
 8018efa:	f8c7 2320 	str.w	r2, [r7, #800]	; 0x320
 8018efe:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018f02:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8018f06:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 8018f0a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8018f0e:	fb22 3301 	smlad	r3, r2, r1, r3
 8018f12:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
  return(result);
 8018f16:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8018f1a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);  // get output of elements 3 and 4 in b1 with 1st filter
 8018f1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4619      	mov	r1, r3
 8018f26:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8018f2a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 8018f2e:	f8c7 1334 	str.w	r1, [r7, #820]	; 0x334
 8018f32:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8018f36:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018f3a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 8018f3e:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8018f42:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8018f46:	fb22 3301 	smlad	r3, r2, r1, r3
 8018f4a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
  return(result);
 8018f4e:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8018f52:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a11, b0, ch_1_out_0);  // get output of first two elements b0 and b1 with 2nd filter
 8018f56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	4619      	mov	r1, r3
 8018f5e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8018f62:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8018f66:	f8c7 1344 	str.w	r1, [r7, #836]	; 0x344
 8018f6a:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 8018f6e:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018f72:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8018f76:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 8018f7a:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8018f7e:	fb22 3301 	smlad	r3, r2, r1, r3
 8018f82:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
  return(result);
 8018f86:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8018f8a:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a11, b1, ch_1_out_1);
 8018f8e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018f92:	681b      	ldr	r3, [r3, #0]
 8018f94:	4619      	mov	r1, r3
 8018f96:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 8018f9a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8018f9e:	f8c7 1354 	str.w	r1, [r7, #852]	; 0x354
 8018fa2:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8018fa6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8018faa:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8018fae:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8018fb2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8018fb6:	fb22 3301 	smlad	r3, r2, r1, r3
 8018fba:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
  return(result);
 8018fbe:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8018fc2:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8018fc6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8018fca:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
    memcpy(&val, *in_q15, 4);
 8018fce:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8018fdc:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8018fde:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8018fe2:	681b      	ldr	r3, [r3, #0]
 8018fe4:	1d1a      	adds	r2, r3, #4
 8018fe6:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8018fea:	601a      	str	r2, [r3, #0]
    return (val);
 8018fec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8018ff0:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8018ff2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 8018ff6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8018ffa:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
    memcpy(&val, *in_q15, 4);
 8018ffe:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	461a      	mov	r2, r3
 8019008:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801900c:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 801900e:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	1d1a      	adds	r2, r3, #4
 8019016:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 801901a:	601a      	str	r2, [r3, #0]
    return (val);
 801901c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8019020:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8019022:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0

            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8019026:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	4619      	mov	r1, r3
 801902e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 8019032:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 8019036:	f8c7 136c 	str.w	r1, [r7, #876]	; 0x36c
 801903a:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 801903e:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019042:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8019046:	f8d7 1368 	ldr.w	r1, [r7, #872]	; 0x368
 801904a:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 801904e:	fb22 3301 	smlad	r3, r2, r1, r3
 8019052:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
  return(result);
 8019056:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801905a:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 801905e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4619      	mov	r1, r3
 8019066:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 801906a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801906e:	f8c7 137c 	str.w	r1, [r7, #892]	; 0x37c
 8019072:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8019076:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801907a:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 801907e:	f8d7 1378 	ldr.w	r1, [r7, #888]	; 0x378
 8019082:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8019086:	fb22 3301 	smlad	r3, r2, r1, r3
 801908a:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
  return(result);
 801908e:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 8019092:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
 8019096:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4619      	mov	r1, r3
 801909e:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80190a2:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 80190a6:	f8c7 138c 	str.w	r1, [r7, #908]	; 0x38c
 80190aa:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 80190ae:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80190b2:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 80190b6:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80190ba:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 80190be:	fb22 3301 	smlad	r3, r2, r1, r3
 80190c2:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
  return(result);
 80190c6:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 80190ca:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);
 80190ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	4619      	mov	r1, r3
 80190d6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	; 0x3a0
 80190da:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80190de:	f8c7 139c 	str.w	r1, [r7, #924]	; 0x39c
 80190e2:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 80190e6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 80190ea:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 80190ee:	f8d7 1398 	ldr.w	r1, [r7, #920]	; 0x398
 80190f2:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 80190f6:	fb22 3301 	smlad	r3, r2, r1, r3
 80190fa:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
  return(result);
 80190fe:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8019102:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc

            col_count--;
 8019106:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 801910a:	3b01      	subs	r3, #1
 801910c:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 8019110:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 8019114:	2b00      	cmp	r3, #0
 8019116:	f47f ad5a 	bne.w	8018bce <arm_nn_mat_mult_kernel_s8_s16+0xc6>
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 801911a:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801911e:	f003 0303 	and.w	r3, r3, #3
 8019122:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 8019126:	e054      	b.n	80191d2 <arm_nn_mat_mult_kernel_s8_s16+0x6ca>
        {
            q7_t a0 = *ip_a0++;
 8019128:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 801912c:	1c5a      	adds	r2, r3, #1
 801912e:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 8019132:	781b      	ldrb	r3, [r3, #0]
 8019134:	f887 33af 	strb.w	r3, [r7, #943]	; 0x3af
            q15_t b0 = *ip_b0++;
 8019138:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801913c:	681a      	ldr	r2, [r3, #0]
 801913e:	1c91      	adds	r1, r2, #2
 8019140:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8019144:	6019      	str	r1, [r3, #0]
 8019146:	8813      	ldrh	r3, [r2, #0]
 8019148:	f8a7 33ac 	strh.w	r3, [r7, #940]	; 0x3ac
            q7_t a1 = *ip_a1++;
 801914c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
 8019150:	1c5a      	adds	r2, r3, #1
 8019152:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8019156:	781b      	ldrb	r3, [r3, #0]
 8019158:	f887 33ab 	strb.w	r3, [r7, #939]	; 0x3ab
            q15_t b1 = *ip_b1++;
 801915c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8019160:	681a      	ldr	r2, [r3, #0]
 8019162:	1c91      	adds	r1, r2, #2
 8019164:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8019168:	6019      	str	r1, [r3, #0]
 801916a:	8813      	ldrh	r3, [r2, #0]
 801916c:	f8a7 33a8 	strh.w	r3, [r7, #936]	; 0x3a8

            ch_0_out_0 += a0 * b0;
 8019170:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 8019174:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 8019178:	fb02 f303 	mul.w	r3, r2, r3
 801917c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8019180:	4413      	add	r3, r2
 8019182:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
            ch_0_out_1 += a0 * b1;
 8019186:	f997 33af 	ldrsb.w	r3, [r7, #943]	; 0x3af
 801918a:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 801918e:	fb02 f303 	mul.w	r3, r2, r3
 8019192:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8019196:	4413      	add	r3, r2
 8019198:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
            ch_1_out_0 += a1 * b0;
 801919c:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 80191a0:	f9b7 23ac 	ldrsh.w	r2, [r7, #940]	; 0x3ac
 80191a4:	fb02 f303 	mul.w	r3, r2, r3
 80191a8:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80191ac:	4413      	add	r3, r2
 80191ae:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
            ch_1_out_1 += a1 * b1;
 80191b2:	f997 33ab 	ldrsb.w	r3, [r7, #939]	; 0x3ab
 80191b6:	f9b7 23a8 	ldrsh.w	r2, [r7, #936]	; 0x3a8
 80191ba:	fb02 f303 	mul.w	r3, r2, r3
 80191be:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80191c2:	4413      	add	r3, r2
 80191c4:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
            col_count--;
 80191c8:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 80191cc:	3b01      	subs	r3, #1
 80191ce:	f8a7 33ca 	strh.w	r3, [r7, #970]	; 0x3ca
        while (col_count)
 80191d2:	f8b7 33ca 	ldrh.w	r3, [r7, #970]	; 0x3ca
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d1a6      	bne.n	8019128 <arm_nn_mat_mult_kernel_s8_s16+0x620>
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 80191da:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80191de:	6818      	ldr	r0, [r3, #0]
 80191e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	6819      	ldr	r1, [r3, #0]
 80191e8:	f507 72f6 	add.w	r2, r7, #492	; 0x1ec
 80191ec:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 80191f0:	6013      	str	r3, [r2, #0]
 80191f2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80191f6:	6018      	str	r0, [r3, #0]
 80191f8:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80191fc:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80191fe:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8019208:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	fa03 f202 	lsl.w	r2, r3, r2
 8019212:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8019216:	601a      	str	r2, [r3, #0]
 8019218:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801921c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019224:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8019228:	2200      	movs	r2, #0
 801922a:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801922c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8019230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019234:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019236:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801923a:	2200      	movs	r2, #0
 801923c:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801923e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8019242:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	4618      	mov	r0, r3
 801924a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801924e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	461a      	mov	r2, r3
 8019256:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801925a:	fb02 f501 	mul.w	r5, r2, r1
 801925e:	fb00 f403 	mul.w	r4, r0, r3
 8019262:	442c      	add	r4, r5
 8019264:	fba0 2302 	umull	r2, r3, r0, r2
 8019268:	18e1      	adds	r1, r4, r3
 801926a:	460b      	mov	r3, r1
 801926c:	eb18 0102 	adds.w	r1, r8, r2
 8019270:	60b9      	str	r1, [r7, #8]
 8019272:	eb49 0303 	adc.w	r3, r9, r3
 8019276:	60fb      	str	r3, [r7, #12]
 8019278:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801927c:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
    result = (int32_t)(mult.long_long >> 31);
 8019280:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8019284:	f04f 0000 	mov.w	r0, #0
 8019288:	f04f 0100 	mov.w	r1, #0
 801928c:	0fd0      	lsrs	r0, r2, #31
 801928e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019292:	17d9      	asrs	r1, r3, #31
 8019294:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8019298:	4603      	mov	r3, r0
 801929a:	6013      	str	r3, [r2, #0]
    return result;
 801929c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80192a0:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80192a2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	dc04      	bgt.n	80192b6 <arm_nn_mat_mult_kernel_s8_s16+0x7ae>
 80192ac:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	425a      	negs	r2, r3
 80192b4:	e000      	b.n	80192b8 <arm_nn_mat_mult_kernel_s8_s16+0x7b0>
 80192b6:	2200      	movs	r2, #0
 80192b8:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80192bc:	6019      	str	r1, [r3, #0]
 80192be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80192c2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 80192c4:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80192c8:	2200      	movs	r2, #0
 80192ca:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 80192cc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80192d0:	2201      	movs	r2, #1
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	fa02 f303 	lsl.w	r3, r2, r3
 80192d8:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 80192dc:	3b01      	subs	r3, #1
 80192de:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80192e0:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 80192e4:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80192e8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80192ec:	6812      	ldr	r2, [r2, #0]
 80192ee:	681b      	ldr	r3, [r3, #0]
 80192f0:	4013      	ands	r3, r2
 80192f2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80192f4:	f507 71e6 	add.w	r1, r7, #460	; 0x1cc
 80192f8:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80192fc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8019300:	6812      	ldr	r2, [r2, #0]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	fa42 f303 	asr.w	r3, r2, r3
 8019308:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801930a:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801930e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8019312:	681b      	ldr	r3, [r3, #0]
 8019314:	105b      	asrs	r3, r3, #1
 8019316:	6013      	str	r3, [r2, #0]
    if (result < 0)
 8019318:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	da06      	bge.n	8019330 <arm_nn_mat_mult_kernel_s8_s16+0x828>
        threshold++;
 8019322:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8019326:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	3301      	adds	r3, #1
 801932e:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8019330:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8019334:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	680b      	ldr	r3, [r1, #0]
 801933c:	429a      	cmp	r2, r3
 801933e:	dd06      	ble.n	801934e <arm_nn_mat_mult_kernel_s8_s16+0x846>
        result++;
 8019340:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 8019344:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	3301      	adds	r3, #1
 801934c:	6013      	str	r3, [r2, #0]
    return result;
 801934e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8019352:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019354:	bf00      	nop
 8019356:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 += out_offset;
 801935a:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 801935e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8019362:	4413      	add	r3, r2
 8019364:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8019368:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801936c:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8019370:	4293      	cmp	r3, r2
 8019372:	bfb8      	it	lt
 8019374:	4613      	movlt	r3, r2
 8019376:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 801937a:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801937e:	f8d7 23d8 	ldr.w	r2, [r7, #984]	; 0x3d8
 8019382:	4293      	cmp	r3, r2
 8019384:	bfa8      	it	ge
 8019386:	4613      	movge	r3, r2
 8019388:	f8c7 33d8 	str.w	r3, [r7, #984]	; 0x3d8
        *out_0++ = (q7_t)ch_0_out_0;
 801938c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8019390:	1c53      	adds	r3, r2, #1
 8019392:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8019396:	f8d7 33d8 	ldr.w	r3, [r7, #984]	; 0x3d8
 801939a:	b25b      	sxtb	r3, r3
 801939c:	7013      	strb	r3, [r2, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 801939e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80193a2:	6818      	ldr	r0, [r3, #0]
 80193a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	6819      	ldr	r1, [r3, #0]
 80193ac:	f507 7207 	add.w	r2, r7, #540	; 0x21c
 80193b0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 80193b4:	6013      	str	r3, [r2, #0]
 80193b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80193ba:	6018      	str	r0, [r3, #0]
 80193bc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80193c0:	6019      	str	r1, [r3, #0]
 80193c2:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80193cc:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	fa03 f202 	lsl.w	r2, r3, r2
 80193d6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80193da:	601a      	str	r2, [r3, #0]
 80193dc:	f507 7203 	add.w	r2, r7, #524	; 0x20c
 80193e0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80193e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80193ec:	2200      	movs	r2, #0
 80193ee:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80193f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80193f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80193f8:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80193fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80193fe:	2200      	movs	r2, #0
 8019400:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019402:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	; 0xb0
 8019406:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	4618      	mov	r0, r3
 801940e:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019412:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	461a      	mov	r2, r3
 801941a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801941e:	fb02 f501 	mul.w	r5, r2, r1
 8019422:	fb00 f403 	mul.w	r4, r0, r3
 8019426:	442c      	add	r4, r5
 8019428:	fba0 2302 	umull	r2, r3, r0, r2
 801942c:	18e1      	adds	r1, r4, r3
 801942e:	460b      	mov	r3, r1
 8019430:	eb18 0102 	adds.w	r1, r8, r2
 8019434:	6139      	str	r1, [r7, #16]
 8019436:	eb49 0303 	adc.w	r3, r9, r3
 801943a:	617b      	str	r3, [r7, #20]
 801943c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8019440:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
    result = (int32_t)(mult.long_long >> 31);
 8019444:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8019448:	f04f 0000 	mov.w	r0, #0
 801944c:	f04f 0100 	mov.w	r1, #0
 8019450:	0fd0      	lsrs	r0, r2, #31
 8019452:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019456:	17d9      	asrs	r1, r3, #31
 8019458:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801945c:	4603      	mov	r3, r0
 801945e:	6013      	str	r3, [r2, #0]
    return result;
 8019460:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8019464:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019466:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	2b00      	cmp	r3, #0
 801946e:	dc04      	bgt.n	801947a <arm_nn_mat_mult_kernel_s8_s16+0x972>
 8019470:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	425a      	negs	r2, r3
 8019478:	e000      	b.n	801947c <arm_nn_mat_mult_kernel_s8_s16+0x974>
 801947a:	2200      	movs	r2, #0
 801947c:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8019480:	6019      	str	r1, [r3, #0]
 8019482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8019486:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019488:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801948c:	2200      	movs	r2, #0
 801948e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8019494:	2201      	movs	r2, #1
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	fa02 f303 	lsl.w	r3, r2, r3
 801949c:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 80194a0:	3b01      	subs	r3, #1
 80194a2:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 80194a4:	f507 71fa 	add.w	r1, r7, #500	; 0x1f4
 80194a8:	f507 7201 	add.w	r2, r7, #516	; 0x204
 80194ac:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80194b0:	6812      	ldr	r2, [r2, #0]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	4013      	ands	r3, r2
 80194b6:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 80194b8:	f507 71fe 	add.w	r1, r7, #508	; 0x1fc
 80194bc:	f507 7201 	add.w	r2, r7, #516	; 0x204
 80194c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80194c4:	6812      	ldr	r2, [r2, #0]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	fa42 f303 	asr.w	r3, r2, r3
 80194cc:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80194ce:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80194d2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	105b      	asrs	r3, r3, #1
 80194da:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80194dc:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	da06      	bge.n	80194f4 <arm_nn_mat_mult_kernel_s8_s16+0x9ec>
        threshold++;
 80194e6:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80194ea:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	3301      	adds	r3, #1
 80194f2:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80194f4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80194f8:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 80194fc:	681a      	ldr	r2, [r3, #0]
 80194fe:	680b      	ldr	r3, [r1, #0]
 8019500:	429a      	cmp	r2, r3
 8019502:	dd06      	ble.n	8019512 <arm_nn_mat_mult_kernel_s8_s16+0xa0a>
        result++;
 8019504:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 8019508:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	3301      	adds	r3, #1
 8019510:	6013      	str	r3, [r2, #0]
    return result;
 8019512:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8019516:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019518:	bf00      	nop
 801951a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 += out_offset;
 801951e:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8019522:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8019526:	4413      	add	r3, r2
 8019528:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801952c:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 8019530:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8019534:	4293      	cmp	r3, r2
 8019536:	bfb8      	it	lt
 8019538:	4613      	movlt	r3, r2
 801953a:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801953e:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 8019542:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 8019546:	4293      	cmp	r3, r2
 8019548:	bfa8      	it	ge
 801954a:	4613      	movge	r3, r2
 801954c:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
        *out_1++ = (q7_t)ch_0_out_1;
 8019550:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 8019554:	1c53      	adds	r3, r2, #1
 8019556:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 801955a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	; 0x3d4
 801955e:	b25b      	sxtb	r3, r3
 8019560:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8019562:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8019566:	3304      	adds	r3, #4
 8019568:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801956c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	3304      	adds	r3, #4
 8019578:	6013      	str	r3, [r2, #0]

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 801957a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801957e:	6818      	ldr	r0, [r3, #0]
 8019580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	6819      	ldr	r1, [r3, #0]
 8019588:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801958c:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 8019590:	6013      	str	r3, [r2, #0]
 8019592:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8019596:	6018      	str	r0, [r3, #0]
 8019598:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801959c:	6019      	str	r1, [r3, #0]
 801959e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80195a8:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	fa03 f202 	lsl.w	r2, r3, r2
 80195b2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80195b6:	601a      	str	r2, [r3, #0]
 80195b8:	f507 720f 	add.w	r2, r7, #572	; 0x23c
 80195bc:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 80195c4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80195c8:	2200      	movs	r2, #0
 80195ca:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 80195cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80195d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80195d4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 80195d6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80195da:	2200      	movs	r2, #0
 80195dc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80195de:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80195e2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	4618      	mov	r0, r3
 80195ea:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80195ee:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	461a      	mov	r2, r3
 80195f6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80195fa:	fb02 f501 	mul.w	r5, r2, r1
 80195fe:	fb00 f403 	mul.w	r4, r0, r3
 8019602:	442c      	add	r4, r5
 8019604:	fba0 2302 	umull	r2, r3, r0, r2
 8019608:	18e1      	adds	r1, r4, r3
 801960a:	460b      	mov	r3, r1
 801960c:	eb18 0102 	adds.w	r1, r8, r2
 8019610:	61b9      	str	r1, [r7, #24]
 8019612:	eb49 0303 	adc.w	r3, r9, r3
 8019616:	61fb      	str	r3, [r7, #28]
 8019618:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801961c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    result = (int32_t)(mult.long_long >> 31);
 8019620:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8019624:	f04f 0000 	mov.w	r0, #0
 8019628:	f04f 0100 	mov.w	r1, #0
 801962c:	0fd0      	lsrs	r0, r2, #31
 801962e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8019632:	17d9      	asrs	r1, r3, #31
 8019634:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8019638:	4603      	mov	r3, r0
 801963a:	6013      	str	r3, [r2, #0]
    return result;
 801963c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8019640:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019642:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	2b00      	cmp	r3, #0
 801964a:	dc04      	bgt.n	8019656 <arm_nn_mat_mult_kernel_s8_s16+0xb4e>
 801964c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	425a      	negs	r2, r3
 8019654:	e000      	b.n	8019658 <arm_nn_mat_mult_kernel_s8_s16+0xb50>
 8019656:	2200      	movs	r2, #0
 8019658:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801965c:	6019      	str	r1, [r3, #0]
 801965e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8019662:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019664:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 8019668:	2200      	movs	r2, #0
 801966a:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801966c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8019670:	2201      	movs	r2, #1
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	fa02 f303 	lsl.w	r3, r2, r3
 8019678:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801967c:	3b01      	subs	r3, #1
 801967e:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8019680:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8019684:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8019688:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801968c:	6812      	ldr	r2, [r2, #0]
 801968e:	681b      	ldr	r3, [r3, #0]
 8019690:	4013      	ands	r3, r2
 8019692:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8019694:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8019698:	f507 720d 	add.w	r2, r7, #564	; 0x234
 801969c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80196a0:	6812      	ldr	r2, [r2, #0]
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	fa42 f303 	asr.w	r3, r2, r3
 80196a8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 80196aa:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80196ae:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	105b      	asrs	r3, r3, #1
 80196b6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 80196b8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	da06      	bge.n	80196d0 <arm_nn_mat_mult_kernel_s8_s16+0xbc8>
        threshold++;
 80196c2:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80196c6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80196ca:	681b      	ldr	r3, [r3, #0]
 80196cc:	3301      	adds	r3, #1
 80196ce:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 80196d0:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80196d4:	f507 7108 	add.w	r1, r7, #544	; 0x220
 80196d8:	681a      	ldr	r2, [r3, #0]
 80196da:	680b      	ldr	r3, [r1, #0]
 80196dc:	429a      	cmp	r2, r3
 80196de:	dd06      	ble.n	80196ee <arm_nn_mat_mult_kernel_s8_s16+0xbe6>
        result++;
 80196e0:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 80196e4:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80196e8:	681b      	ldr	r3, [r3, #0]
 80196ea:	3301      	adds	r3, #1
 80196ec:	6013      	str	r3, [r2, #0]
    return result;
 80196ee:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80196f2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80196f4:	bf00      	nop
 80196f6:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 += out_offset;
 80196fa:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 80196fe:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8019702:	4413      	add	r3, r2
 8019704:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 8019708:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801970c:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8019710:	4293      	cmp	r3, r2
 8019712:	bfb8      	it	lt
 8019714:	4613      	movlt	r3, r2
 8019716:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 801971a:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801971e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	; 0x3d0
 8019722:	4293      	cmp	r3, r2
 8019724:	bfa8      	it	ge
 8019726:	4613      	movge	r3, r2
 8019728:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
        *out_0++ = (q7_t)ch_1_out_0;
 801972c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8019730:	1c53      	adds	r3, r2, #1
 8019732:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8019736:	f8d7 33d0 	ldr.w	r3, [r7, #976]	; 0x3d0
 801973a:	b25b      	sxtb	r3, r3
 801973c:	7013      	strb	r3, [r2, #0]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 801973e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8019742:	6818      	ldr	r0, [r3, #0]
 8019744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	6819      	ldr	r1, [r3, #0]
 801974c:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 8019750:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 8019754:	6013      	str	r3, [r2, #0]
 8019756:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801975a:	6018      	str	r0, [r3, #0]
 801975c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8019760:	6019      	str	r1, [r3, #0]
 8019762:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801976c:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	fa03 f202 	lsl.w	r2, r3, r2
 8019776:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801977a:	601a      	str	r2, [r3, #0]
 801977c:	f507 721b 	add.w	r2, r7, #620	; 0x26c
 8019780:	f507 731e 	add.w	r3, r7, #632	; 0x278
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019788:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801978c:	2200      	movs	r2, #0
 801978e:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019790:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8019794:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019798:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801979a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801979e:	2200      	movs	r2, #0
 80197a0:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 80197a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80197a6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4618      	mov	r0, r3
 80197ae:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80197b2:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	461a      	mov	r2, r3
 80197ba:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80197be:	fb02 f501 	mul.w	r5, r2, r1
 80197c2:	fb00 f403 	mul.w	r4, r0, r3
 80197c6:	442c      	add	r4, r5
 80197c8:	fba0 2302 	umull	r2, r3, r0, r2
 80197cc:	18e1      	adds	r1, r4, r3
 80197ce:	460b      	mov	r3, r1
 80197d0:	eb18 0102 	adds.w	r1, r8, r2
 80197d4:	6239      	str	r1, [r7, #32]
 80197d6:	eb49 0303 	adc.w	r3, r9, r3
 80197da:	627b      	str	r3, [r7, #36]	; 0x24
 80197dc:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80197e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
    result = (int32_t)(mult.long_long >> 31);
 80197e4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80197e8:	f04f 0000 	mov.w	r0, #0
 80197ec:	f04f 0100 	mov.w	r1, #0
 80197f0:	0fd0      	lsrs	r0, r2, #31
 80197f2:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 80197f6:	17d9      	asrs	r1, r3, #31
 80197f8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80197fc:	4603      	mov	r3, r0
 80197fe:	6013      	str	r3, [r2, #0]
    return result;
 8019800:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8019804:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019806:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	2b00      	cmp	r3, #0
 801980e:	dc04      	bgt.n	801981a <arm_nn_mat_mult_kernel_s8_s16+0xd12>
 8019810:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	425a      	negs	r2, r3
 8019818:	e000      	b.n	801981c <arm_nn_mat_mult_kernel_s8_s16+0xd14>
 801981a:	2200      	movs	r2, #0
 801981c:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8019820:	6019      	str	r1, [r3, #0]
 8019822:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8019826:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019828:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801982c:	2200      	movs	r2, #0
 801982e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019830:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8019834:	2201      	movs	r2, #1
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	fa02 f303 	lsl.w	r3, r2, r3
 801983c:	f507 7216 	add.w	r2, r7, #600	; 0x258
 8019840:	3b01      	subs	r3, #1
 8019842:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 8019844:	f507 7115 	add.w	r1, r7, #596	; 0x254
 8019848:	f507 7219 	add.w	r2, r7, #612	; 0x264
 801984c:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8019850:	6812      	ldr	r2, [r2, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	4013      	ands	r3, r2
 8019856:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 8019858:	f507 7117 	add.w	r1, r7, #604	; 0x25c
 801985c:	f507 7219 	add.w	r2, r7, #612	; 0x264
 8019860:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8019864:	6812      	ldr	r2, [r2, #0]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	fa42 f303 	asr.w	r3, r2, r3
 801986c:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801986e:	f507 7214 	add.w	r2, r7, #592	; 0x250
 8019872:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	105b      	asrs	r3, r3, #1
 801987a:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801987c:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8019880:	681b      	ldr	r3, [r3, #0]
 8019882:	2b00      	cmp	r3, #0
 8019884:	da06      	bge.n	8019894 <arm_nn_mat_mult_kernel_s8_s16+0xd8c>
        threshold++;
 8019886:	f507 7214 	add.w	r2, r7, #592	; 0x250
 801988a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	3301      	adds	r3, #1
 8019892:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 8019894:	f507 7315 	add.w	r3, r7, #596	; 0x254
 8019898:	f507 7114 	add.w	r1, r7, #592	; 0x250
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	680b      	ldr	r3, [r1, #0]
 80198a0:	429a      	cmp	r2, r3
 80198a2:	dd06      	ble.n	80198b2 <arm_nn_mat_mult_kernel_s8_s16+0xdaa>
        result++;
 80198a4:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80198a8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	3301      	adds	r3, #1
 80198b0:	6013      	str	r3, [r2, #0]
    return result;
 80198b2:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80198b6:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 80198b8:	bf00      	nop
 80198ba:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 += out_offset;
 80198be:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80198c2:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80198c6:	4413      	add	r3, r2
 80198c8:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 80198cc:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 80198d0:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80198d4:	4293      	cmp	r3, r2
 80198d6:	bfb8      	it	lt
 80198d8:	4613      	movlt	r3, r2
 80198da:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 80198de:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 80198e2:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 80198e6:	4293      	cmp	r3, r2
 80198e8:	bfa8      	it	ge
 80198ea:	4613      	movge	r3, r2
 80198ec:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
        *out_1++ = (q7_t)ch_1_out_1;
 80198f0:	f8d7 23ec 	ldr.w	r2, [r7, #1004]	; 0x3ec
 80198f4:	1c53      	adds	r3, r2, #1
 80198f6:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80198fa:	f8d7 33cc 	ldr.w	r3, [r7, #972]	; 0x3cc
 80198fe:	b25b      	sxtb	r3, r3
 8019900:	7013      	strb	r3, [r2, #0]
        out_mult++;
 8019902:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8019906:	3304      	adds	r3, #4
 8019908:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801990c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8019910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019914:	681b      	ldr	r3, [r3, #0]
 8019916:	3304      	adds	r3, #4
 8019918:	6013      	str	r3, [r2, #0]

        /* skip row */
        ip_a0 += num_col_a;
 801991a:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801991e:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8019922:	4413      	add	r3, r2
 8019924:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
        row_count--;
 8019928:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 801992c:	3b01      	subs	r3, #1
 801992e:	f8a7 33e6 	strh.w	r3, [r7, #998]	; 0x3e6
    while (row_count)
 8019932:	f8b7 33e6 	ldrh.w	r3, [r7, #998]	; 0x3e6
 8019936:	2b00      	cmp	r3, #0
 8019938:	f47f a912 	bne.w	8018b60 <arm_nn_mat_mult_kernel_s8_s16+0x58>
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 801993c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8019940:	881b      	ldrh	r3, [r3, #0]
 8019942:	f003 0301 	and.w	r3, r3, #1
 8019946:	2b00      	cmp	r3, #0
 8019948:	f000 83ed 	beq.w	801a126 <arm_nn_mat_mult_kernel_s8_s16+0x161e>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
 801994c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019950:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8019954:	6812      	ldr	r2, [r2, #0]
 8019956:	601a      	str	r2, [r3, #0]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 8019958:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801995c:	681a      	ldr	r2, [r3, #0]
 801995e:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8019962:	005b      	lsls	r3, r3, #1
 8019964:	441a      	add	r2, r3
 8019966:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801996a:	601a      	str	r2, [r3, #0]

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 801996c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        q31_t ch_0_out_1 = *bias++;
 8019976:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 801997a:	1d1a      	adds	r2, r3, #4
 801997c:	f8c7 23e8 	str.w	r2, [r7, #1000]	; 0x3e8
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

        uint16_t col_count = num_col_a >> 2;
 8019986:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 801998a:	089b      	lsrs	r3, r3, #2
 801998c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 8019990:	e1bb      	b.n	8019d0a <arm_nn_mat_mult_kernel_s8_s16+0x1202>
 8019992:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8019996:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801999a:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 801999c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	461a      	mov	r2, r3
 80199a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80199ac:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80199ae:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80199b2:	681b      	ldr	r3, [r3, #0]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	1d1a      	adds	r2, r3, #4
 80199b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	601a      	str	r2, [r3, #0]
    return (val);
 80199c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80199c4:	681b      	ldr	r3, [r3, #0]
        {
            q31_t a01, a02;
            q31_t b0 = arm_nn_read_q15x2_ia(&ip_b0);
 80199c6:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80199ca:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80199ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80199d2:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 80199d4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	461a      	mov	r2, r3
 80199e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80199e4:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 80199e6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	1d1a      	adds	r2, r3, #4
 80199f0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	601a      	str	r2, [r3, #0]
    return (val);
 80199f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80199fc:	681b      	ldr	r3, [r3, #0]
            q31_t b1 = arm_nn_read_q15x2_ia(&ip_b1);
 80199fe:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8019a02:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019a06:	f8d7 23e0 	ldr.w	r2, [r7, #992]	; 0x3e0
 8019a0a:	601a      	str	r2, [r3, #0]
 8019a0c:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8019a10:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8019a14:	601a      	str	r2, [r3, #0]
 8019a16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8019a1a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8019a1e:	601a      	str	r2, [r3, #0]
 8019a20:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8019a24:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8019a28:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q7, 4);
 8019a2a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	461a      	mov	r2, r3
 8019a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019a3a:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 8019a3c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	1d1a      	adds	r2, r3, #4
 8019a46:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8019a4a:	681b      	ldr	r3, [r3, #0]
 8019a4c:	601a      	str	r2, [r3, #0]
    return (val);
 8019a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019a52:	681a      	ldr	r2, [r3, #0]
    q31_t inA = arm_nn_read_q7x4_ia(&source);
 8019a54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8019a58:	601a      	str	r2, [r3, #0]
    q31_t inAbuf1 = __SXTB16(__ROR((uint32_t)inA, 8));
 8019a5a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8019a5e:	681a      	ldr	r2, [r3, #0]
 8019a60:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8019a64:	601a      	str	r2, [r3, #0]
 8019a66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8019a6a:	2208      	movs	r2, #8
 8019a6c:	601a      	str	r2, [r3, #0]
  op2 %= 32U;
 8019a6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8019a72:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8019a76:	6812      	ldr	r2, [r2, #0]
 8019a78:	f002 021f 	and.w	r2, r2, #31
 8019a7c:	601a      	str	r2, [r3, #0]
  if (op2 == 0U)
 8019a7e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d103      	bne.n	8019a90 <arm_nn_mat_mult_kernel_s8_s16+0xf88>
    return op1;
 8019a88:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	e007      	b.n	8019aa0 <arm_nn_mat_mult_kernel_s8_s16+0xf98>
  return (op1 >> op2) | (op1 << (32U - op2));
 8019a90:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8019a94:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8019a98:	6812      	ldr	r2, [r2, #0]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	fa62 f303 	ror.w	r3, r2, r3
 8019aa0:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8019aa4:	6013      	str	r3, [r2, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019aa6:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	fa2f f283 	sxtb16	r2, r3
 8019ab0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8019ab4:	601a      	str	r2, [r3, #0]
  return(result);
 8019ab6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8019aba:	681a      	ldr	r2, [r3, #0]
 8019abc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8019ac0:	601a      	str	r2, [r3, #0]
    q31_t inAbuf2 = __SXTB16(inA);
 8019ac2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8019ac6:	681a      	ldr	r2, [r3, #0]
 8019ac8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8019acc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 8019ace:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	fa2f f283 	sxtb16	r2, r3
 8019ad8:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8019adc:	601a      	str	r2, [r3, #0]
  return(result);
 8019ade:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8019ae2:	681a      	ldr	r2, [r3, #0]
 8019ae4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8019ae8:	601a      	str	r2, [r3, #0]
    *out2 = (int32_t)(__PKHTB(inAbuf1, inAbuf2, 16));
 8019aea:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8019aee:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8019af2:	6812      	ldr	r2, [r2, #0]
 8019af4:	601a      	str	r2, [r3, #0]
 8019af6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8019afa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019afe:	6812      	ldr	r2, [r2, #0]
 8019b00:	601a      	str	r2, [r3, #0]
 8019b02:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8019b0c:	6812      	ldr	r2, [r2, #0]
 8019b0e:	eac3 4222 	pkhtb	r2, r3, r2, asr #16
 8019b12:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8019b16:	601a      	str	r2, [r3, #0]
 8019b18:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	461a      	mov	r2, r3
 8019b20:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	601a      	str	r2, [r3, #0]
    *out1 = (int32_t)(__PKHBT(inAbuf2, inAbuf1, 16));
 8019b28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8019b2c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8019b30:	6812      	ldr	r2, [r2, #0]
 8019b32:	601a      	str	r2, [r3, #0]
 8019b34:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8019b38:	f507 72aa 	add.w	r2, r7, #340	; 0x154
 8019b3c:	6812      	ldr	r2, [r2, #0]
 8019b3e:	601a      	str	r2, [r3, #0]
 8019b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8019b4a:	6812      	ldr	r2, [r2, #0]
 8019b4c:	eac3 4202 	pkhbt	r2, r3, r2, lsl #16
 8019b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019b54:	601a      	str	r2, [r3, #0]
 8019b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	601a      	str	r2, [r3, #0]
    return source;
 8019b66:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019b6a:	681b      	ldr	r3, [r3, #0]

            ip_a0 = read_and_pad(ip_a0, &a01, &a02);
 8019b6c:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

            ch_0_out_0 = __SMLAD(a01, b0, ch_0_out_0);
 8019b70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	4618      	mov	r0, r3
 8019b78:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 8019b7c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019b80:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8019b84:	6018      	str	r0, [r3, #0]
 8019b86:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8019b8a:	6019      	str	r1, [r3, #0]
 8019b8c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8019b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019b92:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8019b9c:	6812      	ldr	r2, [r2, #0]
 8019b9e:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8019ba2:	6809      	ldr	r1, [r1, #0]
 8019ba4:	fb23 1202 	smlad	r2, r3, r2, r1
 8019ba8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8019bac:	601a      	str	r2, [r3, #0]
  return(result);
 8019bae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a01, b1, ch_0_out_1);
 8019bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8019bc4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8019bc8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8019bcc:	6018      	str	r0, [r3, #0]
 8019bce:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8019bd2:	6019      	str	r1, [r3, #0]
 8019bd4:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8019bd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019bda:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8019be4:	6812      	ldr	r2, [r2, #0]
 8019be6:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8019bea:	6809      	ldr	r1, [r1, #0]
 8019bec:	fb23 1202 	smlad	r2, r3, r2, r1
 8019bf0:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8019bf4:	601a      	str	r2, [r3, #0]
  return(result);
 8019bf6:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8019c00:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8019c04:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8019c08:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8019c0a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	461a      	mov	r2, r3
 8019c16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019c1a:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8019c1c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	1d1a      	adds	r2, r3, #4
 8019c26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	601a      	str	r2, [r3, #0]
    return (val);
 8019c2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019c32:	681b      	ldr	r3, [r3, #0]

            b0 = arm_nn_read_q15x2_ia(&ip_b0);
 8019c34:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 8019c38:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8019c3c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019c40:	601a      	str	r2, [r3, #0]
    memcpy(&val, *in_q15, 4);
 8019c42:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	461a      	mov	r2, r3
 8019c4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c52:	601a      	str	r2, [r3, #0]
    *in_q15 += 2;
 8019c54:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	1d1a      	adds	r2, r3, #4
 8019c5e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8019c62:	681b      	ldr	r3, [r3, #0]
 8019c64:	601a      	str	r2, [r3, #0]
    return (val);
 8019c66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019c6a:	681b      	ldr	r3, [r3, #0]
            b1 = arm_nn_read_q15x2_ia(&ip_b1);
 8019c6c:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
            ch_0_out_0 = __SMLAD(a02, b0, ch_0_out_0);
 8019c70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	4618      	mov	r0, r3
 8019c78:	f8d7 13b4 	ldr.w	r1, [r7, #948]	; 0x3b4
 8019c7c:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019c80:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8019c84:	6018      	str	r0, [r3, #0]
 8019c86:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8019c8a:	6019      	str	r1, [r3, #0]
 8019c8c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8019c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019c92:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 8019c9c:	6812      	ldr	r2, [r2, #0]
 8019c9e:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8019ca2:	6809      	ldr	r1, [r1, #0]
 8019ca4:	fb23 1202 	smlad	r2, r3, r2, r1
 8019ca8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8019cac:	601a      	str	r2, [r3, #0]
  return(result);
 8019cae:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);
 8019cb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019cbc:	681b      	ldr	r3, [r3, #0]
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8019cc4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8019cc8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8019ccc:	6018      	str	r0, [r3, #0]
 8019cce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8019cd2:	6019      	str	r1, [r3, #0]
 8019cd4:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8019cd8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8019cda:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8019ce4:	6812      	ldr	r2, [r2, #0]
 8019ce6:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8019cea:	6809      	ldr	r1, [r1, #0]
 8019cec:	fb23 1202 	smlad	r2, r3, r2, r1
 8019cf0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8019cf4:	601a      	str	r2, [r3, #0]
  return(result);
 8019cf6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

            col_count--;
 8019d00:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8019d04:	3b01      	subs	r3, #1
 8019d06:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 8019d0a:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	f47f ae3f 	bne.w	8019992 <arm_nn_mat_mult_kernel_s8_s16+0xe8a>
        }
        col_count = num_col_a & 0x3;
 8019d14:	f8b7 3420 	ldrh.w	r3, [r7, #1056]	; 0x420
 8019d18:	f003 0303 	and.w	r3, r3, #3
 8019d1c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 8019d20:	e036      	b.n	8019d90 <arm_nn_mat_mult_kernel_s8_s16+0x1288>
        {
            q7_t a0 = *ip_a0++;
 8019d22:	f8d7 33e0 	ldr.w	r3, [r7, #992]	; 0x3e0
 8019d26:	1c5a      	adds	r2, r3, #1
 8019d28:	f8c7 23e0 	str.w	r2, [r7, #992]	; 0x3e0
 8019d2c:	781b      	ldrb	r3, [r3, #0]
 8019d2e:	f887 33bd 	strb.w	r3, [r7, #957]	; 0x3bd
            q15_t b0 = *ip_b0++;
 8019d32:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	1c99      	adds	r1, r3, #2
 8019d3a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8019d3e:	6011      	str	r1, [r2, #0]
 8019d40:	881b      	ldrh	r3, [r3, #0]
 8019d42:	f8a7 33ba 	strh.w	r3, [r7, #954]	; 0x3ba
            q15_t b1 = *ip_b1++;
 8019d46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	1c99      	adds	r1, r3, #2
 8019d4e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8019d52:	6011      	str	r1, [r2, #0]
 8019d54:	881b      	ldrh	r3, [r3, #0]
 8019d56:	f8a7 33b8 	strh.w	r3, [r7, #952]	; 0x3b8

            ch_0_out_0 += a0 * b0;
 8019d5a:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 8019d5e:	f9b7 23ba 	ldrsh.w	r2, [r7, #954]	; 0x3ba
 8019d62:	fb02 f303 	mul.w	r3, r2, r3
 8019d66:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019d6a:	4413      	add	r3, r2
 8019d6c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
            ch_0_out_1 += a0 * b1;
 8019d70:	f997 33bd 	ldrsb.w	r3, [r7, #957]	; 0x3bd
 8019d74:	f9b7 23b8 	ldrsh.w	r2, [r7, #952]	; 0x3b8
 8019d78:	fb02 f303 	mul.w	r3, r2, r3
 8019d7c:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 8019d80:	4413      	add	r3, r2
 8019d82:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
            col_count--;
 8019d86:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8019d8a:	3b01      	subs	r3, #1
 8019d8c:	f8a7 33be 	strh.w	r3, [r7, #958]	; 0x3be
        while (col_count)
 8019d90:	f8b7 33be 	ldrh.w	r3, [r7, #958]	; 0x3be
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d1c4      	bne.n	8019d22 <arm_nn_mat_mult_kernel_s8_s16+0x121a>
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 8019d98:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8019d9c:	6819      	ldr	r1, [r3, #0]
 8019d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	681a      	ldr	r2, [r3, #0]
 8019da6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8019daa:	f8d7 03c4 	ldr.w	r0, [r7, #964]	; 0x3c4
 8019dae:	6018      	str	r0, [r3, #0]
 8019db0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8019db4:	6019      	str	r1, [r3, #0]
 8019db6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019dba:	601a      	str	r2, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019dbc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dc6:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8019dca:	6812      	ldr	r2, [r2, #0]
 8019dcc:	409a      	lsls	r2, r3
 8019dce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8019dd2:	601a      	str	r2, [r3, #0]
 8019dd4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8019dd8:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8019ddc:	6812      	ldr	r2, [r2, #0]
 8019dde:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019de0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019de4:	2200      	movs	r2, #0
 8019de6:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019de8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019df0:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019df2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8019df6:	2200      	movs	r2, #0
 8019df8:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019dfa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8019dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	4618      	mov	r0, r3
 8019e06:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019e0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	461a      	mov	r2, r3
 8019e12:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019e16:	fb02 fc01 	mul.w	ip, r2, r1
 8019e1a:	fb00 f603 	mul.w	r6, r0, r3
 8019e1e:	4466      	add	r6, ip
 8019e20:	fba0 2302 	umull	r2, r3, r0, r2
 8019e24:	18f1      	adds	r1, r6, r3
 8019e26:	460b      	mov	r3, r1
 8019e28:	18a1      	adds	r1, r4, r2
 8019e2a:	6039      	str	r1, [r7, #0]
 8019e2c:	eb45 0303 	adc.w	r3, r5, r3
 8019e30:	607b      	str	r3, [r7, #4]
 8019e32:	e9d7 3400 	ldrd	r3, r4, [r7]
 8019e36:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    result = (int32_t)(mult.long_long >> 31);
 8019e3a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8019e3e:	f04f 0200 	mov.w	r2, #0
 8019e42:	f04f 0300 	mov.w	r3, #0
 8019e46:	0fc2      	lsrs	r2, r0, #31
 8019e48:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8019e4c:	17cb      	asrs	r3, r1, #31
 8019e4e:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8019e52:	4613      	mov	r3, r2
 8019e54:	600b      	str	r3, [r1, #0]
    return result;
 8019e56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8019e5a:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019e5c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	dc04      	bgt.n	8019e70 <arm_nn_mat_mult_kernel_s8_s16+0x1368>
 8019e66:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	425b      	negs	r3, r3
 8019e6e:	e000      	b.n	8019e72 <arm_nn_mat_mult_kernel_s8_s16+0x136a>
 8019e70:	2300      	movs	r3, #0
 8019e72:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8019e76:	6011      	str	r1, [r2, #0]
 8019e78:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8019e7c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 8019e7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019e82:	2200      	movs	r2, #0
 8019e84:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 8019e86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8019e8a:	2201      	movs	r2, #1
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	409a      	lsls	r2, r3
 8019e90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8019e94:	3a01      	subs	r2, #1
 8019e96:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 8019e98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8019e9c:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8019ea0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8019ea4:	6809      	ldr	r1, [r1, #0]
 8019ea6:	6812      	ldr	r2, [r2, #0]
 8019ea8:	400a      	ands	r2, r1
 8019eaa:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 8019eac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019eb0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8019eb4:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 8019eb8:	6809      	ldr	r1, [r1, #0]
 8019eba:	6812      	ldr	r2, [r2, #0]
 8019ebc:	fa41 f202 	asr.w	r2, r1, r2
 8019ec0:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 8019ec2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019ec6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8019eca:	6812      	ldr	r2, [r2, #0]
 8019ecc:	1052      	asrs	r2, r2, #1
 8019ece:	601a      	str	r2, [r3, #0]
    if (result < 0)
 8019ed0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	da06      	bge.n	8019ee8 <arm_nn_mat_mult_kernel_s8_s16+0x13e0>
        threshold++;
 8019eda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019ede:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8019ee2:	6812      	ldr	r2, [r2, #0]
 8019ee4:	3201      	adds	r2, #1
 8019ee6:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 8019ee8:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8019eec:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8019ef0:	6812      	ldr	r2, [r2, #0]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	dd06      	ble.n	8019f06 <arm_nn_mat_mult_kernel_s8_s16+0x13fe>
        result++;
 8019ef8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019efc:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8019f00:	6812      	ldr	r2, [r2, #0]
 8019f02:	3201      	adds	r2, #1
 8019f04:	601a      	str	r2, [r3, #0]
    return result;
 8019f06:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8019f0a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 8019f0c:	bf00      	nop
 8019f0e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 += out_offset;
 8019f12:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019f16:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8019f1a:	4413      	add	r3, r2
 8019f1c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 8019f20:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 8019f24:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019f28:	4293      	cmp	r3, r2
 8019f2a:	bfb8      	it	lt
 8019f2c:	4613      	movlt	r3, r2
 8019f2e:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 8019f32:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 8019f36:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019f3a:	4293      	cmp	r3, r2
 8019f3c:	bfa8      	it	ge
 8019f3e:	4613      	movge	r3, r2
 8019f40:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
        *out_0++ = (q7_t)ch_0_out_0;
 8019f44:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8019f48:	1c5a      	adds	r2, r3, #1
 8019f4a:	f8c7 2428 	str.w	r2, [r7, #1064]	; 0x428
 8019f4e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8019f52:	b252      	sxtb	r2, r2
 8019f54:	701a      	strb	r2, [r3, #0]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 8019f56:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8019f5a:	6819      	ldr	r1, [r3, #0]
 8019f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8019f68:	f8d7 03c0 	ldr.w	r0, [r7, #960]	; 0x3c0
 8019f6c:	6018      	str	r0, [r3, #0]
 8019f6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8019f72:	6019      	str	r1, [r3, #0]
 8019f74:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8019f78:	601a      	str	r2, [r3, #0]
 8019f7a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019f84:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8019f88:	6812      	ldr	r2, [r2, #0]
 8019f8a:	409a      	lsls	r2, r3
 8019f8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019f90:	601a      	str	r2, [r3, #0]
 8019f92:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8019f96:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8019f9a:	6812      	ldr	r2, [r2, #0]
 8019f9c:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 8019f9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 8019fa6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8019fae:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 8019fb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8019fb4:	2200      	movs	r2, #0
 8019fb6:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 8019fb8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8019fbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	4618      	mov	r0, r3
 8019fc4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8019fc8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	461a      	mov	r2, r3
 8019fd0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8019fd4:	fb02 fc01 	mul.w	ip, r2, r1
 8019fd8:	fb00 f603 	mul.w	r6, r0, r3
 8019fdc:	4466      	add	r6, ip
 8019fde:	fba0 2302 	umull	r2, r3, r0, r2
 8019fe2:	18f1      	adds	r1, r6, r3
 8019fe4:	460b      	mov	r3, r1
 8019fe6:	eb14 0a02 	adds.w	sl, r4, r2
 8019fea:	eb45 0b03 	adc.w	fp, r5, r3
 8019fee:	e9c7 ab16 	strd	sl, fp, [r7, #88]	; 0x58
    result = (int32_t)(mult.long_long >> 31);
 8019ff2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8019ff6:	f04f 0200 	mov.w	r2, #0
 8019ffa:	f04f 0300 	mov.w	r3, #0
 8019ffe:	0fc2      	lsrs	r2, r0, #31
 801a000:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801a004:	17cb      	asrs	r3, r1, #31
 801a006:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801a00a:	4613      	mov	r3, r2
 801a00c:	600b      	str	r3, [r1, #0]
    return result;
 801a00e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801a012:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a014:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	dc04      	bgt.n	801a028 <arm_nn_mat_mult_kernel_s8_s16+0x1520>
 801a01e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	425b      	negs	r3, r3
 801a026:	e000      	b.n	801a02a <arm_nn_mat_mult_kernel_s8_s16+0x1522>
 801a028:	2300      	movs	r3, #0
 801a02a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801a02e:	6011      	str	r1, [r2, #0]
 801a030:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801a034:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801a036:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a03a:	2200      	movs	r2, #0
 801a03c:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801a03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801a042:	2201      	movs	r2, #1
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	409a      	lsls	r2, r3
 801a048:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801a04c:	3a01      	subs	r2, #1
 801a04e:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801a050:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801a054:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801a058:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801a05c:	6809      	ldr	r1, [r1, #0]
 801a05e:	6812      	ldr	r2, [r2, #0]
 801a060:	400a      	ands	r2, r1
 801a062:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801a064:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a068:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 801a06c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801a070:	6809      	ldr	r1, [r1, #0]
 801a072:	6812      	ldr	r2, [r2, #0]
 801a074:	fa41 f202 	asr.w	r2, r1, r2
 801a078:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801a07a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a07e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801a082:	6812      	ldr	r2, [r2, #0]
 801a084:	1052      	asrs	r2, r2, #1
 801a086:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801a088:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	da06      	bge.n	801a0a0 <arm_nn_mat_mult_kernel_s8_s16+0x1598>
        threshold++;
 801a092:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a096:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801a09a:	6812      	ldr	r2, [r2, #0]
 801a09c:	3201      	adds	r2, #1
 801a09e:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801a0a0:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801a0a4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a0a8:	6812      	ldr	r2, [r2, #0]
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	429a      	cmp	r2, r3
 801a0ae:	dd06      	ble.n	801a0be <arm_nn_mat_mult_kernel_s8_s16+0x15b6>
        result++;
 801a0b0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a0b4:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801a0b8:	6812      	ldr	r2, [r2, #0]
 801a0ba:	3201      	adds	r2, #1
 801a0bc:	601a      	str	r2, [r3, #0]
    return result;
 801a0be:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801a0c2:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801a0c4:	bf00      	nop
 801a0c6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 += out_offset;
 801a0ca:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801a0ce:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 801a0d2:	4413      	add	r3, r2
 801a0d4:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 801a0d8:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	; 0x418
 801a0dc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801a0e0:	4293      	cmp	r3, r2
 801a0e2:	bfb8      	it	lt
 801a0e4:	4613      	movlt	r3, r2
 801a0e6:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 801a0ea:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	; 0x41c
 801a0ee:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801a0f2:	4293      	cmp	r3, r2
 801a0f4:	bfa8      	it	ge
 801a0f6:	4613      	movge	r3, r2
 801a0f8:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
        *out_1++ = (q7_t)ch_0_out_1;
 801a0fc:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 801a100:	1c5a      	adds	r2, r3, #1
 801a102:	f8c7 23ec 	str.w	r2, [r7, #1004]	; 0x3ec
 801a106:	f8d7 23c0 	ldr.w	r2, [r7, #960]	; 0x3c0
 801a10a:	b252      	sxtb	r2, r2
 801a10c:	701a      	strb	r2, [r3, #0]
        out_mult++;
 801a10e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801a112:	3304      	adds	r3, #4
 801a114:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
        out_shift++;
 801a118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a11c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a120:	6812      	ldr	r2, [r2, #0]
 801a122:	3204      	adds	r2, #4
 801a124:	601a      	str	r2, [r3, #0]
    }

    out_0 += output_ch;
 801a126:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 801a12a:	881b      	ldrh	r3, [r3, #0]
 801a12c:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 801a130:	4413      	add	r3, r2
 801a132:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

    /* return the new output pointer with offset */
    return out_0;
 801a136:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 801a13a:	4618      	mov	r0, r3
 801a13c:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 801a140:	46bd      	mov	sp, r7
 801a142:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801a146:	4770      	bx	lr

0801a148 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 801a148:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801a14c:	f5ad 6d24 	sub.w	sp, sp, #2624	; 0xa40
 801a150:	af00      	add	r7, sp, #0
 801a152:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801a156:	6020      	str	r0, [r4, #0]
 801a158:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801a15c:	6001      	str	r1, [r0, #0]
 801a15e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801a162:	600a      	str	r2, [r1, #0]
 801a164:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a168:	6013      	str	r3, [r2, #0]
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;
 801a16a:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801a16e:	3b04      	subs	r3, #4
 801a170:	f8c7 39ec 	str.w	r3, [r7, #2540]	; 0x9ec

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801a174:	2300      	movs	r3, #0
 801a176:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801a17a:	f003 b977 	b.w	801d46c <arm_nn_mat_mult_nt_t_s8+0x3324>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801a17e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 801a182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	6013      	str	r3, [r2, #0]
        q7_t *dst_ptr = &dst[0];
 801a18a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

        q31_t lhs_offset_contribution0 = 0;
 801a194:	2300      	movs	r3, #0
 801a196:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        q31_t lhs_offset_contribution1 = 0;
 801a19a:	2300      	movs	r3, #0
 801a19c:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30

        for (int32_t x = 0; x < rhs_cols; ++x)
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801a1a6:	e024      	b.n	801a1f2 <arm_nn_mat_mult_nt_t_s8+0xaa>
        {
            lhs_offset_contribution0 += rhs[x];
 801a1a8:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801a1ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	4413      	add	r3, r2
 801a1b4:	f993 3000 	ldrsb.w	r3, [r3]
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801a1be:	4413      	add	r3, r2
 801a1c0:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 801a1c4:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801a1c8:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801a1cc:	4413      	add	r3, r2
 801a1ce:	461a      	mov	r2, r3
 801a1d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4413      	add	r3, r2
 801a1d8:	f993 3000 	ldrsb.w	r3, [r3]
 801a1dc:	461a      	mov	r2, r3
 801a1de:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801a1e2:	4413      	add	r3, r2
 801a1e4:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        for (int32_t x = 0; x < rhs_cols; ++x)
 801a1e8:	f8d7 3a2c 	ldr.w	r3, [r7, #2604]	; 0xa2c
 801a1ec:	3301      	adds	r3, #1
 801a1ee:	f8c7 3a2c 	str.w	r3, [r7, #2604]	; 0xa2c
 801a1f2:	f8d7 2a2c 	ldr.w	r2, [r7, #2604]	; 0xa2c
 801a1f6:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801a1fa:	429a      	cmp	r2, r3
 801a1fc:	dbd4      	blt.n	801a1a8 <arm_nn_mat_mult_nt_t_s8+0x60>
        }

        lhs_offset_contribution0 *= lhs_offset;
 801a1fe:	f8d7 2a34 	ldr.w	r2, [r7, #2612]	; 0xa34
 801a202:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801a206:	fb03 f302 	mul.w	r3, r3, r2
 801a20a:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
        lhs_offset_contribution1 *= lhs_offset;
 801a20e:	f8d7 2a30 	ldr.w	r2, [r7, #2608]	; 0xa30
 801a212:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801a216:	fb03 f302 	mul.w	r3, r3, r2
 801a21a:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        if (bias)
 801a21e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d01a      	beq.n	801a25e <arm_nn_mat_mult_nt_t_s8+0x116>
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 801a228:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801a22c:	009a      	lsls	r2, r3, #2
 801a22e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	4413      	add	r3, r2
 801a236:	681a      	ldr	r2, [r3, #0]
 801a238:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801a23c:	4413      	add	r3, r2
 801a23e:	f8c7 3a34 	str.w	r3, [r7, #2612]	; 0xa34
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 801a242:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801a246:	3301      	adds	r3, #1
 801a248:	009a      	lsls	r2, r3, #2
 801a24a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4413      	add	r3, r2
 801a252:	681a      	ldr	r2, [r3, #0]
 801a254:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801a258:	4413      	add	r3, r2
 801a25a:	f8c7 3a30 	str.w	r3, [r7, #2608]	; 0xa30
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 801a25e:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801a262:	105b      	asrs	r3, r3, #1
 801a264:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28

        while (lhs_rows_idx)
 801a268:	f001 bf48 	b.w	801c0fc <arm_nn_mat_mult_nt_t_s8+0x1fb4>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801a26c:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 801a270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801a278:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801a27c:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            q31_t res01 = lhs_offset_contribution1;
 801a280:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801a284:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            q31_t res10 = lhs_offset_contribution0;
 801a288:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801a28c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            q31_t res11 = lhs_offset_contribution1;
 801a290:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801a294:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            int32_t rhs_cols_idx = 0;
 801a298:	2300      	movs	r3, #0
 801a29a:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14

            q31_t val0, val1, val2, val3, val4, val5;

            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801a29e:	f001 baee 	b.w	801b87e <arm_nn_mat_mult_nt_t_s8+0x1736>
 801a2a2:	f207 522c 	addw	r2, r7, #1324	; 0x52c
 801a2a6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a2aa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a2ac:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	461a      	mov	r2, r3
 801a2b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a2bc:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a2be:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	1d1a      	adds	r2, r3, #4
 801a2c8:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	601a      	str	r2, [r3, #0]
    return (val);
 801a2d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a2d4:	681b      	ldr	r3, [r3, #0]
            {
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a2d6:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val2 = __SXTB16(val1);
 801a2da:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801a2de:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801a2e2:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a2e4:	f207 5334 	addw	r3, r7, #1332	; 0x534
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	fa2f f283 	sxtb16	r2, r3
 801a2ee:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801a2f2:	601a      	str	r2, [r3, #0]
  return(result);
 801a2f4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801a2fe:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 801a302:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a306:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a308:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	461a      	mov	r2, r3
 801a314:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a318:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a31a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	681b      	ldr	r3, [r3, #0]
 801a322:	1d1a      	adds	r2, r3, #4
 801a324:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	601a      	str	r2, [r3, #0]
    return (val);
 801a32c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801a330:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a332:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801a336:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a33a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801a33e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a340:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	fa2f f283 	sxtb16	r2, r3
 801a34a:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801a34e:	601a      	str	r2, [r3, #0]
  return(result);
 801a350:	f207 533c 	addw	r3, r7, #1340	; 0x53c
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a35a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a35e:	681a      	ldr	r2, [r3, #0]
 801a360:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801a364:	441a      	add	r2, r3
 801a366:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801a36a:	601a      	str	r2, [r3, #0]
 801a36c:	f207 5344 	addw	r3, r7, #1348	; 0x544
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a376:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801a37a:	601a      	str	r2, [r3, #0]
    return (val);
 801a37c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val1 = __SXTB16_RORn(val1, 8);
 801a386:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801a38a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801a38e:	601a      	str	r2, [r3, #0]
 801a390:	f207 525c 	addw	r2, r7, #1372	; 0x55c
 801a394:	2308      	movs	r3, #8
 801a396:	6013      	str	r3, [r2, #0]
 801a398:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801a39c:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	6013      	str	r3, [r2, #0]
 801a3a4:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801a3a8:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a3b0:	f207 5254 	addw	r2, r7, #1364	; 0x554
 801a3b4:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	f003 031f 	and.w	r3, r3, #31
 801a3be:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a3c0:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d103      	bne.n	801a3d2 <arm_nn_mat_mult_nt_t_s8+0x28a>
    return op1;
 801a3ca:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 801a3ce:	681a      	ldr	r2, [r3, #0]
 801a3d0:	e006      	b.n	801a3e0 <arm_nn_mat_mult_nt_t_s8+0x298>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a3d2:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 801a3d6:	f207 5354 	addw	r3, r7, #1364	; 0x554
 801a3da:	6812      	ldr	r2, [r2, #0]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	41da      	rors	r2, r3
 801a3e0:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801a3e4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a3e6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	fa2f f283 	sxtb16	r2, r3
 801a3f0:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801a3f4:	601a      	str	r2, [r3, #0]
  return(result);
 801a3f6:	f207 534c 	addw	r3, r7, #1356	; 0x54c
 801a3fa:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a3fc:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801a400:	601a      	str	r2, [r3, #0]
  return result;
 801a402:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801a40c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a410:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801a414:	601a      	str	r2, [r3, #0]
 801a416:	f507 62af 	add.w	r2, r7, #1400	; 0x578
 801a41a:	2308      	movs	r3, #8
 801a41c:	6013      	str	r3, [r2, #0]
 801a41e:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801a422:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	6013      	str	r3, [r2, #0]
 801a42a:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801a42e:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a436:	f507 62ae 	add.w	r2, r7, #1392	; 0x570
 801a43a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	f003 031f 	and.w	r3, r3, #31
 801a444:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a446:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d103      	bne.n	801a458 <arm_nn_mat_mult_nt_t_s8+0x310>
    return op1;
 801a450:	f207 5374 	addw	r3, r7, #1396	; 0x574
 801a454:	681a      	ldr	r2, [r3, #0]
 801a456:	e006      	b.n	801a466 <arm_nn_mat_mult_nt_t_s8+0x31e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a458:	f207 5274 	addw	r2, r7, #1396	; 0x574
 801a45c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 801a460:	6812      	ldr	r2, [r2, #0]
 801a462:	681b      	ldr	r3, [r3, #0]
 801a464:	41da      	rors	r2, r3
 801a466:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801a46a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a46c:	f207 536c 	addw	r3, r7, #1388	; 0x56c
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	fa2f f283 	sxtb16	r2, r3
 801a476:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801a47a:	601a      	str	r2, [r3, #0]
  return(result);
 801a47c:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 801a480:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a482:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801a486:	601a      	str	r2, [r3, #0]
  return result;
 801a488:	f207 5364 	addw	r3, r7, #1380	; 0x564
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801a492:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801a496:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801a49a:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801a49e:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801a4a2:	601a      	str	r2, [r3, #0]
 801a4a4:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801a4a8:	6019      	str	r1, [r3, #0]
 801a4aa:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801a4ae:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a4b0:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 801a4b4:	6819      	ldr	r1, [r3, #0]
 801a4b6:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 801a4ba:	681a      	ldr	r2, [r3, #0]
 801a4bc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	fb21 3202 	smlad	r2, r1, r2, r3
 801a4c6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801a4ca:	601a      	str	r2, [r3, #0]
  return(result);
 801a4cc:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801a4d6:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801a4da:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801a4de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a4e0:	f207 5394 	addw	r3, r7, #1428	; 0x594
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	fa2f f283 	sxtb16	r2, r3
 801a4ea:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801a4ee:	601a      	str	r2, [r3, #0]
  return(result);
 801a4f0:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801a4fa:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a4fe:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801a502:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801a506:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801a50a:	601a      	str	r2, [r3, #0]
 801a50c:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801a510:	6019      	str	r1, [r3, #0]
 801a512:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801a516:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a518:	f207 53a4 	addw	r3, r7, #1444	; 0x5a4
 801a51c:	6819      	ldr	r1, [r3, #0]
 801a51e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 801a522:	681a      	ldr	r2, [r3, #0]
 801a524:	f207 539c 	addw	r3, r7, #1436	; 0x59c
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	fb21 3202 	smlad	r2, r1, r2, r3
 801a52e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801a532:	601a      	str	r2, [r3, #0]
  return(result);
 801a534:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801a53e:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801a542:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801a546:	601a      	str	r2, [r3, #0]
 801a548:	f207 52bc 	addw	r2, r7, #1468	; 0x5bc
 801a54c:	2308      	movs	r3, #8
 801a54e:	6013      	str	r3, [r2, #0]
 801a550:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801a554:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	6013      	str	r3, [r2, #0]
 801a55c:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801a560:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a568:	f207 52b4 	addw	r2, r7, #1460	; 0x5b4
 801a56c:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	f003 031f 	and.w	r3, r3, #31
 801a576:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a578:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d103      	bne.n	801a58a <arm_nn_mat_mult_nt_t_s8+0x442>
    return op1;
 801a582:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801a586:	681a      	ldr	r2, [r3, #0]
 801a588:	e006      	b.n	801a598 <arm_nn_mat_mult_nt_t_s8+0x450>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a58a:	f507 62b7 	add.w	r2, r7, #1464	; 0x5b8
 801a58e:	f207 53b4 	addw	r3, r7, #1460	; 0x5b4
 801a592:	6812      	ldr	r2, [r2, #0]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	41da      	rors	r2, r3
 801a598:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801a59c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a59e:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	fa2f f283 	sxtb16	r2, r3
 801a5a8:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801a5ac:	601a      	str	r2, [r3, #0]
  return(result);
 801a5ae:	f207 53ac 	addw	r3, r7, #1452	; 0x5ac
 801a5b2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a5b4:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801a5b8:	601a      	str	r2, [r3, #0]
  return result;
 801a5ba:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801a5c4:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801a5c8:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801a5cc:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801a5d0:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801a5d4:	601a      	str	r2, [r3, #0]
 801a5d6:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801a5da:	6019      	str	r1, [r3, #0]
 801a5dc:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801a5e0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a5e2:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 801a5e6:	6819      	ldr	r1, [r3, #0]
 801a5e8:	f207 53cc 	addw	r3, r7, #1484	; 0x5cc
 801a5ec:	681a      	ldr	r2, [r3, #0]
 801a5ee:	f507 63b9 	add.w	r3, r7, #1480	; 0x5c8
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	fb21 3202 	smlad	r2, r1, r2, r3
 801a5f8:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801a5fc:	601a      	str	r2, [r3, #0]
  return(result);
 801a5fe:	f207 53c4 	addw	r3, r7, #1476	; 0x5c4
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801a608:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a60c:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801a610:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801a614:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801a618:	601a      	str	r2, [r3, #0]
 801a61a:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801a61e:	6019      	str	r1, [r3, #0]
 801a620:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801a624:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a626:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 801a62a:	6819      	ldr	r1, [r3, #0]
 801a62c:	f207 53dc 	addw	r3, r7, #1500	; 0x5dc
 801a630:	681a      	ldr	r2, [r3, #0]
 801a632:	f507 63bb 	add.w	r3, r7, #1496	; 0x5d8
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	fb21 3202 	smlad	r2, r1, r2, r3
 801a63c:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801a640:	601a      	str	r2, [r3, #0]
  return(result);
 801a642:	f207 53d4 	addw	r3, r7, #1492	; 0x5d4
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801a64c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801a656:	441a      	add	r2, r3
 801a658:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801a65c:	601a      	str	r2, [r3, #0]
 801a65e:	f207 53e4 	addw	r3, r7, #1508	; 0x5e4
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a668:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a66c:	601a      	str	r2, [r3, #0]
    return (val);
 801a66e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801a678:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a67c:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801a680:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a682:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	fa2f f283 	sxtb16	r2, r3
 801a68c:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801a690:	601a      	str	r2, [r3, #0]
  return(result);
 801a692:	f507 63bd 	add.w	r3, r7, #1512	; 0x5e8
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801a69c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a6a0:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801a6a4:	601a      	str	r2, [r3, #0]
 801a6a6:	f207 6204 	addw	r2, r7, #1540	; 0x604
 801a6aa:	2308      	movs	r3, #8
 801a6ac:	6013      	str	r3, [r2, #0]
 801a6ae:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801a6b2:	f507 63c1 	add.w	r3, r7, #1544	; 0x608
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	6013      	str	r3, [r2, #0]
 801a6ba:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801a6be:	f207 6304 	addw	r3, r7, #1540	; 0x604
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a6c6:	f207 52fc 	addw	r2, r7, #1532	; 0x5fc
 801a6ca:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	f003 031f 	and.w	r3, r3, #31
 801a6d4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a6d6:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d103      	bne.n	801a6e8 <arm_nn_mat_mult_nt_t_s8+0x5a0>
    return op1;
 801a6e0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	e006      	b.n	801a6f6 <arm_nn_mat_mult_nt_t_s8+0x5ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a6e8:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 801a6ec:	f207 53fc 	addw	r3, r7, #1532	; 0x5fc
 801a6f0:	6812      	ldr	r2, [r2, #0]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	41da      	rors	r2, r3
 801a6f6:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801a6fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a6fc:	f507 63bf 	add.w	r3, r7, #1528	; 0x5f8
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	fa2f f283 	sxtb16	r2, r3
 801a706:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801a70a:	601a      	str	r2, [r3, #0]
  return(result);
 801a70c:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 801a710:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a712:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801a716:	601a      	str	r2, [r3, #0]
  return result;
 801a718:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801a722:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801a726:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801a72a:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801a72e:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801a732:	601a      	str	r2, [r3, #0]
 801a734:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801a738:	6019      	str	r1, [r3, #0]
 801a73a:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801a73e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a740:	f507 63c3 	add.w	r3, r7, #1560	; 0x618
 801a744:	6819      	ldr	r1, [r3, #0]
 801a746:	f207 6314 	addw	r3, r7, #1556	; 0x614
 801a74a:	681a      	ldr	r2, [r3, #0]
 801a74c:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	fb21 3202 	smlad	r2, r1, r2, r3
 801a756:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801a75a:	601a      	str	r2, [r3, #0]
  return(result);
 801a75c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801a766:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801a76a:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801a76e:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801a772:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801a776:	601a      	str	r2, [r3, #0]
 801a778:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801a77c:	6019      	str	r1, [r3, #0]
 801a77e:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801a782:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a784:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 801a788:	6819      	ldr	r1, [r3, #0]
 801a78a:	f207 6324 	addw	r3, r7, #1572	; 0x624
 801a78e:	681a      	ldr	r2, [r3, #0]
 801a790:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	fb21 3202 	smlad	r2, r1, r2, r3
 801a79a:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801a79e:	601a      	str	r2, [r3, #0]
  return(result);
 801a7a0:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801a7aa:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a7ae:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801a7b2:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801a7b6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801a7ba:	601a      	str	r2, [r3, #0]
 801a7bc:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801a7c0:	6019      	str	r1, [r3, #0]
 801a7c2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801a7c6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a7c8:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 801a7cc:	6819      	ldr	r1, [r3, #0]
 801a7ce:	f207 6334 	addw	r3, r7, #1588	; 0x634
 801a7d2:	681a      	ldr	r2, [r3, #0]
 801a7d4:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	fb21 3202 	smlad	r2, r1, r2, r3
 801a7de:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801a7e2:	601a      	str	r2, [r3, #0]
  return(result);
 801a7e4:	f207 632c 	addw	r3, r7, #1580	; 0x62c
 801a7e8:	681b      	ldr	r3, [r3, #0]
 801a7ea:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801a7ee:	f207 623c 	addw	r2, r7, #1596	; 0x63c
 801a7f2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a7f6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a7f8:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	461a      	mov	r2, r3
 801a804:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a808:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a80a:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	1d1a      	adds	r2, r3, #4
 801a814:	f207 633c 	addw	r3, r7, #1596	; 0x63c
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	601a      	str	r2, [r3, #0]
    return (val);
 801a81c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801a820:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801a822:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801a826:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a82a:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801a82e:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801a832:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801a836:	601a      	str	r2, [r3, #0]
 801a838:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801a83c:	6019      	str	r1, [r3, #0]
 801a83e:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801a842:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801a844:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 801a848:	6819      	ldr	r1, [r3, #0]
 801a84a:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 801a84e:	681a      	ldr	r2, [r3, #0]
 801a850:	f207 6344 	addw	r3, r7, #1604	; 0x644
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	fb21 3202 	smlad	r2, r1, r2, r3
 801a85a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801a85e:	601a      	str	r2, [r3, #0]
  return(result);
 801a860:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801a86a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801a86e:	681a      	ldr	r2, [r3, #0]
 801a870:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801a874:	441a      	add	r2, r3
 801a876:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801a87a:	601a      	str	r2, [r3, #0]
 801a87c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801a886:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801a88a:	601a      	str	r2, [r3, #0]
    return (val);
 801a88c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801a896:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801a89a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801a89e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a8a0:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	fa2f f283 	sxtb16	r2, r3
 801a8aa:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801a8ae:	601a      	str	r2, [r3, #0]
  return(result);
 801a8b0:	f207 6354 	addw	r3, r7, #1620	; 0x654
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801a8ba:	f207 625c 	addw	r2, r7, #1628	; 0x65c
 801a8be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801a8c2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801a8c4:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	461a      	mov	r2, r3
 801a8d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a8d4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801a8d6:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	1d1a      	adds	r2, r3, #4
 801a8e0:	f207 635c 	addw	r3, r7, #1628	; 0x65c
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	601a      	str	r2, [r3, #0]
    return (val);
 801a8e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801a8ec:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801a8ee:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801a8f2:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a8f6:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801a8fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a8fc:	f207 6364 	addw	r3, r7, #1636	; 0x664
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	fa2f f283 	sxtb16	r2, r3
 801a906:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801a90a:	601a      	str	r2, [r3, #0]
  return(result);
 801a90c:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801a916:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801a91a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801a91e:	601a      	str	r2, [r3, #0]
 801a920:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 801a924:	2308      	movs	r3, #8
 801a926:	6013      	str	r3, [r2, #0]
 801a928:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801a92c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	6013      	str	r3, [r2, #0]
 801a934:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801a938:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a940:	f207 6274 	addw	r2, r7, #1652	; 0x674
 801a944:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	f003 031f 	and.w	r3, r3, #31
 801a94e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a950:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801a954:	681b      	ldr	r3, [r3, #0]
 801a956:	2b00      	cmp	r3, #0
 801a958:	d103      	bne.n	801a962 <arm_nn_mat_mult_nt_t_s8+0x81a>
    return op1;
 801a95a:	f507 63cf 	add.w	r3, r7, #1656	; 0x678
 801a95e:	681a      	ldr	r2, [r3, #0]
 801a960:	e006      	b.n	801a970 <arm_nn_mat_mult_nt_t_s8+0x828>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a962:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 801a966:	f207 6374 	addw	r3, r7, #1652	; 0x674
 801a96a:	6812      	ldr	r2, [r2, #0]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	41da      	rors	r2, r3
 801a970:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801a974:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a976:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	fa2f f283 	sxtb16	r2, r3
 801a980:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801a984:	601a      	str	r2, [r3, #0]
  return(result);
 801a986:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 801a98a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801a98c:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801a990:	601a      	str	r2, [r3, #0]
  return result;
 801a992:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801a99c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801a9a0:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801a9a4:	601a      	str	r2, [r3, #0]
 801a9a6:	f507 62d3 	add.w	r2, r7, #1688	; 0x698
 801a9aa:	2308      	movs	r3, #8
 801a9ac:	6013      	str	r3, [r2, #0]
 801a9ae:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801a9b2:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	6013      	str	r3, [r2, #0]
 801a9ba:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801a9be:	f507 63d3 	add.w	r3, r7, #1688	; 0x698
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801a9c6:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 801a9ca:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	f003 031f 	and.w	r3, r3, #31
 801a9d4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801a9d6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d103      	bne.n	801a9e8 <arm_nn_mat_mult_nt_t_s8+0x8a0>
    return op1;
 801a9e0:	f207 6394 	addw	r3, r7, #1684	; 0x694
 801a9e4:	681a      	ldr	r2, [r3, #0]
 801a9e6:	e006      	b.n	801a9f6 <arm_nn_mat_mult_nt_t_s8+0x8ae>
  return (op1 >> op2) | (op1 << (32U - op2));
 801a9e8:	f207 6294 	addw	r2, r7, #1684	; 0x694
 801a9ec:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 801a9f0:	6812      	ldr	r2, [r2, #0]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	41da      	rors	r2, r3
 801a9f6:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801a9fa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801a9fc:	f207 638c 	addw	r3, r7, #1676	; 0x68c
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	fa2f f283 	sxtb16	r2, r3
 801aa06:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801aa0a:	601a      	str	r2, [r3, #0]
  return(result);
 801aa0c:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 801aa10:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aa12:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801aa16:	601a      	str	r2, [r3, #0]
  return result;
 801aa18:	f207 6384 	addw	r3, r7, #1668	; 0x684
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801aa22:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801aa26:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801aa2a:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801aa2e:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801aa32:	601a      	str	r2, [r3, #0]
 801aa34:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801aa38:	6019      	str	r1, [r3, #0]
 801aa3a:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801aa3e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801aa40:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 801aa44:	6819      	ldr	r1, [r3, #0]
 801aa46:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 801aa4a:	681a      	ldr	r2, [r3, #0]
 801aa4c:	f207 63a4 	addw	r3, r7, #1700	; 0x6a4
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	fb21 3202 	smlad	r2, r1, r2, r3
 801aa56:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801aa5a:	601a      	str	r2, [r3, #0]
  return(result);
 801aa5c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801aa66:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801aa6a:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801aa6e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801aa70:	f207 63b4 	addw	r3, r7, #1716	; 0x6b4
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	fa2f f283 	sxtb16	r2, r3
 801aa7a:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801aa7e:	601a      	str	r2, [r3, #0]
  return(result);
 801aa80:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801aa8a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801aa8e:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801aa92:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801aa96:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801aa9a:	601a      	str	r2, [r3, #0]
 801aa9c:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801aaa0:	6019      	str	r1, [r3, #0]
 801aaa2:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801aaa6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801aaa8:	f207 63c4 	addw	r3, r7, #1732	; 0x6c4
 801aaac:	6819      	ldr	r1, [r3, #0]
 801aaae:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 801aab2:	681a      	ldr	r2, [r3, #0]
 801aab4:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	fb21 3202 	smlad	r2, r1, r2, r3
 801aabe:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801aac2:	601a      	str	r2, [r3, #0]
  return(result);
 801aac4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801aace:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801aad2:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801aad6:	601a      	str	r2, [r3, #0]
 801aad8:	f207 62dc 	addw	r2, r7, #1756	; 0x6dc
 801aadc:	2308      	movs	r3, #8
 801aade:	6013      	str	r3, [r2, #0]
 801aae0:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801aae4:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	6013      	str	r3, [r2, #0]
 801aaec:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801aaf0:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801aaf8:	f207 62d4 	addw	r2, r7, #1748	; 0x6d4
 801aafc:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	f003 031f 	and.w	r3, r3, #31
 801ab06:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ab08:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	d103      	bne.n	801ab1a <arm_nn_mat_mult_nt_t_s8+0x9d2>
    return op1;
 801ab12:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 801ab16:	681a      	ldr	r2, [r3, #0]
 801ab18:	e006      	b.n	801ab28 <arm_nn_mat_mult_nt_t_s8+0x9e0>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ab1a:	f507 62db 	add.w	r2, r7, #1752	; 0x6d8
 801ab1e:	f207 63d4 	addw	r3, r7, #1748	; 0x6d4
 801ab22:	6812      	ldr	r2, [r2, #0]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	41da      	rors	r2, r3
 801ab28:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801ab2c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ab2e:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	fa2f f283 	sxtb16	r2, r3
 801ab38:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801ab3c:	601a      	str	r2, [r3, #0]
  return(result);
 801ab3e:	f207 63cc 	addw	r3, r7, #1740	; 0x6cc
 801ab42:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ab44:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801ab48:	601a      	str	r2, [r3, #0]
  return result;
 801ab4a:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801ab54:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801ab58:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801ab5c:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801ab60:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801ab64:	601a      	str	r2, [r3, #0]
 801ab66:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801ab6a:	6019      	str	r1, [r3, #0]
 801ab6c:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801ab70:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ab72:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 801ab76:	6819      	ldr	r1, [r3, #0]
 801ab78:	f207 63ec 	addw	r3, r7, #1772	; 0x6ec
 801ab7c:	681a      	ldr	r2, [r3, #0]
 801ab7e:	f507 63dd 	add.w	r3, r7, #1768	; 0x6e8
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	fb21 3202 	smlad	r2, r1, r2, r3
 801ab88:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801ab8c:	601a      	str	r2, [r3, #0]
  return(result);
 801ab8e:	f207 63e4 	addw	r3, r7, #1764	; 0x6e4
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801ab98:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ab9c:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801aba0:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801aba4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801aba8:	601a      	str	r2, [r3, #0]
 801abaa:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801abae:	6019      	str	r1, [r3, #0]
 801abb0:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801abb4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801abb6:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 801abba:	6819      	ldr	r1, [r3, #0]
 801abbc:	f207 63fc 	addw	r3, r7, #1788	; 0x6fc
 801abc0:	681a      	ldr	r2, [r3, #0]
 801abc2:	f507 63df 	add.w	r3, r7, #1784	; 0x6f8
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	fb21 3202 	smlad	r2, r1, r2, r3
 801abcc:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801abd0:	601a      	str	r2, [r3, #0]
  return(result);
 801abd2:	f207 63f4 	addw	r3, r7, #1780	; 0x6f4
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801abdc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801abe6:	441a      	add	r2, r3
 801abe8:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801abec:	601a      	str	r2, [r3, #0]
 801abee:	f207 7304 	addw	r3, r7, #1796	; 0x704
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801abf8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801abfc:	601a      	str	r2, [r3, #0]
    return (val);
 801abfe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ac08:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ac0c:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801ac10:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ac12:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	fa2f f283 	sxtb16	r2, r3
 801ac1c:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801ac20:	601a      	str	r2, [r3, #0]
  return(result);
 801ac22:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801ac2c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ac30:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801ac34:	601a      	str	r2, [r3, #0]
 801ac36:	f207 7224 	addw	r2, r7, #1828	; 0x724
 801ac3a:	2308      	movs	r3, #8
 801ac3c:	6013      	str	r3, [r2, #0]
 801ac3e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801ac42:	f507 63e5 	add.w	r3, r7, #1832	; 0x728
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	6013      	str	r3, [r2, #0]
 801ac4a:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801ac4e:	f207 7324 	addw	r3, r7, #1828	; 0x724
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ac56:	f207 721c 	addw	r2, r7, #1820	; 0x71c
 801ac5a:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801ac5e:	681b      	ldr	r3, [r3, #0]
 801ac60:	f003 031f 	and.w	r3, r3, #31
 801ac64:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ac66:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d103      	bne.n	801ac78 <arm_nn_mat_mult_nt_t_s8+0xb30>
    return op1;
 801ac70:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 801ac74:	681a      	ldr	r2, [r3, #0]
 801ac76:	e006      	b.n	801ac86 <arm_nn_mat_mult_nt_t_s8+0xb3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ac78:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 801ac7c:	f207 731c 	addw	r3, r7, #1820	; 0x71c
 801ac80:	6812      	ldr	r2, [r2, #0]
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	41da      	rors	r2, r3
 801ac86:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801ac8a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ac8c:	f507 63e3 	add.w	r3, r7, #1816	; 0x718
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	fa2f f283 	sxtb16	r2, r3
 801ac96:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801ac9a:	601a      	str	r2, [r3, #0]
  return(result);
 801ac9c:	f207 7314 	addw	r3, r7, #1812	; 0x714
 801aca0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801aca2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801aca6:	601a      	str	r2, [r3, #0]
  return result;
 801aca8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801acb2:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801acb6:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801acba:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801acbe:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801acc2:	601a      	str	r2, [r3, #0]
 801acc4:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801acc8:	6019      	str	r1, [r3, #0]
 801acca:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801acce:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801acd0:	f507 63e7 	add.w	r3, r7, #1848	; 0x738
 801acd4:	6819      	ldr	r1, [r3, #0]
 801acd6:	f207 7334 	addw	r3, r7, #1844	; 0x734
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	fb21 3202 	smlad	r2, r1, r2, r3
 801ace6:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801acea:	601a      	str	r2, [r3, #0]
  return(result);
 801acec:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801acf6:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801acfa:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801acfe:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801ad02:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801ad06:	601a      	str	r2, [r3, #0]
 801ad08:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801ad0c:	6019      	str	r1, [r3, #0]
 801ad0e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801ad12:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ad14:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 801ad18:	6819      	ldr	r1, [r3, #0]
 801ad1a:	f207 7344 	addw	r3, r7, #1860	; 0x744
 801ad1e:	681a      	ldr	r2, [r3, #0]
 801ad20:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	fb21 3202 	smlad	r2, r1, r2, r3
 801ad2a:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801ad2e:	601a      	str	r2, [r3, #0]
  return(result);
 801ad30:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801ad3a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ad3e:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801ad42:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801ad46:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801ad4a:	601a      	str	r2, [r3, #0]
 801ad4c:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801ad50:	6019      	str	r1, [r3, #0]
 801ad52:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801ad56:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801ad58:	f507 63eb 	add.w	r3, r7, #1880	; 0x758
 801ad5c:	6819      	ldr	r1, [r3, #0]
 801ad5e:	f207 7354 	addw	r3, r7, #1876	; 0x754
 801ad62:	681a      	ldr	r2, [r3, #0]
 801ad64:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	fb21 3202 	smlad	r2, r1, r2, r3
 801ad6e:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801ad72:	601a      	str	r2, [r3, #0]
  return(result);
 801ad74:	f207 734c 	addw	r3, r7, #1868	; 0x74c
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801ad7e:	f207 725c 	addw	r2, r7, #1884	; 0x75c
 801ad82:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801ad86:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ad88:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	461a      	mov	r2, r3
 801ad94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801ad98:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ad9a:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801ad9e:	681b      	ldr	r3, [r3, #0]
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	1d1a      	adds	r2, r3, #4
 801ada4:	f207 735c 	addw	r3, r7, #1884	; 0x75c
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	601a      	str	r2, [r3, #0]
    return (val);
 801adac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801adb0:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801adb2:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801adb6:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801adba:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801adbe:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801adc2:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801adc6:	601a      	str	r2, [r3, #0]
 801adc8:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801adcc:	6019      	str	r1, [r3, #0]
 801adce:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801add2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801add4:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 801add8:	6819      	ldr	r1, [r3, #0]
 801adda:	f507 63ed 	add.w	r3, r7, #1896	; 0x768
 801adde:	681a      	ldr	r2, [r3, #0]
 801ade0:	f207 7364 	addw	r3, r7, #1892	; 0x764
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	fb21 3202 	smlad	r2, r1, r2, r3
 801adea:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801adee:	601a      	str	r2, [r3, #0]
  return(result);
 801adf0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801adfa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801adfe:	681a      	ldr	r2, [r3, #0]
 801ae00:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801ae04:	441a      	add	r2, r3
 801ae06:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801ae0a:	601a      	str	r2, [r3, #0]
 801ae0c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	681b      	ldr	r3, [r3, #0]
 801ae14:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801ae16:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ae1a:	601a      	str	r2, [r3, #0]
    return (val);
 801ae1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801ae26:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801ae2a:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801ae2e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ae30:	f507 63ef 	add.w	r3, r7, #1912	; 0x778
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	fa2f f283 	sxtb16	r2, r3
 801ae3a:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801ae3e:	601a      	str	r2, [r3, #0]
  return(result);
 801ae40:	f207 7374 	addw	r3, r7, #1908	; 0x774
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801ae4a:	f207 727c 	addw	r2, r7, #1916	; 0x77c
 801ae4e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801ae52:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801ae54:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	461a      	mov	r2, r3
 801ae60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801ae64:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ae66:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	1d1a      	adds	r2, r3, #4
 801ae70:	f207 737c 	addw	r3, r7, #1916	; 0x77c
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	601a      	str	r2, [r3, #0]
    return (val);
 801ae78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 801ae7c:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ae7e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801ae82:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801ae86:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801ae8a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ae8c:	f207 7384 	addw	r3, r7, #1924	; 0x784
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	fa2f f283 	sxtb16	r2, r3
 801ae96:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801ae9a:	601a      	str	r2, [r3, #0]
  return(result);
 801ae9c:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801aea6:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801aeaa:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801aeae:	601a      	str	r2, [r3, #0]
 801aeb0:	f207 729c 	addw	r2, r7, #1948	; 0x79c
 801aeb4:	2308      	movs	r3, #8
 801aeb6:	6013      	str	r3, [r2, #0]
 801aeb8:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801aebc:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	6013      	str	r3, [r2, #0]
 801aec4:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801aec8:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801aed0:	f207 7294 	addw	r2, r7, #1940	; 0x794
 801aed4:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	f003 031f 	and.w	r3, r3, #31
 801aede:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801aee0:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801aee4:	681b      	ldr	r3, [r3, #0]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d103      	bne.n	801aef2 <arm_nn_mat_mult_nt_t_s8+0xdaa>
    return op1;
 801aeea:	f507 63f3 	add.w	r3, r7, #1944	; 0x798
 801aeee:	681a      	ldr	r2, [r3, #0]
 801aef0:	e006      	b.n	801af00 <arm_nn_mat_mult_nt_t_s8+0xdb8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801aef2:	f507 62f3 	add.w	r2, r7, #1944	; 0x798
 801aef6:	f207 7394 	addw	r3, r7, #1940	; 0x794
 801aefa:	6812      	ldr	r2, [r2, #0]
 801aefc:	681b      	ldr	r3, [r3, #0]
 801aefe:	41da      	rors	r2, r3
 801af00:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801af04:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801af06:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	fa2f f283 	sxtb16	r2, r3
 801af10:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801af14:	601a      	str	r2, [r3, #0]
  return(result);
 801af16:	f207 738c 	addw	r3, r7, #1932	; 0x78c
 801af1a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801af1c:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801af20:	601a      	str	r2, [r3, #0]
  return result;
 801af22:	f507 63f1 	add.w	r3, r7, #1928	; 0x788
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801af2c:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801af30:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801af34:	601a      	str	r2, [r3, #0]
 801af36:	f507 62f7 	add.w	r2, r7, #1976	; 0x7b8
 801af3a:	2308      	movs	r3, #8
 801af3c:	6013      	str	r3, [r2, #0]
 801af3e:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801af42:	f207 73bc 	addw	r3, r7, #1980	; 0x7bc
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	6013      	str	r3, [r2, #0]
 801af4a:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801af4e:	f507 63f7 	add.w	r3, r7, #1976	; 0x7b8
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801af56:	f507 62f6 	add.w	r2, r7, #1968	; 0x7b0
 801af5a:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	f003 031f 	and.w	r3, r3, #31
 801af64:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801af66:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d103      	bne.n	801af78 <arm_nn_mat_mult_nt_t_s8+0xe30>
    return op1;
 801af70:	f207 73b4 	addw	r3, r7, #1972	; 0x7b4
 801af74:	681a      	ldr	r2, [r3, #0]
 801af76:	e006      	b.n	801af86 <arm_nn_mat_mult_nt_t_s8+0xe3e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801af78:	f207 72b4 	addw	r2, r7, #1972	; 0x7b4
 801af7c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 801af80:	6812      	ldr	r2, [r2, #0]
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	41da      	rors	r2, r3
 801af86:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801af8a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801af8c:	f207 73ac 	addw	r3, r7, #1964	; 0x7ac
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	fa2f f283 	sxtb16	r2, r3
 801af96:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801af9a:	601a      	str	r2, [r3, #0]
  return(result);
 801af9c:	f507 63f5 	add.w	r3, r7, #1960	; 0x7a8
 801afa0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801afa2:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801afa6:	601a      	str	r2, [r3, #0]
  return result;
 801afa8:	f207 73a4 	addw	r3, r7, #1956	; 0x7a4
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801afb2:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801afb6:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801afba:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801afbe:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801afc2:	601a      	str	r2, [r3, #0]
 801afc4:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801afc8:	6019      	str	r1, [r3, #0]
 801afca:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801afce:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801afd0:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 801afd4:	6819      	ldr	r1, [r3, #0]
 801afd6:	f507 63f9 	add.w	r3, r7, #1992	; 0x7c8
 801afda:	681a      	ldr	r2, [r3, #0]
 801afdc:	f207 73c4 	addw	r3, r7, #1988	; 0x7c4
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	fb21 3202 	smlad	r2, r1, r2, r3
 801afe6:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801afea:	601a      	str	r2, [r3, #0]
  return(result);
 801afec:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 801aff0:	681b      	ldr	r3, [r3, #0]
 801aff2:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801aff6:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801affa:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801affe:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b000:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	fa2f f283 	sxtb16	r2, r3
 801b00a:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801b00e:	601a      	str	r2, [r3, #0]
  return(result);
 801b010:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801b01a:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b01e:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801b022:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801b026:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801b02a:	601a      	str	r2, [r3, #0]
 801b02c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801b030:	6019      	str	r1, [r3, #0]
 801b032:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801b036:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b038:	f207 73e4 	addw	r3, r7, #2020	; 0x7e4
 801b03c:	6819      	ldr	r1, [r3, #0]
 801b03e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 801b042:	681a      	ldr	r2, [r3, #0]
 801b044:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	fb21 3202 	smlad	r2, r1, r2, r3
 801b04e:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801b052:	601a      	str	r2, [r3, #0]
  return(result);
 801b054:	f507 63fb 	add.w	r3, r7, #2008	; 0x7d8
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801b05e:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801b062:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801b066:	601a      	str	r2, [r3, #0]
 801b068:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 801b06c:	2308      	movs	r3, #8
 801b06e:	6013      	str	r3, [r2, #0]
 801b070:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801b074:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	6013      	str	r3, [r2, #0]
 801b07c:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801b080:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b088:	f207 72f4 	addw	r2, r7, #2036	; 0x7f4
 801b08c:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	f003 031f 	and.w	r3, r3, #31
 801b096:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b098:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	2b00      	cmp	r3, #0
 801b0a0:	d103      	bne.n	801b0aa <arm_nn_mat_mult_nt_t_s8+0xf62>
    return op1;
 801b0a2:	f507 63ff 	add.w	r3, r7, #2040	; 0x7f8
 801b0a6:	681a      	ldr	r2, [r3, #0]
 801b0a8:	e006      	b.n	801b0b8 <arm_nn_mat_mult_nt_t_s8+0xf70>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b0aa:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 801b0ae:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 801b0b2:	6812      	ldr	r2, [r2, #0]
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	41da      	rors	r2, r3
 801b0b8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801b0bc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b0be:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	fa2f f283 	sxtb16	r2, r3
 801b0c8:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801b0cc:	601a      	str	r2, [r3, #0]
  return(result);
 801b0ce:	f207 73ec 	addw	r3, r7, #2028	; 0x7ec
 801b0d2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b0d4:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801b0d8:	601a      	str	r2, [r3, #0]
  return result;
 801b0da:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801b0e4:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801b0e8:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801b0ec:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801b0f0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801b0f4:	601a      	str	r2, [r3, #0]
 801b0f6:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801b0fa:	6019      	str	r1, [r3, #0]
 801b0fc:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801b100:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b102:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 801b106:	6819      	ldr	r1, [r3, #0]
 801b108:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 801b10c:	681a      	ldr	r2, [r3, #0]
 801b10e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	fb21 3202 	smlad	r2, r1, r2, r3
 801b118:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801b11c:	601a      	str	r2, [r3, #0]
  return(result);
 801b11e:	f607 0304 	addw	r3, r7, #2052	; 0x804
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801b128:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b12c:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801b130:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801b134:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801b138:	601a      	str	r2, [r3, #0]
 801b13a:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801b13e:	6019      	str	r1, [r3, #0]
 801b140:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801b144:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b146:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 801b14a:	6819      	ldr	r1, [r3, #0]
 801b14c:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 801b150:	681a      	ldr	r2, [r3, #0]
 801b152:	f607 0318 	addw	r3, r7, #2072	; 0x818
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	fb21 3202 	smlad	r2, r1, r2, r3
 801b15c:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801b160:	601a      	str	r2, [r3, #0]
  return(result);
 801b162:	f607 0314 	addw	r3, r7, #2068	; 0x814
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801b16c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b170:	681a      	ldr	r2, [r3, #0]
 801b172:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801b176:	441a      	add	r2, r3
 801b178:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801b17c:	601a      	str	r2, [r3, #0]
 801b17e:	f607 0324 	addw	r3, r7, #2084	; 0x824
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b188:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b18c:	601a      	str	r2, [r3, #0]
    return (val);
 801b18e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801b198:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b19c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801b1a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b1a2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	fa2f f283 	sxtb16	r2, r3
 801b1ac:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801b1b0:	601a      	str	r2, [r3, #0]
  return(result);
 801b1b2:	f607 0328 	addw	r3, r7, #2088	; 0x828
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801b1bc:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b1c0:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801b1c4:	601a      	str	r2, [r3, #0]
 801b1c6:	f607 0244 	addw	r2, r7, #2116	; 0x844
 801b1ca:	2308      	movs	r3, #8
 801b1cc:	6013      	str	r3, [r2, #0]
 801b1ce:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801b1d2:	f607 0348 	addw	r3, r7, #2120	; 0x848
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	6013      	str	r3, [r2, #0]
 801b1da:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801b1de:	f607 0344 	addw	r3, r7, #2116	; 0x844
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b1e6:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 801b1ea:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	f003 031f 	and.w	r3, r3, #31
 801b1f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b1f6:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d103      	bne.n	801b208 <arm_nn_mat_mult_nt_t_s8+0x10c0>
    return op1;
 801b200:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 801b204:	681a      	ldr	r2, [r3, #0]
 801b206:	e006      	b.n	801b216 <arm_nn_mat_mult_nt_t_s8+0x10ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b208:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 801b20c:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 801b210:	6812      	ldr	r2, [r2, #0]
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	41da      	rors	r2, r3
 801b216:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801b21a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b21c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	fa2f f283 	sxtb16	r2, r3
 801b226:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801b22a:	601a      	str	r2, [r3, #0]
  return(result);
 801b22c:	f607 0334 	addw	r3, r7, #2100	; 0x834
 801b230:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b232:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801b236:	601a      	str	r2, [r3, #0]
  return result;
 801b238:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801b242:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801b246:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801b24a:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801b24e:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801b252:	601a      	str	r2, [r3, #0]
 801b254:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801b258:	6019      	str	r1, [r3, #0]
 801b25a:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801b25e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b260:	f607 0358 	addw	r3, r7, #2136	; 0x858
 801b264:	6819      	ldr	r1, [r3, #0]
 801b266:	f607 0354 	addw	r3, r7, #2132	; 0x854
 801b26a:	681a      	ldr	r2, [r3, #0]
 801b26c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	fb21 3202 	smlad	r2, r1, r2, r3
 801b276:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801b27a:	601a      	str	r2, [r3, #0]
  return(result);
 801b27c:	f607 034c 	addw	r3, r7, #2124	; 0x84c
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801b286:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801b28a:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801b28e:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801b292:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801b296:	601a      	str	r2, [r3, #0]
 801b298:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801b29c:	6019      	str	r1, [r3, #0]
 801b29e:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801b2a2:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b2a4:	f607 0368 	addw	r3, r7, #2152	; 0x868
 801b2a8:	6819      	ldr	r1, [r3, #0]
 801b2aa:	f607 0364 	addw	r3, r7, #2148	; 0x864
 801b2ae:	681a      	ldr	r2, [r3, #0]
 801b2b0:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	fb21 3202 	smlad	r2, r1, r2, r3
 801b2ba:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801b2be:	601a      	str	r2, [r3, #0]
  return(result);
 801b2c0:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801b2ca:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b2ce:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801b2d2:	f8d7 0a1c 	ldr.w	r0, [r7, #2588]	; 0xa1c
 801b2d6:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801b2da:	601a      	str	r2, [r3, #0]
 801b2dc:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801b2e0:	6019      	str	r1, [r3, #0]
 801b2e2:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801b2e6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b2e8:	f607 0378 	addw	r3, r7, #2168	; 0x878
 801b2ec:	6819      	ldr	r1, [r3, #0]
 801b2ee:	f607 0374 	addw	r3, r7, #2164	; 0x874
 801b2f2:	681a      	ldr	r2, [r3, #0]
 801b2f4:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	fb21 3202 	smlad	r2, r1, r2, r3
 801b2fe:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801b302:	601a      	str	r2, [r3, #0]
  return(result);
 801b304:	f607 036c 	addw	r3, r7, #2156	; 0x86c
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
 801b30e:	f607 027c 	addw	r2, r7, #2172	; 0x87c
 801b312:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b316:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801b318:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	681b      	ldr	r3, [r3, #0]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	461a      	mov	r2, r3
 801b324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801b328:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801b32a:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	1d1a      	adds	r2, r3, #4
 801b334:	f607 037c 	addw	r3, r7, #2172	; 0x87c
 801b338:	681b      	ldr	r3, [r3, #0]
 801b33a:	601a      	str	r2, [r3, #0]
    return (val);
 801b33c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801b340:	681b      	ldr	r3, [r3, #0]
                val1 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801b342:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                res11 = __SMLAD(val0, val4, res11);
 801b346:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b34a:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801b34e:	f8d7 0a18 	ldr.w	r0, [r7, #2584]	; 0xa18
 801b352:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801b356:	601a      	str	r2, [r3, #0]
 801b358:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801b35c:	6019      	str	r1, [r3, #0]
 801b35e:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801b362:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b364:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 801b368:	6819      	ldr	r1, [r3, #0]
 801b36a:	f607 0388 	addw	r3, r7, #2184	; 0x888
 801b36e:	681a      	ldr	r2, [r3, #0]
 801b370:	f607 0384 	addw	r3, r7, #2180	; 0x884
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	fb21 3202 	smlad	r2, r1, r2, r3
 801b37a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801b37e:	601a      	str	r2, [r3, #0]
  return(result);
 801b380:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                val4 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801b38a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b38e:	681a      	ldr	r2, [r3, #0]
 801b390:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801b394:	441a      	add	r2, r3
 801b396:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801b39a:	601a      	str	r2, [r3, #0]
 801b39c:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 801b3a0:	681b      	ldr	r3, [r3, #0]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b3a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b3aa:	601a      	str	r2, [r3, #0]
    return (val);
 801b3ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                val2 = __SXTB16(val1);
 801b3b6:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801b3ba:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801b3be:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b3c0:	f607 0398 	addw	r3, r7, #2200	; 0x898
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	fa2f f283 	sxtb16	r2, r3
 801b3ca:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801b3ce:	601a      	str	r2, [r3, #0]
  return(result);
 801b3d0:	f607 0394 	addw	r3, r7, #2196	; 0x894
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
 801b3da:	f607 029c 	addw	r2, r7, #2204	; 0x89c
 801b3de:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b3e2:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801b3e4:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	461a      	mov	r2, r3
 801b3f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b3f4:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801b3f6:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	1d1a      	adds	r2, r3, #4
 801b400:	f607 039c 	addw	r3, r7, #2204	; 0x89c
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	601a      	str	r2, [r3, #0]
    return (val);
 801b408:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b40c:	681b      	ldr	r3, [r3, #0]
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801b40e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801b412:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b416:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801b41a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b41c:	f607 03a4 	addw	r3, r7, #2212	; 0x8a4
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	fa2f f283 	sxtb16	r2, r3
 801b426:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801b42a:	601a      	str	r2, [r3, #0]
  return(result);
 801b42c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 801b430:	681b      	ldr	r3, [r3, #0]
 801b432:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val1 = __SXTB16_RORn(val1, 8);
 801b436:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801b43a:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801b43e:	601a      	str	r2, [r3, #0]
 801b440:	f607 02bc 	addw	r2, r7, #2236	; 0x8bc
 801b444:	2308      	movs	r3, #8
 801b446:	6013      	str	r3, [r2, #0]
 801b448:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801b44c:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	6013      	str	r3, [r2, #0]
 801b454:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801b458:	f607 03bc 	addw	r3, r7, #2236	; 0x8bc
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b460:	f607 02b4 	addw	r2, r7, #2228	; 0x8b4
 801b464:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	f003 031f 	and.w	r3, r3, #31
 801b46e:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b470:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	2b00      	cmp	r3, #0
 801b478:	d103      	bne.n	801b482 <arm_nn_mat_mult_nt_t_s8+0x133a>
    return op1;
 801b47a:	f607 03b8 	addw	r3, r7, #2232	; 0x8b8
 801b47e:	681a      	ldr	r2, [r3, #0]
 801b480:	e006      	b.n	801b490 <arm_nn_mat_mult_nt_t_s8+0x1348>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b482:	f607 02b8 	addw	r2, r7, #2232	; 0x8b8
 801b486:	f607 03b4 	addw	r3, r7, #2228	; 0x8b4
 801b48a:	6812      	ldr	r2, [r2, #0]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	41da      	rors	r2, r3
 801b490:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801b494:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b496:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	fa2f f283 	sxtb16	r2, r3
 801b4a0:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801b4a4:	601a      	str	r2, [r3, #0]
  return(result);
 801b4a6:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 801b4aa:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b4ac:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801b4b0:	601a      	str	r2, [r3, #0]
  return result;
 801b4b2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	f8c7 39c0 	str.w	r3, [r7, #2496]	; 0x9c0
                val0 = __SXTB16_RORn(val0, 8);
 801b4bc:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b4c0:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801b4c4:	601a      	str	r2, [r3, #0]
 801b4c6:	f607 02d8 	addw	r2, r7, #2264	; 0x8d8
 801b4ca:	2308      	movs	r3, #8
 801b4cc:	6013      	str	r3, [r2, #0]
 801b4ce:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801b4d2:	f607 03dc 	addw	r3, r7, #2268	; 0x8dc
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	6013      	str	r3, [r2, #0]
 801b4da:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801b4de:	f607 03d8 	addw	r3, r7, #2264	; 0x8d8
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b4e6:	f507 620d 	add.w	r2, r7, #2256	; 0x8d0
 801b4ea:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f003 031f 	and.w	r3, r3, #31
 801b4f4:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b4f6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	2b00      	cmp	r3, #0
 801b4fe:	d103      	bne.n	801b508 <arm_nn_mat_mult_nt_t_s8+0x13c0>
    return op1;
 801b500:	f607 03d4 	addw	r3, r7, #2260	; 0x8d4
 801b504:	681a      	ldr	r2, [r3, #0]
 801b506:	e006      	b.n	801b516 <arm_nn_mat_mult_nt_t_s8+0x13ce>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b508:	f607 02d4 	addw	r2, r7, #2260	; 0x8d4
 801b50c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 801b510:	6812      	ldr	r2, [r2, #0]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	41da      	rors	r2, r3
 801b516:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801b51a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b51c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	fa2f f283 	sxtb16	r2, r3
 801b526:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801b52a:	601a      	str	r2, [r3, #0]
  return(result);
 801b52c:	f607 03c8 	addw	r3, r7, #2248	; 0x8c8
 801b530:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b532:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801b536:	601a      	str	r2, [r3, #0]
  return result;
 801b538:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val3, val2, res00);
 801b542:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801b546:	f8d7 19bc 	ldr.w	r1, [r7, #2492]	; 0x9bc
 801b54a:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801b54e:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801b552:	601a      	str	r2, [r3, #0]
 801b554:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801b558:	6019      	str	r1, [r3, #0]
 801b55a:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801b55e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b560:	f607 03ec 	addw	r3, r7, #2284	; 0x8ec
 801b564:	6819      	ldr	r1, [r3, #0]
 801b566:	f607 03e8 	addw	r3, r7, #2280	; 0x8e8
 801b56a:	681a      	ldr	r2, [r3, #0]
 801b56c:	f607 03e4 	addw	r3, r7, #2276	; 0x8e4
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	fb21 3202 	smlad	r2, r1, r2, r3
 801b576:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801b57a:	601a      	str	r2, [r3, #0]
  return(result);
 801b57c:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val5 = __SXTB16(val4);
 801b586:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801b58a:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801b58e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b590:	f607 03f4 	addw	r3, r7, #2292	; 0x8f4
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	fa2f f283 	sxtb16	r2, r3
 801b59a:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801b59e:	601a      	str	r2, [r3, #0]
  return(result);
 801b5a0:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f8c7 39ac 	str.w	r3, [r7, #2476]	; 0x9ac
                res00 = __SMLAD(val0, val1, res00);
 801b5aa:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b5ae:	f8d7 19c0 	ldr.w	r1, [r7, #2496]	; 0x9c0
 801b5b2:	f8d7 0a24 	ldr.w	r0, [r7, #2596]	; 0xa24
 801b5b6:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801b5ba:	601a      	str	r2, [r3, #0]
 801b5bc:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801b5c0:	6019      	str	r1, [r3, #0]
 801b5c2:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801b5c6:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b5c8:	f607 1304 	addw	r3, r7, #2308	; 0x904
 801b5cc:	6819      	ldr	r1, [r3, #0]
 801b5ce:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 801b5d2:	681a      	ldr	r2, [r3, #0]
 801b5d4:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	fb21 3202 	smlad	r2, r1, r2, r3
 801b5de:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801b5e2:	601a      	str	r2, [r3, #0]
  return(result);
 801b5e4:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                val4 = __SXTB16_RORn(val4, 8);
 801b5ee:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801b5f2:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801b5f6:	601a      	str	r2, [r3, #0]
 801b5f8:	f607 121c 	addw	r2, r7, #2332	; 0x91c
 801b5fc:	2308      	movs	r3, #8
 801b5fe:	6013      	str	r3, [r2, #0]
 801b600:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801b604:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	6013      	str	r3, [r2, #0]
 801b60c:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801b610:	f607 131c 	addw	r3, r7, #2332	; 0x91c
 801b614:	681b      	ldr	r3, [r3, #0]
 801b616:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801b618:	f607 1214 	addw	r2, r7, #2324	; 0x914
 801b61c:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	f003 031f 	and.w	r3, r3, #31
 801b626:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801b628:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d103      	bne.n	801b63a <arm_nn_mat_mult_nt_t_s8+0x14f2>
    return op1;
 801b632:	f607 1318 	addw	r3, r7, #2328	; 0x918
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	e006      	b.n	801b648 <arm_nn_mat_mult_nt_t_s8+0x1500>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b63a:	f607 1218 	addw	r2, r7, #2328	; 0x918
 801b63e:	f607 1314 	addw	r3, r7, #2324	; 0x914
 801b642:	6812      	ldr	r2, [r2, #0]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	41da      	rors	r2, r3
 801b648:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801b64c:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b64e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	fa2f f283 	sxtb16	r2, r3
 801b658:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801b65c:	601a      	str	r2, [r3, #0]
  return(result);
 801b65e:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 801b662:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b664:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801b668:	601a      	str	r2, [r3, #0]
  return result;
 801b66a:	f607 1308 	addw	r3, r7, #2312	; 0x908
 801b66e:	681b      	ldr	r3, [r3, #0]
 801b670:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
                res01 = __SMLAD(val3, val5, res01);
 801b674:	f8d7 29b4 	ldr.w	r2, [r7, #2484]	; 0x9b4
 801b678:	f8d7 19ac 	ldr.w	r1, [r7, #2476]	; 0x9ac
 801b67c:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801b680:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801b684:	601a      	str	r2, [r3, #0]
 801b686:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801b68a:	6019      	str	r1, [r3, #0]
 801b68c:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801b690:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b692:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 801b696:	6819      	ldr	r1, [r3, #0]
 801b698:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 801b69c:	681a      	ldr	r2, [r3, #0]
 801b69e:	f607 1328 	addw	r3, r7, #2344	; 0x928
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	fb21 3202 	smlad	r2, r1, r2, r3
 801b6a8:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801b6ac:	601a      	str	r2, [r3, #0]
  return(result);
 801b6ae:	f607 1324 	addw	r3, r7, #2340	; 0x924
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
                res01 = __SMLAD(val0, val4, res01);
 801b6b8:	f8d7 29b8 	ldr.w	r2, [r7, #2488]	; 0x9b8
 801b6bc:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 801b6c0:	f8d7 0a20 	ldr.w	r0, [r7, #2592]	; 0xa20
 801b6c4:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801b6c8:	601a      	str	r2, [r3, #0]
 801b6ca:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801b6ce:	6019      	str	r1, [r3, #0]
 801b6d0:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801b6d4:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b6d6:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801b6da:	6819      	ldr	r1, [r3, #0]
 801b6dc:	f607 133c 	addw	r3, r7, #2364	; 0x93c
 801b6e0:	681a      	ldr	r2, [r3, #0]
 801b6e2:	f607 1338 	addw	r3, r7, #2360	; 0x938
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	fb21 3202 	smlad	r2, r1, r2, r3
 801b6ec:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801b6f0:	601a      	str	r2, [r3, #0]
  return(result);
 801b6f2:	f607 1334 	addw	r3, r7, #2356	; 0x934
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                // 4 x MAC res10, res11
                val0 = arm_nn_read_q7x4((const q7_t *)&lhs_ptr[off0]);
 801b6fc:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b700:	681a      	ldr	r2, [r3, #0]
 801b702:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801b706:	4413      	add	r3, r2
 801b708:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 801b70c:	f8d7 3944 	ldr.w	r3, [r7, #2372]	; 0x944
 801b710:	681b      	ldr	r3, [r3, #0]
 801b712:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801b714:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b718:	601a      	str	r2, [r3, #0]
    return (val);
 801b71a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                val3 = __SXTB16(val0);
 801b724:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801b728:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b72c:	f8d7 394c 	ldr.w	r3, [r7, #2380]	; 0x94c
 801b730:	fa2f f383 	sxtb16	r3, r3
 801b734:	f8c7 3948 	str.w	r3, [r7, #2376]	; 0x948
  return(result);
 801b738:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
 801b73c:	f8c7 39b4 	str.w	r3, [r7, #2484]	; 0x9b4
                val0 = __SXTB16_RORn(val0, 8);
 801b740:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 801b744:	f8c7 3968 	str.w	r3, [r7, #2408]	; 0x968
 801b748:	2308      	movs	r3, #8
 801b74a:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801b74e:	f8d7 3968 	ldr.w	r3, [r7, #2408]	; 0x968
 801b752:	f8c7 3960 	str.w	r3, [r7, #2400]	; 0x960
 801b756:	f8d7 3964 	ldr.w	r3, [r7, #2404]	; 0x964
 801b75a:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  op2 %= 32U;
 801b75e:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801b762:	f003 031f 	and.w	r3, r3, #31
 801b766:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
  if (op2 == 0U)
 801b76a:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801b76e:	2b00      	cmp	r3, #0
 801b770:	d102      	bne.n	801b778 <arm_nn_mat_mult_nt_t_s8+0x1630>
    return op1;
 801b772:	f8d7 3960 	ldr.w	r3, [r7, #2400]	; 0x960
 801b776:	e005      	b.n	801b784 <arm_nn_mat_mult_nt_t_s8+0x163c>
  return (op1 >> op2) | (op1 << (32U - op2));
 801b778:	f8d7 2960 	ldr.w	r2, [r7, #2400]	; 0x960
 801b77c:	f8d7 395c 	ldr.w	r3, [r7, #2396]	; 0x95c
 801b780:	fa62 f303 	ror.w	r3, r2, r3
 801b784:	f8c7 3958 	str.w	r3, [r7, #2392]	; 0x958
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801b788:	f8d7 3958 	ldr.w	r3, [r7, #2392]	; 0x958
 801b78c:	fa2f f383 	sxtb16	r3, r3
 801b790:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
  return(result);
 801b794:	f8d7 3954 	ldr.w	r3, [r7, #2388]	; 0x954
    result = __SXTB16(__ROR(op1, rotate)) ;
 801b798:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  return result;
 801b79c:	f8d7 3950 	ldr.w	r3, [r7, #2384]	; 0x950
 801b7a0:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
                res10 = __SMLAD(val3, val2, res10);
 801b7a4:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801b7a8:	f8d7 29bc 	ldr.w	r2, [r7, #2492]	; 0x9bc
 801b7ac:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801b7b0:	f8c7 1978 	str.w	r1, [r7, #2424]	; 0x978
 801b7b4:	f8c7 2974 	str.w	r2, [r7, #2420]	; 0x974
 801b7b8:	f8c7 3970 	str.w	r3, [r7, #2416]	; 0x970
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b7bc:	f8d7 1978 	ldr.w	r1, [r7, #2424]	; 0x978
 801b7c0:	f8d7 2974 	ldr.w	r2, [r7, #2420]	; 0x974
 801b7c4:	f8d7 3970 	ldr.w	r3, [r7, #2416]	; 0x970
 801b7c8:	fb21 3302 	smlad	r3, r1, r2, r3
 801b7cc:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
  return(result);
 801b7d0:	f8d7 396c 	ldr.w	r3, [r7, #2412]	; 0x96c
 801b7d4:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val3, val5, res11);
 801b7d8:	f8d7 19b4 	ldr.w	r1, [r7, #2484]	; 0x9b4
 801b7dc:	f8d7 29ac 	ldr.w	r2, [r7, #2476]	; 0x9ac
 801b7e0:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801b7e4:	f8c7 1988 	str.w	r1, [r7, #2440]	; 0x988
 801b7e8:	f8c7 2984 	str.w	r2, [r7, #2436]	; 0x984
 801b7ec:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b7f0:	f8d7 1988 	ldr.w	r1, [r7, #2440]	; 0x988
 801b7f4:	f8d7 2984 	ldr.w	r2, [r7, #2436]	; 0x984
 801b7f8:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 801b7fc:	fb21 3302 	smlad	r3, r1, r2, r3
 801b800:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
  return(result);
 801b804:	f8d7 397c 	ldr.w	r3, [r7, #2428]	; 0x97c
 801b808:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
                res10 = __SMLAD(val0, val1, res10);
 801b80c:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801b810:	f8d7 29c0 	ldr.w	r2, [r7, #2496]	; 0x9c0
 801b814:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801b818:	f8c7 1998 	str.w	r1, [r7, #2456]	; 0x998
 801b81c:	f8c7 2994 	str.w	r2, [r7, #2452]	; 0x994
 801b820:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b824:	f8d7 1998 	ldr.w	r1, [r7, #2456]	; 0x998
 801b828:	f8d7 2994 	ldr.w	r2, [r7, #2452]	; 0x994
 801b82c:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 801b830:	fb21 3302 	smlad	r3, r1, r2, r3
 801b834:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
  return(result);
 801b838:	f8d7 398c 	ldr.w	r3, [r7, #2444]	; 0x98c
 801b83c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 = __SMLAD(val0, val4, res11);
 801b840:	f8d7 19b8 	ldr.w	r1, [r7, #2488]	; 0x9b8
 801b844:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 801b848:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801b84c:	f8c7 19a8 	str.w	r1, [r7, #2472]	; 0x9a8
 801b850:	f8c7 29a4 	str.w	r2, [r7, #2468]	; 0x9a4
 801b854:	f8c7 39a0 	str.w	r3, [r7, #2464]	; 0x9a0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801b858:	f8d7 19a8 	ldr.w	r1, [r7, #2472]	; 0x9a8
 801b85c:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 801b860:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	; 0x9a0
 801b864:	fb21 3302 	smlad	r3, r1, r2, r3
 801b868:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
  return(result);
 801b86c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 801b870:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801b874:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801b878:	3310      	adds	r3, #16
 801b87a:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801b87e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801b882:	f1a3 020f 	sub.w	r2, r3, #15
 801b886:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801b88a:	4293      	cmp	r3, r2
 801b88c:	f6fe ad09 	blt.w	801a2a2 <arm_nn_mat_mult_nt_t_s8+0x15a>
            }

            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801b890:	e05c      	b.n	801b94c <arm_nn_mat_mult_nt_t_s8+0x1804>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801b892:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	781b      	ldrb	r3, [r3, #0]
 801b89a:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801b89e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801b8a8:	4413      	add	r3, r2
 801b8aa:	781b      	ldrb	r3, [r3, #0]
 801b8ac:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
                q7_t lhs_value = lhs_ptr[0];
 801b8b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	781b      	ldrb	r3, [r3, #0]
 801b8b8:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5

                res00 += lhs_value * rhs_value0;
 801b8bc:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801b8c0:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801b8c4:	fb03 f202 	mul.w	r2, r3, r2
 801b8c8:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801b8cc:	4413      	add	r3, r2
 801b8ce:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
                res01 += lhs_value * rhs_value1;
 801b8d2:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801b8d6:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801b8da:	fb03 f202 	mul.w	r2, r3, r2
 801b8de:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801b8e2:	4413      	add	r3, r2
 801b8e4:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20

                lhs_value = lhs_ptr[rhs_cols];
 801b8e8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b8ec:	681a      	ldr	r2, [r3, #0]
 801b8ee:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801b8f2:	4413      	add	r3, r2
 801b8f4:	781b      	ldrb	r3, [r3, #0]
 801b8f6:	f887 39c5 	strb.w	r3, [r7, #2501]	; 0x9c5
                res10 += lhs_value * rhs_value0;
 801b8fa:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801b8fe:	f997 39c7 	ldrsb.w	r3, [r7, #2503]	; 0x9c7
 801b902:	fb03 f202 	mul.w	r2, r3, r2
 801b906:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801b90a:	4413      	add	r3, r2
 801b90c:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
                res11 += lhs_value * rhs_value1;
 801b910:	f997 29c5 	ldrsb.w	r2, [r7, #2501]	; 0x9c5
 801b914:	f997 39c6 	ldrsb.w	r3, [r7, #2502]	; 0x9c6
 801b918:	fb03 f202 	mul.w	r2, r3, r2
 801b91c:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801b920:	4413      	add	r3, r2
 801b922:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

                ++rhs_ptr;
 801b926:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	1c5a      	adds	r2, r3, #1
 801b92e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 801b932:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801b934:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	1c5a      	adds	r2, r3, #1
 801b93c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801b940:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801b942:	f8d7 3a14 	ldr.w	r3, [r7, #2580]	; 0xa14
 801b946:	3301      	adds	r3, #1
 801b948:	f8c7 3a14 	str.w	r3, [r7, #2580]	; 0xa14
 801b94c:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	; 0xa14
 801b950:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801b954:	429a      	cmp	r2, r3
 801b956:	db9c      	blt.n	801b892 <arm_nn_mat_mult_nt_t_s8+0x174a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801b958:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801b95c:	009a      	lsls	r2, r3, #2
 801b95e:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801b962:	4413      	add	r3, r2
 801b964:	6818      	ldr	r0, [r3, #0]
 801b966:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801b96a:	009a      	lsls	r2, r3, #2
 801b96c:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801b970:	4413      	add	r3, r2
 801b972:	6819      	ldr	r1, [r3, #0]
 801b974:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 801b978:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801b97c:	6013      	str	r3, [r2, #0]
 801b97e:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801b982:	6018      	str	r0, [r3, #0]
 801b984:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801b988:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801b98a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801b994:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	fa03 f202 	lsl.w	r2, r3, r2
 801b99e:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801b9a2:	601a      	str	r2, [r3, #0]
 801b9a4:	f507 6291 	add.w	r2, r7, #1160	; 0x488
 801b9a8:	f207 4394 	addw	r3, r7, #1172	; 0x494
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801b9b0:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801b9b4:	2300      	movs	r3, #0
 801b9b6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801b9b8:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801b9bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b9c0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801b9c2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801b9ca:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801b9ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b9d2:	f207 438c 	addw	r3, r7, #1164	; 0x48c
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	4618      	mov	r0, r3
 801b9da:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801b9de:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	461a      	mov	r2, r3
 801b9e6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801b9ea:	fb02 f501 	mul.w	r5, r2, r1
 801b9ee:	fb00 f403 	mul.w	r4, r0, r3
 801b9f2:	442c      	add	r4, r5
 801b9f4:	fba0 2302 	umull	r2, r3, r0, r2
 801b9f8:	18e1      	adds	r1, r4, r3
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	eb18 0102 	adds.w	r1, r8, r2
 801ba00:	6139      	str	r1, [r7, #16]
 801ba02:	eb49 0303 	adc.w	r3, r9, r3
 801ba06:	617b      	str	r3, [r7, #20]
 801ba08:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ba0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ba10:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801ba14:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1c:	f04f 0000 	mov.w	r0, #0
 801ba20:	f04f 0100 	mov.w	r1, #0
 801ba24:	0fd0      	lsrs	r0, r2, #31
 801ba26:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801ba2a:	17d9      	asrs	r1, r3, #31
 801ba2c:	f207 4284 	addw	r2, r7, #1156	; 0x484
 801ba30:	4603      	mov	r3, r0
 801ba32:	6013      	str	r3, [r2, #0]
    return result;
 801ba34:	f207 4384 	addw	r3, r7, #1156	; 0x484
 801ba38:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801ba3a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801ba3e:	681b      	ldr	r3, [r3, #0]
 801ba40:	2b00      	cmp	r3, #0
 801ba42:	dc04      	bgt.n	801ba4e <arm_nn_mat_mult_nt_t_s8+0x1906>
 801ba44:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	425a      	negs	r2, r3
 801ba4c:	e000      	b.n	801ba50 <arm_nn_mat_mult_nt_t_s8+0x1908>
 801ba4e:	2200      	movs	r2, #0
 801ba50:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 801ba54:	6019      	str	r1, [r3, #0]
 801ba56:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801ba5a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801ba5c:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801ba60:	2300      	movs	r3, #0
 801ba62:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801ba64:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801ba68:	2201      	movs	r2, #1
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	fa02 f303 	lsl.w	r3, r2, r3
 801ba70:	f207 4274 	addw	r2, r7, #1140	; 0x474
 801ba74:	3b01      	subs	r3, #1
 801ba76:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801ba78:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 801ba7c:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801ba80:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801ba84:	6812      	ldr	r2, [r2, #0]
 801ba86:	681b      	ldr	r3, [r3, #0]
 801ba88:	4013      	ands	r3, r2
 801ba8a:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801ba8c:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 801ba90:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 801ba94:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 801ba98:	6812      	ldr	r2, [r2, #0]
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	fa42 f303 	asr.w	r3, r2, r3
 801baa0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801baa2:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801baa6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	105b      	asrs	r3, r3, #1
 801baae:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801bab0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	da06      	bge.n	801bac8 <arm_nn_mat_mult_nt_t_s8+0x1980>
        threshold++;
 801baba:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 801babe:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	3301      	adds	r3, #1
 801bac6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801bac8:	f507 628e 	add.w	r2, r7, #1136	; 0x470
 801bacc:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 801bad0:	6812      	ldr	r2, [r2, #0]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	429a      	cmp	r2, r3
 801bad6:	dd06      	ble.n	801bae6 <arm_nn_mat_mult_nt_t_s8+0x199e>
        result++;
 801bad8:	f507 628f 	add.w	r2, r7, #1144	; 0x478
 801badc:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801bae0:	681b      	ldr	r3, [r3, #0]
 801bae2:	3301      	adds	r3, #1
 801bae4:	6013      	str	r3, [r2, #0]
    return result;
 801bae6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 801baea:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801baec:	bf00      	nop
 801baee:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801baf2:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801baf6:	3301      	adds	r3, #1
 801baf8:	009a      	lsls	r2, r3, #2
 801bafa:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801bafe:	4413      	add	r3, r2
 801bb00:	6818      	ldr	r0, [r3, #0]
 801bb02:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801bb06:	3301      	adds	r3, #1
 801bb08:	009a      	lsls	r2, r3, #2
 801bb0a:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801bb0e:	4413      	add	r3, r2
 801bb10:	6819      	ldr	r1, [r3, #0]
 801bb12:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 801bb16:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801bb20:	6018      	str	r0, [r3, #0]
 801bb22:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801bb26:	6019      	str	r1, [r3, #0]
 801bb28:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801bb32:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	fa03 f202 	lsl.w	r2, r3, r2
 801bb3c:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801bb40:	601a      	str	r2, [r3, #0]
 801bb42:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 801bb46:	f207 43c4 	addw	r3, r7, #1220	; 0x4c4
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bb4e:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801bb52:	2300      	movs	r3, #0
 801bb54:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801bb56:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801bb5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bb5e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801bb60:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 801bb64:	2300      	movs	r3, #0
 801bb66:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bb68:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bb6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bb70:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	4618      	mov	r0, r3
 801bb78:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bb7c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	461a      	mov	r2, r3
 801bb84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bb88:	fb02 f501 	mul.w	r5, r2, r1
 801bb8c:	fb00 f403 	mul.w	r4, r0, r3
 801bb90:	442c      	add	r4, r5
 801bb92:	fba0 2302 	umull	r2, r3, r0, r2
 801bb96:	18e1      	adds	r1, r4, r3
 801bb98:	460b      	mov	r3, r1
 801bb9a:	eb18 0102 	adds.w	r1, r8, r2
 801bb9e:	61b9      	str	r1, [r7, #24]
 801bba0:	eb49 0303 	adc.w	r3, r9, r3
 801bba4:	61fb      	str	r3, [r7, #28]
 801bba6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bbaa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801bbae:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801bbb2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbba:	f04f 0000 	mov.w	r0, #0
 801bbbe:	f04f 0100 	mov.w	r1, #0
 801bbc2:	0fd0      	lsrs	r0, r2, #31
 801bbc4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bbc8:	17d9      	asrs	r1, r3, #31
 801bbca:	f207 42b4 	addw	r2, r7, #1204	; 0x4b4
 801bbce:	4603      	mov	r3, r0
 801bbd0:	6013      	str	r3, [r2, #0]
    return result;
 801bbd2:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 801bbd6:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bbd8:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	dc04      	bgt.n	801bbec <arm_nn_mat_mult_nt_t_s8+0x1aa4>
 801bbe2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	425a      	negs	r2, r3
 801bbea:	e000      	b.n	801bbee <arm_nn_mat_mult_nt_t_s8+0x1aa6>
 801bbec:	2200      	movs	r2, #0
 801bbee:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 801bbf2:	6019      	str	r1, [r3, #0]
 801bbf4:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801bbf8:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bbfa:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801bbfe:	2300      	movs	r3, #0
 801bc00:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bc02:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801bc06:	2201      	movs	r2, #1
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	fa02 f303 	lsl.w	r3, r2, r3
 801bc0e:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 801bc12:	3b01      	subs	r3, #1
 801bc14:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801bc16:	f507 6194 	add.w	r1, r7, #1184	; 0x4a0
 801bc1a:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801bc1e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801bc22:	6812      	ldr	r2, [r2, #0]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	4013      	ands	r3, r2
 801bc28:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801bc2a:	f507 6195 	add.w	r1, r7, #1192	; 0x4a8
 801bc2e:	f507 6296 	add.w	r2, r7, #1200	; 0x4b0
 801bc32:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 801bc36:	6812      	ldr	r2, [r2, #0]
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	fa42 f303 	asr.w	r3, r2, r3
 801bc3e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801bc40:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801bc44:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	105b      	asrs	r3, r3, #1
 801bc4c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801bc4e:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	da06      	bge.n	801bc66 <arm_nn_mat_mult_nt_t_s8+0x1b1e>
        threshold++;
 801bc58:	f207 429c 	addw	r2, r7, #1180	; 0x49c
 801bc5c:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	3301      	adds	r3, #1
 801bc64:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801bc66:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 801bc6a:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 801bc6e:	6812      	ldr	r2, [r2, #0]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	429a      	cmp	r2, r3
 801bc74:	dd06      	ble.n	801bc84 <arm_nn_mat_mult_nt_t_s8+0x1b3c>
        result++;
 801bc76:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 801bc7a:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	3301      	adds	r3, #1
 801bc82:	6013      	str	r3, [r2, #0]
    return result;
 801bc84:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 801bc88:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bc8a:	bf00      	nop
 801bc8c:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = arm_nn_requantize(res10, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801bc90:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801bc94:	009a      	lsls	r2, r3, #2
 801bc96:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801bc9a:	4413      	add	r3, r2
 801bc9c:	6818      	ldr	r0, [r3, #0]
 801bc9e:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801bca2:	009a      	lsls	r2, r3, #2
 801bca4:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801bca8:	4413      	add	r3, r2
 801bcaa:	6819      	ldr	r1, [r3, #0]
 801bcac:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 801bcb0:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801bcb4:	6013      	str	r3, [r2, #0]
 801bcb6:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801bcba:	6018      	str	r0, [r3, #0]
 801bcbc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801bcc0:	6019      	str	r1, [r3, #0]
 801bcc2:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801bcc6:	681b      	ldr	r3, [r3, #0]
 801bcc8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801bccc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 801bcd0:	681b      	ldr	r3, [r3, #0]
 801bcd2:	fa03 f202 	lsl.w	r2, r3, r2
 801bcd6:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801bcda:	601a      	str	r2, [r3, #0]
 801bcdc:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 801bce0:	f207 43f4 	addw	r3, r7, #1268	; 0x4f4
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801bce8:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801bcec:	2300      	movs	r3, #0
 801bcee:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801bcf0:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801bcf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bcf8:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801bcfa:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 801bcfe:	2300      	movs	r3, #0
 801bd00:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bd02:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd06:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bd0a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	4618      	mov	r0, r3
 801bd12:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801bd16:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 801bd1a:	681b      	ldr	r3, [r3, #0]
 801bd1c:	461a      	mov	r2, r3
 801bd1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bd22:	fb02 f501 	mul.w	r5, r2, r1
 801bd26:	fb00 f403 	mul.w	r4, r0, r3
 801bd2a:	442c      	add	r4, r5
 801bd2c:	fba0 2302 	umull	r2, r3, r0, r2
 801bd30:	18e1      	adds	r1, r4, r3
 801bd32:	460b      	mov	r3, r1
 801bd34:	eb18 0102 	adds.w	r1, r8, r2
 801bd38:	6239      	str	r1, [r7, #32]
 801bd3a:	eb49 0303 	adc.w	r3, r9, r3
 801bd3e:	627b      	str	r3, [r7, #36]	; 0x24
 801bd40:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd44:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801bd48:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801bd4c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd54:	f04f 0000 	mov.w	r0, #0
 801bd58:	f04f 0100 	mov.w	r1, #0
 801bd5c:	0fd0      	lsrs	r0, r2, #31
 801bd5e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bd62:	17d9      	asrs	r1, r3, #31
 801bd64:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 801bd68:	4603      	mov	r3, r0
 801bd6a:	6013      	str	r3, [r2, #0]
    return result;
 801bd6c:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 801bd70:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bd72:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	dc04      	bgt.n	801bd86 <arm_nn_mat_mult_nt_t_s8+0x1c3e>
 801bd7c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	425a      	negs	r2, r3
 801bd84:	e000      	b.n	801bd88 <arm_nn_mat_mult_nt_t_s8+0x1c40>
 801bd86:	2200      	movs	r2, #0
 801bd88:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 801bd8c:	6019      	str	r1, [r3, #0]
 801bd8e:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801bd92:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bd94:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801bd98:	2300      	movs	r3, #0
 801bd9a:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bd9c:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801bda0:	2201      	movs	r2, #1
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	fa02 f303 	lsl.w	r3, r2, r3
 801bda8:	f207 42d4 	addw	r2, r7, #1236	; 0x4d4
 801bdac:	3b01      	subs	r3, #1
 801bdae:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801bdb0:	f507 619a 	add.w	r1, r7, #1232	; 0x4d0
 801bdb4:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801bdb8:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801bdbc:	6812      	ldr	r2, [r2, #0]
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	4013      	ands	r3, r2
 801bdc2:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801bdc4:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 801bdc8:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 801bdcc:	f207 43dc 	addw	r3, r7, #1244	; 0x4dc
 801bdd0:	6812      	ldr	r2, [r2, #0]
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	fa42 f303 	asr.w	r3, r2, r3
 801bdd8:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801bdda:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801bdde:	f207 43d4 	addw	r3, r7, #1236	; 0x4d4
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	105b      	asrs	r3, r3, #1
 801bde6:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801bde8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	da06      	bge.n	801be00 <arm_nn_mat_mult_nt_t_s8+0x1cb8>
        threshold++;
 801bdf2:	f207 42cc 	addw	r2, r7, #1228	; 0x4cc
 801bdf6:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801be00:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 801be04:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 801be08:	6812      	ldr	r2, [r2, #0]
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	429a      	cmp	r2, r3
 801be0e:	dd06      	ble.n	801be1e <arm_nn_mat_mult_nt_t_s8+0x1cd6>
        result++;
 801be10:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801be14:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	3301      	adds	r3, #1
 801be1c:	6013      	str	r3, [r2, #0]
    return result;
 801be1e:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801be22:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801be24:	bf00      	nop
 801be26:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = arm_nn_requantize(res11, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801be2a:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801be2e:	3301      	adds	r3, #1
 801be30:	009a      	lsls	r2, r3, #2
 801be32:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801be36:	4413      	add	r3, r2
 801be38:	6818      	ldr	r0, [r3, #0]
 801be3a:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801be3e:	3301      	adds	r3, #1
 801be40:	009a      	lsls	r2, r3, #2
 801be42:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801be46:	4413      	add	r3, r2
 801be48:	6819      	ldr	r1, [r3, #0]
 801be4a:	f507 62a5 	add.w	r2, r7, #1320	; 0x528
 801be4e:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801be52:	6013      	str	r3, [r2, #0]
 801be54:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801be58:	6018      	str	r0, [r3, #0]
 801be5a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801be5e:	6019      	str	r1, [r3, #0]
 801be60:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801be6a:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	fa03 f202 	lsl.w	r2, r3, r2
 801be74:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801be78:	601a      	str	r2, [r3, #0]
 801be7a:	f507 62a3 	add.w	r2, r7, #1304	; 0x518
 801be7e:	f207 5324 	addw	r3, r7, #1316	; 0x524
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801be86:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801be8a:	2300      	movs	r3, #0
 801be8c:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801be8e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801be92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be96:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801be98:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 801be9c:	2300      	movs	r3, #0
 801be9e:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801bea0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bea4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bea8:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 801beac:	681b      	ldr	r3, [r3, #0]
 801beae:	4618      	mov	r0, r3
 801beb0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801beb4:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 801beb8:	681b      	ldr	r3, [r3, #0]
 801beba:	461a      	mov	r2, r3
 801bebc:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801bec0:	fb02 f501 	mul.w	r5, r2, r1
 801bec4:	fb00 f403 	mul.w	r4, r0, r3
 801bec8:	442c      	add	r4, r5
 801beca:	fba0 2302 	umull	r2, r3, r0, r2
 801bece:	18e1      	adds	r1, r4, r3
 801bed0:	460b      	mov	r3, r1
 801bed2:	eb18 0102 	adds.w	r1, r8, r2
 801bed6:	62b9      	str	r1, [r7, #40]	; 0x28
 801bed8:	eb49 0303 	adc.w	r3, r9, r3
 801bedc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bede:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801bee2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801bee6:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801beea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bef2:	f04f 0000 	mov.w	r0, #0
 801bef6:	f04f 0100 	mov.w	r1, #0
 801befa:	0fd0      	lsrs	r0, r2, #31
 801befc:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801bf00:	17d9      	asrs	r1, r3, #31
 801bf02:	f207 5214 	addw	r2, r7, #1300	; 0x514
 801bf06:	4603      	mov	r3, r0
 801bf08:	6013      	str	r3, [r2, #0]
    return result;
 801bf0a:	f207 5314 	addw	r3, r7, #1300	; 0x514
 801bf0e:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bf10:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	2b00      	cmp	r3, #0
 801bf18:	dc04      	bgt.n	801bf24 <arm_nn_mat_mult_nt_t_s8+0x1ddc>
 801bf1a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	425a      	negs	r2, r3
 801bf22:	e000      	b.n	801bf26 <arm_nn_mat_mult_nt_t_s8+0x1dde>
 801bf24:	2200      	movs	r2, #0
 801bf26:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 801bf2a:	6019      	str	r1, [r3, #0]
 801bf2c:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801bf30:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801bf32:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801bf36:	2300      	movs	r3, #0
 801bf38:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801bf3a:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801bf3e:	2201      	movs	r2, #1
 801bf40:	681b      	ldr	r3, [r3, #0]
 801bf42:	fa02 f303 	lsl.w	r3, r2, r3
 801bf46:	f207 5204 	addw	r2, r7, #1284	; 0x504
 801bf4a:	3b01      	subs	r3, #1
 801bf4c:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801bf4e:	f507 61a0 	add.w	r1, r7, #1280	; 0x500
 801bf52:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801bf56:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801bf5a:	6812      	ldr	r2, [r2, #0]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	4013      	ands	r3, r2
 801bf60:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801bf62:	f507 61a1 	add.w	r1, r7, #1288	; 0x508
 801bf66:	f507 62a2 	add.w	r2, r7, #1296	; 0x510
 801bf6a:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 801bf6e:	6812      	ldr	r2, [r2, #0]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	fa42 f303 	asr.w	r3, r2, r3
 801bf76:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801bf78:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801bf7c:	f207 5304 	addw	r3, r7, #1284	; 0x504
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	105b      	asrs	r3, r3, #1
 801bf84:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801bf86:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	da06      	bge.n	801bf9e <arm_nn_mat_mult_nt_t_s8+0x1e56>
        threshold++;
 801bf90:	f207 42fc 	addw	r2, r7, #1276	; 0x4fc
 801bf94:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801bf98:	681b      	ldr	r3, [r3, #0]
 801bf9a:	3301      	adds	r3, #1
 801bf9c:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801bf9e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 801bfa2:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 801bfa6:	6812      	ldr	r2, [r2, #0]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	429a      	cmp	r2, r3
 801bfac:	dd06      	ble.n	801bfbc <arm_nn_mat_mult_nt_t_s8+0x1e74>
        result++;
 801bfae:	f507 62a1 	add.w	r2, r7, #1288	; 0x508
 801bfb2:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	3301      	adds	r3, #1
 801bfba:	6013      	str	r3, [r2, #0]
    return result;
 801bfbc:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 801bfc0:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801bfc2:	bf00      	nop
 801bfc4:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Add offset
            res00 += dst_offset;
 801bfc8:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801bfcc:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801bfd0:	4413      	add	r3, r2
 801bfd2:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 += dst_offset;
 801bfd6:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801bfda:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801bfde:	4413      	add	r3, r2
 801bfe0:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 += dst_offset;
 801bfe4:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801bfe8:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801bfec:	4413      	add	r3, r2
 801bfee:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 += dst_offset;
 801bff2:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801bff6:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801bffa:	4413      	add	r3, r2
 801bffc:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801c000:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801c004:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801c008:	4293      	cmp	r3, r2
 801c00a:	bfb8      	it	lt
 801c00c:	4613      	movlt	r3, r2
 801c00e:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res00 = MIN(res00, activation_max);
 801c012:	f8d7 2a24 	ldr.w	r2, [r7, #2596]	; 0xa24
 801c016:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801c01a:	4293      	cmp	r3, r2
 801c01c:	bfa8      	it	ge
 801c01e:	4613      	movge	r3, r2
 801c020:	f8c7 3a24 	str.w	r3, [r7, #2596]	; 0xa24
            res01 = MAX(res01, activation_min);
 801c024:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801c028:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801c02c:	4293      	cmp	r3, r2
 801c02e:	bfb8      	it	lt
 801c030:	4613      	movlt	r3, r2
 801c032:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res01 = MIN(res01, activation_max);
 801c036:	f8d7 2a20 	ldr.w	r2, [r7, #2592]	; 0xa20
 801c03a:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801c03e:	4293      	cmp	r3, r2
 801c040:	bfa8      	it	ge
 801c042:	4613      	movge	r3, r2
 801c044:	f8c7 3a20 	str.w	r3, [r7, #2592]	; 0xa20
            res10 = MAX(res10, activation_min);
 801c048:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801c04c:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801c050:	4293      	cmp	r3, r2
 801c052:	bfb8      	it	lt
 801c054:	4613      	movlt	r3, r2
 801c056:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res10 = MIN(res10, activation_max);
 801c05a:	f8d7 2a1c 	ldr.w	r2, [r7, #2588]	; 0xa1c
 801c05e:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801c062:	4293      	cmp	r3, r2
 801c064:	bfa8      	it	ge
 801c066:	4613      	movge	r3, r2
 801c068:	f8c7 3a1c 	str.w	r3, [r7, #2588]	; 0xa1c
            res11 = MAX(res11, activation_min);
 801c06c:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801c070:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801c074:	4293      	cmp	r3, r2
 801c076:	bfb8      	it	lt
 801c078:	4613      	movlt	r3, r2
 801c07a:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18
            res11 = MIN(res11, activation_max);
 801c07e:	f8d7 2a18 	ldr.w	r2, [r7, #2584]	; 0xa18
 801c082:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801c086:	4293      	cmp	r3, r2
 801c088:	bfa8      	it	ge
 801c08a:	4613      	movge	r3, r2
 801c08c:	f8c7 3a18 	str.w	r3, [r7, #2584]	; 0xa18

            dst_ptr[0] = (q7_t)res00;
 801c090:	f8d7 3a24 	ldr.w	r3, [r7, #2596]	; 0xa24
 801c094:	b25b      	sxtb	r3, r3
 801c096:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801c09a:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801c09c:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801c0a0:	1c5a      	adds	r2, r3, #1
 801c0a2:	f8d7 3a20 	ldr.w	r3, [r7, #2592]	; 0xa20
 801c0a6:	b25b      	sxtb	r3, r3
 801c0a8:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801c0aa:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c0ae:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801c0b2:	4413      	add	r3, r2
 801c0b4:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38
            dst_ptr[0] = (q7_t)res10;
 801c0b8:	f8d7 3a1c 	ldr.w	r3, [r7, #2588]	; 0xa1c
 801c0bc:	b25b      	sxtb	r3, r3
 801c0be:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801c0c2:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res11;
 801c0c4:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801c0c8:	1c5a      	adds	r2, r3, #1
 801c0ca:	f8d7 3a18 	ldr.w	r3, [r7, #2584]	; 0xa18
 801c0ce:	b25b      	sxtb	r3, r3
 801c0d0:	7013      	strb	r3, [r2, #0]
            dst_ptr += rhs_rows;
 801c0d2:	f8d7 2a6c 	ldr.w	r2, [r7, #2668]	; 0xa6c
 801c0d6:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801c0da:	4413      	add	r3, r2
 801c0dc:	f8c7 3a38 	str.w	r3, [r7, #2616]	; 0xa38

            lhs_ptr += rhs_cols;
 801c0e0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c0e4:	681a      	ldr	r2, [r3, #0]
 801c0e6:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801c0ea:	441a      	add	r2, r3
 801c0ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c0f0:	601a      	str	r2, [r3, #0]

            lhs_rows_idx--;
 801c0f2:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801c0f6:	3b01      	subs	r3, #1
 801c0f8:	f8c7 3a28 	str.w	r3, [r7, #2600]	; 0xa28
        while (lhs_rows_idx)
 801c0fc:	f8d7 3a28 	ldr.w	r3, [r7, #2600]	; 0xa28
 801c100:	2b00      	cmp	r3, #0
 801c102:	f47e a8b3 	bne.w	801a26c <arm_nn_mat_mult_nt_t_s8+0x124>
        }

        // Left-over rows
        if (lhs_rows % 2)
 801c106:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801c10a:	f003 0301 	and.w	r3, r3, #1
 801c10e:	2b00      	cmp	r3, #0
 801c110:	f001 8195 	beq.w	801d43e <arm_nn_mat_mult_nt_t_s8+0x32f6>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801c114:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 801c118:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	6013      	str	r3, [r2, #0]

            q31_t res00 = lhs_offset_contribution0;
 801c120:	f8d7 3a34 	ldr.w	r3, [r7, #2612]	; 0xa34
 801c124:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            q31_t res01 = lhs_offset_contribution1;
 801c128:	f8d7 3a30 	ldr.w	r3, [r7, #2608]	; 0xa30
 801c12c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            int32_t rhs_cols_idx = 0;
 801c130:	2300      	movs	r3, #0
 801c132:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08

            q31_t val0, val1, val2, val3, val4, val5;
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801c136:	f000 bf59 	b.w	801cfec <arm_nn_mat_mult_nt_t_s8+0x2ea4>
 801c13a:	f507 72c6 	add.w	r2, r7, #396	; 0x18c
 801c13e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c142:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c144:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801c148:	681b      	ldr	r3, [r3, #0]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	461a      	mov	r2, r3
 801c150:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c154:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c156:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	1d1a      	adds	r2, r3, #4
 801c160:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	601a      	str	r2, [r3, #0]
    return (val);
 801c168:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801c16c:	681b      	ldr	r3, [r3, #0]
            {
                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c16e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c172:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c176:	681a      	ldr	r2, [r3, #0]
 801c178:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801c17c:	441a      	add	r2, r3
 801c17e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c182:	601a      	str	r2, [r3, #0]
 801c184:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	681b      	ldr	r3, [r3, #0]
 801c18c:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c18e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c192:	601a      	str	r2, [r3, #0]
    return (val);
 801c194:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801c19e:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 801c1a2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c1a6:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c1a8:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c1b8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c1ba:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801c1be:	681b      	ldr	r3, [r3, #0]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	1d1a      	adds	r2, r3, #4
 801c1c4:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	601a      	str	r2, [r3, #0]
    return (val);
 801c1cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801c1d0:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c1d2:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801c1d6:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c1da:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801c1de:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c1e0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	fa2f f283 	sxtb16	r2, r3
 801c1ea:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801c1ee:	601a      	str	r2, [r3, #0]
  return(result);
 801c1f0:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801c1fa:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c1fe:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801c202:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c204:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	fa2f f283 	sxtb16	r2, r3
 801c20e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801c212:	601a      	str	r2, [r3, #0]
  return(result);
 801c214:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 801c218:	681b      	ldr	r3, [r3, #0]
 801c21a:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801c21e:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801c222:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801c226:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c228:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	fa2f f283 	sxtb16	r2, r3
 801c232:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801c236:	601a      	str	r2, [r3, #0]
  return(result);
 801c238:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801c242:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c246:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801c24a:	601a      	str	r2, [r3, #0]
 801c24c:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 801c250:	2308      	movs	r3, #8
 801c252:	6013      	str	r3, [r2, #0]
 801c254:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801c258:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	6013      	str	r3, [r2, #0]
 801c260:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801c264:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c26c:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 801c270:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	f003 031f 	and.w	r3, r3, #31
 801c27a:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c27c:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d103      	bne.n	801c28e <arm_nn_mat_mult_nt_t_s8+0x2146>
    return op1;
 801c286:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 801c28a:	681a      	ldr	r2, [r3, #0]
 801c28c:	e006      	b.n	801c29c <arm_nn_mat_mult_nt_t_s8+0x2154>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c28e:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 801c292:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 801c296:	6812      	ldr	r2, [r2, #0]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	41da      	rors	r2, r3
 801c29c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801c2a0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c2a2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 801c2a6:	681b      	ldr	r3, [r3, #0]
 801c2a8:	fa2f f283 	sxtb16	r2, r3
 801c2ac:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801c2b0:	601a      	str	r2, [r3, #0]
  return(result);
 801c2b2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 801c2b6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c2b8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801c2bc:	601a      	str	r2, [r3, #0]
  return result;
 801c2be:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801c2c8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c2cc:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801c2d0:	601a      	str	r2, [r3, #0]
 801c2d2:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 801c2d6:	2308      	movs	r3, #8
 801c2d8:	6013      	str	r3, [r2, #0]
 801c2da:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801c2de:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	6013      	str	r3, [r2, #0]
 801c2e6:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801c2ea:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 801c2ee:	681b      	ldr	r3, [r3, #0]
 801c2f0:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c2f2:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 801c2f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801c2fa:	681b      	ldr	r3, [r3, #0]
 801c2fc:	f003 031f 	and.w	r3, r3, #31
 801c300:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c302:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d103      	bne.n	801c314 <arm_nn_mat_mult_nt_t_s8+0x21cc>
    return op1;
 801c30c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 801c310:	681a      	ldr	r2, [r3, #0]
 801c312:	e006      	b.n	801c322 <arm_nn_mat_mult_nt_t_s8+0x21da>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c314:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 801c318:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801c31c:	6812      	ldr	r2, [r2, #0]
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	41da      	rors	r2, r3
 801c322:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801c326:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c328:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 801c32c:	681b      	ldr	r3, [r3, #0]
 801c32e:	fa2f f283 	sxtb16	r2, r3
 801c332:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801c336:	601a      	str	r2, [r3, #0]
  return(result);
 801c338:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 801c33c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c33e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801c342:	601a      	str	r2, [r3, #0]
  return result;
 801c344:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801c34e:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801c352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801c356:	601a      	str	r2, [r3, #0]
 801c358:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 801c35c:	2308      	movs	r3, #8
 801c35e:	6013      	str	r3, [r2, #0]
 801c360:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801c364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801c368:	681b      	ldr	r3, [r3, #0]
 801c36a:	6013      	str	r3, [r2, #0]
 801c36c:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801c370:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c378:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 801c37c:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	f003 031f 	and.w	r3, r3, #31
 801c386:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c388:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d103      	bne.n	801c39a <arm_nn_mat_mult_nt_t_s8+0x2252>
    return op1;
 801c392:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 801c396:	681a      	ldr	r2, [r3, #0]
 801c398:	e006      	b.n	801c3a8 <arm_nn_mat_mult_nt_t_s8+0x2260>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c39a:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 801c39e:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 801c3a2:	6812      	ldr	r2, [r2, #0]
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	41da      	rors	r2, r3
 801c3a8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801c3ac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c3ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 801c3b2:	681b      	ldr	r3, [r3, #0]
 801c3b4:	fa2f f283 	sxtb16	r2, r3
 801c3b8:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801c3bc:	601a      	str	r2, [r3, #0]
  return(result);
 801c3be:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 801c3c2:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c3c4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801c3c8:	601a      	str	r2, [r3, #0]
  return result;
 801c3ca:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 801c3ce:	681b      	ldr	r3, [r3, #0]
 801c3d0:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c3d4:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801c3d8:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801c3dc:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801c3e0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801c3e4:	601a      	str	r2, [r3, #0]
 801c3e6:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801c3ea:	6019      	str	r1, [r3, #0]
 801c3ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801c3f0:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c3f2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801c3f6:	6819      	ldr	r1, [r3, #0]
 801c3f8:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 801c3fc:	681a      	ldr	r2, [r3, #0]
 801c3fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	fb21 3202 	smlad	r2, r1, r2, r3
 801c408:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801c40c:	601a      	str	r2, [r3, #0]
  return(result);
 801c40e:	f507 7301 	add.w	r3, r7, #516	; 0x204
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801c418:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c41c:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801c420:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801c424:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c428:	601a      	str	r2, [r3, #0]
 801c42a:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c42e:	6019      	str	r1, [r3, #0]
 801c430:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801c434:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c436:	f507 7308 	add.w	r3, r7, #544	; 0x220
 801c43a:	6819      	ldr	r1, [r3, #0]
 801c43c:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 801c440:	681a      	ldr	r2, [r3, #0]
 801c442:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801c446:	681b      	ldr	r3, [r3, #0]
 801c448:	fb21 3202 	smlad	r2, r1, r2, r3
 801c44c:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801c450:	601a      	str	r2, [r3, #0]
  return(result);
 801c452:	f507 7305 	add.w	r3, r7, #532	; 0x214
 801c456:	681b      	ldr	r3, [r3, #0]
 801c458:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801c45c:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801c460:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801c464:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801c468:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801c46c:	601a      	str	r2, [r3, #0]
 801c46e:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801c472:	6019      	str	r1, [r3, #0]
 801c474:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801c478:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c47a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801c47e:	6819      	ldr	r1, [r3, #0]
 801c480:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 801c484:	681a      	ldr	r2, [r3, #0]
 801c486:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	fb21 3202 	smlad	r2, r1, r2, r3
 801c490:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801c494:	601a      	str	r2, [r3, #0]
  return(result);
 801c496:	f507 7309 	add.w	r3, r7, #548	; 0x224
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801c4a0:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c4a4:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801c4a8:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801c4ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801c4b0:	601a      	str	r2, [r3, #0]
 801c4b2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801c4b6:	6019      	str	r1, [r3, #0]
 801c4b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801c4bc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c4be:	f507 7310 	add.w	r3, r7, #576	; 0x240
 801c4c2:	6819      	ldr	r1, [r3, #0]
 801c4c4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 801c4c8:	681a      	ldr	r2, [r3, #0]
 801c4ca:	f507 730e 	add.w	r3, r7, #568	; 0x238
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	fb21 3202 	smlad	r2, r1, r2, r3
 801c4d4:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801c4d8:	601a      	str	r2, [r3, #0]
  return(result);
 801c4da:	f507 730d 	add.w	r3, r7, #564	; 0x234
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801c4e4:	f507 7211 	add.w	r2, r7, #580	; 0x244
 801c4e8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c4ec:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c4ee:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	461a      	mov	r2, r3
 801c4fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c4fe:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c500:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	681b      	ldr	r3, [r3, #0]
 801c508:	1d1a      	adds	r2, r3, #4
 801c50a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	601a      	str	r2, [r3, #0]
    return (val);
 801c512:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c516:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c518:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c51c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c520:	681a      	ldr	r2, [r3, #0]
 801c522:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801c526:	441a      	add	r2, r3
 801c528:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801c52c:	601a      	str	r2, [r3, #0]
 801c52e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 801c532:	681b      	ldr	r3, [r3, #0]
 801c534:	681b      	ldr	r3, [r3, #0]
 801c536:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c538:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c53c:	601a      	str	r2, [r3, #0]
    return (val);
 801c53e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801c548:	f507 7213 	add.w	r2, r7, #588	; 0x24c
 801c54c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c550:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c552:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	681b      	ldr	r3, [r3, #0]
 801c55c:	461a      	mov	r2, r3
 801c55e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c562:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c564:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801c568:	681b      	ldr	r3, [r3, #0]
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	1d1a      	adds	r2, r3, #4
 801c56e:	f507 7313 	add.w	r3, r7, #588	; 0x24c
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	601a      	str	r2, [r3, #0]
    return (val);
 801c576:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c57a:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c57c:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801c580:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c584:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801c588:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c58a:	f507 7315 	add.w	r3, r7, #596	; 0x254
 801c58e:	681b      	ldr	r3, [r3, #0]
 801c590:	fa2f f283 	sxtb16	r2, r3
 801c594:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801c598:	601a      	str	r2, [r3, #0]
  return(result);
 801c59a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801c5a4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c5a8:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801c5ac:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5ae:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 801c5b2:	681b      	ldr	r3, [r3, #0]
 801c5b4:	fa2f f283 	sxtb16	r2, r3
 801c5b8:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801c5bc:	601a      	str	r2, [r3, #0]
  return(result);
 801c5be:	f507 7316 	add.w	r3, r7, #600	; 0x258
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801c5c8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801c5cc:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801c5d0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c5d2:	f507 7319 	add.w	r3, r7, #612	; 0x264
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	fa2f f283 	sxtb16	r2, r3
 801c5dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801c5e0:	601a      	str	r2, [r3, #0]
  return(result);
 801c5e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801c5ec:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c5f0:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c5f4:	601a      	str	r2, [r3, #0]
 801c5f6:	f507 721f 	add.w	r2, r7, #636	; 0x27c
 801c5fa:	2308      	movs	r3, #8
 801c5fc:	6013      	str	r3, [r2, #0]
 801c5fe:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801c602:	f507 7320 	add.w	r3, r7, #640	; 0x280
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	6013      	str	r3, [r2, #0]
 801c60a:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801c60e:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c616:	f507 721d 	add.w	r2, r7, #628	; 0x274
 801c61a:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	f003 031f 	and.w	r3, r3, #31
 801c624:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c626:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d103      	bne.n	801c638 <arm_nn_mat_mult_nt_t_s8+0x24f0>
    return op1;
 801c630:	f507 731e 	add.w	r3, r7, #632	; 0x278
 801c634:	681a      	ldr	r2, [r3, #0]
 801c636:	e006      	b.n	801c646 <arm_nn_mat_mult_nt_t_s8+0x24fe>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c638:	f507 721e 	add.w	r2, r7, #632	; 0x278
 801c63c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 801c640:	6812      	ldr	r2, [r2, #0]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	41da      	rors	r2, r3
 801c646:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801c64a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c64c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	fa2f f283 	sxtb16	r2, r3
 801c656:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801c65a:	601a      	str	r2, [r3, #0]
  return(result);
 801c65c:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 801c660:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c662:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801c666:	601a      	str	r2, [r3, #0]
  return result;
 801c668:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801c672:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c676:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801c67a:	601a      	str	r2, [r3, #0]
 801c67c:	f507 7226 	add.w	r2, r7, #664	; 0x298
 801c680:	2308      	movs	r3, #8
 801c682:	6013      	str	r3, [r2, #0]
 801c684:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801c688:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	6013      	str	r3, [r2, #0]
 801c690:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801c694:	f507 7326 	add.w	r3, r7, #664	; 0x298
 801c698:	681b      	ldr	r3, [r3, #0]
 801c69a:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c69c:	f507 7224 	add.w	r2, r7, #656	; 0x290
 801c6a0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	f003 031f 	and.w	r3, r3, #31
 801c6aa:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c6ac:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d103      	bne.n	801c6be <arm_nn_mat_mult_nt_t_s8+0x2576>
    return op1;
 801c6b6:	f507 7325 	add.w	r3, r7, #660	; 0x294
 801c6ba:	681a      	ldr	r2, [r3, #0]
 801c6bc:	e006      	b.n	801c6cc <arm_nn_mat_mult_nt_t_s8+0x2584>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c6be:	f507 7225 	add.w	r2, r7, #660	; 0x294
 801c6c2:	f507 7324 	add.w	r3, r7, #656	; 0x290
 801c6c6:	6812      	ldr	r2, [r2, #0]
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	41da      	rors	r2, r3
 801c6cc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801c6d0:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c6d2:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	fa2f f283 	sxtb16	r2, r3
 801c6dc:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c6e0:	601a      	str	r2, [r3, #0]
  return(result);
 801c6e2:	f507 7322 	add.w	r3, r7, #648	; 0x288
 801c6e6:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c6e8:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c6ec:	601a      	str	r2, [r3, #0]
  return result;
 801c6ee:	f507 7321 	add.w	r3, r7, #644	; 0x284
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801c6f8:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801c6fc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c700:	601a      	str	r2, [r3, #0]
 801c702:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 801c706:	2308      	movs	r3, #8
 801c708:	6013      	str	r3, [r2, #0]
 801c70a:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 801c70e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 801c712:	681b      	ldr	r3, [r3, #0]
 801c714:	6013      	str	r3, [r2, #0]
 801c716:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801c71a:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c722:	f507 722b 	add.w	r2, r7, #684	; 0x2ac
 801c726:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c72a:	681b      	ldr	r3, [r3, #0]
 801c72c:	f003 031f 	and.w	r3, r3, #31
 801c730:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c732:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c736:	681b      	ldr	r3, [r3, #0]
 801c738:	2b00      	cmp	r3, #0
 801c73a:	d103      	bne.n	801c744 <arm_nn_mat_mult_nt_t_s8+0x25fc>
    return op1;
 801c73c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801c740:	681a      	ldr	r2, [r3, #0]
 801c742:	e006      	b.n	801c752 <arm_nn_mat_mult_nt_t_s8+0x260a>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c744:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 801c748:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 801c74c:	6812      	ldr	r2, [r2, #0]
 801c74e:	681b      	ldr	r3, [r3, #0]
 801c750:	41da      	rors	r2, r3
 801c752:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c756:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c758:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	fa2f f283 	sxtb16	r2, r3
 801c762:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c766:	601a      	str	r2, [r3, #0]
  return(result);
 801c768:	f507 7329 	add.w	r3, r7, #676	; 0x2a4
 801c76c:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801c76e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c772:	601a      	str	r2, [r3, #0]
  return result;
 801c774:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801c77e:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801c782:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801c786:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801c78a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c78e:	601a      	str	r2, [r3, #0]
 801c790:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c794:	6019      	str	r1, [r3, #0]
 801c796:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c79a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c79c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 801c7a0:	6819      	ldr	r1, [r3, #0]
 801c7a2:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 801c7a6:	681a      	ldr	r2, [r3, #0]
 801c7a8:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	fb21 3202 	smlad	r2, r1, r2, r3
 801c7b2:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c7b6:	601a      	str	r2, [r3, #0]
  return(result);
 801c7b8:	f507 732f 	add.w	r3, r7, #700	; 0x2bc
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801c7c2:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c7c6:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801c7ca:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801c7ce:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801c7d2:	601a      	str	r2, [r3, #0]
 801c7d4:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c7d8:	6019      	str	r1, [r3, #0]
 801c7da:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c7de:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c7e0:	f507 7336 	add.w	r3, r7, #728	; 0x2d8
 801c7e4:	6819      	ldr	r1, [r3, #0]
 801c7e6:	f507 7335 	add.w	r3, r7, #724	; 0x2d4
 801c7ea:	681a      	ldr	r2, [r3, #0]
 801c7ec:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 801c7f0:	681b      	ldr	r3, [r3, #0]
 801c7f2:	fb21 3202 	smlad	r2, r1, r2, r3
 801c7f6:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c7fa:	601a      	str	r2, [r3, #0]
  return(result);
 801c7fc:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801c806:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801c80a:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801c80e:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801c812:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c816:	601a      	str	r2, [r3, #0]
 801c818:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c81c:	6019      	str	r1, [r3, #0]
 801c81e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c822:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c824:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 801c828:	6819      	ldr	r1, [r3, #0]
 801c82a:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 801c82e:	681a      	ldr	r2, [r3, #0]
 801c830:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	fb21 3202 	smlad	r2, r1, r2, r3
 801c83a:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c83e:	601a      	str	r2, [r3, #0]
  return(result);
 801c840:	f507 7337 	add.w	r3, r7, #732	; 0x2dc
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801c84a:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c84e:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801c852:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801c856:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801c85a:	601a      	str	r2, [r3, #0]
 801c85c:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 801c860:	6019      	str	r1, [r3, #0]
 801c862:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801c866:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801c868:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 801c86c:	6819      	ldr	r1, [r3, #0]
 801c86e:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 801c872:	681a      	ldr	r2, [r3, #0]
 801c874:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801c878:	681b      	ldr	r3, [r3, #0]
 801c87a:	fb21 3202 	smlad	r2, r1, r2, r3
 801c87e:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c882:	601a      	str	r2, [r3, #0]
  return(result);
 801c884:	f507 733b 	add.w	r3, r7, #748	; 0x2ec
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801c88e:	f507 723f 	add.w	r2, r7, #764	; 0x2fc
 801c892:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c896:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c898:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	681b      	ldr	r3, [r3, #0]
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	461a      	mov	r2, r3
 801c8a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c8a8:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c8aa:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	1d1a      	adds	r2, r3, #4
 801c8b4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 801c8b8:	681b      	ldr	r3, [r3, #0]
 801c8ba:	601a      	str	r2, [r3, #0]
    return (val);
 801c8bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801c8c0:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801c8c2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801c8c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801c8ca:	681a      	ldr	r2, [r3, #0]
 801c8cc:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801c8d0:	441a      	add	r2, r3
 801c8d2:	f507 7340 	add.w	r3, r7, #768	; 0x300
 801c8d6:	601a      	str	r2, [r3, #0]
 801c8d8:	f507 7340 	add.w	r3, r7, #768	; 0x300
 801c8dc:	681b      	ldr	r3, [r3, #0]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801c8e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c8e6:	601a      	str	r2, [r3, #0]
    return (val);
 801c8e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801c8f2:	f507 7241 	add.w	r2, r7, #772	; 0x304
 801c8f6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c8fa:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801c8fc:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	681b      	ldr	r3, [r3, #0]
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	461a      	mov	r2, r3
 801c908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c90c:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801c90e:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	1d1a      	adds	r2, r3, #4
 801c918:	f507 7341 	add.w	r3, r7, #772	; 0x304
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	601a      	str	r2, [r3, #0]
    return (val);
 801c920:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801c924:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801c926:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801c92a:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c92e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801c932:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c934:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	fa2f f283 	sxtb16	r2, r3
 801c93e:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801c942:	601a      	str	r2, [r3, #0]
  return(result);
 801c944:	f507 7342 	add.w	r3, r7, #776	; 0x308
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801c94e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801c952:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801c956:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c958:	f507 7345 	add.w	r3, r7, #788	; 0x314
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	fa2f f283 	sxtb16	r2, r3
 801c962:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801c966:	601a      	str	r2, [r3, #0]
  return(result);
 801c968:	f507 7344 	add.w	r3, r7, #784	; 0x310
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801c972:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801c976:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 801c97a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c97c:	f507 7347 	add.w	r3, r7, #796	; 0x31c
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	fa2f f283 	sxtb16	r2, r3
 801c986:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801c98a:	601a      	str	r2, [r3, #0]
  return(result);
 801c98c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 801c990:	681b      	ldr	r3, [r3, #0]
 801c992:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801c996:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801c99a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801c99e:	601a      	str	r2, [r3, #0]
 801c9a0:	f507 724d 	add.w	r2, r7, #820	; 0x334
 801c9a4:	2308      	movs	r3, #8
 801c9a6:	6013      	str	r3, [r2, #0]
 801c9a8:	f507 724c 	add.w	r2, r7, #816	; 0x330
 801c9ac:	f507 734e 	add.w	r3, r7, #824	; 0x338
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	6013      	str	r3, [r2, #0]
 801c9b4:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 801c9b8:	f507 734d 	add.w	r3, r7, #820	; 0x334
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801c9c0:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 801c9c4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	f003 031f 	and.w	r3, r3, #31
 801c9ce:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801c9d0:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 801c9d4:	681b      	ldr	r3, [r3, #0]
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d103      	bne.n	801c9e2 <arm_nn_mat_mult_nt_t_s8+0x289a>
    return op1;
 801c9da:	f507 734c 	add.w	r3, r7, #816	; 0x330
 801c9de:	681a      	ldr	r2, [r3, #0]
 801c9e0:	e006      	b.n	801c9f0 <arm_nn_mat_mult_nt_t_s8+0x28a8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801c9e2:	f507 724c 	add.w	r2, r7, #816	; 0x330
 801c9e6:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 801c9ea:	6812      	ldr	r2, [r2, #0]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	41da      	rors	r2, r3
 801c9f0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 801c9f4:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801c9f6:	f507 734a 	add.w	r3, r7, #808	; 0x328
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	fa2f f283 	sxtb16	r2, r3
 801ca00:	f507 7349 	add.w	r3, r7, #804	; 0x324
 801ca04:	601a      	str	r2, [r3, #0]
  return(result);
 801ca06:	f507 7349 	add.w	r3, r7, #804	; 0x324
 801ca0a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ca0c:	f507 7348 	add.w	r3, r7, #800	; 0x320
 801ca10:	601a      	str	r2, [r3, #0]
  return result;
 801ca12:	f507 7348 	add.w	r3, r7, #800	; 0x320
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801ca1c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801ca20:	f507 7355 	add.w	r3, r7, #852	; 0x354
 801ca24:	601a      	str	r2, [r3, #0]
 801ca26:	f507 7254 	add.w	r2, r7, #848	; 0x350
 801ca2a:	2308      	movs	r3, #8
 801ca2c:	6013      	str	r3, [r2, #0]
 801ca2e:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 801ca32:	f507 7355 	add.w	r3, r7, #852	; 0x354
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	6013      	str	r3, [r2, #0]
 801ca3a:	f507 7252 	add.w	r2, r7, #840	; 0x348
 801ca3e:	f507 7354 	add.w	r3, r7, #848	; 0x350
 801ca42:	681b      	ldr	r3, [r3, #0]
 801ca44:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ca46:	f507 7252 	add.w	r2, r7, #840	; 0x348
 801ca4a:	f507 7352 	add.w	r3, r7, #840	; 0x348
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	f003 031f 	and.w	r3, r3, #31
 801ca54:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ca56:	f507 7352 	add.w	r3, r7, #840	; 0x348
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d103      	bne.n	801ca68 <arm_nn_mat_mult_nt_t_s8+0x2920>
    return op1;
 801ca60:	f507 7353 	add.w	r3, r7, #844	; 0x34c
 801ca64:	681a      	ldr	r2, [r3, #0]
 801ca66:	e006      	b.n	801ca76 <arm_nn_mat_mult_nt_t_s8+0x292e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ca68:	f507 7253 	add.w	r2, r7, #844	; 0x34c
 801ca6c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 801ca70:	6812      	ldr	r2, [r2, #0]
 801ca72:	681b      	ldr	r3, [r3, #0]
 801ca74:	41da      	rors	r2, r3
 801ca76:	f507 7351 	add.w	r3, r7, #836	; 0x344
 801ca7a:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ca7c:	f507 7351 	add.w	r3, r7, #836	; 0x344
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	fa2f f283 	sxtb16	r2, r3
 801ca86:	f507 7350 	add.w	r3, r7, #832	; 0x340
 801ca8a:	601a      	str	r2, [r3, #0]
  return(result);
 801ca8c:	f507 7350 	add.w	r3, r7, #832	; 0x340
 801ca90:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ca92:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 801ca96:	601a      	str	r2, [r3, #0]
  return result;
 801ca98:	f507 734f 	add.w	r3, r7, #828	; 0x33c
 801ca9c:	681b      	ldr	r3, [r3, #0]
 801ca9e:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801caa2:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801caa6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801caaa:	601a      	str	r2, [r3, #0]
 801caac:	f507 725b 	add.w	r2, r7, #876	; 0x36c
 801cab0:	2308      	movs	r3, #8
 801cab2:	6013      	str	r3, [r2, #0]
 801cab4:	f507 725a 	add.w	r2, r7, #872	; 0x368
 801cab8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	6013      	str	r3, [r2, #0]
 801cac0:	f507 7259 	add.w	r2, r7, #868	; 0x364
 801cac4:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cacc:	f507 7259 	add.w	r2, r7, #868	; 0x364
 801cad0:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	f003 031f 	and.w	r3, r3, #31
 801cada:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cadc:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	2b00      	cmp	r3, #0
 801cae4:	d103      	bne.n	801caee <arm_nn_mat_mult_nt_t_s8+0x29a6>
    return op1;
 801cae6:	f507 735a 	add.w	r3, r7, #872	; 0x368
 801caea:	681a      	ldr	r2, [r3, #0]
 801caec:	e006      	b.n	801cafc <arm_nn_mat_mult_nt_t_s8+0x29b4>
  return (op1 >> op2) | (op1 << (32U - op2));
 801caee:	f507 725a 	add.w	r2, r7, #872	; 0x368
 801caf2:	f507 7359 	add.w	r3, r7, #868	; 0x364
 801caf6:	6812      	ldr	r2, [r2, #0]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	41da      	rors	r2, r3
 801cafc:	f507 7358 	add.w	r3, r7, #864	; 0x360
 801cb00:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cb02:	f507 7358 	add.w	r3, r7, #864	; 0x360
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	fa2f f283 	sxtb16	r2, r3
 801cb0c:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 801cb10:	601a      	str	r2, [r3, #0]
  return(result);
 801cb12:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 801cb16:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cb18:	f507 7356 	add.w	r3, r7, #856	; 0x358
 801cb1c:	601a      	str	r2, [r3, #0]
  return result;
 801cb1e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801cb28:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801cb2c:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801cb30:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801cb34:	f507 7360 	add.w	r3, r7, #896	; 0x380
 801cb38:	601a      	str	r2, [r3, #0]
 801cb3a:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 801cb3e:	6019      	str	r1, [r3, #0]
 801cb40:	f507 735e 	add.w	r3, r7, #888	; 0x378
 801cb44:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cb46:	f507 7360 	add.w	r3, r7, #896	; 0x380
 801cb4a:	6819      	ldr	r1, [r3, #0]
 801cb4c:	f507 735f 	add.w	r3, r7, #892	; 0x37c
 801cb50:	681a      	ldr	r2, [r3, #0]
 801cb52:	f507 735e 	add.w	r3, r7, #888	; 0x378
 801cb56:	681b      	ldr	r3, [r3, #0]
 801cb58:	fb21 3202 	smlad	r2, r1, r2, r3
 801cb5c:	f507 735d 	add.w	r3, r7, #884	; 0x374
 801cb60:	601a      	str	r2, [r3, #0]
  return(result);
 801cb62:	f507 735d 	add.w	r3, r7, #884	; 0x374
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801cb6c:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801cb70:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801cb74:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801cb78:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801cb7c:	601a      	str	r2, [r3, #0]
 801cb7e:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801cb82:	6019      	str	r1, [r3, #0]
 801cb84:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801cb88:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cb8a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801cb8e:	6819      	ldr	r1, [r3, #0]
 801cb90:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 801cb94:	681a      	ldr	r2, [r3, #0]
 801cb96:	f507 7362 	add.w	r3, r7, #904	; 0x388
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	fb21 3202 	smlad	r2, r1, r2, r3
 801cba0:	f507 7361 	add.w	r3, r7, #900	; 0x384
 801cba4:	601a      	str	r2, [r3, #0]
  return(result);
 801cba6:	f507 7361 	add.w	r3, r7, #900	; 0x384
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801cbb0:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801cbb4:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801cbb8:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801cbbc:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 801cbc0:	601a      	str	r2, [r3, #0]
 801cbc2:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 801cbc6:	6019      	str	r1, [r3, #0]
 801cbc8:	f507 7366 	add.w	r3, r7, #920	; 0x398
 801cbcc:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cbce:	f507 7368 	add.w	r3, r7, #928	; 0x3a0
 801cbd2:	6819      	ldr	r1, [r3, #0]
 801cbd4:	f507 7367 	add.w	r3, r7, #924	; 0x39c
 801cbd8:	681a      	ldr	r2, [r3, #0]
 801cbda:	f507 7366 	add.w	r3, r7, #920	; 0x398
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	fb21 3202 	smlad	r2, r1, r2, r3
 801cbe4:	f507 7365 	add.w	r3, r7, #916	; 0x394
 801cbe8:	601a      	str	r2, [r3, #0]
  return(result);
 801cbea:	f507 7365 	add.w	r3, r7, #916	; 0x394
 801cbee:	681b      	ldr	r3, [r3, #0]
 801cbf0:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801cbf4:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801cbf8:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801cbfc:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801cc00:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 801cc04:	601a      	str	r2, [r3, #0]
 801cc06:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 801cc0a:	6019      	str	r1, [r3, #0]
 801cc0c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 801cc10:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cc12:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 801cc16:	6819      	ldr	r1, [r3, #0]
 801cc18:	f507 736b 	add.w	r3, r7, #940	; 0x3ac
 801cc1c:	681a      	ldr	r2, [r3, #0]
 801cc1e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 801cc22:	681b      	ldr	r3, [r3, #0]
 801cc24:	fb21 3202 	smlad	r2, r1, r2, r3
 801cc28:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 801cc2c:	601a      	str	r2, [r3, #0]
  return(result);
 801cc2e:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 801cc32:	681b      	ldr	r3, [r3, #0]
 801cc34:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
 801cc38:	f507 726d 	add.w	r2, r7, #948	; 0x3b4
 801cc3c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801cc40:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cc42:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	461a      	mov	r2, r3
 801cc4e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc52:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801cc54:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	681b      	ldr	r3, [r3, #0]
 801cc5c:	1d1a      	adds	r2, r3, #4
 801cc5e:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	601a      	str	r2, [r3, #0]
    return (val);
 801cc66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801cc6a:	681b      	ldr	r3, [r3, #0]

                val0 = arm_nn_read_q7x4_ia((const q7_t **)&rhs_ptr);
 801cc6c:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val1 = arm_nn_read_q7x4((const q7_t *)&rhs_ptr[off0]);
 801cc70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801cc74:	681a      	ldr	r2, [r3, #0]
 801cc76:	f8d7 39ec 	ldr.w	r3, [r7, #2540]	; 0x9ec
 801cc7a:	441a      	add	r2, r3
 801cc7c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801cc80:	601a      	str	r2, [r3, #0]
 801cc82:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	681b      	ldr	r3, [r3, #0]
 801cc8a:	461a      	mov	r2, r3
    memcpy(&val, in_q7, 4);
 801cc8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801cc90:	601a      	str	r2, [r3, #0]
    return (val);
 801cc92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8
 801cc9c:	f507 726f 	add.w	r2, r7, #956	; 0x3bc
 801cca0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801cca4:	6013      	str	r3, [r2, #0]
    memcpy(&val, *in_q7, 4);
 801cca6:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 801ccaa:	681b      	ldr	r3, [r3, #0]
 801ccac:	681b      	ldr	r3, [r3, #0]
 801ccae:	681b      	ldr	r3, [r3, #0]
 801ccb0:	461a      	mov	r2, r3
 801ccb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ccb6:	601a      	str	r2, [r3, #0]
    *in_q7 += 4;
 801ccb8:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	1d1a      	adds	r2, r3, #4
 801ccc2:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	601a      	str	r2, [r3, #0]
    return (val);
 801ccca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801ccce:	681b      	ldr	r3, [r3, #0]
                val2 = arm_nn_read_q7x4_ia((const q7_t **)&lhs_ptr);
 801ccd0:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val3 = __SXTB16(val0);
 801ccd4:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801ccd8:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 801ccdc:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ccde:	f507 7371 	add.w	r3, r7, #964	; 0x3c4
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	fa2f f283 	sxtb16	r2, r3
 801cce8:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 801ccec:	601a      	str	r2, [r3, #0]
  return(result);
 801ccee:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	f8c7 39d0 	str.w	r3, [r7, #2512]	; 0x9d0
                val5 = __SXTB16(val2);
 801ccf8:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801ccfc:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 801cd00:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd02:	f507 7373 	add.w	r3, r7, #972	; 0x3cc
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	fa2f f283 	sxtb16	r2, r3
 801cd0c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 801cd10:	601a      	str	r2, [r3, #0]
  return(result);
 801cd12:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	f8c7 39cc 	str.w	r3, [r7, #2508]	; 0x9cc
                val4 = __SXTB16(val1);
 801cd1c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801cd20:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 801cd24:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cd26:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	fa2f f283 	sxtb16	r2, r3
 801cd30:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 801cd34:	601a      	str	r2, [r3, #0]
  return(result);
 801cd36:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	f8c7 39c8 	str.w	r3, [r7, #2504]	; 0x9c8
                val0 = __SXTB16_RORn(val0, 8);
 801cd40:	f8d7 29dc 	ldr.w	r2, [r7, #2524]	; 0x9dc
 801cd44:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 801cd48:	601a      	str	r2, [r3, #0]
 801cd4a:	f507 727b 	add.w	r2, r7, #1004	; 0x3ec
 801cd4e:	2308      	movs	r3, #8
 801cd50:	6013      	str	r3, [r2, #0]
 801cd52:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 801cd56:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 801cd5a:	681b      	ldr	r3, [r3, #0]
 801cd5c:	6013      	str	r3, [r2, #0]
 801cd5e:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 801cd62:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cd6a:	f507 7279 	add.w	r2, r7, #996	; 0x3e4
 801cd6e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 801cd72:	681b      	ldr	r3, [r3, #0]
 801cd74:	f003 031f 	and.w	r3, r3, #31
 801cd78:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801cd7a:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d103      	bne.n	801cd8c <arm_nn_mat_mult_nt_t_s8+0x2c44>
    return op1;
 801cd84:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 801cd88:	681a      	ldr	r2, [r3, #0]
 801cd8a:	e006      	b.n	801cd9a <arm_nn_mat_mult_nt_t_s8+0x2c52>
  return (op1 >> op2) | (op1 << (32U - op2));
 801cd8c:	f507 727a 	add.w	r2, r7, #1000	; 0x3e8
 801cd90:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 801cd94:	6812      	ldr	r2, [r2, #0]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	41da      	rors	r2, r3
 801cd9a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801cd9e:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801cda0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	fa2f f283 	sxtb16	r2, r3
 801cdaa:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 801cdae:	601a      	str	r2, [r3, #0]
  return(result);
 801cdb0:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 801cdb4:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cdb6:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 801cdba:	601a      	str	r2, [r3, #0]
  return result;
 801cdbc:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	f8c7 39dc 	str.w	r3, [r7, #2524]	; 0x9dc
                val2 = __SXTB16_RORn(val2, 8);
 801cdc6:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801cdca:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 801cdce:	601a      	str	r2, [r3, #0]
 801cdd0:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 801cdd4:	2308      	movs	r3, #8
 801cdd6:	6013      	str	r3, [r2, #0]
 801cdd8:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801cddc:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 801cde0:	681b      	ldr	r3, [r3, #0]
 801cde2:	6013      	str	r3, [r2, #0]
 801cde4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 801cde8:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801cdf0:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 801cdf4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f003 031f 	and.w	r3, r3, #31
 801cdfe:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ce00:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d103      	bne.n	801ce12 <arm_nn_mat_mult_nt_t_s8+0x2cca>
    return op1;
 801ce0a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 801ce0e:	681a      	ldr	r2, [r3, #0]
 801ce10:	e006      	b.n	801ce20 <arm_nn_mat_mult_nt_t_s8+0x2cd8>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ce12:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801ce16:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 801ce1a:	6812      	ldr	r2, [r2, #0]
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	41da      	rors	r2, r3
 801ce20:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 801ce24:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ce26:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	fa2f f283 	sxtb16	r2, r3
 801ce30:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 801ce34:	601a      	str	r2, [r3, #0]
  return(result);
 801ce36:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 801ce3a:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801ce3c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 801ce40:	601a      	str	r2, [r3, #0]
  return result;
 801ce42:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 801ce46:	681b      	ldr	r3, [r3, #0]
 801ce48:	f8c7 39d4 	str.w	r3, [r7, #2516]	; 0x9d4
                val1 = __SXTB16_RORn(val1, 8);
 801ce4c:	f8d7 29d8 	ldr.w	r2, [r7, #2520]	; 0x9d8
 801ce50:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801ce54:	601a      	str	r2, [r3, #0]
 801ce56:	f207 4224 	addw	r2, r7, #1060	; 0x424
 801ce5a:	2308      	movs	r3, #8
 801ce5c:	6013      	str	r3, [r2, #0]
 801ce5e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 801ce62:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	6013      	str	r3, [r2, #0]
 801ce6a:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 801ce6e:	f207 4324 	addw	r3, r7, #1060	; 0x424
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	6013      	str	r3, [r2, #0]
  op2 %= 32U;
 801ce76:	f207 421c 	addw	r2, r7, #1052	; 0x41c
 801ce7a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 801ce7e:	681b      	ldr	r3, [r3, #0]
 801ce80:	f003 031f 	and.w	r3, r3, #31
 801ce84:	6013      	str	r3, [r2, #0]
  if (op2 == 0U)
 801ce86:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d103      	bne.n	801ce98 <arm_nn_mat_mult_nt_t_s8+0x2d50>
    return op1;
 801ce90:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 801ce94:	681a      	ldr	r2, [r3, #0]
 801ce96:	e006      	b.n	801cea6 <arm_nn_mat_mult_nt_t_s8+0x2d5e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801ce98:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 801ce9c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 801cea0:	6812      	ldr	r2, [r2, #0]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	41da      	rors	r2, r3
 801cea6:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801ceaa:	601a      	str	r2, [r3, #0]
  __ASM ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 801ceac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	fa2f f283 	sxtb16	r2, r3
 801ceb6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 801ceba:	601a      	str	r2, [r3, #0]
  return(result);
 801cebc:	f207 4314 	addw	r3, r7, #1044	; 0x414
 801cec0:	681a      	ldr	r2, [r3, #0]
    result = __SXTB16(__ROR(op1, rotate)) ;
 801cec2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801cec6:	601a      	str	r2, [r3, #0]
  return result;
 801cec8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f8c7 39d8 	str.w	r3, [r7, #2520]	; 0x9d8

                // 4 x MAC res00, res01
                res00 = __SMLAD(val5, val3, res00);
 801ced2:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801ced6:	f8d7 19d0 	ldr.w	r1, [r7, #2512]	; 0x9d0
 801ceda:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801cede:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 801cee2:	601a      	str	r2, [r3, #0]
 801cee4:	f207 4334 	addw	r3, r7, #1076	; 0x434
 801cee8:	6019      	str	r1, [r3, #0]
 801ceea:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801ceee:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cef0:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 801cef4:	6819      	ldr	r1, [r3, #0]
 801cef6:	f207 4334 	addw	r3, r7, #1076	; 0x434
 801cefa:	681a      	ldr	r2, [r3, #0]
 801cefc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 801cf00:	681b      	ldr	r3, [r3, #0]
 801cf02:	fb21 3202 	smlad	r2, r1, r2, r3
 801cf06:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 801cf0a:	601a      	str	r2, [r3, #0]
  return(result);
 801cf0c:	f207 432c 	addw	r3, r7, #1068	; 0x42c
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res00 = __SMLAD(val2, val0, res00);
 801cf16:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801cf1a:	f8d7 19dc 	ldr.w	r1, [r7, #2524]	; 0x9dc
 801cf1e:	f8d7 0a10 	ldr.w	r0, [r7, #2576]	; 0xa10
 801cf22:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801cf26:	601a      	str	r2, [r3, #0]
 801cf28:	f207 4344 	addw	r3, r7, #1092	; 0x444
 801cf2c:	6019      	str	r1, [r3, #0]
 801cf2e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801cf32:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cf34:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 801cf38:	6819      	ldr	r1, [r3, #0]
 801cf3a:	f207 4344 	addw	r3, r7, #1092	; 0x444
 801cf3e:	681a      	ldr	r2, [r3, #0]
 801cf40:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	fb21 3202 	smlad	r2, r1, r2, r3
 801cf4a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 801cf4e:	601a      	str	r2, [r3, #0]
  return(result);
 801cf50:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 = __SMLAD(val5, val4, res01);
 801cf5a:	f8d7 29cc 	ldr.w	r2, [r7, #2508]	; 0x9cc
 801cf5e:	f8d7 19c8 	ldr.w	r1, [r7, #2504]	; 0x9c8
 801cf62:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801cf66:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 801cf6a:	601a      	str	r2, [r3, #0]
 801cf6c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 801cf70:	6019      	str	r1, [r3, #0]
 801cf72:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801cf76:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cf78:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 801cf7c:	6819      	ldr	r1, [r3, #0]
 801cf7e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 801cf82:	681a      	ldr	r2, [r3, #0]
 801cf84:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	fb21 3202 	smlad	r2, r1, r2, r3
 801cf8e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 801cf92:	601a      	str	r2, [r3, #0]
  return(result);
 801cf94:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 801cf98:	681b      	ldr	r3, [r3, #0]
 801cf9a:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
                res01 = __SMLAD(val2, val1, res01);
 801cf9e:	f8d7 29d4 	ldr.w	r2, [r7, #2516]	; 0x9d4
 801cfa2:	f8d7 19d8 	ldr.w	r1, [r7, #2520]	; 0x9d8
 801cfa6:	f8d7 0a0c 	ldr.w	r0, [r7, #2572]	; 0xa0c
 801cfaa:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801cfae:	601a      	str	r2, [r3, #0]
 801cfb0:	f207 4364 	addw	r3, r7, #1124	; 0x464
 801cfb4:	6019      	str	r1, [r3, #0]
 801cfb6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801cfba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 801cfbc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801cfc0:	6819      	ldr	r1, [r3, #0]
 801cfc2:	f207 4364 	addw	r3, r7, #1124	; 0x464
 801cfc6:	681a      	ldr	r2, [r3, #0]
 801cfc8:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	fb21 3202 	smlad	r2, r1, r2, r3
 801cfd2:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 801cfd6:	601a      	str	r2, [r3, #0]
  return(result);
 801cfd8:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 801cfdc:	681b      	ldr	r3, [r3, #0]
 801cfde:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 801cfe2:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801cfe6:	3310      	adds	r3, #16
 801cfe8:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 801cfec:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801cff0:	f1a3 020f 	sub.w	r2, r3, #15
 801cff4:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801cff8:	4293      	cmp	r3, r2
 801cffa:	f6ff a89e 	blt.w	801c13a <arm_nn_mat_mult_nt_t_s8+0x1ff2>
            }

            // Left-over accumulations
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801cffe:	e03d      	b.n	801d07c <arm_nn_mat_mult_nt_t_s8+0x2f34>
            {
                q7_t rhs_value0 = rhs_ptr[0];
 801d000:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	781b      	ldrb	r3, [r3, #0]
 801d008:	f887 39e3 	strb.w	r3, [r7, #2531]	; 0x9e3
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 801d00c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d010:	681a      	ldr	r2, [r3, #0]
 801d012:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801d016:	4413      	add	r3, r2
 801d018:	781b      	ldrb	r3, [r3, #0]
 801d01a:	f887 39e2 	strb.w	r3, [r7, #2530]	; 0x9e2
                q7_t lhs_value = lhs_ptr[0];
 801d01e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	781b      	ldrb	r3, [r3, #0]
 801d026:	f887 39e1 	strb.w	r3, [r7, #2529]	; 0x9e1

                res00 += lhs_value * rhs_value0;
 801d02a:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 801d02e:	f997 39e3 	ldrsb.w	r3, [r7, #2531]	; 0x9e3
 801d032:	fb03 f202 	mul.w	r2, r3, r2
 801d036:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 801d03a:	4413      	add	r3, r2
 801d03c:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
                res01 += lhs_value * rhs_value1;
 801d040:	f997 29e1 	ldrsb.w	r2, [r7, #2529]	; 0x9e1
 801d044:	f997 39e2 	ldrsb.w	r3, [r7, #2530]	; 0x9e2
 801d048:	fb03 f202 	mul.w	r2, r3, r2
 801d04c:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 801d050:	4413      	add	r3, r2
 801d052:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

                ++rhs_ptr;
 801d056:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	1c5a      	adds	r2, r3, #1
 801d05e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801d062:	601a      	str	r2, [r3, #0]
                ++lhs_ptr;
 801d064:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	1c5a      	adds	r2, r3, #1
 801d06c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d070:	601a      	str	r2, [r3, #0]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d072:	f8d7 3a08 	ldr.w	r3, [r7, #2568]	; 0xa08
 801d076:	3301      	adds	r3, #1
 801d078:	f8c7 3a08 	str.w	r3, [r7, #2568]	; 0xa08
 801d07c:	f8d7 2a08 	ldr.w	r2, [r7, #2568]	; 0xa08
 801d080:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801d084:	429a      	cmp	r2, r3
 801d086:	dbbb      	blt.n	801d000 <arm_nn_mat_mult_nt_t_s8+0x2eb8>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx], dst_shifts[rhs_rows_idx]);
 801d088:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d08c:	009a      	lsls	r2, r3, #2
 801d08e:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801d092:	4413      	add	r3, r2
 801d094:	6818      	ldr	r0, [r3, #0]
 801d096:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d09a:	009a      	lsls	r2, r3, #2
 801d09c:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801d0a0:	4413      	add	r3, r2
 801d0a2:	6819      	ldr	r1, [r3, #0]
 801d0a4:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 801d0a8:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 801d0ac:	6013      	str	r3, [r2, #0]
 801d0ae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d0b2:	6018      	str	r0, [r3, #0]
 801d0b4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d0b8:	6019      	str	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d0ba:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d0c4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	fa03 f202 	lsl.w	r2, r3, r2
 801d0ce:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d0d2:	601a      	str	r2, [r3, #0]
 801d0d4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 801d0d8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d0e0:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d0e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d0ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d0f0:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801d0f2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d0f6:	2300      	movs	r3, #0
 801d0f8:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d0fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d0fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d102:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 801d106:	681b      	ldr	r3, [r3, #0]
 801d108:	4618      	mov	r0, r3
 801d10a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d10e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	461a      	mov	r2, r3
 801d116:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d11a:	fb02 f501 	mul.w	r5, r2, r1
 801d11e:	fb00 f403 	mul.w	r4, r0, r3
 801d122:	442c      	add	r4, r5
 801d124:	fba0 2302 	umull	r2, r3, r0, r2
 801d128:	18e1      	adds	r1, r4, r3
 801d12a:	460b      	mov	r3, r1
 801d12c:	eb18 0102 	adds.w	r1, r8, r2
 801d130:	6039      	str	r1, [r7, #0]
 801d132:	eb49 0303 	adc.w	r3, r9, r3
 801d136:	607b      	str	r3, [r7, #4]
 801d138:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d13c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d140:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d144:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d14c:	f04f 0000 	mov.w	r0, #0
 801d150:	f04f 0100 	mov.w	r1, #0
 801d154:	0fd0      	lsrs	r0, r2, #31
 801d156:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d15a:	17d9      	asrs	r1, r3, #31
 801d15c:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 801d160:	4603      	mov	r3, r0
 801d162:	6013      	str	r3, [r2, #0]
    return result;
 801d164:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 801d168:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d16a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	2b00      	cmp	r3, #0
 801d172:	dc04      	bgt.n	801d17e <arm_nn_mat_mult_nt_t_s8+0x3036>
 801d174:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	425a      	negs	r2, r3
 801d17c:	e000      	b.n	801d180 <arm_nn_mat_mult_nt_t_s8+0x3038>
 801d17e:	2200      	movs	r2, #0
 801d180:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801d184:	6019      	str	r1, [r3, #0]
 801d186:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d18a:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d18c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801d190:	2300      	movs	r3, #0
 801d192:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d194:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d198:	2201      	movs	r2, #1
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	fa02 f303 	lsl.w	r3, r2, r3
 801d1a0:	f507 729a 	add.w	r2, r7, #308	; 0x134
 801d1a4:	3b01      	subs	r3, #1
 801d1a6:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d1a8:	f507 7198 	add.w	r1, r7, #304	; 0x130
 801d1ac:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801d1b0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d1b4:	6812      	ldr	r2, [r2, #0]
 801d1b6:	681b      	ldr	r3, [r3, #0]
 801d1b8:	4013      	ands	r3, r2
 801d1ba:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d1bc:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801d1c0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801d1c4:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801d1c8:	6812      	ldr	r2, [r2, #0]
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	fa42 f303 	asr.w	r3, r2, r3
 801d1d0:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d1d2:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801d1d6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 801d1da:	681b      	ldr	r3, [r3, #0]
 801d1dc:	105b      	asrs	r3, r3, #1
 801d1de:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d1e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	da06      	bge.n	801d1f8 <arm_nn_mat_mult_nt_t_s8+0x30b0>
        threshold++;
 801d1ea:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 801d1ee:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	3301      	adds	r3, #1
 801d1f6:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d1f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801d1fc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 801d200:	6812      	ldr	r2, [r2, #0]
 801d202:	681b      	ldr	r3, [r3, #0]
 801d204:	429a      	cmp	r2, r3
 801d206:	dd06      	ble.n	801d216 <arm_nn_mat_mult_nt_t_s8+0x30ce>
        result++;
 801d208:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801d20c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	3301      	adds	r3, #1
 801d214:	6013      	str	r3, [r2, #0]
    return result;
 801d216:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801d21a:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d21c:	bf00      	nop
 801d21e:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 801d222:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d226:	3301      	adds	r3, #1
 801d228:	009a      	lsls	r2, r3, #2
 801d22a:	f8d7 3a60 	ldr.w	r3, [r7, #2656]	; 0xa60
 801d22e:	4413      	add	r3, r2
 801d230:	6818      	ldr	r0, [r3, #0]
 801d232:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d236:	3301      	adds	r3, #1
 801d238:	009a      	lsls	r2, r3, #2
 801d23a:	f8d7 3a64 	ldr.w	r3, [r7, #2660]	; 0xa64
 801d23e:	4413      	add	r3, r2
 801d240:	6819      	ldr	r1, [r3, #0]
 801d242:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 801d246:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 801d24a:	6013      	str	r3, [r2, #0]
 801d24c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d250:	6018      	str	r0, [r3, #0]
 801d252:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d256:	6019      	str	r1, [r3, #0]
 801d258:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 801d262:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	fa03 f202 	lsl.w	r2, r3, r2
 801d26c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d270:	601a      	str	r2, [r3, #0]
 801d272:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 801d276:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d27e:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801d282:	2300      	movs	r3, #0
 801d284:	6013      	str	r3, [r2, #0]
    mult.word.low = 1 << 30;
 801d286:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d28a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801d28e:	6013      	str	r3, [r2, #0]
    mult.word.high = 0;
 801d290:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801d294:	2300      	movs	r3, #0
 801d296:	6053      	str	r3, [r2, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d298:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d29c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d2a0:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d2ac:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	461a      	mov	r2, r3
 801d2b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d2b8:	fb02 f501 	mul.w	r5, r2, r1
 801d2bc:	fb00 f403 	mul.w	r4, r0, r3
 801d2c0:	442c      	add	r4, r5
 801d2c2:	fba0 2302 	umull	r2, r3, r0, r2
 801d2c6:	18e1      	adds	r1, r4, r3
 801d2c8:	460b      	mov	r3, r1
 801d2ca:	eb18 0102 	adds.w	r1, r8, r2
 801d2ce:	60b9      	str	r1, [r7, #8]
 801d2d0:	eb49 0303 	adc.w	r3, r9, r3
 801d2d4:	60fb      	str	r3, [r7, #12]
 801d2d6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d2da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d2de:	e9c3 1200 	strd	r1, r2, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d2e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2ea:	f04f 0000 	mov.w	r0, #0
 801d2ee:	f04f 0100 	mov.w	r1, #0
 801d2f2:	0fd0      	lsrs	r0, r2, #31
 801d2f4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 801d2f8:	17d9      	asrs	r1, r3, #31
 801d2fa:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 801d2fe:	4603      	mov	r3, r0
 801d300:	6013      	str	r3, [r2, #0]
    return result;
 801d302:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 801d306:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d308:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d30c:	681b      	ldr	r3, [r3, #0]
 801d30e:	2b00      	cmp	r3, #0
 801d310:	dc04      	bgt.n	801d31c <arm_nn_mat_mult_nt_t_s8+0x31d4>
 801d312:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	425a      	negs	r2, r3
 801d31a:	e000      	b.n	801d31e <arm_nn_mat_mult_nt_t_s8+0x31d6>
 801d31c:	2200      	movs	r2, #0
 801d31e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801d322:	6019      	str	r1, [r3, #0]
 801d324:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d328:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d32a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 801d32e:	2300      	movs	r3, #0
 801d330:	6013      	str	r3, [r2, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d332:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d336:	2201      	movs	r2, #1
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	fa02 f303 	lsl.w	r3, r2, r3
 801d33e:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 801d342:	3b01      	subs	r3, #1
 801d344:	6013      	str	r3, [r2, #0]
    int32_t remainder = remainder_mask & dividend;
 801d346:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 801d34a:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801d34e:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d352:	6812      	ldr	r2, [r2, #0]
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	4013      	ands	r3, r2
 801d358:	600b      	str	r3, [r1, #0]
    result = dividend >> exponent;
 801d35a:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 801d35e:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 801d362:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 801d366:	6812      	ldr	r2, [r2, #0]
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	fa42 f303 	asr.w	r3, r2, r3
 801d36e:	600b      	str	r3, [r1, #0]
    q31_t threshold = remainder_mask >> 1;
 801d370:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801d374:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	105b      	asrs	r3, r3, #1
 801d37c:	6013      	str	r3, [r2, #0]
    if (result < 0)
 801d37e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	2b00      	cmp	r3, #0
 801d386:	da06      	bge.n	801d396 <arm_nn_mat_mult_nt_t_s8+0x324e>
        threshold++;
 801d388:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 801d38c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	3301      	adds	r3, #1
 801d394:	6013      	str	r3, [r2, #0]
    if (remainder > threshold)
 801d396:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801d39a:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 801d39e:	6812      	ldr	r2, [r2, #0]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	429a      	cmp	r2, r3
 801d3a4:	dd06      	ble.n	801d3b4 <arm_nn_mat_mult_nt_t_s8+0x326c>
        result++;
 801d3a6:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 801d3aa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	3301      	adds	r3, #1
 801d3b2:	6013      	str	r3, [r2, #0]
    return result;
 801d3b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801d3b8:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d3ba:	bf00      	nop
 801d3bc:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Add offset
            res00 += dst_offset;
 801d3c0:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 801d3c4:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801d3c8:	4413      	add	r3, r2
 801d3ca:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 += dst_offset;
 801d3ce:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801d3d2:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801d3d6:	4413      	add	r3, r2
 801d3d8:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801d3dc:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 801d3e0:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801d3e4:	4293      	cmp	r3, r2
 801d3e6:	bfb8      	it	lt
 801d3e8:	4613      	movlt	r3, r2
 801d3ea:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res00 = MIN(res00, activation_max);
 801d3ee:	f8d7 2a10 	ldr.w	r2, [r7, #2576]	; 0xa10
 801d3f2:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801d3f6:	4293      	cmp	r3, r2
 801d3f8:	bfa8      	it	ge
 801d3fa:	4613      	movge	r3, r2
 801d3fc:	f8c7 3a10 	str.w	r3, [r7, #2576]	; 0xa10
            res01 = MAX(res01, activation_min);
 801d400:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801d404:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801d408:	4293      	cmp	r3, r2
 801d40a:	bfb8      	it	lt
 801d40c:	4613      	movlt	r3, r2
 801d40e:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c
            res01 = MIN(res01, activation_max);
 801d412:	f8d7 2a0c 	ldr.w	r2, [r7, #2572]	; 0xa0c
 801d416:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801d41a:	4293      	cmp	r3, r2
 801d41c:	bfa8      	it	ge
 801d41e:	4613      	movge	r3, r2
 801d420:	f8c7 3a0c 	str.w	r3, [r7, #2572]	; 0xa0c

            dst_ptr[0] = (q7_t)res00;
 801d424:	f8d7 3a10 	ldr.w	r3, [r7, #2576]	; 0xa10
 801d428:	b25b      	sxtb	r3, r3
 801d42a:	f8d7 2a38 	ldr.w	r2, [r7, #2616]	; 0xa38
 801d42e:	7013      	strb	r3, [r2, #0]
            dst_ptr[1] = (q7_t)res01;
 801d430:	f8d7 3a38 	ldr.w	r3, [r7, #2616]	; 0xa38
 801d434:	1c5a      	adds	r2, r3, #1
 801d436:	f8d7 3a0c 	ldr.w	r3, [r7, #2572]	; 0xa0c
 801d43a:	b25b      	sxtb	r3, r3
 801d43c:	7013      	strb	r3, [r2, #0]
        }

        rhs += 2 * rhs_cols;
 801d43e:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801d442:	005b      	lsls	r3, r3, #1
 801d444:	4619      	mov	r1, r3
 801d446:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801d44a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	440b      	add	r3, r1
 801d452:	6013      	str	r3, [r2, #0]
        dst += 2;
 801d454:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801d458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	3302      	adds	r3, #2
 801d460:	6013      	str	r3, [r2, #0]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 801d462:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d466:	3302      	adds	r3, #2
 801d468:	f8c7 3a3c 	str.w	r3, [r7, #2620]	; 0xa3c
 801d46c:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d470:	1e5a      	subs	r2, r3, #1
 801d472:	f8d7 3a3c 	ldr.w	r3, [r7, #2620]	; 0xa3c
 801d476:	4293      	cmp	r3, r2
 801d478:	f6fc ae81 	blt.w	801a17e <arm_nn_mat_mult_nt_t_s8+0x36>
    }

    if (rhs_rows % 2)
 801d47c:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d480:	f003 0301 	and.w	r3, r3, #1
 801d484:	2b00      	cmp	r3, #0
 801d486:	f000 815b 	beq.w	801d740 <arm_nn_mat_mult_nt_t_s8+0x35f8>
    {
        const q7_t *lhs_ptr = &lhs[0];
 801d48a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
        q7_t *dst_ptr = &dst[0];
 801d494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801d49e:	2300      	movs	r3, #0
 801d4a0:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 801d4a4:	e145      	b.n	801d732 <arm_nn_mat_mult_nt_t_s8+0x35ea>
        {
            const q7_t *rhs_ptr = &rhs[0];
 801d4a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
            q31_t res00 = 0;
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            if (bias)
 801d4b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	2b00      	cmp	r3, #0
 801d4be:	d00c      	beq.n	801d4da <arm_nn_mat_mult_nt_t_s8+0x3392>
            {
                res00 = bias[rhs_rows - 1];
 801d4c0:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d4c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d4c8:	3b01      	subs	r3, #1
 801d4ca:	009b      	lsls	r3, r3, #2
 801d4cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801d4d0:	6812      	ldr	r2, [r2, #0]
 801d4d2:	4413      	add	r3, r2
 801d4d4:	681b      	ldr	r3, [r3, #0]
 801d4d6:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            }

            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d4da:	2300      	movs	r3, #0
 801d4dc:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 801d4e0:	e029      	b.n	801d536 <arm_nn_mat_mult_nt_t_s8+0x33ee>
            {
                q31_t rhs_value = rhs_ptr[0];
 801d4e2:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801d4e6:	f993 3000 	ldrsb.w	r3, [r3]
 801d4ea:	f8c7 39e8 	str.w	r3, [r7, #2536]	; 0x9e8
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 801d4ee:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 801d4f2:	f993 3000 	ldrsb.w	r3, [r3]
 801d4f6:	461a      	mov	r2, r3
 801d4f8:	f8d7 3a74 	ldr.w	r3, [r7, #2676]	; 0xa74
 801d4fc:	4413      	add	r3, r2
 801d4fe:	f8c7 39e4 	str.w	r3, [r7, #2532]	; 0x9e4

                res00 += lhs_value * rhs_value;
 801d502:	f8d7 39e4 	ldr.w	r3, [r7, #2532]	; 0x9e4
 801d506:	f8d7 29e8 	ldr.w	r2, [r7, #2536]	; 0x9e8
 801d50a:	fb02 f303 	mul.w	r3, r2, r3
 801d50e:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 801d512:	4413      	add	r3, r2
 801d514:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

                ++rhs_ptr;
 801d518:	f8d7 39f8 	ldr.w	r3, [r7, #2552]	; 0x9f8
 801d51c:	3301      	adds	r3, #1
 801d51e:	f8c7 39f8 	str.w	r3, [r7, #2552]	; 0x9f8
                ++lhs_ptr;
 801d522:	f8d7 3a04 	ldr.w	r3, [r7, #2564]	; 0xa04
 801d526:	3301      	adds	r3, #1
 801d528:	f8c7 3a04 	str.w	r3, [r7, #2564]	; 0xa04
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 801d52c:	f8d7 39f0 	ldr.w	r3, [r7, #2544]	; 0x9f0
 801d530:	3301      	adds	r3, #1
 801d532:	f8c7 39f0 	str.w	r3, [r7, #2544]	; 0x9f0
 801d536:	f8d7 29f0 	ldr.w	r2, [r7, #2544]	; 0x9f0
 801d53a:	f8d7 3a70 	ldr.w	r3, [r7, #2672]	; 0xa70
 801d53e:	429a      	cmp	r2, r3
 801d540:	dbcf      	blt.n	801d4e2 <arm_nn_mat_mult_nt_t_s8+0x339a>
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 801d542:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d546:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d54a:	3b01      	subs	r3, #1
 801d54c:	009b      	lsls	r3, r3, #2
 801d54e:	f8d7 2a60 	ldr.w	r2, [r7, #2656]	; 0xa60
 801d552:	4413      	add	r3, r2
 801d554:	6819      	ldr	r1, [r3, #0]
 801d556:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d55a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801d55e:	3b01      	subs	r3, #1
 801d560:	009b      	lsls	r3, r3, #2
 801d562:	f8d7 2a64 	ldr.w	r2, [r7, #2660]	; 0xa64
 801d566:	4413      	add	r3, r2
 801d568:	681a      	ldr	r2, [r3, #0]
 801d56a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d56e:	f8d7 09f4 	ldr.w	r0, [r7, #2548]	; 0x9f4
 801d572:	6018      	str	r0, [r3, #0]
 801d574:	f507 7392 	add.w	r3, r7, #292	; 0x124
 801d578:	6019      	str	r1, [r3, #0]
 801d57a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d57e:	601a      	str	r2, [r3, #0]
 801d580:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d58a:	f507 7294 	add.w	r2, r7, #296	; 0x128
 801d58e:	6812      	ldr	r2, [r2, #0]
 801d590:	409a      	lsls	r2, r3
 801d592:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d596:	601a      	str	r2, [r3, #0]
 801d598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d59c:	f507 7292 	add.w	r2, r7, #292	; 0x124
 801d5a0:	6812      	ldr	r2, [r2, #0]
 801d5a2:	601a      	str	r2, [r3, #0]
    q31_t result = 0;
 801d5a4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	601a      	str	r2, [r3, #0]
    mult.word.low = 1 << 30;
 801d5ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d5b4:	601a      	str	r2, [r3, #0]
    mult.word.high = 0;
 801d5b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5ba:	2200      	movs	r2, #0
 801d5bc:	605a      	str	r2, [r3, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 801d5be:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 801d5c6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 801d5ca:	681b      	ldr	r3, [r3, #0]
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801d5d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d5d6:	681b      	ldr	r3, [r3, #0]
 801d5d8:	461a      	mov	r2, r3
 801d5da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801d5de:	fb02 fc01 	mul.w	ip, r2, r1
 801d5e2:	fb00 f603 	mul.w	r6, r0, r3
 801d5e6:	4466      	add	r6, ip
 801d5e8:	fba0 2302 	umull	r2, r3, r0, r2
 801d5ec:	18f1      	adds	r1, r6, r3
 801d5ee:	460b      	mov	r3, r1
 801d5f0:	eb14 0a02 	adds.w	sl, r4, r2
 801d5f4:	eb45 0b03 	adc.w	fp, r5, r3
 801d5f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d5fc:	e9c3 ab00 	strd	sl, fp, [r3]
    result = (int32_t)(mult.long_long >> 31);
 801d600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d604:	e9d3 0100 	ldrd	r0, r1, [r3]
 801d608:	f04f 0200 	mov.w	r2, #0
 801d60c:	f04f 0300 	mov.w	r3, #0
 801d610:	0fc2      	lsrs	r2, r0, #31
 801d612:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 801d616:	17cb      	asrs	r3, r1, #31
 801d618:	f507 718a 	add.w	r1, r7, #276	; 0x114
 801d61c:	4613      	mov	r3, r2
 801d61e:	600b      	str	r3, [r1, #0]
    return result;
 801d620:	f507 738a 	add.w	r3, r7, #276	; 0x114
 801d624:	6819      	ldr	r1, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d62a:	681b      	ldr	r3, [r3, #0]
 801d62c:	2b00      	cmp	r3, #0
 801d62e:	dc04      	bgt.n	801d63a <arm_nn_mat_mult_nt_t_s8+0x34f2>
 801d630:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d634:	681b      	ldr	r3, [r3, #0]
 801d636:	425b      	negs	r3, r3
 801d638:	e000      	b.n	801d63c <arm_nn_mat_mult_nt_t_s8+0x34f4>
 801d63a:	2300      	movs	r3, #0
 801d63c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 801d640:	6011      	str	r1, [r2, #0]
 801d642:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801d646:	6013      	str	r3, [r2, #0]
    q31_t result = 0;
 801d648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d64c:	2200      	movs	r2, #0
 801d64e:	601a      	str	r2, [r3, #0]
    const q31_t remainder_mask = (1 << exponent) - 1;
 801d650:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801d654:	2201      	movs	r2, #1
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	409a      	lsls	r2, r3
 801d65a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 801d65e:	3a01      	subs	r2, #1
 801d660:	601a      	str	r2, [r3, #0]
    int32_t remainder = remainder_mask & dividend;
 801d662:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d666:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801d66a:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801d66e:	6809      	ldr	r1, [r1, #0]
 801d670:	6812      	ldr	r2, [r2, #0]
 801d672:	400a      	ands	r2, r1
 801d674:	601a      	str	r2, [r3, #0]
    result = dividend >> exponent;
 801d676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d67a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 801d67e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 801d682:	6809      	ldr	r1, [r1, #0]
 801d684:	6812      	ldr	r2, [r2, #0]
 801d686:	fa41 f202 	asr.w	r2, r1, r2
 801d68a:	601a      	str	r2, [r3, #0]
    q31_t threshold = remainder_mask >> 1;
 801d68c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d690:	f507 7282 	add.w	r2, r7, #260	; 0x104
 801d694:	6812      	ldr	r2, [r2, #0]
 801d696:	1052      	asrs	r2, r2, #1
 801d698:	601a      	str	r2, [r3, #0]
    if (result < 0)
 801d69a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	da06      	bge.n	801d6b2 <arm_nn_mat_mult_nt_t_s8+0x356a>
        threshold++;
 801d6a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d6a8:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 801d6ac:	6812      	ldr	r2, [r2, #0]
 801d6ae:	3201      	adds	r2, #1
 801d6b0:	601a      	str	r2, [r3, #0]
    if (remainder > threshold)
 801d6b2:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d6b6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 801d6ba:	6812      	ldr	r2, [r2, #0]
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	429a      	cmp	r2, r3
 801d6c0:	dd06      	ble.n	801d6d0 <arm_nn_mat_mult_nt_t_s8+0x3588>
        result++;
 801d6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d6c6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d6ca:	6812      	ldr	r2, [r2, #0]
 801d6cc:	3201      	adds	r2, #1
 801d6ce:	601a      	str	r2, [r3, #0]
    return result;
 801d6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d6d4:	681b      	ldr	r3, [r3, #0]
    return arm_nn_divide_by_power_of_two(arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 801d6d6:	bf00      	nop
 801d6d8:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Add offset
            res00 += dst_offset;
 801d6dc:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 801d6e0:	f8d7 3a78 	ldr.w	r3, [r7, #2680]	; 0xa78
 801d6e4:	4413      	add	r3, r2
 801d6e6:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            // Clamp the result
            res00 = MAX(res00, activation_min);
 801d6ea:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 801d6ee:	f8d7 3a7c 	ldr.w	r3, [r7, #2684]	; 0xa7c
 801d6f2:	4293      	cmp	r3, r2
 801d6f4:	bfb8      	it	lt
 801d6f6:	4613      	movlt	r3, r2
 801d6f8:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4
            res00 = MIN(res00, activation_max);
 801d6fc:	f8d7 29f4 	ldr.w	r2, [r7, #2548]	; 0x9f4
 801d700:	f8d7 3a80 	ldr.w	r3, [r7, #2688]	; 0xa80
 801d704:	4293      	cmp	r3, r2
 801d706:	bfa8      	it	ge
 801d708:	4613      	movge	r3, r2
 801d70a:	f8c7 39f4 	str.w	r3, [r7, #2548]	; 0x9f4

            dst_ptr[0] = (q7_t)res00;
 801d70e:	f8d7 39f4 	ldr.w	r3, [r7, #2548]	; 0x9f4
 801d712:	b25a      	sxtb	r2, r3
 801d714:	f8d7 3a00 	ldr.w	r3, [r7, #2560]	; 0xa00
 801d718:	701a      	strb	r2, [r3, #0]
            dst_ptr += rhs_rows;
 801d71a:	f8d7 3a6c 	ldr.w	r3, [r7, #2668]	; 0xa6c
 801d71e:	f8d7 2a00 	ldr.w	r2, [r7, #2560]	; 0xa00
 801d722:	4413      	add	r3, r2
 801d724:	f8c7 3a00 	str.w	r3, [r7, #2560]	; 0xa00
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 801d728:	f8d7 39fc 	ldr.w	r3, [r7, #2556]	; 0x9fc
 801d72c:	3301      	adds	r3, #1
 801d72e:	f8c7 39fc 	str.w	r3, [r7, #2556]	; 0x9fc
 801d732:	f8d7 29fc 	ldr.w	r2, [r7, #2556]	; 0x9fc
 801d736:	f8d7 3a68 	ldr.w	r3, [r7, #2664]	; 0xa68
 801d73a:	429a      	cmp	r2, r3
 801d73c:	f6ff aeb3 	blt.w	801d4a6 <arm_nn_mat_mult_nt_t_s8+0x335e>
            dst_ptr[0] = (q7_t)res00;
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
 801d740:	2300      	movs	r3, #0
}
 801d742:	4618      	mov	r0, r3
 801d744:	f507 6724 	add.w	r7, r7, #2624	; 0xa40
 801d748:	46bd      	mov	sp, r7
 801d74a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 801d74e:	4770      	bx	lr

0801d750 <arm_q7_to_q15_with_offset>:
 * @addtogroup nndata_convert
 * @{
 */

void arm_q7_to_q15_with_offset(const q7_t *src, q15_t *dst, uint32_t block_size, q15_t offset)
{
 801d750:	b480      	push	{r7}
 801d752:	b0a5      	sub	sp, #148	; 0x94
 801d754:	af00      	add	r7, sp, #0
 801d756:	60f8      	str	r0, [r7, #12]
 801d758:	60b9      	str	r1, [r7, #8]
 801d75a:	607a      	str	r2, [r7, #4]
 801d75c:	807b      	strh	r3, [r7, #2]
    q31_t in_q15x2_2;
    q31_t out_q15x2_1;
    q31_t out_q15x2_2;

    /*loop unrolling */
    block_cnt = block_size >> 2;
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	089b      	lsrs	r3, r3, #2
 801d762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 801d766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d76a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d76e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801d772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d77a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801d77e:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801d782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d78a:	67fb      	str	r3, [r7, #124]	; 0x7c
    while (block_cnt > 0)
 801d78c:	e070      	b.n	801d870 <arm_q7_to_q15_with_offset+0x120>
 801d78e:	f107 030c 	add.w	r3, r7, #12
 801d792:	62fb      	str	r3, [r7, #44]	; 0x2c
    memcpy(&val, *in_q7, 4);
 801d794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 801d79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	1d1a      	adds	r2, r3, #4
 801d7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a4:	601a      	str	r2, [r3, #0]
    return (val);
 801d7a6:	693b      	ldr	r3, [r7, #16]
    {
        /* convert from q7 to q15 and then store the results in the destination buffer */
        in_q7x4 = arm_nn_read_q7x4_ia(&src);
 801d7a8:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
 801d7aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801d7ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d7ae:	637b      	str	r3, [r7, #52]	; 0x34
 801d7b0:	2308      	movs	r3, #8
 801d7b2:	633b      	str	r3, [r7, #48]	; 0x30
  op2 %= 32U;
 801d7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b6:	f003 031f 	and.w	r3, r3, #31
 801d7ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (op2 == 0U)
 801d7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d101      	bne.n	801d7c6 <arm_q7_to_q15_with_offset+0x76>
    return op1;
 801d7c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7c4:	e003      	b.n	801d7ce <arm_q7_to_q15_with_offset+0x7e>
  return (op1 >> op2) | (op1 << (32U - op2));
 801d7c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7ca:	fa61 f303 	ror.w	r3, r1, r3
 801d7ce:	643a      	str	r2, [r7, #64]	; 0x40
 801d7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801d7d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d7d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d7d6:	fa23 f382 	sxtab16	r3, r3, r2
 801d7da:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 801d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7de:	677b      	str	r3, [r7, #116]	; 0x74
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);
 801d7e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801d7e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d7e4:	64fa      	str	r2, [r7, #76]	; 0x4c
 801d7e6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801d7e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d7ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801d7ec:	fa23 f382 	sxtab16	r3, r3, r2
 801d7f0:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 801d7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7f4:	673b      	str	r3, [r7, #112]	; 0x70

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 801d7f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 801d7fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d7fc:	66bb      	str	r3, [r7, #104]	; 0x68
 801d7fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d800:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d802:	eac3 4322 	pkhtb	r3, r3, r2, asr #16
 801d806:	667b      	str	r3, [r7, #100]	; 0x64
 801d808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801d80a:	663b      	str	r3, [r7, #96]	; 0x60
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 801d80c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d80e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801d810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d812:	65bb      	str	r3, [r7, #88]	; 0x58
 801d814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801d816:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d818:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
 801d81c:	657b      	str	r3, [r7, #84]	; 0x54
 801d81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d820:	653b      	str	r3, [r7, #80]	; 0x50
 801d822:	f107 0308 	add.w	r3, r7, #8
 801d826:	623b      	str	r3, [r7, #32]
 801d828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d82a:	61fb      	str	r3, [r7, #28]
  @param[in]     src_q31   Input value to be written.
  @return        none
 */
__STATIC_FORCEINLINE void arm_nn_write_q15x2_ia(q15_t **dest_q15, q31_t src_q31)
{
    q31_t val = src_q31;
 801d82c:	69fb      	ldr	r3, [r7, #28]
 801d82e:	61bb      	str	r3, [r7, #24]

    memcpy(*dest_q15, &val, 4);
 801d830:	6a3b      	ldr	r3, [r7, #32]
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	69ba      	ldr	r2, [r7, #24]
 801d836:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801d838:	6a3b      	ldr	r3, [r7, #32]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	1d1a      	adds	r2, r3, #4
 801d83e:	6a3b      	ldr	r3, [r7, #32]
 801d840:	601a      	str	r2, [r3, #0]
}
 801d842:	bf00      	nop
 801d844:	f107 0308 	add.w	r3, r7, #8
 801d848:	62bb      	str	r3, [r7, #40]	; 0x28
 801d84a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801d84c:	627b      	str	r3, [r7, #36]	; 0x24
    q31_t val = src_q31;
 801d84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d850:	617b      	str	r3, [r7, #20]
    memcpy(*dest_q15, &val, 4);
 801d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	697a      	ldr	r2, [r7, #20]
 801d858:	601a      	str	r2, [r3, #0]
    *dest_q15 += 2;
 801d85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	1d1a      	adds	r2, r3, #4
 801d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d862:	601a      	str	r2, [r3, #0]
}
 801d864:	bf00      	nop

        arm_nn_write_q15x2_ia(&dst, out_q15x2_1);
        arm_nn_write_q15x2_ia(&dst, out_q15x2_2);

        block_cnt--;
 801d866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d86a:	3b01      	subs	r3, #1
 801d86c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 801d870:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d874:	2b00      	cmp	r3, #0
 801d876:	dc8a      	bgt.n	801d78e <arm_q7_to_q15_with_offset+0x3e>
    }
    /* Handle left over samples */
    block_cnt = block_size % 0x4;
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	f003 0303 	and.w	r3, r3, #3
 801d87e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 801d882:	e012      	b.n	801d8aa <arm_q7_to_q15_with_offset+0x15a>
    {
        *dst++ = (q15_t)*src++ + offset;
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	1c5a      	adds	r2, r3, #1
 801d888:	60fa      	str	r2, [r7, #12]
 801d88a:	f993 3000 	ldrsb.w	r3, [r3]
 801d88e:	b29a      	uxth	r2, r3
 801d890:	887b      	ldrh	r3, [r7, #2]
 801d892:	4413      	add	r3, r2
 801d894:	b299      	uxth	r1, r3
 801d896:	68bb      	ldr	r3, [r7, #8]
 801d898:	1c9a      	adds	r2, r3, #2
 801d89a:	60ba      	str	r2, [r7, #8]
 801d89c:	b20a      	sxth	r2, r1
 801d89e:	801a      	strh	r2, [r3, #0]

        /* Decrement the loop counter */
        block_cnt--;
 801d8a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    while (block_cnt > 0)
 801d8aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	dce8      	bgt.n	801d884 <arm_q7_to_q15_with_offset+0x134>
    }
}
 801d8b2:	bf00      	nop
 801d8b4:	bf00      	nop
 801d8b6:	3794      	adds	r7, #148	; 0x94
 801d8b8:	46bd      	mov	sp, r7
 801d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8be:	4770      	bx	lr

0801d8c0 <scale_q31_to_q7_and_clamp>:
                                      q7_t *target,
                                      int32_t length,
                                      const int32_t count,
                                      const int act_min,
                                      const int act_max)
{
 801d8c0:	b480      	push	{r7}
 801d8c2:	b089      	sub	sp, #36	; 0x24
 801d8c4:	af00      	add	r7, sp, #0
 801d8c6:	60f8      	str	r0, [r7, #12]
 801d8c8:	60b9      	str	r1, [r7, #8]
 801d8ca:	607a      	str	r2, [r7, #4]
 801d8cc:	603b      	str	r3, [r7, #0]
    const int half_count = count / 2;
 801d8ce:	683b      	ldr	r3, [r7, #0]
 801d8d0:	0fda      	lsrs	r2, r3, #31
 801d8d2:	4413      	add	r3, r2
 801d8d4:	105b      	asrs	r3, r3, #1
 801d8d6:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < length; i++)
 801d8d8:	2300      	movs	r3, #0
 801d8da:	61fb      	str	r3, [r7, #28]
 801d8dc:	e030      	b.n	801d940 <scale_q31_to_q7_and_clamp+0x80>
    {
        int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 801d8de:	69fb      	ldr	r3, [r7, #28]
 801d8e0:	009b      	lsls	r3, r3, #2
 801d8e2:	68fa      	ldr	r2, [r7, #12]
 801d8e4:	4413      	add	r3, r2
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	dd07      	ble.n	801d8fc <scale_q31_to_q7_and_clamp+0x3c>
 801d8ec:	69fb      	ldr	r3, [r7, #28]
 801d8ee:	009b      	lsls	r3, r3, #2
 801d8f0:	68fa      	ldr	r2, [r7, #12]
 801d8f2:	4413      	add	r3, r2
 801d8f4:	681a      	ldr	r2, [r3, #0]
 801d8f6:	69bb      	ldr	r3, [r7, #24]
 801d8f8:	4413      	add	r3, r2
 801d8fa:	e006      	b.n	801d90a <scale_q31_to_q7_and_clamp+0x4a>
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	009b      	lsls	r3, r3, #2
 801d900:	68fa      	ldr	r2, [r7, #12]
 801d902:	4413      	add	r3, r2
 801d904:	681a      	ldr	r2, [r3, #0]
 801d906:	69bb      	ldr	r3, [r7, #24]
 801d908:	1ad3      	subs	r3, r2, r3
 801d90a:	617b      	str	r3, [r7, #20]
        sum = sum / count;
 801d90c:	697a      	ldr	r2, [r7, #20]
 801d90e:	683b      	ldr	r3, [r7, #0]
 801d910:	fb92 f3f3 	sdiv	r3, r2, r3
 801d914:	617b      	str	r3, [r7, #20]
        sum = MAX(sum, act_min);
 801d916:	697a      	ldr	r2, [r7, #20]
 801d918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d91a:	4293      	cmp	r3, r2
 801d91c:	bfb8      	it	lt
 801d91e:	4613      	movlt	r3, r2
 801d920:	617b      	str	r3, [r7, #20]
        sum = MIN(sum, act_max);
 801d922:	697a      	ldr	r2, [r7, #20]
 801d924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d926:	4293      	cmp	r3, r2
 801d928:	bfa8      	it	ge
 801d92a:	4613      	movge	r3, r2
 801d92c:	617b      	str	r3, [r7, #20]

        target[i] = (q7_t)sum;
 801d92e:	69fb      	ldr	r3, [r7, #28]
 801d930:	68ba      	ldr	r2, [r7, #8]
 801d932:	4413      	add	r3, r2
 801d934:	697a      	ldr	r2, [r7, #20]
 801d936:	b252      	sxtb	r2, r2
 801d938:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801d93a:	69fb      	ldr	r3, [r7, #28]
 801d93c:	3301      	adds	r3, #1
 801d93e:	61fb      	str	r3, [r7, #28]
 801d940:	69fa      	ldr	r2, [r7, #28]
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	429a      	cmp	r2, r3
 801d946:	dbca      	blt.n	801d8de <scale_q31_to_q7_and_clamp+0x1e>
    }
}
 801d948:	bf00      	nop
 801d94a:	bf00      	nop
 801d94c:	3724      	adds	r7, #36	; 0x24
 801d94e:	46bd      	mov	sp, r7
 801d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d954:	4770      	bx	lr

0801d956 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 801d956:	b580      	push	{r7, lr}
 801d958:	b0a6      	sub	sp, #152	; 0x98
 801d95a:	af02      	add	r7, sp, #8
 801d95c:	60f8      	str	r0, [r7, #12]
 801d95e:	60b9      	str	r1, [r7, #8]
 801d960:	607a      	str	r2, [r7, #4]
 801d962:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	685b      	ldr	r3, [r3, #4]
 801d968:	66bb      	str	r3, [r7, #104]	; 0x68
    const int32_t input_x = input_dims->w;
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	689b      	ldr	r3, [r3, #8]
 801d96e:	667b      	str	r3, [r7, #100]	; 0x64
    const int32_t output_y = output_dims->h;
 801d970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d974:	685b      	ldr	r3, [r3, #4]
 801d976:	663b      	str	r3, [r7, #96]	; 0x60
    const int32_t output_x = output_dims->w;
 801d978:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801d97c:	689b      	ldr	r3, [r3, #8]
 801d97e:	65fb      	str	r3, [r7, #92]	; 0x5c
    const int32_t stride_y = pool_params->stride.h;
 801d980:	68bb      	ldr	r3, [r7, #8]
 801d982:	685b      	ldr	r3, [r3, #4]
 801d984:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t stride_x = pool_params->stride.w;
 801d986:	68bb      	ldr	r3, [r7, #8]
 801d988:	681b      	ldr	r3, [r3, #0]
 801d98a:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t kernel_y = filter_dims->h;
 801d98c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d990:	685b      	ldr	r3, [r3, #4]
 801d992:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t kernel_x = filter_dims->w;
 801d994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801d998:	689b      	ldr	r3, [r3, #8]
 801d99a:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t pad_y = pool_params->padding.h;
 801d99c:	68bb      	ldr	r3, [r7, #8]
 801d99e:	68db      	ldr	r3, [r3, #12]
 801d9a0:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t pad_x = pool_params->padding.w;
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	689b      	ldr	r3, [r3, #8]
 801d9a6:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t act_min = pool_params->activation.min;
 801d9a8:	68bb      	ldr	r3, [r7, #8]
 801d9aa:	691b      	ldr	r3, [r3, #16]
 801d9ac:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t act_max = pool_params->activation.max;
 801d9ae:	68bb      	ldr	r3, [r7, #8]
 801d9b0:	695b      	ldr	r3, [r3, #20]
 801d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t ch_src = input_dims->c;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	68db      	ldr	r3, [r3, #12]
 801d9b8:	63bb      	str	r3, [r7, #56]	; 0x38
    q31_t *buffer = (q31_t *)ctx->buf;
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	681b      	ldr	r3, [r3, #0]
 801d9be:	637b      	str	r3, [r7, #52]	; 0x34

#if defined(ARM_MATH_DSP)

    /* Run the following code for CPU's with DSP extension
     */
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 801d9c0:	2300      	movs	r3, #0
 801d9c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801d9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9c8:	425b      	negs	r3, r3
 801d9ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801d9ce:	e0c1      	b.n	801db54 <arm_avgpool_s8+0x1fe>
    {
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 801d9d0:	2300      	movs	r3, #0
 801d9d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801d9d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9d8:	425b      	negs	r3, r3
 801d9da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801d9de:	e0a8      	b.n	801db32 <arm_avgpool_s8+0x1dc>
        {
            /* Condition for kernel start dimension:
                      (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t kernel_y_start = MAX(0, -idx_y);
 801d9e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d9e4:	2b00      	cmp	r3, #0
 801d9e6:	dc03      	bgt.n	801d9f0 <arm_avgpool_s8+0x9a>
 801d9e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801d9ec:	425b      	negs	r3, r3
 801d9ee:	e000      	b.n	801d9f2 <arm_avgpool_s8+0x9c>
 801d9f0:	2300      	movs	r3, #0
 801d9f2:	633b      	str	r3, [r7, #48]	; 0x30
            const int32_t kernel_x_start = MAX(0, -idx_x);
 801d9f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	dc03      	bgt.n	801da04 <arm_avgpool_s8+0xae>
 801d9fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801da00:	425b      	negs	r3, r3
 801da02:	e000      	b.n	801da06 <arm_avgpool_s8+0xb0>
 801da04:	2300      	movs	r3, #0
 801da06:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Condition for kernel end dimension:
                   (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 801da08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801da0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801da0e:	1ad3      	subs	r3, r2, r3
 801da10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801da12:	4293      	cmp	r3, r2
 801da14:	bfa8      	it	ge
 801da16:	4613      	movge	r3, r2
 801da18:	62bb      	str	r3, [r7, #40]	; 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 801da1a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801da1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801da20:	1ad3      	subs	r3, r2, r3
 801da22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801da24:	4293      	cmp	r3, r2
 801da26:	bfa8      	it	ge
 801da28:	4613      	movge	r3, r2
 801da2a:	627b      	str	r3, [r7, #36]	; 0x24

            int count = 0;
 801da2c:	2300      	movs	r3, #0
 801da2e:	67fb      	str	r3, [r7, #124]	; 0x7c

            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 801da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da32:	67bb      	str	r3, [r7, #120]	; 0x78
 801da34:	e05d      	b.n	801daf2 <arm_avgpool_s8+0x19c>
            {
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 801da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da38:	677b      	str	r3, [r7, #116]	; 0x74
 801da3a:	e053      	b.n	801dae4 <arm_avgpool_s8+0x18e>
                {
                    const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);
 801da3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801da3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801da42:	441a      	add	r2, r3
 801da44:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801da46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801da4a:	440b      	add	r3, r1
 801da4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801da4e:	fb01 f303 	mul.w	r3, r1, r3
 801da52:	4413      	add	r3, r2
 801da54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801da56:	fb02 f303 	mul.w	r3, r2, r3
 801da5a:	461a      	mov	r2, r3
 801da5c:	683b      	ldr	r3, [r7, #0]
 801da5e:	4413      	add	r3, r2
 801da60:	623b      	str	r3, [r7, #32]

                    if (count == 0)
 801da62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801da64:	2b00      	cmp	r3, #0
 801da66:	d115      	bne.n	801da94 <arm_avgpool_s8+0x13e>
                    {
                        for (int i = 0; i < ch_src; i++)
 801da68:	2300      	movs	r3, #0
 801da6a:	673b      	str	r3, [r7, #112]	; 0x70
 801da6c:	e00d      	b.n	801da8a <arm_avgpool_s8+0x134>
                        {
                            buffer[i] = start[i];
 801da6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da70:	6a3a      	ldr	r2, [r7, #32]
 801da72:	4413      	add	r3, r2
 801da74:	f993 1000 	ldrsb.w	r1, [r3]
 801da78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da7a:	009b      	lsls	r3, r3, #2
 801da7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801da7e:	4413      	add	r3, r2
 801da80:	460a      	mov	r2, r1
 801da82:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 801da84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801da86:	3301      	adds	r3, #1
 801da88:	673b      	str	r3, [r7, #112]	; 0x70
 801da8a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801da8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da8e:	429a      	cmp	r2, r3
 801da90:	dbed      	blt.n	801da6e <arm_avgpool_s8+0x118>
 801da92:	e021      	b.n	801dad8 <arm_avgpool_s8+0x182>
                        }
                    }
                    else
                    {
                        for (int i = 0; i < ch_src; i++)
 801da94:	2300      	movs	r3, #0
 801da96:	66fb      	str	r3, [r7, #108]	; 0x6c
 801da98:	e01a      	b.n	801dad0 <arm_avgpool_s8+0x17a>
                        {
                            buffer[i] = __QADD(start[i], buffer[i]);
 801da9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801da9c:	6a3a      	ldr	r2, [r7, #32]
 801da9e:	4413      	add	r3, r2
 801daa0:	f993 3000 	ldrsb.w	r3, [r3]
 801daa4:	4618      	mov	r0, r3
 801daa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801daa8:	009b      	lsls	r3, r3, #2
 801daaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801daac:	4413      	add	r3, r2
 801daae:	681a      	ldr	r2, [r3, #0]
 801dab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dab2:	009b      	lsls	r3, r3, #2
 801dab4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801dab6:	440b      	add	r3, r1
 801dab8:	61f8      	str	r0, [r7, #28]
 801daba:	61ba      	str	r2, [r7, #24]

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 801dabc:	69fa      	ldr	r2, [r7, #28]
 801dabe:	69b9      	ldr	r1, [r7, #24]
 801dac0:	fa81 f282 	qadd	r2, r2, r1
 801dac4:	617a      	str	r2, [r7, #20]
  return(result);
 801dac6:	697a      	ldr	r2, [r7, #20]
 801dac8:	601a      	str	r2, [r3, #0]
                        for (int i = 0; i < ch_src; i++)
 801daca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801dacc:	3301      	adds	r3, #1
 801dace:	66fb      	str	r3, [r7, #108]	; 0x6c
 801dad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801dad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dad4:	429a      	cmp	r2, r3
 801dad6:	dbe0      	blt.n	801da9a <arm_avgpool_s8+0x144>
                        }
                    }
                    count++;
 801dad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801dada:	3301      	adds	r3, #1
 801dadc:	67fb      	str	r3, [r7, #124]	; 0x7c
                for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 801dade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801dae0:	3301      	adds	r3, #1
 801dae2:	677b      	str	r3, [r7, #116]	; 0x74
 801dae4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801dae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dae8:	429a      	cmp	r2, r3
 801daea:	dba7      	blt.n	801da3c <arm_avgpool_s8+0xe6>
            for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 801daec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801daee:	3301      	adds	r3, #1
 801daf0:	67bb      	str	r3, [r7, #120]	; 0x78
 801daf2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daf6:	429a      	cmp	r2, r3
 801daf8:	db9d      	blt.n	801da36 <arm_avgpool_s8+0xe0>
                }
            }
            scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
 801dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dafc:	9301      	str	r3, [sp, #4]
 801dafe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801db00:	9300      	str	r3, [sp, #0]
 801db02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801db04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801db06:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 801db0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801db0c:	f7ff fed8 	bl	801d8c0 <scale_q31_to_q7_and_clamp>
            dst += ch_src;
 801db10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801db12:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801db16:	4413      	add	r3, r2
 801db18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 801db1c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801db20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801db22:	4413      	add	r3, r2
 801db24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801db28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801db2c:	3301      	adds	r3, #1
 801db2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801db32:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801db36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801db38:	429a      	cmp	r2, r3
 801db3a:	f6ff af51 	blt.w	801d9e0 <arm_avgpool_s8+0x8a>
    for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 801db3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801db42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801db44:	4413      	add	r3, r2
 801db46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801db4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801db4e:	3301      	adds	r3, #1
 801db50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801db54:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801db58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801db5a:	429a      	cmp	r2, r3
 801db5c:	f6ff af38 	blt.w	801d9d0 <arm_avgpool_s8+0x7a>
            }
        }
    }

#endif
    return ARM_MATH_SUCCESS;
 801db60:	2300      	movs	r3, #0
}
 801db62:	4618      	mov	r0, r3
 801db64:	3790      	adds	r7, #144	; 0x90
 801db66:	46bd      	mov	sp, r7
 801db68:	bd80      	pop	{r7, pc}

0801db6a <arm_avgpool_s8_get_buffer_size>:

#endif /* ARM_MATH_MVEI */

int32_t arm_avgpool_s8_get_buffer_size(const int output_x, const int ch_src)
{
 801db6a:	b480      	push	{r7}
 801db6c:	b083      	sub	sp, #12
 801db6e:	af00      	add	r7, sp, #0
 801db70:	6078      	str	r0, [r7, #4]
 801db72:	6039      	str	r1, [r7, #0]
    (void)output_x;

#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (ch_src * sizeof(int32_t));
 801db74:	683b      	ldr	r3, [r7, #0]
 801db76:	009b      	lsls	r3, r3, #2
#else
    (void)ch_src;
    return 0;
#endif
}
 801db78:	4618      	mov	r0, r3
 801db7a:	370c      	adds	r7, #12
 801db7c:	46bd      	mov	sp, r7
 801db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db82:	4770      	bx	lr

0801db84 <compare_and_replace_if_larger_q7>:

#include "arm_nnfunctions.h"
#include "arm_nnsupportfunctions.h"

static void compare_and_replace_if_larger_q7(q7_t *base, const q7_t *target, int32_t length)
{
 801db84:	b480      	push	{r7}
 801db86:	b091      	sub	sp, #68	; 0x44
 801db88:	af00      	add	r7, sp, #0
 801db8a:	60f8      	str	r0, [r7, #12]
 801db8c:	60b9      	str	r1, [r7, #8]
 801db8e:	607a      	str	r2, [r7, #4]
        base += 16;
        target += 16;
        length -= 16;
    }
#else
    q7_t *dst = base;
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	62bb      	str	r3, [r7, #40]	; 0x28
    const q7_t *src = target;
 801db94:	68bb      	ldr	r3, [r7, #8]
 801db96:	627b      	str	r3, [r7, #36]	; 0x24
    union arm_nnword ref_max;
    union arm_nnword comp_max;
    int32_t cnt = length >> 2;
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	109b      	asrs	r3, r3, #2
 801db9c:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (cnt > 0l)
 801db9e:	e050      	b.n	801dc42 <compare_and_replace_if_larger_q7+0xbe>
    {
        ref_max.word = arm_nn_read_q7x4(dst);
 801dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dba2:	637b      	str	r3, [r7, #52]	; 0x34
 801dba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dba6:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 801dba8:	617b      	str	r3, [r7, #20]
    return (val);
 801dbaa:	697b      	ldr	r3, [r7, #20]
 801dbac:	623b      	str	r3, [r7, #32]
 801dbae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801dbb2:	63bb      	str	r3, [r7, #56]	; 0x38
    memcpy(&val, *in_q7, 4);
 801dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbb6:	681b      	ldr	r3, [r3, #0]
 801dbb8:	681b      	ldr	r3, [r3, #0]
 801dbba:	613b      	str	r3, [r7, #16]
    *in_q7 += 4;
 801dbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	1d1a      	adds	r2, r3, #4
 801dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dbc4:	601a      	str	r2, [r3, #0]
    return (val);
 801dbc6:	693b      	ldr	r3, [r7, #16]
        comp_max.word = arm_nn_read_q7x4_ia(&src);
 801dbc8:	61fb      	str	r3, [r7, #28]

        if (comp_max.bytes[0] > ref_max.bytes[0])
 801dbca:	f997 201c 	ldrsb.w	r2, [r7, #28]
 801dbce:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801dbd2:	429a      	cmp	r2, r3
 801dbd4:	dd03      	ble.n	801dbde <compare_and_replace_if_larger_q7+0x5a>
        {
            ref_max.bytes[0] = comp_max.bytes[0];
 801dbd6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801dbda:	f887 3020 	strb.w	r3, [r7, #32]
        }
        if (comp_max.bytes[1] > ref_max.bytes[1])
 801dbde:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801dbe2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	dd03      	ble.n	801dbf2 <compare_and_replace_if_larger_q7+0x6e>
        {
            ref_max.bytes[1] = comp_max.bytes[1];
 801dbea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801dbee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        }
        if (comp_max.bytes[2] > ref_max.bytes[2])
 801dbf2:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801dbf6:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 801dbfa:	429a      	cmp	r2, r3
 801dbfc:	dd03      	ble.n	801dc06 <compare_and_replace_if_larger_q7+0x82>
        {
            ref_max.bytes[2] = comp_max.bytes[2];
 801dbfe:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801dc02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        }
        if (comp_max.bytes[3] > ref_max.bytes[3])
 801dc06:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801dc0a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801dc0e:	429a      	cmp	r2, r3
 801dc10:	dd03      	ble.n	801dc1a <compare_and_replace_if_larger_q7+0x96>
        {
            ref_max.bytes[3] = comp_max.bytes[3];
 801dc12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801dc16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        }

        write_q7x4_ia(&dst, ref_max.word);
 801dc1a:	6a3b      	ldr	r3, [r7, #32]
 801dc1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dc20:	633a      	str	r2, [r7, #48]	; 0x30
 801dc22:	62fb      	str	r3, [r7, #44]	; 0x2c
  q31_t val = value;
 801dc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc26:	61bb      	str	r3, [r7, #24]
  memcpy (*pQ7, &val, 4);
 801dc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	69ba      	ldr	r2, [r7, #24]
 801dc2e:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 801dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	1d1a      	adds	r2, r3, #4
 801dc36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc38:	601a      	str	r2, [r3, #0]
}
 801dc3a:	bf00      	nop

        cnt--;
 801dc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc3e:	3b01      	subs	r3, #1
 801dc40:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801dc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc44:	2b00      	cmp	r3, #0
 801dc46:	dcab      	bgt.n	801dba0 <compare_and_replace_if_larger_q7+0x1c>
    }

    cnt = length & 0x3;
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	f003 0303 	and.w	r3, r3, #3
 801dc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801dc50:	e015      	b.n	801dc7e <compare_and_replace_if_larger_q7+0xfa>
    {
        if (*src > *dst)
 801dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc54:	f993 2000 	ldrsb.w	r2, [r3]
 801dc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc5a:	f993 3000 	ldrsb.w	r3, [r3]
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	dd04      	ble.n	801dc6c <compare_and_replace_if_larger_q7+0xe8>
        {
            *dst = *src;
 801dc62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc66:	f992 2000 	ldrsb.w	r2, [r2]
 801dc6a:	701a      	strb	r2, [r3, #0]
        }
        dst++;
 801dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc6e:	3301      	adds	r3, #1
 801dc70:	62bb      	str	r3, [r7, #40]	; 0x28
        src++;
 801dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc74:	3301      	adds	r3, #1
 801dc76:	627b      	str	r3, [r7, #36]	; 0x24
        cnt--;
 801dc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc7a:	3b01      	subs	r3, #1
 801dc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (cnt > 0l)
 801dc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	dce6      	bgt.n	801dc52 <compare_and_replace_if_larger_q7+0xce>
    }
#endif
}
 801dc84:	bf00      	nop
 801dc86:	bf00      	nop
 801dc88:	3744      	adds	r7, #68	; 0x44
 801dc8a:	46bd      	mov	sp, r7
 801dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc90:	4770      	bx	lr

0801dc92 <clamp_output>:

static void clamp_output(q7_t *source, int32_t length, const int32_t act_min, const int32_t act_max)
{
 801dc92:	b480      	push	{r7}
 801dc94:	b08d      	sub	sp, #52	; 0x34
 801dc96:	af00      	add	r7, sp, #0
 801dc98:	60f8      	str	r0, [r7, #12]
 801dc9a:	60b9      	str	r1, [r7, #8]
 801dc9c:	607a      	str	r2, [r7, #4]
 801dc9e:	603b      	str	r3, [r7, #0]
        vstrbq_p_s8(source, res, p);
        source += 16;
    }
#else
    union arm_nnword in;
    int32_t cnt = length >> 2;
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	109b      	asrs	r3, r3, #2
 801dca4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (cnt > 0l)
 801dca6:	e062      	b.n	801dd6e <clamp_output+0xdc>
    {
        in.word = arm_nn_read_q7x4(source);
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	61fb      	str	r3, [r7, #28]
 801dcac:	69fb      	ldr	r3, [r7, #28]
 801dcae:	681b      	ldr	r3, [r3, #0]
    memcpy(&val, in_q7, 4);
 801dcb0:	617b      	str	r3, [r7, #20]
    return (val);
 801dcb2:	697b      	ldr	r3, [r7, #20]
 801dcb4:	61bb      	str	r3, [r7, #24]

        in.bytes[0] = MAX(in.bytes[0], act_min);
 801dcb6:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801dcba:	461a      	mov	r2, r3
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	4293      	cmp	r3, r2
 801dcc0:	bfb8      	it	lt
 801dcc2:	4613      	movlt	r3, r2
 801dcc4:	b25b      	sxtb	r3, r3
 801dcc6:	763b      	strb	r3, [r7, #24]
        in.bytes[0] = MIN(in.bytes[0], act_max);
 801dcc8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 801dccc:	461a      	mov	r2, r3
 801dcce:	683b      	ldr	r3, [r7, #0]
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	bfa8      	it	ge
 801dcd4:	4613      	movge	r3, r2
 801dcd6:	b25b      	sxtb	r3, r3
 801dcd8:	763b      	strb	r3, [r7, #24]
        in.bytes[1] = MAX(in.bytes[1], act_min);
 801dcda:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801dcde:	461a      	mov	r2, r3
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	4293      	cmp	r3, r2
 801dce4:	bfb8      	it	lt
 801dce6:	4613      	movlt	r3, r2
 801dce8:	b25b      	sxtb	r3, r3
 801dcea:	767b      	strb	r3, [r7, #25]
        in.bytes[1] = MIN(in.bytes[1], act_max);
 801dcec:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801dcf0:	461a      	mov	r2, r3
 801dcf2:	683b      	ldr	r3, [r7, #0]
 801dcf4:	4293      	cmp	r3, r2
 801dcf6:	bfa8      	it	ge
 801dcf8:	4613      	movge	r3, r2
 801dcfa:	b25b      	sxtb	r3, r3
 801dcfc:	767b      	strb	r3, [r7, #25]
        in.bytes[2] = MAX(in.bytes[2], act_min);
 801dcfe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801dd02:	461a      	mov	r2, r3
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	4293      	cmp	r3, r2
 801dd08:	bfb8      	it	lt
 801dd0a:	4613      	movlt	r3, r2
 801dd0c:	b25b      	sxtb	r3, r3
 801dd0e:	76bb      	strb	r3, [r7, #26]
        in.bytes[2] = MIN(in.bytes[2], act_max);
 801dd10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801dd14:	461a      	mov	r2, r3
 801dd16:	683b      	ldr	r3, [r7, #0]
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	bfa8      	it	ge
 801dd1c:	4613      	movge	r3, r2
 801dd1e:	b25b      	sxtb	r3, r3
 801dd20:	76bb      	strb	r3, [r7, #26]
        in.bytes[3] = MAX(in.bytes[3], act_min);
 801dd22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801dd26:	461a      	mov	r2, r3
 801dd28:	687b      	ldr	r3, [r7, #4]
 801dd2a:	4293      	cmp	r3, r2
 801dd2c:	bfb8      	it	lt
 801dd2e:	4613      	movlt	r3, r2
 801dd30:	b25b      	sxtb	r3, r3
 801dd32:	76fb      	strb	r3, [r7, #27]
        in.bytes[3] = MIN(in.bytes[3], act_max);
 801dd34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801dd38:	461a      	mov	r2, r3
 801dd3a:	683b      	ldr	r3, [r7, #0]
 801dd3c:	4293      	cmp	r3, r2
 801dd3e:	bfa8      	it	ge
 801dd40:	4613      	movge	r3, r2
 801dd42:	b25b      	sxtb	r3, r3
 801dd44:	76fb      	strb	r3, [r7, #27]

        write_q7x4_ia(&source, in.word);
 801dd46:	69bb      	ldr	r3, [r7, #24]
 801dd48:	f107 020c 	add.w	r2, r7, #12
 801dd4c:	627a      	str	r2, [r7, #36]	; 0x24
 801dd4e:	623b      	str	r3, [r7, #32]
  q31_t val = value;
 801dd50:	6a3b      	ldr	r3, [r7, #32]
 801dd52:	613b      	str	r3, [r7, #16]
  memcpy (*pQ7, &val, 4);
 801dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	693a      	ldr	r2, [r7, #16]
 801dd5a:	601a      	str	r2, [r3, #0]
  *pQ7 += 4;
 801dd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	1d1a      	adds	r2, r3, #4
 801dd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd64:	601a      	str	r2, [r3, #0]
}
 801dd66:	bf00      	nop
        cnt--;
 801dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd6a:	3b01      	subs	r3, #1
 801dd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801dd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	dc99      	bgt.n	801dca8 <clamp_output+0x16>
    }

    cnt = length & 0x3;
 801dd74:	68bb      	ldr	r3, [r7, #8]
 801dd76:	f003 0303 	and.w	r3, r3, #3
 801dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801dd7c:	e018      	b.n	801ddb0 <clamp_output+0x11e>
    {
        int32_t comp = *source;
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	f993 3000 	ldrsb.w	r3, [r3]
 801dd84:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MAX(comp, act_min);
 801dd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	4293      	cmp	r3, r2
 801dd8c:	bfb8      	it	lt
 801dd8e:	4613      	movlt	r3, r2
 801dd90:	62bb      	str	r3, [r7, #40]	; 0x28
        comp = MIN(comp, act_max);
 801dd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd94:	683b      	ldr	r3, [r7, #0]
 801dd96:	4293      	cmp	r3, r2
 801dd98:	bfa8      	it	ge
 801dd9a:	4613      	movge	r3, r2
 801dd9c:	62bb      	str	r3, [r7, #40]	; 0x28
        *source++ = (int8_t)comp;
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	1c5a      	adds	r2, r3, #1
 801dda2:	60fa      	str	r2, [r7, #12]
 801dda4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dda6:	b252      	sxtb	r2, r2
 801dda8:	701a      	strb	r2, [r3, #0]
        cnt--;
 801ddaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddac:	3b01      	subs	r3, #1
 801ddae:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (cnt > 0l)
 801ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddb2:	2b00      	cmp	r3, #0
 801ddb4:	dce3      	bgt.n	801dd7e <clamp_output+0xec>
    }
#endif
}
 801ddb6:	bf00      	nop
 801ddb8:	bf00      	nop
 801ddba:	3734      	adds	r7, #52	; 0x34
 801ddbc:	46bd      	mov	sp, r7
 801ddbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc2:	4770      	bx	lr

0801ddc4 <arm_max_pool_s8>:
                           const cmsis_nn_dims *input_dims,
                           const q7_t *src,
                           const cmsis_nn_dims *filter_dims,
                           const cmsis_nn_dims *output_dims,
                           q7_t *dst)
{
 801ddc4:	b580      	push	{r7, lr}
 801ddc6:	b09e      	sub	sp, #120	; 0x78
 801ddc8:	af00      	add	r7, sp, #0
 801ddca:	60f8      	str	r0, [r7, #12]
 801ddcc:	60b9      	str	r1, [r7, #8]
 801ddce:	607a      	str	r2, [r7, #4]
 801ddd0:	603b      	str	r3, [r7, #0]
    const int32_t input_y = input_dims->h;
 801ddd2:	687b      	ldr	r3, [r7, #4]
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	65bb      	str	r3, [r7, #88]	; 0x58
    const int32_t input_x = input_dims->w;
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	689b      	ldr	r3, [r3, #8]
 801dddc:	657b      	str	r3, [r7, #84]	; 0x54
    const int32_t output_y = output_dims->h;
 801ddde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801dde2:	685b      	ldr	r3, [r3, #4]
 801dde4:	653b      	str	r3, [r7, #80]	; 0x50
    const int32_t output_x = output_dims->w;
 801dde6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ddea:	689b      	ldr	r3, [r3, #8]
 801ddec:	64fb      	str	r3, [r7, #76]	; 0x4c
    const int32_t stride_y = pool_params->stride.h;
 801ddee:	68bb      	ldr	r3, [r7, #8]
 801ddf0:	685b      	ldr	r3, [r3, #4]
 801ddf2:	64bb      	str	r3, [r7, #72]	; 0x48
    const int32_t stride_x = pool_params->stride.w;
 801ddf4:	68bb      	ldr	r3, [r7, #8]
 801ddf6:	681b      	ldr	r3, [r3, #0]
 801ddf8:	647b      	str	r3, [r7, #68]	; 0x44
    const int32_t kernel_y = filter_dims->h;
 801ddfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ddfe:	685b      	ldr	r3, [r3, #4]
 801de00:	643b      	str	r3, [r7, #64]	; 0x40
    const int32_t kernel_x = filter_dims->w;
 801de02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801de06:	689b      	ldr	r3, [r3, #8]
 801de08:	63fb      	str	r3, [r7, #60]	; 0x3c
    const int32_t pad_y = pool_params->padding.h;
 801de0a:	68bb      	ldr	r3, [r7, #8]
 801de0c:	68db      	ldr	r3, [r3, #12]
 801de0e:	63bb      	str	r3, [r7, #56]	; 0x38
    const int32_t pad_x = pool_params->padding.w;
 801de10:	68bb      	ldr	r3, [r7, #8]
 801de12:	689b      	ldr	r3, [r3, #8]
 801de14:	637b      	str	r3, [r7, #52]	; 0x34
    const int32_t act_min = pool_params->activation.min;
 801de16:	68bb      	ldr	r3, [r7, #8]
 801de18:	691b      	ldr	r3, [r3, #16]
 801de1a:	633b      	str	r3, [r7, #48]	; 0x30
    const int32_t act_max = pool_params->activation.max;
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	695b      	ldr	r3, [r3, #20]
 801de20:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32_t channel_in = input_dims->c;
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	68db      	ldr	r3, [r3, #12]
 801de26:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)ctx;
    q7_t *dst_base = dst;
 801de28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801de2c:	627b      	str	r3, [r7, #36]	; 0x24

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801de2e:	2300      	movs	r3, #0
 801de30:	677b      	str	r3, [r7, #116]	; 0x74
 801de32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de34:	425b      	negs	r3, r3
 801de36:	673b      	str	r3, [r7, #112]	; 0x70
 801de38:	e078      	b.n	801df2c <arm_max_pool_s8+0x168>
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801de3a:	2300      	movs	r3, #0
 801de3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801de3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de40:	425b      	negs	r3, r3
 801de42:	66bb      	str	r3, [r7, #104]	; 0x68
 801de44:	e067      	b.n	801df16 <arm_max_pool_s8+0x152>
        {
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
 801de46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de48:	2b00      	cmp	r3, #0
 801de4a:	dc02      	bgt.n	801de52 <arm_max_pool_s8+0x8e>
 801de4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de4e:	425b      	negs	r3, r3
 801de50:	e000      	b.n	801de54 <arm_max_pool_s8+0x90>
 801de52:	2300      	movs	r3, #0
 801de54:	623b      	str	r3, [r7, #32]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 801de56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801de58:	2b00      	cmp	r3, #0
 801de5a:	dc02      	bgt.n	801de62 <arm_max_pool_s8+0x9e>
 801de5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801de5e:	425b      	negs	r3, r3
 801de60:	e000      	b.n	801de64 <arm_max_pool_s8+0xa0>
 801de62:	2300      	movs	r3, #0
 801de64:	61fb      	str	r3, [r7, #28]

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 801de66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801de68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801de6a:	1ad3      	subs	r3, r2, r3
 801de6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801de6e:	4293      	cmp	r3, r2
 801de70:	bfa8      	it	ge
 801de72:	4613      	movge	r3, r2
 801de74:	61bb      	str	r3, [r7, #24]
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 801de76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801de78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801de7a:	1ad3      	subs	r3, r2, r3
 801de7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de7e:	4293      	cmp	r3, r2
 801de80:	bfa8      	it	ge
 801de82:	4613      	movge	r3, r2
 801de84:	617b      	str	r3, [r7, #20]

            int count = 0;
 801de86:	2300      	movs	r3, #0
 801de88:	667b      	str	r3, [r7, #100]	; 0x64

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801de8a:	6a3b      	ldr	r3, [r7, #32]
 801de8c:	663b      	str	r3, [r7, #96]	; 0x60
 801de8e:	e031      	b.n	801def4 <arm_max_pool_s8+0x130>
            {
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801de90:	69fb      	ldr	r3, [r7, #28]
 801de92:	65fb      	str	r3, [r7, #92]	; 0x5c
 801de94:	e027      	b.n	801dee6 <arm_max_pool_s8+0x122>
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 801de96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801de98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801de9a:	441a      	add	r2, r3
 801de9c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801de9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801dea0:	440b      	add	r3, r1
 801dea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dea4:	fb01 f303 	mul.w	r3, r1, r3
 801dea8:	4413      	add	r3, r2
 801deaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801deac:	fb02 f303 	mul.w	r3, r2, r3
 801deb0:	461a      	mov	r2, r3
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	4413      	add	r3, r2
 801deb6:	613b      	str	r3, [r7, #16]

                    if (count == 0)
 801deb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801deba:	2b00      	cmp	r3, #0
 801debc:	d10a      	bne.n	801ded4 <arm_max_pool_s8+0x110>
                    {
                        memcpy(dst, start, channel_in);
 801debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dec0:	461a      	mov	r2, r3
 801dec2:	6939      	ldr	r1, [r7, #16]
 801dec4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801dec8:	f003 fe8c 	bl	8021be4 <memcpy>
                        count++;
 801decc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801dece:	3301      	adds	r3, #1
 801ded0:	667b      	str	r3, [r7, #100]	; 0x64
 801ded2:	e005      	b.n	801dee0 <arm_max_pool_s8+0x11c>
                    }
                    else
                    {
                        compare_and_replace_if_larger_q7(dst, start, channel_in);
 801ded4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ded6:	6939      	ldr	r1, [r7, #16]
 801ded8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 801dedc:	f7ff fe52 	bl	801db84 <compare_and_replace_if_larger_q7>
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 801dee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801dee2:	3301      	adds	r3, #1
 801dee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 801dee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801dee8:	697b      	ldr	r3, [r7, #20]
 801deea:	429a      	cmp	r2, r3
 801deec:	dbd3      	blt.n	801de96 <arm_max_pool_s8+0xd2>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 801deee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801def0:	3301      	adds	r3, #1
 801def2:	663b      	str	r3, [r7, #96]	; 0x60
 801def4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801def6:	69bb      	ldr	r3, [r7, #24]
 801def8:	429a      	cmp	r2, r3
 801defa:	dbc9      	blt.n	801de90 <arm_max_pool_s8+0xcc>
                    }
                }
            }
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
 801defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801defe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801df02:	4413      	add	r3, r2
 801df04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 801df08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801df0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801df0c:	4413      	add	r3, r2
 801df0e:	66bb      	str	r3, [r7, #104]	; 0x68
 801df10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801df12:	3301      	adds	r3, #1
 801df14:	66fb      	str	r3, [r7, #108]	; 0x6c
 801df16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801df18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df1a:	429a      	cmp	r2, r3
 801df1c:	db93      	blt.n	801de46 <arm_max_pool_s8+0x82>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 801df1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801df20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801df22:	4413      	add	r3, r2
 801df24:	673b      	str	r3, [r7, #112]	; 0x70
 801df26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801df28:	3301      	adds	r3, #1
 801df2a:	677b      	str	r3, [r7, #116]	; 0x74
 801df2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801df2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801df30:	429a      	cmp	r2, r3
 801df32:	db82      	blt.n	801de3a <arm_max_pool_s8+0x76>
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 801df34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801df36:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801df38:	fb02 f303 	mul.w	r3, r2, r3
 801df3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df3e:	fb02 f103 	mul.w	r1, r2, r3
 801df42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801df48:	f7ff fea3 	bl	801dc92 <clamp_output>

    return ARM_MATH_SUCCESS;
 801df4c:	2300      	movs	r3, #0
}
 801df4e:	4618      	mov	r0, r3
 801df50:	3778      	adds	r7, #120	; 0x78
 801df52:	46bd      	mov	sp, r7
 801df54:	bd80      	pop	{r7, pc}

0801df56 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 801df56:	b580      	push	{r7, lr}
 801df58:	b082      	sub	sp, #8
 801df5a:	af00      	add	r7, sp, #0
 801df5c:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	2200      	movs	r2, #0
 801df62:	2104      	movs	r1, #4
 801df64:	4618      	mov	r0, r3
 801df66:	f7e5 fb17 	bl	8003598 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 801df6a:	4603      	mov	r3, r0
  }
 801df6c:	4618      	mov	r0, r3
 801df6e:	3708      	adds	r7, #8
 801df70:	46bd      	mov	sp, r7
 801df72:	bd80      	pop	{r7, pc}

0801df74 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 801df74:	b580      	push	{r7, lr}
 801df76:	b082      	sub	sp, #8
 801df78:	af00      	add	r7, sp, #0
 801df7a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	2200      	movs	r2, #0
 801df80:	210a      	movs	r1, #10
 801df82:	4618      	mov	r0, r3
 801df84:	f7e5 fada 	bl	800353c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 801df88:	4603      	mov	r3, r0
 801df8a:	b2db      	uxtb	r3, r3
  }
 801df8c:	4618      	mov	r0, r3
 801df8e:	3708      	adds	r7, #8
 801df90:	46bd      	mov	sp, r7
 801df92:	bd80      	pop	{r7, pc}

0801df94 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 801df94:	b580      	push	{r7, lr}
 801df96:	b084      	sub	sp, #16
 801df98:	af00      	add	r7, sp, #0
 801df9a:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d101      	bne.n	801dfa6 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 801dfa2:	f003 fd95 	bl	8021ad0 <abort>

  return std::max(
      op_code->builtin_code(),
 801dfa6:	6878      	ldr	r0, [r7, #4]
 801dfa8:	f7ff ffe4 	bl	801df74 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 801dfac:	4603      	mov	r3, r0
 801dfae:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 801dfb0:	6878      	ldr	r0, [r7, #4]
 801dfb2:	f7ff ffd0 	bl	801df56 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 801dfb6:	4603      	mov	r3, r0
 801dfb8:	b2db      	uxtb	r3, r3
 801dfba:	73fb      	strb	r3, [r7, #15]
 801dfbc:	f107 020f 	add.w	r2, r7, #15
 801dfc0:	f107 030e 	add.w	r3, r7, #14
 801dfc4:	4611      	mov	r1, r2
 801dfc6:	4618      	mov	r0, r3
 801dfc8:	f000 f806 	bl	801dfd8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 801dfcc:	4603      	mov	r3, r0
 801dfce:	781b      	ldrb	r3, [r3, #0]
}
 801dfd0:	4618      	mov	r0, r3
 801dfd2:	3710      	adds	r7, #16
 801dfd4:	46bd      	mov	sp, r7
 801dfd6:	bd80      	pop	{r7, pc}

0801dfd8 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 801dfd8:	b480      	push	{r7}
 801dfda:	b083      	sub	sp, #12
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
 801dfe0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	781a      	ldrb	r2, [r3, #0]
 801dfe6:	683b      	ldr	r3, [r7, #0]
 801dfe8:	781b      	ldrb	r3, [r3, #0]
 801dfea:	429a      	cmp	r2, r3
 801dfec:	d201      	bcs.n	801dff2 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 801dfee:	683b      	ldr	r3, [r7, #0]
 801dff0:	e000      	b.n	801dff4 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 801dff2:	687b      	ldr	r3, [r7, #4]
    }
 801dff4:	4618      	mov	r0, r3
 801dff6:	370c      	adds	r7, #12
 801dff8:	46bd      	mov	sp, r7
 801dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dffe:	4770      	bx	lr

0801e000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 801e000:	f8df d060 	ldr.w	sp, [pc, #96]	; 801e064 <LoopFillZerobssSDRAM+0xe>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801e004:	4818      	ldr	r0, [pc, #96]	; (801e068 <LoopFillZerobssSDRAM+0x12>)
  ldr r1, =_edata
 801e006:	4919      	ldr	r1, [pc, #100]	; (801e06c <LoopFillZerobssSDRAM+0x16>)
  ldr r2, =_sidata
 801e008:	4a19      	ldr	r2, [pc, #100]	; (801e070 <LoopFillZerobssSDRAM+0x1a>)
  movs r3, #0
 801e00a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801e00c:	e002      	b.n	801e014 <LoopCopyDataInit>

0801e00e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801e00e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801e010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801e012:	3304      	adds	r3, #4

0801e014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801e014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801e016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801e018:	d3f9      	bcc.n	801e00e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801e01a:	4a16      	ldr	r2, [pc, #88]	; (801e074 <LoopFillZerobssSDRAM+0x1e>)
  ldr r4, =_ebss
 801e01c:	4c16      	ldr	r4, [pc, #88]	; (801e078 <LoopFillZerobssSDRAM+0x22>)
  movs r3, #0
 801e01e:	2300      	movs	r3, #0
  b LoopFillZerobss
 801e020:	e001      	b.n	801e026 <LoopFillZerobss>

0801e022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801e022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801e024:	3204      	adds	r2, #4

0801e026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801e026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801e028:	d3fb      	bcc.n	801e022 <FillZerobss>
LoopFillZerobssCCMRAM:
  cmp r2, r4
  bcc FillZerobssCCMRAM*/

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801e02a:	f7e4 fa89 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801e02e:	f003 fd93 	bl	8021b58 <__libc_init_array>

/* Call own init function */
  bl init
 801e032:	f7e2 ffdf 	bl	8000ff4 <init>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 801e036:	2100      	movs	r1, #0
  b  LoopCopyDataInitSDRAM
 801e038:	e003      	b.n	801e042 <LoopCopyDataInitSDRAM>

0801e03a <CopyDataInitSDRAM>:

CopyDataInitSDRAM:
  ldr  r3, =_sisdram_data
 801e03a:	4b10      	ldr	r3, [pc, #64]	; (801e07c <LoopFillZerobssSDRAM+0x26>)
  ldr  r3, [r3, r1]
 801e03c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801e03e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801e040:	3104      	adds	r1, #4

0801e042 <LoopCopyDataInitSDRAM>:

LoopCopyDataInitSDRAM:
  ldr  r0, =_ssdram_data
 801e042:	480f      	ldr	r0, [pc, #60]	; (801e080 <LoopFillZerobssSDRAM+0x2a>)
  ldr  r3, =_esdram_data
 801e044:	4b0f      	ldr	r3, [pc, #60]	; (801e084 <LoopFillZerobssSDRAM+0x2e>)
  adds  r2, r0, r1
 801e046:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801e048:	429a      	cmp	r2, r3
  bcc  CopyDataInitSDRAM
 801e04a:	d3f6      	bcc.n	801e03a <CopyDataInitSDRAM>

/* Zero fill the sdram_bss segment. */
  ldr  r2, =_ssdram_bss
 801e04c:	4a0e      	ldr	r2, [pc, #56]	; (801e088 <LoopFillZerobssSDRAM+0x32>)
  b  LoopFillZerobssSDRAM
 801e04e:	e002      	b.n	801e056 <LoopFillZerobssSDRAM>

0801e050 <FillZerobssSDRAM>:
FillZerobssSDRAM:
  movs  r3, #0
 801e050:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801e052:	f842 3b04 	str.w	r3, [r2], #4

0801e056 <LoopFillZerobssSDRAM>:

LoopFillZerobssSDRAM:
  ldr  r3, = _esdram_bss
 801e056:	4b0d      	ldr	r3, [pc, #52]	; (801e08c <LoopFillZerobssSDRAM+0x36>)
  cmp  r2, r3
 801e058:	429a      	cmp	r2, r3
  bcc  FillZerobssSDRAM
 801e05a:	d3f9      	bcc.n	801e050 <FillZerobssSDRAM>

/* Call the application's entry point.*/
  bl  main
 801e05c:	f7e2 ffec 	bl	8001038 <main>
  bx  lr    
 801e060:	4770      	bx	lr
 801e062:	0000      	.short	0x0000
  ldr   sp, =_estack     /* set stack pointer */
 801e064:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 801e068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801e06c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 801e070:	08028990 	.word	0x08028990
  ldr r2, =_sbss
 801e074:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 801e078:	200008fc 	.word	0x200008fc
  ldr  r3, =_sisdram_data
 801e07c:	08028a10 	.word	0x08028a10
  ldr  r0, =_ssdram_data
 801e080:	c0000000 	.word	0xc0000000
  ldr  r3, =_esdram_data
 801e084:	c0000000 	.word	0xc0000000
  ldr  r2, =_ssdram_bss
 801e088:	c0000000 	.word	0xc0000000
  ldr  r3, = _esdram_bss
 801e08c:	c0251358 	.word	0xc0251358

0801e090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801e090:	e7fe      	b.n	801e090 <ADC_IRQHandler>
	...

0801e094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801e098:	4b0e      	ldr	r3, [pc, #56]	; (801e0d4 <HAL_Init+0x40>)
 801e09a:	681b      	ldr	r3, [r3, #0]
 801e09c:	4a0d      	ldr	r2, [pc, #52]	; (801e0d4 <HAL_Init+0x40>)
 801e09e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801e0a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801e0a4:	4b0b      	ldr	r3, [pc, #44]	; (801e0d4 <HAL_Init+0x40>)
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	4a0a      	ldr	r2, [pc, #40]	; (801e0d4 <HAL_Init+0x40>)
 801e0aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801e0ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801e0b0:	4b08      	ldr	r3, [pc, #32]	; (801e0d4 <HAL_Init+0x40>)
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	4a07      	ldr	r2, [pc, #28]	; (801e0d4 <HAL_Init+0x40>)
 801e0b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e0ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801e0bc:	2003      	movs	r0, #3
 801e0be:	f000 f920 	bl	801e302 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801e0c2:	200f      	movs	r0, #15
 801e0c4:	f7e4 f8b8 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801e0c8:	f7e3 fe16 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801e0cc:	2300      	movs	r3, #0
}
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	bd80      	pop	{r7, pc}
 801e0d2:	bf00      	nop
 801e0d4:	40023c00 	.word	0x40023c00

0801e0d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801e0d8:	b480      	push	{r7}
 801e0da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801e0dc:	4b06      	ldr	r3, [pc, #24]	; (801e0f8 <HAL_IncTick+0x20>)
 801e0de:	781b      	ldrb	r3, [r3, #0]
 801e0e0:	461a      	mov	r2, r3
 801e0e2:	4b06      	ldr	r3, [pc, #24]	; (801e0fc <HAL_IncTick+0x24>)
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	4413      	add	r3, r2
 801e0e8:	4a04      	ldr	r2, [pc, #16]	; (801e0fc <HAL_IncTick+0x24>)
 801e0ea:	6013      	str	r3, [r2, #0]
}
 801e0ec:	bf00      	nop
 801e0ee:	46bd      	mov	sp, r7
 801e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0f4:	4770      	bx	lr
 801e0f6:	bf00      	nop
 801e0f8:	20000010 	.word	0x20000010
 801e0fc:	200008e8 	.word	0x200008e8

0801e100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801e100:	b480      	push	{r7}
 801e102:	af00      	add	r7, sp, #0
  return uwTick;
 801e104:	4b03      	ldr	r3, [pc, #12]	; (801e114 <HAL_GetTick+0x14>)
 801e106:	681b      	ldr	r3, [r3, #0]
}
 801e108:	4618      	mov	r0, r3
 801e10a:	46bd      	mov	sp, r7
 801e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e110:	4770      	bx	lr
 801e112:	bf00      	nop
 801e114:	200008e8 	.word	0x200008e8

0801e118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801e118:	b580      	push	{r7, lr}
 801e11a:	b084      	sub	sp, #16
 801e11c:	af00      	add	r7, sp, #0
 801e11e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801e120:	f7ff ffee 	bl	801e100 <HAL_GetTick>
 801e124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e130:	d005      	beq.n	801e13e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801e132:	4b0a      	ldr	r3, [pc, #40]	; (801e15c <HAL_Delay+0x44>)
 801e134:	781b      	ldrb	r3, [r3, #0]
 801e136:	461a      	mov	r2, r3
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	4413      	add	r3, r2
 801e13c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801e13e:	bf00      	nop
 801e140:	f7ff ffde 	bl	801e100 <HAL_GetTick>
 801e144:	4602      	mov	r2, r0
 801e146:	68bb      	ldr	r3, [r7, #8]
 801e148:	1ad3      	subs	r3, r2, r3
 801e14a:	68fa      	ldr	r2, [r7, #12]
 801e14c:	429a      	cmp	r2, r3
 801e14e:	d8f7      	bhi.n	801e140 <HAL_Delay+0x28>
  {
  }
}
 801e150:	bf00      	nop
 801e152:	bf00      	nop
 801e154:	3710      	adds	r7, #16
 801e156:	46bd      	mov	sp, r7
 801e158:	bd80      	pop	{r7, pc}
 801e15a:	bf00      	nop
 801e15c:	20000010 	.word	0x20000010

0801e160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801e160:	b480      	push	{r7}
 801e162:	b085      	sub	sp, #20
 801e164:	af00      	add	r7, sp, #0
 801e166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	f003 0307 	and.w	r3, r3, #7
 801e16e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801e170:	4b0c      	ldr	r3, [pc, #48]	; (801e1a4 <__NVIC_SetPriorityGrouping+0x44>)
 801e172:	68db      	ldr	r3, [r3, #12]
 801e174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801e176:	68ba      	ldr	r2, [r7, #8]
 801e178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801e17c:	4013      	ands	r3, r2
 801e17e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801e184:	68bb      	ldr	r3, [r7, #8]
 801e186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801e188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801e18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801e190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801e192:	4a04      	ldr	r2, [pc, #16]	; (801e1a4 <__NVIC_SetPriorityGrouping+0x44>)
 801e194:	68bb      	ldr	r3, [r7, #8]
 801e196:	60d3      	str	r3, [r2, #12]
}
 801e198:	bf00      	nop
 801e19a:	3714      	adds	r7, #20
 801e19c:	46bd      	mov	sp, r7
 801e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1a2:	4770      	bx	lr
 801e1a4:	e000ed00 	.word	0xe000ed00

0801e1a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801e1a8:	b480      	push	{r7}
 801e1aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801e1ac:	4b04      	ldr	r3, [pc, #16]	; (801e1c0 <__NVIC_GetPriorityGrouping+0x18>)
 801e1ae:	68db      	ldr	r3, [r3, #12]
 801e1b0:	0a1b      	lsrs	r3, r3, #8
 801e1b2:	f003 0307 	and.w	r3, r3, #7
}
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	46bd      	mov	sp, r7
 801e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1be:	4770      	bx	lr
 801e1c0:	e000ed00 	.word	0xe000ed00

0801e1c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801e1c4:	b480      	push	{r7}
 801e1c6:	b083      	sub	sp, #12
 801e1c8:	af00      	add	r7, sp, #0
 801e1ca:	4603      	mov	r3, r0
 801e1cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	db0b      	blt.n	801e1ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801e1d6:	79fb      	ldrb	r3, [r7, #7]
 801e1d8:	f003 021f 	and.w	r2, r3, #31
 801e1dc:	4907      	ldr	r1, [pc, #28]	; (801e1fc <__NVIC_EnableIRQ+0x38>)
 801e1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e1e2:	095b      	lsrs	r3, r3, #5
 801e1e4:	2001      	movs	r0, #1
 801e1e6:	fa00 f202 	lsl.w	r2, r0, r2
 801e1ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801e1ee:	bf00      	nop
 801e1f0:	370c      	adds	r7, #12
 801e1f2:	46bd      	mov	sp, r7
 801e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1f8:	4770      	bx	lr
 801e1fa:	bf00      	nop
 801e1fc:	e000e100 	.word	0xe000e100

0801e200 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801e200:	b480      	push	{r7}
 801e202:	b083      	sub	sp, #12
 801e204:	af00      	add	r7, sp, #0
 801e206:	4603      	mov	r3, r0
 801e208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e20a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e20e:	2b00      	cmp	r3, #0
 801e210:	db12      	blt.n	801e238 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801e212:	79fb      	ldrb	r3, [r7, #7]
 801e214:	f003 021f 	and.w	r2, r3, #31
 801e218:	490a      	ldr	r1, [pc, #40]	; (801e244 <__NVIC_DisableIRQ+0x44>)
 801e21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e21e:	095b      	lsrs	r3, r3, #5
 801e220:	2001      	movs	r0, #1
 801e222:	fa00 f202 	lsl.w	r2, r0, r2
 801e226:	3320      	adds	r3, #32
 801e228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801e22c:	f3bf 8f4f 	dsb	sy
}
 801e230:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801e232:	f3bf 8f6f 	isb	sy
}
 801e236:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 801e238:	bf00      	nop
 801e23a:	370c      	adds	r7, #12
 801e23c:	46bd      	mov	sp, r7
 801e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e242:	4770      	bx	lr
 801e244:	e000e100 	.word	0xe000e100

0801e248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801e248:	b480      	push	{r7}
 801e24a:	b083      	sub	sp, #12
 801e24c:	af00      	add	r7, sp, #0
 801e24e:	4603      	mov	r3, r0
 801e250:	6039      	str	r1, [r7, #0]
 801e252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801e254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e258:	2b00      	cmp	r3, #0
 801e25a:	db0a      	blt.n	801e272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e25c:	683b      	ldr	r3, [r7, #0]
 801e25e:	b2da      	uxtb	r2, r3
 801e260:	490c      	ldr	r1, [pc, #48]	; (801e294 <__NVIC_SetPriority+0x4c>)
 801e262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e266:	0112      	lsls	r2, r2, #4
 801e268:	b2d2      	uxtb	r2, r2
 801e26a:	440b      	add	r3, r1
 801e26c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801e270:	e00a      	b.n	801e288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801e272:	683b      	ldr	r3, [r7, #0]
 801e274:	b2da      	uxtb	r2, r3
 801e276:	4908      	ldr	r1, [pc, #32]	; (801e298 <__NVIC_SetPriority+0x50>)
 801e278:	79fb      	ldrb	r3, [r7, #7]
 801e27a:	f003 030f 	and.w	r3, r3, #15
 801e27e:	3b04      	subs	r3, #4
 801e280:	0112      	lsls	r2, r2, #4
 801e282:	b2d2      	uxtb	r2, r2
 801e284:	440b      	add	r3, r1
 801e286:	761a      	strb	r2, [r3, #24]
}
 801e288:	bf00      	nop
 801e28a:	370c      	adds	r7, #12
 801e28c:	46bd      	mov	sp, r7
 801e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e292:	4770      	bx	lr
 801e294:	e000e100 	.word	0xe000e100
 801e298:	e000ed00 	.word	0xe000ed00

0801e29c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801e29c:	b480      	push	{r7}
 801e29e:	b089      	sub	sp, #36	; 0x24
 801e2a0:	af00      	add	r7, sp, #0
 801e2a2:	60f8      	str	r0, [r7, #12]
 801e2a4:	60b9      	str	r1, [r7, #8]
 801e2a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	f003 0307 	and.w	r3, r3, #7
 801e2ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801e2b0:	69fb      	ldr	r3, [r7, #28]
 801e2b2:	f1c3 0307 	rsb	r3, r3, #7
 801e2b6:	2b04      	cmp	r3, #4
 801e2b8:	bf28      	it	cs
 801e2ba:	2304      	movcs	r3, #4
 801e2bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801e2be:	69fb      	ldr	r3, [r7, #28]
 801e2c0:	3304      	adds	r3, #4
 801e2c2:	2b06      	cmp	r3, #6
 801e2c4:	d902      	bls.n	801e2cc <NVIC_EncodePriority+0x30>
 801e2c6:	69fb      	ldr	r3, [r7, #28]
 801e2c8:	3b03      	subs	r3, #3
 801e2ca:	e000      	b.n	801e2ce <NVIC_EncodePriority+0x32>
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e2d0:	f04f 32ff 	mov.w	r2, #4294967295
 801e2d4:	69bb      	ldr	r3, [r7, #24]
 801e2d6:	fa02 f303 	lsl.w	r3, r2, r3
 801e2da:	43da      	mvns	r2, r3
 801e2dc:	68bb      	ldr	r3, [r7, #8]
 801e2de:	401a      	ands	r2, r3
 801e2e0:	697b      	ldr	r3, [r7, #20]
 801e2e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801e2e4:	f04f 31ff 	mov.w	r1, #4294967295
 801e2e8:	697b      	ldr	r3, [r7, #20]
 801e2ea:	fa01 f303 	lsl.w	r3, r1, r3
 801e2ee:	43d9      	mvns	r1, r3
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e2f4:	4313      	orrs	r3, r2
         );
}
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	3724      	adds	r7, #36	; 0x24
 801e2fa:	46bd      	mov	sp, r7
 801e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e300:	4770      	bx	lr

0801e302 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801e302:	b580      	push	{r7, lr}
 801e304:	b082      	sub	sp, #8
 801e306:	af00      	add	r7, sp, #0
 801e308:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801e30a:	6878      	ldr	r0, [r7, #4]
 801e30c:	f7ff ff28 	bl	801e160 <__NVIC_SetPriorityGrouping>
}
 801e310:	bf00      	nop
 801e312:	3708      	adds	r7, #8
 801e314:	46bd      	mov	sp, r7
 801e316:	bd80      	pop	{r7, pc}

0801e318 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801e318:	b580      	push	{r7, lr}
 801e31a:	b086      	sub	sp, #24
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	4603      	mov	r3, r0
 801e320:	60b9      	str	r1, [r7, #8]
 801e322:	607a      	str	r2, [r7, #4]
 801e324:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801e326:	2300      	movs	r3, #0
 801e328:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801e32a:	f7ff ff3d 	bl	801e1a8 <__NVIC_GetPriorityGrouping>
 801e32e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801e330:	687a      	ldr	r2, [r7, #4]
 801e332:	68b9      	ldr	r1, [r7, #8]
 801e334:	6978      	ldr	r0, [r7, #20]
 801e336:	f7ff ffb1 	bl	801e29c <NVIC_EncodePriority>
 801e33a:	4602      	mov	r2, r0
 801e33c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e340:	4611      	mov	r1, r2
 801e342:	4618      	mov	r0, r3
 801e344:	f7ff ff80 	bl	801e248 <__NVIC_SetPriority>
}
 801e348:	bf00      	nop
 801e34a:	3718      	adds	r7, #24
 801e34c:	46bd      	mov	sp, r7
 801e34e:	bd80      	pop	{r7, pc}

0801e350 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801e350:	b580      	push	{r7, lr}
 801e352:	b082      	sub	sp, #8
 801e354:	af00      	add	r7, sp, #0
 801e356:	4603      	mov	r3, r0
 801e358:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801e35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e35e:	4618      	mov	r0, r3
 801e360:	f7ff ff30 	bl	801e1c4 <__NVIC_EnableIRQ>
}
 801e364:	bf00      	nop
 801e366:	3708      	adds	r7, #8
 801e368:	46bd      	mov	sp, r7
 801e36a:	bd80      	pop	{r7, pc}

0801e36c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 801e36c:	b580      	push	{r7, lr}
 801e36e:	b082      	sub	sp, #8
 801e370:	af00      	add	r7, sp, #0
 801e372:	4603      	mov	r3, r0
 801e374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801e376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e37a:	4618      	mov	r0, r3
 801e37c:	f7ff ff40 	bl	801e200 <__NVIC_DisableIRQ>
}
 801e380:	bf00      	nop
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b086      	sub	sp, #24
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801e390:	2300      	movs	r3, #0
 801e392:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801e394:	f7ff feb4 	bl	801e100 <HAL_GetTick>
 801e398:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d101      	bne.n	801e3a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801e3a0:	2301      	movs	r3, #1
 801e3a2:	e099      	b.n	801e4d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2202      	movs	r2, #2
 801e3a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	2200      	movs	r2, #0
 801e3b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	681a      	ldr	r2, [r3, #0]
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	681b      	ldr	r3, [r3, #0]
 801e3be:	f022 0201 	bic.w	r2, r2, #1
 801e3c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e3c4:	e00f      	b.n	801e3e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e3c6:	f7ff fe9b 	bl	801e100 <HAL_GetTick>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	693b      	ldr	r3, [r7, #16]
 801e3ce:	1ad3      	subs	r3, r2, r3
 801e3d0:	2b05      	cmp	r3, #5
 801e3d2:	d908      	bls.n	801e3e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e3d4:	687b      	ldr	r3, [r7, #4]
 801e3d6:	2220      	movs	r2, #32
 801e3d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	2203      	movs	r2, #3
 801e3de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801e3e2:	2303      	movs	r3, #3
 801e3e4:	e078      	b.n	801e4d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	681b      	ldr	r3, [r3, #0]
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	f003 0301 	and.w	r3, r3, #1
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	d1e8      	bne.n	801e3c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801e3fc:	697a      	ldr	r2, [r7, #20]
 801e3fe:	4b38      	ldr	r3, [pc, #224]	; (801e4e0 <HAL_DMA_Init+0x158>)
 801e400:	4013      	ands	r3, r2
 801e402:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	685a      	ldr	r2, [r3, #4]
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	689b      	ldr	r3, [r3, #8]
 801e40c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e412:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	691b      	ldr	r3, [r3, #16]
 801e418:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e41e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	699b      	ldr	r3, [r3, #24]
 801e424:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e42a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	6a1b      	ldr	r3, [r3, #32]
 801e430:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e432:	697a      	ldr	r2, [r7, #20]
 801e434:	4313      	orrs	r3, r2
 801e436:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e43c:	2b04      	cmp	r3, #4
 801e43e:	d107      	bne.n	801e450 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e448:	4313      	orrs	r3, r2
 801e44a:	697a      	ldr	r2, [r7, #20]
 801e44c:	4313      	orrs	r3, r2
 801e44e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	697a      	ldr	r2, [r7, #20]
 801e456:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	695b      	ldr	r3, [r3, #20]
 801e45e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801e460:	697b      	ldr	r3, [r7, #20]
 801e462:	f023 0307 	bic.w	r3, r3, #7
 801e466:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e46c:	697a      	ldr	r2, [r7, #20]
 801e46e:	4313      	orrs	r3, r2
 801e470:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e472:	687b      	ldr	r3, [r7, #4]
 801e474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e476:	2b04      	cmp	r3, #4
 801e478:	d117      	bne.n	801e4aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e47e:	697a      	ldr	r2, [r7, #20]
 801e480:	4313      	orrs	r3, r2
 801e482:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d00e      	beq.n	801e4aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801e48c:	6878      	ldr	r0, [r7, #4]
 801e48e:	f000 fbbf 	bl	801ec10 <DMA_CheckFifoParam>
 801e492:	4603      	mov	r3, r0
 801e494:	2b00      	cmp	r3, #0
 801e496:	d008      	beq.n	801e4aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	2240      	movs	r2, #64	; 0x40
 801e49c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	2201      	movs	r2, #1
 801e4a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801e4a6:	2301      	movs	r3, #1
 801e4a8:	e016      	b.n	801e4d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	697a      	ldr	r2, [r7, #20]
 801e4b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e4b2:	6878      	ldr	r0, [r7, #4]
 801e4b4:	f000 fb76 	bl	801eba4 <DMA_CalcBaseAndBitshift>
 801e4b8:	4603      	mov	r3, r0
 801e4ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e4c0:	223f      	movs	r2, #63	; 0x3f
 801e4c2:	409a      	lsls	r2, r3
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	2200      	movs	r2, #0
 801e4cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	2201      	movs	r2, #1
 801e4d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801e4d6:	2300      	movs	r3, #0
}
 801e4d8:	4618      	mov	r0, r3
 801e4da:	3718      	adds	r7, #24
 801e4dc:	46bd      	mov	sp, r7
 801e4de:	bd80      	pop	{r7, pc}
 801e4e0:	f010803f 	.word	0xf010803f

0801e4e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 801e4e4:	b580      	push	{r7, lr}
 801e4e6:	b084      	sub	sp, #16
 801e4e8:	af00      	add	r7, sp, #0
 801e4ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	2b00      	cmp	r3, #0
 801e4f0:	d101      	bne.n	801e4f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801e4f2:	2301      	movs	r3, #1
 801e4f4:	e050      	b.n	801e598 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e4fc:	b2db      	uxtb	r3, r3
 801e4fe:	2b02      	cmp	r3, #2
 801e500:	d101      	bne.n	801e506 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 801e502:	2302      	movs	r3, #2
 801e504:	e048      	b.n	801e598 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	681a      	ldr	r2, [r3, #0]
 801e50c:	687b      	ldr	r3, [r7, #4]
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	f022 0201 	bic.w	r2, r2, #1
 801e514:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	681b      	ldr	r3, [r3, #0]
 801e51a:	2200      	movs	r2, #0
 801e51c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	2200      	movs	r2, #0
 801e524:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	681b      	ldr	r3, [r3, #0]
 801e52a:	2200      	movs	r2, #0
 801e52c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	2200      	movs	r2, #0
 801e534:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	2200      	movs	r2, #0
 801e53c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	2221      	movs	r2, #33	; 0x21
 801e544:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e546:	6878      	ldr	r0, [r7, #4]
 801e548:	f000 fb2c 	bl	801eba4 <DMA_CalcBaseAndBitshift>
 801e54c:	4603      	mov	r3, r0
 801e54e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	2200      	movs	r2, #0
 801e554:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	2200      	movs	r2, #0
 801e55a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	2200      	movs	r2, #0
 801e560:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	2200      	movs	r2, #0
 801e566:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	2200      	movs	r2, #0
 801e56c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	2200      	movs	r2, #0
 801e572:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e578:	223f      	movs	r2, #63	; 0x3f
 801e57a:	409a      	lsls	r2, r3
 801e57c:	68fb      	ldr	r3, [r7, #12]
 801e57e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	2200      	movs	r2, #0
 801e584:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	2200      	movs	r2, #0
 801e58a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	2200      	movs	r2, #0
 801e592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801e596:	2300      	movs	r3, #0
}
 801e598:	4618      	mov	r0, r3
 801e59a:	3710      	adds	r7, #16
 801e59c:	46bd      	mov	sp, r7
 801e59e:	bd80      	pop	{r7, pc}

0801e5a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e5a0:	b580      	push	{r7, lr}
 801e5a2:	b086      	sub	sp, #24
 801e5a4:	af00      	add	r7, sp, #0
 801e5a6:	60f8      	str	r0, [r7, #12]
 801e5a8:	60b9      	str	r1, [r7, #8]
 801e5aa:	607a      	str	r2, [r7, #4]
 801e5ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e5ae:	2300      	movs	r3, #0
 801e5b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e5b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e5be:	2b01      	cmp	r3, #1
 801e5c0:	d101      	bne.n	801e5c6 <HAL_DMA_Start_IT+0x26>
 801e5c2:	2302      	movs	r3, #2
 801e5c4:	e040      	b.n	801e648 <HAL_DMA_Start_IT+0xa8>
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	2201      	movs	r2, #1
 801e5ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e5d4:	b2db      	uxtb	r3, r3
 801e5d6:	2b01      	cmp	r3, #1
 801e5d8:	d12f      	bne.n	801e63a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	2202      	movs	r2, #2
 801e5de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e5e2:	68fb      	ldr	r3, [r7, #12]
 801e5e4:	2200      	movs	r2, #0
 801e5e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e5e8:	683b      	ldr	r3, [r7, #0]
 801e5ea:	687a      	ldr	r2, [r7, #4]
 801e5ec:	68b9      	ldr	r1, [r7, #8]
 801e5ee:	68f8      	ldr	r0, [r7, #12]
 801e5f0:	f000 faaa 	bl	801eb48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e5f8:	223f      	movs	r2, #63	; 0x3f
 801e5fa:	409a      	lsls	r2, r3
 801e5fc:	693b      	ldr	r3, [r7, #16]
 801e5fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	681a      	ldr	r2, [r3, #0]
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	681b      	ldr	r3, [r3, #0]
 801e60a:	f042 0216 	orr.w	r2, r2, #22
 801e60e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e614:	2b00      	cmp	r3, #0
 801e616:	d007      	beq.n	801e628 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e618:	68fb      	ldr	r3, [r7, #12]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	681a      	ldr	r2, [r3, #0]
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	681b      	ldr	r3, [r3, #0]
 801e622:	f042 0208 	orr.w	r2, r2, #8
 801e626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e628:	68fb      	ldr	r3, [r7, #12]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	681a      	ldr	r2, [r3, #0]
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	681b      	ldr	r3, [r3, #0]
 801e632:	f042 0201 	orr.w	r2, r2, #1
 801e636:	601a      	str	r2, [r3, #0]
 801e638:	e005      	b.n	801e646 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e63a:	68fb      	ldr	r3, [r7, #12]
 801e63c:	2200      	movs	r2, #0
 801e63e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e642:	2302      	movs	r3, #2
 801e644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e646:	7dfb      	ldrb	r3, [r7, #23]
}
 801e648:	4618      	mov	r0, r3
 801e64a:	3718      	adds	r7, #24
 801e64c:	46bd      	mov	sp, r7
 801e64e:	bd80      	pop	{r7, pc}

0801e650 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801e650:	b580      	push	{r7, lr}
 801e652:	b084      	sub	sp, #16
 801e654:	af00      	add	r7, sp, #0
 801e656:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e65c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801e65e:	f7ff fd4f 	bl	801e100 <HAL_GetTick>
 801e662:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e66a:	b2db      	uxtb	r3, r3
 801e66c:	2b02      	cmp	r3, #2
 801e66e:	d008      	beq.n	801e682 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	2280      	movs	r2, #128	; 0x80
 801e674:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	2200      	movs	r2, #0
 801e67a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801e67e:	2301      	movs	r3, #1
 801e680:	e052      	b.n	801e728 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e682:	687b      	ldr	r3, [r7, #4]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	681a      	ldr	r2, [r3, #0]
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	681b      	ldr	r3, [r3, #0]
 801e68c:	f022 0216 	bic.w	r2, r2, #22
 801e690:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	695a      	ldr	r2, [r3, #20]
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e6a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d103      	bne.n	801e6b2 <HAL_DMA_Abort+0x62>
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d007      	beq.n	801e6c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	681b      	ldr	r3, [r3, #0]
 801e6b6:	681a      	ldr	r2, [r3, #0]
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	f022 0208 	bic.w	r2, r2, #8
 801e6c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	681a      	ldr	r2, [r3, #0]
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	f022 0201 	bic.w	r2, r2, #1
 801e6d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e6d2:	e013      	b.n	801e6fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e6d4:	f7ff fd14 	bl	801e100 <HAL_GetTick>
 801e6d8:	4602      	mov	r2, r0
 801e6da:	68bb      	ldr	r3, [r7, #8]
 801e6dc:	1ad3      	subs	r3, r2, r3
 801e6de:	2b05      	cmp	r3, #5
 801e6e0:	d90c      	bls.n	801e6fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e6e2:	687b      	ldr	r3, [r7, #4]
 801e6e4:	2220      	movs	r2, #32
 801e6e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	2203      	movs	r2, #3
 801e6ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 801e6f8:	2303      	movs	r3, #3
 801e6fa:	e015      	b.n	801e728 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	f003 0301 	and.w	r3, r3, #1
 801e706:	2b00      	cmp	r3, #0
 801e708:	d1e4      	bne.n	801e6d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e70a:	687b      	ldr	r3, [r7, #4]
 801e70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e70e:	223f      	movs	r2, #63	; 0x3f
 801e710:	409a      	lsls	r2, r3
 801e712:	68fb      	ldr	r3, [r7, #12]
 801e714:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	2201      	movs	r2, #1
 801e71a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	2200      	movs	r2, #0
 801e722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 801e726:	2300      	movs	r3, #0
}
 801e728:	4618      	mov	r0, r3
 801e72a:	3710      	adds	r7, #16
 801e72c:	46bd      	mov	sp, r7
 801e72e:	bd80      	pop	{r7, pc}

0801e730 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e730:	b480      	push	{r7}
 801e732:	b083      	sub	sp, #12
 801e734:	af00      	add	r7, sp, #0
 801e736:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e73e:	b2db      	uxtb	r3, r3
 801e740:	2b02      	cmp	r3, #2
 801e742:	d004      	beq.n	801e74e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	2280      	movs	r2, #128	; 0x80
 801e748:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e74a:	2301      	movs	r3, #1
 801e74c:	e00c      	b.n	801e768 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	2205      	movs	r2, #5
 801e752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	681a      	ldr	r2, [r3, #0]
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	f022 0201 	bic.w	r2, r2, #1
 801e764:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e766:	2300      	movs	r3, #0
}
 801e768:	4618      	mov	r0, r3
 801e76a:	370c      	adds	r7, #12
 801e76c:	46bd      	mov	sp, r7
 801e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e772:	4770      	bx	lr

0801e774 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e774:	b580      	push	{r7, lr}
 801e776:	b086      	sub	sp, #24
 801e778:	af00      	add	r7, sp, #0
 801e77a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e77c:	2300      	movs	r3, #0
 801e77e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e780:	4b92      	ldr	r3, [pc, #584]	; (801e9cc <HAL_DMA_IRQHandler+0x258>)
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	4a92      	ldr	r2, [pc, #584]	; (801e9d0 <HAL_DMA_IRQHandler+0x25c>)
 801e786:	fba2 2303 	umull	r2, r3, r2, r3
 801e78a:	0a9b      	lsrs	r3, r3, #10
 801e78c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e792:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e794:	693b      	ldr	r3, [r7, #16]
 801e796:	681b      	ldr	r3, [r3, #0]
 801e798:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e79e:	2208      	movs	r2, #8
 801e7a0:	409a      	lsls	r2, r3
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	4013      	ands	r3, r2
 801e7a6:	2b00      	cmp	r3, #0
 801e7a8:	d01a      	beq.n	801e7e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	681b      	ldr	r3, [r3, #0]
 801e7b0:	f003 0304 	and.w	r3, r3, #4
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	d013      	beq.n	801e7e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	681a      	ldr	r2, [r3, #0]
 801e7be:	687b      	ldr	r3, [r7, #4]
 801e7c0:	681b      	ldr	r3, [r3, #0]
 801e7c2:	f022 0204 	bic.w	r2, r2, #4
 801e7c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e7cc:	2208      	movs	r2, #8
 801e7ce:	409a      	lsls	r2, r3
 801e7d0:	693b      	ldr	r3, [r7, #16]
 801e7d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e7d4:	687b      	ldr	r3, [r7, #4]
 801e7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e7d8:	f043 0201 	orr.w	r2, r3, #1
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e7e4:	2201      	movs	r2, #1
 801e7e6:	409a      	lsls	r2, r3
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	4013      	ands	r3, r2
 801e7ec:	2b00      	cmp	r3, #0
 801e7ee:	d012      	beq.n	801e816 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	695b      	ldr	r3, [r3, #20]
 801e7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e7fa:	2b00      	cmp	r3, #0
 801e7fc:	d00b      	beq.n	801e816 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e802:	2201      	movs	r2, #1
 801e804:	409a      	lsls	r2, r3
 801e806:	693b      	ldr	r3, [r7, #16]
 801e808:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e80e:	f043 0202 	orr.w	r2, r3, #2
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e81a:	2204      	movs	r2, #4
 801e81c:	409a      	lsls	r2, r3
 801e81e:	68fb      	ldr	r3, [r7, #12]
 801e820:	4013      	ands	r3, r2
 801e822:	2b00      	cmp	r3, #0
 801e824:	d012      	beq.n	801e84c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	681b      	ldr	r3, [r3, #0]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	f003 0302 	and.w	r3, r3, #2
 801e830:	2b00      	cmp	r3, #0
 801e832:	d00b      	beq.n	801e84c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e838:	2204      	movs	r2, #4
 801e83a:	409a      	lsls	r2, r3
 801e83c:	693b      	ldr	r3, [r7, #16]
 801e83e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e844:	f043 0204 	orr.w	r2, r3, #4
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e850:	2210      	movs	r2, #16
 801e852:	409a      	lsls	r2, r3
 801e854:	68fb      	ldr	r3, [r7, #12]
 801e856:	4013      	ands	r3, r2
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d043      	beq.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	681b      	ldr	r3, [r3, #0]
 801e862:	f003 0308 	and.w	r3, r3, #8
 801e866:	2b00      	cmp	r3, #0
 801e868:	d03c      	beq.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e86e:	2210      	movs	r2, #16
 801e870:	409a      	lsls	r2, r3
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	681b      	ldr	r3, [r3, #0]
 801e87a:	681b      	ldr	r3, [r3, #0]
 801e87c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e880:	2b00      	cmp	r3, #0
 801e882:	d018      	beq.n	801e8b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d108      	bne.n	801e8a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e896:	2b00      	cmp	r3, #0
 801e898:	d024      	beq.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e89e:	6878      	ldr	r0, [r7, #4]
 801e8a0:	4798      	blx	r3
 801e8a2:	e01f      	b.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e8a8:	2b00      	cmp	r3, #0
 801e8aa:	d01b      	beq.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e8b0:	6878      	ldr	r0, [r7, #4]
 801e8b2:	4798      	blx	r3
 801e8b4:	e016      	b.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	681b      	ldr	r3, [r3, #0]
 801e8bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d107      	bne.n	801e8d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	681a      	ldr	r2, [r3, #0]
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	681b      	ldr	r3, [r3, #0]
 801e8ce:	f022 0208 	bic.w	r2, r2, #8
 801e8d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d003      	beq.n	801e8e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e8e0:	6878      	ldr	r0, [r7, #4]
 801e8e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e8e8:	2220      	movs	r2, #32
 801e8ea:	409a      	lsls	r2, r3
 801e8ec:	68fb      	ldr	r3, [r7, #12]
 801e8ee:	4013      	ands	r3, r2
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	f000 808e 	beq.w	801ea12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	681b      	ldr	r3, [r3, #0]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	f003 0310 	and.w	r3, r3, #16
 801e900:	2b00      	cmp	r3, #0
 801e902:	f000 8086 	beq.w	801ea12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e90a:	2220      	movs	r2, #32
 801e90c:	409a      	lsls	r2, r3
 801e90e:	693b      	ldr	r3, [r7, #16]
 801e910:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e912:	687b      	ldr	r3, [r7, #4]
 801e914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e918:	b2db      	uxtb	r3, r3
 801e91a:	2b05      	cmp	r3, #5
 801e91c:	d136      	bne.n	801e98c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	681a      	ldr	r2, [r3, #0]
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	f022 0216 	bic.w	r2, r2, #22
 801e92c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	695a      	ldr	r2, [r3, #20]
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	681b      	ldr	r3, [r3, #0]
 801e938:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e93c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e942:	2b00      	cmp	r3, #0
 801e944:	d103      	bne.n	801e94e <HAL_DMA_IRQHandler+0x1da>
 801e946:	687b      	ldr	r3, [r7, #4]
 801e948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e94a:	2b00      	cmp	r3, #0
 801e94c:	d007      	beq.n	801e95e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	681a      	ldr	r2, [r3, #0]
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	f022 0208 	bic.w	r2, r2, #8
 801e95c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e962:	223f      	movs	r2, #63	; 0x3f
 801e964:	409a      	lsls	r2, r3
 801e966:	693b      	ldr	r3, [r7, #16]
 801e968:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	2201      	movs	r2, #1
 801e96e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	2200      	movs	r2, #0
 801e976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d07d      	beq.n	801ea7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e986:	6878      	ldr	r0, [r7, #4]
 801e988:	4798      	blx	r3
        }
        return;
 801e98a:	e078      	b.n	801ea7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e996:	2b00      	cmp	r3, #0
 801e998:	d01c      	beq.n	801e9d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d108      	bne.n	801e9ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d030      	beq.n	801ea12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9b4:	6878      	ldr	r0, [r7, #4]
 801e9b6:	4798      	blx	r3
 801e9b8:	e02b      	b.n	801ea12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d027      	beq.n	801ea12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9c6:	6878      	ldr	r0, [r7, #4]
 801e9c8:	4798      	blx	r3
 801e9ca:	e022      	b.n	801ea12 <HAL_DMA_IRQHandler+0x29e>
 801e9cc:	20000004 	.word	0x20000004
 801e9d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	681b      	ldr	r3, [r3, #0]
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d10f      	bne.n	801ea02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	681a      	ldr	r2, [r3, #0]
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	681b      	ldr	r3, [r3, #0]
 801e9ec:	f022 0210 	bic.w	r2, r2, #16
 801e9f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	2201      	movs	r2, #1
 801e9f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	2200      	movs	r2, #0
 801e9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d003      	beq.n	801ea12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ea0e:	6878      	ldr	r0, [r7, #4]
 801ea10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ea16:	2b00      	cmp	r3, #0
 801ea18:	d032      	beq.n	801ea80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ea1e:	f003 0301 	and.w	r3, r3, #1
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d022      	beq.n	801ea6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	2205      	movs	r2, #5
 801ea2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	681b      	ldr	r3, [r3, #0]
 801ea32:	681a      	ldr	r2, [r3, #0]
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	681b      	ldr	r3, [r3, #0]
 801ea38:	f022 0201 	bic.w	r2, r2, #1
 801ea3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801ea3e:	68bb      	ldr	r3, [r7, #8]
 801ea40:	3301      	adds	r3, #1
 801ea42:	60bb      	str	r3, [r7, #8]
 801ea44:	697a      	ldr	r2, [r7, #20]
 801ea46:	429a      	cmp	r2, r3
 801ea48:	d307      	bcc.n	801ea5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	f003 0301 	and.w	r3, r3, #1
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d1f2      	bne.n	801ea3e <HAL_DMA_IRQHandler+0x2ca>
 801ea58:	e000      	b.n	801ea5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 801ea5a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	2201      	movs	r2, #1
 801ea60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	2200      	movs	r2, #0
 801ea68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ea70:	2b00      	cmp	r3, #0
 801ea72:	d005      	beq.n	801ea80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ea78:	6878      	ldr	r0, [r7, #4]
 801ea7a:	4798      	blx	r3
 801ea7c:	e000      	b.n	801ea80 <HAL_DMA_IRQHandler+0x30c>
        return;
 801ea7e:	bf00      	nop
    }
  }
}
 801ea80:	3718      	adds	r7, #24
 801ea82:	46bd      	mov	sp, r7
 801ea84:	bd80      	pop	{r7, pc}
 801ea86:	bf00      	nop

0801ea88 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 801ea88:	b480      	push	{r7}
 801ea8a:	b087      	sub	sp, #28
 801ea8c:	af00      	add	r7, sp, #0
 801ea8e:	60f8      	str	r0, [r7, #12]
 801ea90:	460b      	mov	r3, r1
 801ea92:	607a      	str	r2, [r7, #4]
 801ea94:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 801ea96:	2300      	movs	r3, #0
 801ea98:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801eaa0:	2b01      	cmp	r3, #1
 801eaa2:	d101      	bne.n	801eaa8 <HAL_DMA_RegisterCallback+0x20>
 801eaa4:	2302      	movs	r3, #2
 801eaa6:	e03c      	b.n	801eb22 <HAL_DMA_RegisterCallback+0x9a>
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	2201      	movs	r2, #1
 801eaac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801eab6:	b2db      	uxtb	r3, r3
 801eab8:	2b01      	cmp	r3, #1
 801eaba:	d129      	bne.n	801eb10 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 801eabc:	7afb      	ldrb	r3, [r7, #11]
 801eabe:	2b05      	cmp	r3, #5
 801eac0:	d829      	bhi.n	801eb16 <HAL_DMA_RegisterCallback+0x8e>
 801eac2:	a201      	add	r2, pc, #4	; (adr r2, 801eac8 <HAL_DMA_RegisterCallback+0x40>)
 801eac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eac8:	0801eae1 	.word	0x0801eae1
 801eacc:	0801eae9 	.word	0x0801eae9
 801ead0:	0801eaf1 	.word	0x0801eaf1
 801ead4:	0801eaf9 	.word	0x0801eaf9
 801ead8:	0801eb01 	.word	0x0801eb01
 801eadc:	0801eb09 	.word	0x0801eb09
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 801eae0:	68fb      	ldr	r3, [r7, #12]
 801eae2:	687a      	ldr	r2, [r7, #4]
 801eae4:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 801eae6:	e017      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 801eae8:	68fb      	ldr	r3, [r7, #12]
 801eaea:	687a      	ldr	r2, [r7, #4]
 801eaec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801eaee:	e013      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 801eaf0:	68fb      	ldr	r3, [r7, #12]
 801eaf2:	687a      	ldr	r2, [r7, #4]
 801eaf4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 801eaf6:	e00f      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 801eaf8:	68fb      	ldr	r3, [r7, #12]
 801eafa:	687a      	ldr	r2, [r7, #4]
 801eafc:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 801eafe:	e00b      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	687a      	ldr	r2, [r7, #4]
 801eb04:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 801eb06:	e007      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	687a      	ldr	r2, [r7, #4]
 801eb0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801eb0e:	e003      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 801eb10:	2301      	movs	r3, #1
 801eb12:	75fb      	strb	r3, [r7, #23]
 801eb14:	e000      	b.n	801eb18 <HAL_DMA_RegisterCallback+0x90>
      break;
 801eb16:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	2200      	movs	r2, #0
 801eb1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 801eb20:	7dfb      	ldrb	r3, [r7, #23]
}
 801eb22:	4618      	mov	r0, r3
 801eb24:	371c      	adds	r7, #28
 801eb26:	46bd      	mov	sp, r7
 801eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb2c:	4770      	bx	lr
 801eb2e:	bf00      	nop

0801eb30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 801eb30:	b480      	push	{r7}
 801eb32:	b083      	sub	sp, #12
 801eb34:	af00      	add	r7, sp, #0
 801eb36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 801eb3c:	4618      	mov	r0, r3
 801eb3e:	370c      	adds	r7, #12
 801eb40:	46bd      	mov	sp, r7
 801eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb46:	4770      	bx	lr

0801eb48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801eb48:	b480      	push	{r7}
 801eb4a:	b085      	sub	sp, #20
 801eb4c:	af00      	add	r7, sp, #0
 801eb4e:	60f8      	str	r0, [r7, #12]
 801eb50:	60b9      	str	r1, [r7, #8]
 801eb52:	607a      	str	r2, [r7, #4]
 801eb54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801eb56:	68fb      	ldr	r3, [r7, #12]
 801eb58:	681b      	ldr	r3, [r3, #0]
 801eb5a:	681a      	ldr	r2, [r3, #0]
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801eb64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	683a      	ldr	r2, [r7, #0]
 801eb6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801eb6e:	68fb      	ldr	r3, [r7, #12]
 801eb70:	689b      	ldr	r3, [r3, #8]
 801eb72:	2b40      	cmp	r3, #64	; 0x40
 801eb74:	d108      	bne.n	801eb88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801eb76:	68fb      	ldr	r3, [r7, #12]
 801eb78:	681b      	ldr	r3, [r3, #0]
 801eb7a:	687a      	ldr	r2, [r7, #4]
 801eb7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	68ba      	ldr	r2, [r7, #8]
 801eb84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801eb86:	e007      	b.n	801eb98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	681b      	ldr	r3, [r3, #0]
 801eb8c:	68ba      	ldr	r2, [r7, #8]
 801eb8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	681b      	ldr	r3, [r3, #0]
 801eb94:	687a      	ldr	r2, [r7, #4]
 801eb96:	60da      	str	r2, [r3, #12]
}
 801eb98:	bf00      	nop
 801eb9a:	3714      	adds	r7, #20
 801eb9c:	46bd      	mov	sp, r7
 801eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eba2:	4770      	bx	lr

0801eba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801eba4:	b480      	push	{r7}
 801eba6:	b085      	sub	sp, #20
 801eba8:	af00      	add	r7, sp, #0
 801ebaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	681b      	ldr	r3, [r3, #0]
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	3b10      	subs	r3, #16
 801ebb4:	4a14      	ldr	r2, [pc, #80]	; (801ec08 <DMA_CalcBaseAndBitshift+0x64>)
 801ebb6:	fba2 2303 	umull	r2, r3, r2, r3
 801ebba:	091b      	lsrs	r3, r3, #4
 801ebbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801ebbe:	4a13      	ldr	r2, [pc, #76]	; (801ec0c <DMA_CalcBaseAndBitshift+0x68>)
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	4413      	add	r3, r2
 801ebc4:	781b      	ldrb	r3, [r3, #0]
 801ebc6:	461a      	mov	r2, r3
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801ebcc:	68fb      	ldr	r3, [r7, #12]
 801ebce:	2b03      	cmp	r3, #3
 801ebd0:	d909      	bls.n	801ebe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	681b      	ldr	r3, [r3, #0]
 801ebd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ebda:	f023 0303 	bic.w	r3, r3, #3
 801ebde:	1d1a      	adds	r2, r3, #4
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	659a      	str	r2, [r3, #88]	; 0x58
 801ebe4:	e007      	b.n	801ebf6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801ebe6:	687b      	ldr	r3, [r7, #4]
 801ebe8:	681b      	ldr	r3, [r3, #0]
 801ebea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801ebee:	f023 0303 	bic.w	r3, r3, #3
 801ebf2:	687a      	ldr	r2, [r7, #4]
 801ebf4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801ebfa:	4618      	mov	r0, r3
 801ebfc:	3714      	adds	r7, #20
 801ebfe:	46bd      	mov	sp, r7
 801ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec04:	4770      	bx	lr
 801ec06:	bf00      	nop
 801ec08:	aaaaaaab 	.word	0xaaaaaaab
 801ec0c:	080288a4 	.word	0x080288a4

0801ec10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801ec10:	b480      	push	{r7}
 801ec12:	b085      	sub	sp, #20
 801ec14:	af00      	add	r7, sp, #0
 801ec16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801ec18:	2300      	movs	r3, #0
 801ec1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ec20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	699b      	ldr	r3, [r3, #24]
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d11f      	bne.n	801ec6a <DMA_CheckFifoParam+0x5a>
 801ec2a:	68bb      	ldr	r3, [r7, #8]
 801ec2c:	2b03      	cmp	r3, #3
 801ec2e:	d856      	bhi.n	801ecde <DMA_CheckFifoParam+0xce>
 801ec30:	a201      	add	r2, pc, #4	; (adr r2, 801ec38 <DMA_CheckFifoParam+0x28>)
 801ec32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec36:	bf00      	nop
 801ec38:	0801ec49 	.word	0x0801ec49
 801ec3c:	0801ec5b 	.word	0x0801ec5b
 801ec40:	0801ec49 	.word	0x0801ec49
 801ec44:	0801ecdf 	.word	0x0801ecdf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d046      	beq.n	801ece2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 801ec54:	2301      	movs	r3, #1
 801ec56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801ec58:	e043      	b.n	801ece2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801ec62:	d140      	bne.n	801ece6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 801ec64:	2301      	movs	r3, #1
 801ec66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801ec68:	e03d      	b.n	801ece6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	699b      	ldr	r3, [r3, #24]
 801ec6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ec72:	d121      	bne.n	801ecb8 <DMA_CheckFifoParam+0xa8>
 801ec74:	68bb      	ldr	r3, [r7, #8]
 801ec76:	2b03      	cmp	r3, #3
 801ec78:	d837      	bhi.n	801ecea <DMA_CheckFifoParam+0xda>
 801ec7a:	a201      	add	r2, pc, #4	; (adr r2, 801ec80 <DMA_CheckFifoParam+0x70>)
 801ec7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ec80:	0801ec91 	.word	0x0801ec91
 801ec84:	0801ec97 	.word	0x0801ec97
 801ec88:	0801ec91 	.word	0x0801ec91
 801ec8c:	0801eca9 	.word	0x0801eca9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801ec90:	2301      	movs	r3, #1
 801ec92:	73fb      	strb	r3, [r7, #15]
      break;
 801ec94:	e030      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ec9e:	2b00      	cmp	r3, #0
 801eca0:	d025      	beq.n	801ecee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 801eca2:	2301      	movs	r3, #1
 801eca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801eca6:	e022      	b.n	801ecee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ecac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801ecb0:	d11f      	bne.n	801ecf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 801ecb2:	2301      	movs	r3, #1
 801ecb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801ecb6:	e01c      	b.n	801ecf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801ecb8:	68bb      	ldr	r3, [r7, #8]
 801ecba:	2b02      	cmp	r3, #2
 801ecbc:	d903      	bls.n	801ecc6 <DMA_CheckFifoParam+0xb6>
 801ecbe:	68bb      	ldr	r3, [r7, #8]
 801ecc0:	2b03      	cmp	r3, #3
 801ecc2:	d003      	beq.n	801eccc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801ecc4:	e018      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 801ecc6:	2301      	movs	r3, #1
 801ecc8:	73fb      	strb	r3, [r7, #15]
      break;
 801ecca:	e015      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ecd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d00e      	beq.n	801ecf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 801ecd8:	2301      	movs	r3, #1
 801ecda:	73fb      	strb	r3, [r7, #15]
      break;
 801ecdc:	e00b      	b.n	801ecf6 <DMA_CheckFifoParam+0xe6>
      break;
 801ecde:	bf00      	nop
 801ece0:	e00a      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;
 801ece2:	bf00      	nop
 801ece4:	e008      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;
 801ece6:	bf00      	nop
 801ece8:	e006      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;
 801ecea:	bf00      	nop
 801ecec:	e004      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;
 801ecee:	bf00      	nop
 801ecf0:	e002      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;   
 801ecf2:	bf00      	nop
 801ecf4:	e000      	b.n	801ecf8 <DMA_CheckFifoParam+0xe8>
      break;
 801ecf6:	bf00      	nop
    }
  } 
  
  return status; 
 801ecf8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ecfa:	4618      	mov	r0, r3
 801ecfc:	3714      	adds	r7, #20
 801ecfe:	46bd      	mov	sp, r7
 801ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed04:	4770      	bx	lr
 801ed06:	bf00      	nop

0801ed08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801ed08:	b480      	push	{r7}
 801ed0a:	b089      	sub	sp, #36	; 0x24
 801ed0c:	af00      	add	r7, sp, #0
 801ed0e:	6078      	str	r0, [r7, #4]
 801ed10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801ed12:	2300      	movs	r3, #0
 801ed14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801ed16:	2300      	movs	r3, #0
 801ed18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801ed1a:	2300      	movs	r3, #0
 801ed1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801ed1e:	2300      	movs	r3, #0
 801ed20:	61fb      	str	r3, [r7, #28]
 801ed22:	e177      	b.n	801f014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801ed24:	2201      	movs	r2, #1
 801ed26:	69fb      	ldr	r3, [r7, #28]
 801ed28:	fa02 f303 	lsl.w	r3, r2, r3
 801ed2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801ed2e:	683b      	ldr	r3, [r7, #0]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	697a      	ldr	r2, [r7, #20]
 801ed34:	4013      	ands	r3, r2
 801ed36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801ed38:	693a      	ldr	r2, [r7, #16]
 801ed3a:	697b      	ldr	r3, [r7, #20]
 801ed3c:	429a      	cmp	r2, r3
 801ed3e:	f040 8166 	bne.w	801f00e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801ed42:	683b      	ldr	r3, [r7, #0]
 801ed44:	685b      	ldr	r3, [r3, #4]
 801ed46:	f003 0303 	and.w	r3, r3, #3
 801ed4a:	2b01      	cmp	r3, #1
 801ed4c:	d005      	beq.n	801ed5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ed4e:	683b      	ldr	r3, [r7, #0]
 801ed50:	685b      	ldr	r3, [r3, #4]
 801ed52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801ed56:	2b02      	cmp	r3, #2
 801ed58:	d130      	bne.n	801edbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	689b      	ldr	r3, [r3, #8]
 801ed5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801ed60:	69fb      	ldr	r3, [r7, #28]
 801ed62:	005b      	lsls	r3, r3, #1
 801ed64:	2203      	movs	r2, #3
 801ed66:	fa02 f303 	lsl.w	r3, r2, r3
 801ed6a:	43db      	mvns	r3, r3
 801ed6c:	69ba      	ldr	r2, [r7, #24]
 801ed6e:	4013      	ands	r3, r2
 801ed70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ed72:	683b      	ldr	r3, [r7, #0]
 801ed74:	68da      	ldr	r2, [r3, #12]
 801ed76:	69fb      	ldr	r3, [r7, #28]
 801ed78:	005b      	lsls	r3, r3, #1
 801ed7a:	fa02 f303 	lsl.w	r3, r2, r3
 801ed7e:	69ba      	ldr	r2, [r7, #24]
 801ed80:	4313      	orrs	r3, r2
 801ed82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	69ba      	ldr	r2, [r7, #24]
 801ed88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	685b      	ldr	r3, [r3, #4]
 801ed8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801ed90:	2201      	movs	r2, #1
 801ed92:	69fb      	ldr	r3, [r7, #28]
 801ed94:	fa02 f303 	lsl.w	r3, r2, r3
 801ed98:	43db      	mvns	r3, r3
 801ed9a:	69ba      	ldr	r2, [r7, #24]
 801ed9c:	4013      	ands	r3, r2
 801ed9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801eda0:	683b      	ldr	r3, [r7, #0]
 801eda2:	685b      	ldr	r3, [r3, #4]
 801eda4:	091b      	lsrs	r3, r3, #4
 801eda6:	f003 0201 	and.w	r2, r3, #1
 801edaa:	69fb      	ldr	r3, [r7, #28]
 801edac:	fa02 f303 	lsl.w	r3, r2, r3
 801edb0:	69ba      	ldr	r2, [r7, #24]
 801edb2:	4313      	orrs	r3, r2
 801edb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	69ba      	ldr	r2, [r7, #24]
 801edba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801edbc:	683b      	ldr	r3, [r7, #0]
 801edbe:	685b      	ldr	r3, [r3, #4]
 801edc0:	f003 0303 	and.w	r3, r3, #3
 801edc4:	2b03      	cmp	r3, #3
 801edc6:	d017      	beq.n	801edf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	68db      	ldr	r3, [r3, #12]
 801edcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801edce:	69fb      	ldr	r3, [r7, #28]
 801edd0:	005b      	lsls	r3, r3, #1
 801edd2:	2203      	movs	r2, #3
 801edd4:	fa02 f303 	lsl.w	r3, r2, r3
 801edd8:	43db      	mvns	r3, r3
 801edda:	69ba      	ldr	r2, [r7, #24]
 801eddc:	4013      	ands	r3, r2
 801edde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ede0:	683b      	ldr	r3, [r7, #0]
 801ede2:	689a      	ldr	r2, [r3, #8]
 801ede4:	69fb      	ldr	r3, [r7, #28]
 801ede6:	005b      	lsls	r3, r3, #1
 801ede8:	fa02 f303 	lsl.w	r3, r2, r3
 801edec:	69ba      	ldr	r2, [r7, #24]
 801edee:	4313      	orrs	r3, r2
 801edf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	69ba      	ldr	r2, [r7, #24]
 801edf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801edf8:	683b      	ldr	r3, [r7, #0]
 801edfa:	685b      	ldr	r3, [r3, #4]
 801edfc:	f003 0303 	and.w	r3, r3, #3
 801ee00:	2b02      	cmp	r3, #2
 801ee02:	d123      	bne.n	801ee4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ee04:	69fb      	ldr	r3, [r7, #28]
 801ee06:	08da      	lsrs	r2, r3, #3
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	3208      	adds	r2, #8
 801ee0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ee10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801ee12:	69fb      	ldr	r3, [r7, #28]
 801ee14:	f003 0307 	and.w	r3, r3, #7
 801ee18:	009b      	lsls	r3, r3, #2
 801ee1a:	220f      	movs	r2, #15
 801ee1c:	fa02 f303 	lsl.w	r3, r2, r3
 801ee20:	43db      	mvns	r3, r3
 801ee22:	69ba      	ldr	r2, [r7, #24]
 801ee24:	4013      	ands	r3, r2
 801ee26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801ee28:	683b      	ldr	r3, [r7, #0]
 801ee2a:	691a      	ldr	r2, [r3, #16]
 801ee2c:	69fb      	ldr	r3, [r7, #28]
 801ee2e:	f003 0307 	and.w	r3, r3, #7
 801ee32:	009b      	lsls	r3, r3, #2
 801ee34:	fa02 f303 	lsl.w	r3, r2, r3
 801ee38:	69ba      	ldr	r2, [r7, #24]
 801ee3a:	4313      	orrs	r3, r2
 801ee3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ee3e:	69fb      	ldr	r3, [r7, #28]
 801ee40:	08da      	lsrs	r2, r3, #3
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	3208      	adds	r2, #8
 801ee46:	69b9      	ldr	r1, [r7, #24]
 801ee48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801ee52:	69fb      	ldr	r3, [r7, #28]
 801ee54:	005b      	lsls	r3, r3, #1
 801ee56:	2203      	movs	r2, #3
 801ee58:	fa02 f303 	lsl.w	r3, r2, r3
 801ee5c:	43db      	mvns	r3, r3
 801ee5e:	69ba      	ldr	r2, [r7, #24]
 801ee60:	4013      	ands	r3, r2
 801ee62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ee64:	683b      	ldr	r3, [r7, #0]
 801ee66:	685b      	ldr	r3, [r3, #4]
 801ee68:	f003 0203 	and.w	r2, r3, #3
 801ee6c:	69fb      	ldr	r3, [r7, #28]
 801ee6e:	005b      	lsls	r3, r3, #1
 801ee70:	fa02 f303 	lsl.w	r3, r2, r3
 801ee74:	69ba      	ldr	r2, [r7, #24]
 801ee76:	4313      	orrs	r3, r2
 801ee78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	69ba      	ldr	r2, [r7, #24]
 801ee7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ee80:	683b      	ldr	r3, [r7, #0]
 801ee82:	685b      	ldr	r3, [r3, #4]
 801ee84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ee88:	2b00      	cmp	r3, #0
 801ee8a:	f000 80c0 	beq.w	801f00e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ee8e:	2300      	movs	r3, #0
 801ee90:	60fb      	str	r3, [r7, #12]
 801ee92:	4b66      	ldr	r3, [pc, #408]	; (801f02c <HAL_GPIO_Init+0x324>)
 801ee94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ee96:	4a65      	ldr	r2, [pc, #404]	; (801f02c <HAL_GPIO_Init+0x324>)
 801ee98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ee9c:	6453      	str	r3, [r2, #68]	; 0x44
 801ee9e:	4b63      	ldr	r3, [pc, #396]	; (801f02c <HAL_GPIO_Init+0x324>)
 801eea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801eea6:	60fb      	str	r3, [r7, #12]
 801eea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801eeaa:	4a61      	ldr	r2, [pc, #388]	; (801f030 <HAL_GPIO_Init+0x328>)
 801eeac:	69fb      	ldr	r3, [r7, #28]
 801eeae:	089b      	lsrs	r3, r3, #2
 801eeb0:	3302      	adds	r3, #2
 801eeb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801eeb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801eeb8:	69fb      	ldr	r3, [r7, #28]
 801eeba:	f003 0303 	and.w	r3, r3, #3
 801eebe:	009b      	lsls	r3, r3, #2
 801eec0:	220f      	movs	r2, #15
 801eec2:	fa02 f303 	lsl.w	r3, r2, r3
 801eec6:	43db      	mvns	r3, r3
 801eec8:	69ba      	ldr	r2, [r7, #24]
 801eeca:	4013      	ands	r3, r2
 801eecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	4a58      	ldr	r2, [pc, #352]	; (801f034 <HAL_GPIO_Init+0x32c>)
 801eed2:	4293      	cmp	r3, r2
 801eed4:	d037      	beq.n	801ef46 <HAL_GPIO_Init+0x23e>
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	4a57      	ldr	r2, [pc, #348]	; (801f038 <HAL_GPIO_Init+0x330>)
 801eeda:	4293      	cmp	r3, r2
 801eedc:	d031      	beq.n	801ef42 <HAL_GPIO_Init+0x23a>
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	4a56      	ldr	r2, [pc, #344]	; (801f03c <HAL_GPIO_Init+0x334>)
 801eee2:	4293      	cmp	r3, r2
 801eee4:	d02b      	beq.n	801ef3e <HAL_GPIO_Init+0x236>
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	4a55      	ldr	r2, [pc, #340]	; (801f040 <HAL_GPIO_Init+0x338>)
 801eeea:	4293      	cmp	r3, r2
 801eeec:	d025      	beq.n	801ef3a <HAL_GPIO_Init+0x232>
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	4a54      	ldr	r2, [pc, #336]	; (801f044 <HAL_GPIO_Init+0x33c>)
 801eef2:	4293      	cmp	r3, r2
 801eef4:	d01f      	beq.n	801ef36 <HAL_GPIO_Init+0x22e>
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	4a53      	ldr	r2, [pc, #332]	; (801f048 <HAL_GPIO_Init+0x340>)
 801eefa:	4293      	cmp	r3, r2
 801eefc:	d019      	beq.n	801ef32 <HAL_GPIO_Init+0x22a>
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	4a52      	ldr	r2, [pc, #328]	; (801f04c <HAL_GPIO_Init+0x344>)
 801ef02:	4293      	cmp	r3, r2
 801ef04:	d013      	beq.n	801ef2e <HAL_GPIO_Init+0x226>
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	4a51      	ldr	r2, [pc, #324]	; (801f050 <HAL_GPIO_Init+0x348>)
 801ef0a:	4293      	cmp	r3, r2
 801ef0c:	d00d      	beq.n	801ef2a <HAL_GPIO_Init+0x222>
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	4a50      	ldr	r2, [pc, #320]	; (801f054 <HAL_GPIO_Init+0x34c>)
 801ef12:	4293      	cmp	r3, r2
 801ef14:	d007      	beq.n	801ef26 <HAL_GPIO_Init+0x21e>
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	4a4f      	ldr	r2, [pc, #316]	; (801f058 <HAL_GPIO_Init+0x350>)
 801ef1a:	4293      	cmp	r3, r2
 801ef1c:	d101      	bne.n	801ef22 <HAL_GPIO_Init+0x21a>
 801ef1e:	2309      	movs	r3, #9
 801ef20:	e012      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef22:	230a      	movs	r3, #10
 801ef24:	e010      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef26:	2308      	movs	r3, #8
 801ef28:	e00e      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef2a:	2307      	movs	r3, #7
 801ef2c:	e00c      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef2e:	2306      	movs	r3, #6
 801ef30:	e00a      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef32:	2305      	movs	r3, #5
 801ef34:	e008      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef36:	2304      	movs	r3, #4
 801ef38:	e006      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef3a:	2303      	movs	r3, #3
 801ef3c:	e004      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef3e:	2302      	movs	r3, #2
 801ef40:	e002      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef42:	2301      	movs	r3, #1
 801ef44:	e000      	b.n	801ef48 <HAL_GPIO_Init+0x240>
 801ef46:	2300      	movs	r3, #0
 801ef48:	69fa      	ldr	r2, [r7, #28]
 801ef4a:	f002 0203 	and.w	r2, r2, #3
 801ef4e:	0092      	lsls	r2, r2, #2
 801ef50:	4093      	lsls	r3, r2
 801ef52:	69ba      	ldr	r2, [r7, #24]
 801ef54:	4313      	orrs	r3, r2
 801ef56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ef58:	4935      	ldr	r1, [pc, #212]	; (801f030 <HAL_GPIO_Init+0x328>)
 801ef5a:	69fb      	ldr	r3, [r7, #28]
 801ef5c:	089b      	lsrs	r3, r3, #2
 801ef5e:	3302      	adds	r3, #2
 801ef60:	69ba      	ldr	r2, [r7, #24]
 801ef62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801ef66:	4b3d      	ldr	r3, [pc, #244]	; (801f05c <HAL_GPIO_Init+0x354>)
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ef6c:	693b      	ldr	r3, [r7, #16]
 801ef6e:	43db      	mvns	r3, r3
 801ef70:	69ba      	ldr	r2, [r7, #24]
 801ef72:	4013      	ands	r3, r2
 801ef74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ef76:	683b      	ldr	r3, [r7, #0]
 801ef78:	685b      	ldr	r3, [r3, #4]
 801ef7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d003      	beq.n	801ef8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801ef82:	69ba      	ldr	r2, [r7, #24]
 801ef84:	693b      	ldr	r3, [r7, #16]
 801ef86:	4313      	orrs	r3, r2
 801ef88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801ef8a:	4a34      	ldr	r2, [pc, #208]	; (801f05c <HAL_GPIO_Init+0x354>)
 801ef8c:	69bb      	ldr	r3, [r7, #24]
 801ef8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801ef90:	4b32      	ldr	r3, [pc, #200]	; (801f05c <HAL_GPIO_Init+0x354>)
 801ef92:	685b      	ldr	r3, [r3, #4]
 801ef94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ef96:	693b      	ldr	r3, [r7, #16]
 801ef98:	43db      	mvns	r3, r3
 801ef9a:	69ba      	ldr	r2, [r7, #24]
 801ef9c:	4013      	ands	r3, r2
 801ef9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801efa0:	683b      	ldr	r3, [r7, #0]
 801efa2:	685b      	ldr	r3, [r3, #4]
 801efa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801efa8:	2b00      	cmp	r3, #0
 801efaa:	d003      	beq.n	801efb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801efac:	69ba      	ldr	r2, [r7, #24]
 801efae:	693b      	ldr	r3, [r7, #16]
 801efb0:	4313      	orrs	r3, r2
 801efb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801efb4:	4a29      	ldr	r2, [pc, #164]	; (801f05c <HAL_GPIO_Init+0x354>)
 801efb6:	69bb      	ldr	r3, [r7, #24]
 801efb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801efba:	4b28      	ldr	r3, [pc, #160]	; (801f05c <HAL_GPIO_Init+0x354>)
 801efbc:	689b      	ldr	r3, [r3, #8]
 801efbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801efc0:	693b      	ldr	r3, [r7, #16]
 801efc2:	43db      	mvns	r3, r3
 801efc4:	69ba      	ldr	r2, [r7, #24]
 801efc6:	4013      	ands	r3, r2
 801efc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801efca:	683b      	ldr	r3, [r7, #0]
 801efcc:	685b      	ldr	r3, [r3, #4]
 801efce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	d003      	beq.n	801efde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801efd6:	69ba      	ldr	r2, [r7, #24]
 801efd8:	693b      	ldr	r3, [r7, #16]
 801efda:	4313      	orrs	r3, r2
 801efdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801efde:	4a1f      	ldr	r2, [pc, #124]	; (801f05c <HAL_GPIO_Init+0x354>)
 801efe0:	69bb      	ldr	r3, [r7, #24]
 801efe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801efe4:	4b1d      	ldr	r3, [pc, #116]	; (801f05c <HAL_GPIO_Init+0x354>)
 801efe6:	68db      	ldr	r3, [r3, #12]
 801efe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801efea:	693b      	ldr	r3, [r7, #16]
 801efec:	43db      	mvns	r3, r3
 801efee:	69ba      	ldr	r2, [r7, #24]
 801eff0:	4013      	ands	r3, r2
 801eff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801eff4:	683b      	ldr	r3, [r7, #0]
 801eff6:	685b      	ldr	r3, [r3, #4]
 801eff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801effc:	2b00      	cmp	r3, #0
 801effe:	d003      	beq.n	801f008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801f000:	69ba      	ldr	r2, [r7, #24]
 801f002:	693b      	ldr	r3, [r7, #16]
 801f004:	4313      	orrs	r3, r2
 801f006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801f008:	4a14      	ldr	r2, [pc, #80]	; (801f05c <HAL_GPIO_Init+0x354>)
 801f00a:	69bb      	ldr	r3, [r7, #24]
 801f00c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f00e:	69fb      	ldr	r3, [r7, #28]
 801f010:	3301      	adds	r3, #1
 801f012:	61fb      	str	r3, [r7, #28]
 801f014:	69fb      	ldr	r3, [r7, #28]
 801f016:	2b0f      	cmp	r3, #15
 801f018:	f67f ae84 	bls.w	801ed24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801f01c:	bf00      	nop
 801f01e:	bf00      	nop
 801f020:	3724      	adds	r7, #36	; 0x24
 801f022:	46bd      	mov	sp, r7
 801f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f028:	4770      	bx	lr
 801f02a:	bf00      	nop
 801f02c:	40023800 	.word	0x40023800
 801f030:	40013800 	.word	0x40013800
 801f034:	40020000 	.word	0x40020000
 801f038:	40020400 	.word	0x40020400
 801f03c:	40020800 	.word	0x40020800
 801f040:	40020c00 	.word	0x40020c00
 801f044:	40021000 	.word	0x40021000
 801f048:	40021400 	.word	0x40021400
 801f04c:	40021800 	.word	0x40021800
 801f050:	40021c00 	.word	0x40021c00
 801f054:	40022000 	.word	0x40022000
 801f058:	40022400 	.word	0x40022400
 801f05c:	40013c00 	.word	0x40013c00

0801f060 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 801f060:	b480      	push	{r7}
 801f062:	b087      	sub	sp, #28
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801f06a:	2300      	movs	r3, #0
 801f06c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 801f06e:	2300      	movs	r3, #0
 801f070:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 801f072:	2300      	movs	r3, #0
 801f074:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f076:	2300      	movs	r3, #0
 801f078:	617b      	str	r3, [r7, #20]
 801f07a:	e0d9      	b.n	801f230 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801f07c:	2201      	movs	r2, #1
 801f07e:	697b      	ldr	r3, [r7, #20]
 801f080:	fa02 f303 	lsl.w	r3, r2, r3
 801f084:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 801f086:	683a      	ldr	r2, [r7, #0]
 801f088:	693b      	ldr	r3, [r7, #16]
 801f08a:	4013      	ands	r3, r2
 801f08c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 801f08e:	68fa      	ldr	r2, [r7, #12]
 801f090:	693b      	ldr	r3, [r7, #16]
 801f092:	429a      	cmp	r2, r3
 801f094:	f040 80c9 	bne.w	801f22a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 801f098:	4a6b      	ldr	r2, [pc, #428]	; (801f248 <HAL_GPIO_DeInit+0x1e8>)
 801f09a:	697b      	ldr	r3, [r7, #20]
 801f09c:	089b      	lsrs	r3, r3, #2
 801f09e:	3302      	adds	r3, #2
 801f0a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f0a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 801f0a6:	697b      	ldr	r3, [r7, #20]
 801f0a8:	f003 0303 	and.w	r3, r3, #3
 801f0ac:	009b      	lsls	r3, r3, #2
 801f0ae:	220f      	movs	r2, #15
 801f0b0:	fa02 f303 	lsl.w	r3, r2, r3
 801f0b4:	68ba      	ldr	r2, [r7, #8]
 801f0b6:	4013      	ands	r3, r2
 801f0b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 801f0ba:	687b      	ldr	r3, [r7, #4]
 801f0bc:	4a63      	ldr	r2, [pc, #396]	; (801f24c <HAL_GPIO_DeInit+0x1ec>)
 801f0be:	4293      	cmp	r3, r2
 801f0c0:	d037      	beq.n	801f132 <HAL_GPIO_DeInit+0xd2>
 801f0c2:	687b      	ldr	r3, [r7, #4]
 801f0c4:	4a62      	ldr	r2, [pc, #392]	; (801f250 <HAL_GPIO_DeInit+0x1f0>)
 801f0c6:	4293      	cmp	r3, r2
 801f0c8:	d031      	beq.n	801f12e <HAL_GPIO_DeInit+0xce>
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	4a61      	ldr	r2, [pc, #388]	; (801f254 <HAL_GPIO_DeInit+0x1f4>)
 801f0ce:	4293      	cmp	r3, r2
 801f0d0:	d02b      	beq.n	801f12a <HAL_GPIO_DeInit+0xca>
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	4a60      	ldr	r2, [pc, #384]	; (801f258 <HAL_GPIO_DeInit+0x1f8>)
 801f0d6:	4293      	cmp	r3, r2
 801f0d8:	d025      	beq.n	801f126 <HAL_GPIO_DeInit+0xc6>
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	4a5f      	ldr	r2, [pc, #380]	; (801f25c <HAL_GPIO_DeInit+0x1fc>)
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	d01f      	beq.n	801f122 <HAL_GPIO_DeInit+0xc2>
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	4a5e      	ldr	r2, [pc, #376]	; (801f260 <HAL_GPIO_DeInit+0x200>)
 801f0e6:	4293      	cmp	r3, r2
 801f0e8:	d019      	beq.n	801f11e <HAL_GPIO_DeInit+0xbe>
 801f0ea:	687b      	ldr	r3, [r7, #4]
 801f0ec:	4a5d      	ldr	r2, [pc, #372]	; (801f264 <HAL_GPIO_DeInit+0x204>)
 801f0ee:	4293      	cmp	r3, r2
 801f0f0:	d013      	beq.n	801f11a <HAL_GPIO_DeInit+0xba>
 801f0f2:	687b      	ldr	r3, [r7, #4]
 801f0f4:	4a5c      	ldr	r2, [pc, #368]	; (801f268 <HAL_GPIO_DeInit+0x208>)
 801f0f6:	4293      	cmp	r3, r2
 801f0f8:	d00d      	beq.n	801f116 <HAL_GPIO_DeInit+0xb6>
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	4a5b      	ldr	r2, [pc, #364]	; (801f26c <HAL_GPIO_DeInit+0x20c>)
 801f0fe:	4293      	cmp	r3, r2
 801f100:	d007      	beq.n	801f112 <HAL_GPIO_DeInit+0xb2>
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	4a5a      	ldr	r2, [pc, #360]	; (801f270 <HAL_GPIO_DeInit+0x210>)
 801f106:	4293      	cmp	r3, r2
 801f108:	d101      	bne.n	801f10e <HAL_GPIO_DeInit+0xae>
 801f10a:	2309      	movs	r3, #9
 801f10c:	e012      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f10e:	230a      	movs	r3, #10
 801f110:	e010      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f112:	2308      	movs	r3, #8
 801f114:	e00e      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f116:	2307      	movs	r3, #7
 801f118:	e00c      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f11a:	2306      	movs	r3, #6
 801f11c:	e00a      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f11e:	2305      	movs	r3, #5
 801f120:	e008      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f122:	2304      	movs	r3, #4
 801f124:	e006      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f126:	2303      	movs	r3, #3
 801f128:	e004      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f12a:	2302      	movs	r3, #2
 801f12c:	e002      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f12e:	2301      	movs	r3, #1
 801f130:	e000      	b.n	801f134 <HAL_GPIO_DeInit+0xd4>
 801f132:	2300      	movs	r3, #0
 801f134:	697a      	ldr	r2, [r7, #20]
 801f136:	f002 0203 	and.w	r2, r2, #3
 801f13a:	0092      	lsls	r2, r2, #2
 801f13c:	4093      	lsls	r3, r2
 801f13e:	68ba      	ldr	r2, [r7, #8]
 801f140:	429a      	cmp	r2, r3
 801f142:	d132      	bne.n	801f1aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 801f144:	4b4b      	ldr	r3, [pc, #300]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f146:	681a      	ldr	r2, [r3, #0]
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	43db      	mvns	r3, r3
 801f14c:	4949      	ldr	r1, [pc, #292]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f14e:	4013      	ands	r3, r2
 801f150:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 801f152:	4b48      	ldr	r3, [pc, #288]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f154:	685a      	ldr	r2, [r3, #4]
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	43db      	mvns	r3, r3
 801f15a:	4946      	ldr	r1, [pc, #280]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f15c:	4013      	ands	r3, r2
 801f15e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 801f160:	4b44      	ldr	r3, [pc, #272]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f162:	689a      	ldr	r2, [r3, #8]
 801f164:	68fb      	ldr	r3, [r7, #12]
 801f166:	43db      	mvns	r3, r3
 801f168:	4942      	ldr	r1, [pc, #264]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f16a:	4013      	ands	r3, r2
 801f16c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 801f16e:	4b41      	ldr	r3, [pc, #260]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f170:	68da      	ldr	r2, [r3, #12]
 801f172:	68fb      	ldr	r3, [r7, #12]
 801f174:	43db      	mvns	r3, r3
 801f176:	493f      	ldr	r1, [pc, #252]	; (801f274 <HAL_GPIO_DeInit+0x214>)
 801f178:	4013      	ands	r3, r2
 801f17a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 801f17c:	697b      	ldr	r3, [r7, #20]
 801f17e:	f003 0303 	and.w	r3, r3, #3
 801f182:	009b      	lsls	r3, r3, #2
 801f184:	220f      	movs	r2, #15
 801f186:	fa02 f303 	lsl.w	r3, r2, r3
 801f18a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 801f18c:	4a2e      	ldr	r2, [pc, #184]	; (801f248 <HAL_GPIO_DeInit+0x1e8>)
 801f18e:	697b      	ldr	r3, [r7, #20]
 801f190:	089b      	lsrs	r3, r3, #2
 801f192:	3302      	adds	r3, #2
 801f194:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f198:	68bb      	ldr	r3, [r7, #8]
 801f19a:	43da      	mvns	r2, r3
 801f19c:	482a      	ldr	r0, [pc, #168]	; (801f248 <HAL_GPIO_DeInit+0x1e8>)
 801f19e:	697b      	ldr	r3, [r7, #20]
 801f1a0:	089b      	lsrs	r3, r3, #2
 801f1a2:	400a      	ands	r2, r1
 801f1a4:	3302      	adds	r3, #2
 801f1a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	681a      	ldr	r2, [r3, #0]
 801f1ae:	697b      	ldr	r3, [r7, #20]
 801f1b0:	005b      	lsls	r3, r3, #1
 801f1b2:	2103      	movs	r1, #3
 801f1b4:	fa01 f303 	lsl.w	r3, r1, r3
 801f1b8:	43db      	mvns	r3, r3
 801f1ba:	401a      	ands	r2, r3
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801f1c0:	697b      	ldr	r3, [r7, #20]
 801f1c2:	08da      	lsrs	r2, r3, #3
 801f1c4:	687b      	ldr	r3, [r7, #4]
 801f1c6:	3208      	adds	r2, #8
 801f1c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f1cc:	697b      	ldr	r3, [r7, #20]
 801f1ce:	f003 0307 	and.w	r3, r3, #7
 801f1d2:	009b      	lsls	r3, r3, #2
 801f1d4:	220f      	movs	r2, #15
 801f1d6:	fa02 f303 	lsl.w	r3, r2, r3
 801f1da:	43db      	mvns	r3, r3
 801f1dc:	697a      	ldr	r2, [r7, #20]
 801f1de:	08d2      	lsrs	r2, r2, #3
 801f1e0:	4019      	ands	r1, r3
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	3208      	adds	r2, #8
 801f1e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	68da      	ldr	r2, [r3, #12]
 801f1ee:	697b      	ldr	r3, [r7, #20]
 801f1f0:	005b      	lsls	r3, r3, #1
 801f1f2:	2103      	movs	r1, #3
 801f1f4:	fa01 f303 	lsl.w	r3, r1, r3
 801f1f8:	43db      	mvns	r3, r3
 801f1fa:	401a      	ands	r2, r3
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	685a      	ldr	r2, [r3, #4]
 801f204:	2101      	movs	r1, #1
 801f206:	697b      	ldr	r3, [r7, #20]
 801f208:	fa01 f303 	lsl.w	r3, r1, r3
 801f20c:	43db      	mvns	r3, r3
 801f20e:	401a      	ands	r2, r3
 801f210:	687b      	ldr	r3, [r7, #4]
 801f212:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	689a      	ldr	r2, [r3, #8]
 801f218:	697b      	ldr	r3, [r7, #20]
 801f21a:	005b      	lsls	r3, r3, #1
 801f21c:	2103      	movs	r1, #3
 801f21e:	fa01 f303 	lsl.w	r3, r1, r3
 801f222:	43db      	mvns	r3, r3
 801f224:	401a      	ands	r2, r3
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801f22a:	697b      	ldr	r3, [r7, #20]
 801f22c:	3301      	adds	r3, #1
 801f22e:	617b      	str	r3, [r7, #20]
 801f230:	697b      	ldr	r3, [r7, #20]
 801f232:	2b0f      	cmp	r3, #15
 801f234:	f67f af22 	bls.w	801f07c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 801f238:	bf00      	nop
 801f23a:	bf00      	nop
 801f23c:	371c      	adds	r7, #28
 801f23e:	46bd      	mov	sp, r7
 801f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f244:	4770      	bx	lr
 801f246:	bf00      	nop
 801f248:	40013800 	.word	0x40013800
 801f24c:	40020000 	.word	0x40020000
 801f250:	40020400 	.word	0x40020400
 801f254:	40020800 	.word	0x40020800
 801f258:	40020c00 	.word	0x40020c00
 801f25c:	40021000 	.word	0x40021000
 801f260:	40021400 	.word	0x40021400
 801f264:	40021800 	.word	0x40021800
 801f268:	40021c00 	.word	0x40021c00
 801f26c:	40022000 	.word	0x40022000
 801f270:	40022400 	.word	0x40022400
 801f274:	40013c00 	.word	0x40013c00

0801f278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801f278:	b580      	push	{r7, lr}
 801f27a:	b082      	sub	sp, #8
 801f27c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801f27e:	2300      	movs	r3, #0
 801f280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 801f282:	2300      	movs	r3, #0
 801f284:	603b      	str	r3, [r7, #0]
 801f286:	4b20      	ldr	r3, [pc, #128]	; (801f308 <HAL_PWREx_EnableOverDrive+0x90>)
 801f288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f28a:	4a1f      	ldr	r2, [pc, #124]	; (801f308 <HAL_PWREx_EnableOverDrive+0x90>)
 801f28c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f290:	6413      	str	r3, [r2, #64]	; 0x40
 801f292:	4b1d      	ldr	r3, [pc, #116]	; (801f308 <HAL_PWREx_EnableOverDrive+0x90>)
 801f294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f29a:	603b      	str	r3, [r7, #0]
 801f29c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 801f29e:	4b1b      	ldr	r3, [pc, #108]	; (801f30c <HAL_PWREx_EnableOverDrive+0x94>)
 801f2a0:	2201      	movs	r2, #1
 801f2a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801f2a4:	f7fe ff2c 	bl	801e100 <HAL_GetTick>
 801f2a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801f2aa:	e009      	b.n	801f2c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801f2ac:	f7fe ff28 	bl	801e100 <HAL_GetTick>
 801f2b0:	4602      	mov	r2, r0
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	1ad3      	subs	r3, r2, r3
 801f2b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f2ba:	d901      	bls.n	801f2c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 801f2bc:	2303      	movs	r3, #3
 801f2be:	e01f      	b.n	801f300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 801f2c0:	4b13      	ldr	r3, [pc, #76]	; (801f310 <HAL_PWREx_EnableOverDrive+0x98>)
 801f2c2:	685b      	ldr	r3, [r3, #4]
 801f2c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f2c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f2cc:	d1ee      	bne.n	801f2ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 801f2ce:	4b11      	ldr	r3, [pc, #68]	; (801f314 <HAL_PWREx_EnableOverDrive+0x9c>)
 801f2d0:	2201      	movs	r2, #1
 801f2d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801f2d4:	f7fe ff14 	bl	801e100 <HAL_GetTick>
 801f2d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801f2da:	e009      	b.n	801f2f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801f2dc:	f7fe ff10 	bl	801e100 <HAL_GetTick>
 801f2e0:	4602      	mov	r2, r0
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	1ad3      	subs	r3, r2, r3
 801f2e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f2ea:	d901      	bls.n	801f2f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 801f2ec:	2303      	movs	r3, #3
 801f2ee:	e007      	b.n	801f300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 801f2f0:	4b07      	ldr	r3, [pc, #28]	; (801f310 <HAL_PWREx_EnableOverDrive+0x98>)
 801f2f2:	685b      	ldr	r3, [r3, #4]
 801f2f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801f2fc:	d1ee      	bne.n	801f2dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 801f2fe:	2300      	movs	r3, #0
}
 801f300:	4618      	mov	r0, r3
 801f302:	3708      	adds	r7, #8
 801f304:	46bd      	mov	sp, r7
 801f306:	bd80      	pop	{r7, pc}
 801f308:	40023800 	.word	0x40023800
 801f30c:	420e0040 	.word	0x420e0040
 801f310:	40007000 	.word	0x40007000
 801f314:	420e0044 	.word	0x420e0044

0801f318 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 801f318:	b580      	push	{r7, lr}
 801f31a:	b086      	sub	sp, #24
 801f31c:	af02      	add	r7, sp, #8
 801f31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801f320:	f7fe feee 	bl	801e100 <HAL_GetTick>
 801f324:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	2b00      	cmp	r3, #0
 801f32a:	d101      	bne.n	801f330 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 801f32c:	2301      	movs	r3, #1
 801f32e:	e069      	b.n	801f404 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f336:	b2db      	uxtb	r3, r3
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d10b      	bne.n	801f354 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 801f33c:	687b      	ldr	r3, [r7, #4]
 801f33e:	2200      	movs	r2, #0
 801f340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 801f344:	6878      	ldr	r0, [r7, #4]
 801f346:	f7e2 fd49 	bl	8001ddc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 801f34a:	f241 3188 	movw	r1, #5000	; 0x1388
 801f34e:	6878      	ldr	r0, [r7, #4]
 801f350:	f000 ff7e 	bl	8020250 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	689b      	ldr	r3, [r3, #8]
 801f362:	3b01      	subs	r3, #1
 801f364:	021a      	lsls	r2, r3, #8
 801f366:	687b      	ldr	r3, [r7, #4]
 801f368:	681b      	ldr	r3, [r3, #0]
 801f36a:	430a      	orrs	r2, r1
 801f36c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801f36e:	687b      	ldr	r3, [r7, #4]
 801f370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f372:	9300      	str	r3, [sp, #0]
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	2200      	movs	r2, #0
 801f378:	2120      	movs	r1, #32
 801f37a:	6878      	ldr	r0, [r7, #4]
 801f37c:	f000 fff7 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801f380:	4603      	mov	r3, r0
 801f382:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 801f384:	7afb      	ldrb	r3, [r7, #11]
 801f386:	2b00      	cmp	r3, #0
 801f388:	d137      	bne.n	801f3fa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801f38a:	687b      	ldr	r3, [r7, #4]
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	681b      	ldr	r3, [r3, #0]
 801f390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f394:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 801f398:	687a      	ldr	r2, [r7, #4]
 801f39a:	6852      	ldr	r2, [r2, #4]
 801f39c:	0611      	lsls	r1, r2, #24
 801f39e:	687a      	ldr	r2, [r7, #4]
 801f3a0:	68d2      	ldr	r2, [r2, #12]
 801f3a2:	4311      	orrs	r1, r2
 801f3a4:	687a      	ldr	r2, [r7, #4]
 801f3a6:	69d2      	ldr	r2, [r2, #28]
 801f3a8:	4311      	orrs	r1, r2
 801f3aa:	687a      	ldr	r2, [r7, #4]
 801f3ac:	6a12      	ldr	r2, [r2, #32]
 801f3ae:	4311      	orrs	r1, r2
 801f3b0:	687a      	ldr	r2, [r7, #4]
 801f3b2:	6812      	ldr	r2, [r2, #0]
 801f3b4:	430b      	orrs	r3, r1
 801f3b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 801f3b8:	687b      	ldr	r3, [r7, #4]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	685a      	ldr	r2, [r3, #4]
 801f3be:	4b13      	ldr	r3, [pc, #76]	; (801f40c <HAL_QSPI_Init+0xf4>)
 801f3c0:	4013      	ands	r3, r2
 801f3c2:	687a      	ldr	r2, [r7, #4]
 801f3c4:	6912      	ldr	r2, [r2, #16]
 801f3c6:	0411      	lsls	r1, r2, #16
 801f3c8:	687a      	ldr	r2, [r7, #4]
 801f3ca:	6952      	ldr	r2, [r2, #20]
 801f3cc:	4311      	orrs	r1, r2
 801f3ce:	687a      	ldr	r2, [r7, #4]
 801f3d0:	6992      	ldr	r2, [r2, #24]
 801f3d2:	4311      	orrs	r1, r2
 801f3d4:	687a      	ldr	r2, [r7, #4]
 801f3d6:	6812      	ldr	r2, [r2, #0]
 801f3d8:	430b      	orrs	r3, r1
 801f3da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	681b      	ldr	r3, [r3, #0]
 801f3e0:	681a      	ldr	r2, [r3, #0]
 801f3e2:	687b      	ldr	r3, [r7, #4]
 801f3e4:	681b      	ldr	r3, [r3, #0]
 801f3e6:	f042 0201 	orr.w	r2, r2, #1
 801f3ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801f3ec:	687b      	ldr	r3, [r7, #4]
 801f3ee:	2200      	movs	r2, #0
 801f3f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	2201      	movs	r2, #1
 801f3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 801f3fa:	687b      	ldr	r3, [r7, #4]
 801f3fc:	2200      	movs	r2, #0
 801f3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801f402:	7afb      	ldrb	r3, [r7, #11]
}
 801f404:	4618      	mov	r0, r3
 801f406:	3710      	adds	r7, #16
 801f408:	46bd      	mov	sp, r7
 801f40a:	bd80      	pop	{r7, pc}
 801f40c:	ffe0f8fe 	.word	0xffe0f8fe

0801f410 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 801f410:	b580      	push	{r7, lr}
 801f412:	b082      	sub	sp, #8
 801f414:	af00      	add	r7, sp, #0
 801f416:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801f418:	687b      	ldr	r3, [r7, #4]
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	d101      	bne.n	801f422 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 801f41e:	2301      	movs	r3, #1
 801f420:	e016      	b.n	801f450 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	681a      	ldr	r2, [r3, #0]
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	f022 0201 	bic.w	r2, r2, #1
 801f430:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 801f432:	6878      	ldr	r0, [r7, #4]
 801f434:	f7e2 fde6 	bl	8002004 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	2200      	movs	r2, #0
 801f43c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	2200      	movs	r2, #0
 801f442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	2200      	movs	r2, #0
 801f44a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801f44e:	2300      	movs	r3, #0
}
 801f450:	4618      	mov	r0, r3
 801f452:	3708      	adds	r7, #8
 801f454:	46bd      	mov	sp, r7
 801f456:	bd80      	pop	{r7, pc}

0801f458 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 801f458:	b580      	push	{r7, lr}
 801f45a:	b086      	sub	sp, #24
 801f45c:	af00      	add	r7, sp, #0
 801f45e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	689b      	ldr	r3, [r3, #8]
 801f466:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 801f470:	697b      	ldr	r3, [r7, #20]
 801f472:	f003 0304 	and.w	r3, r3, #4
 801f476:	2b00      	cmp	r3, #0
 801f478:	d064      	beq.n	801f544 <HAL_QSPI_IRQHandler+0xec>
 801f47a:	693b      	ldr	r3, [r7, #16]
 801f47c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801f480:	2b00      	cmp	r3, #0
 801f482:	d05f      	beq.n	801f544 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	3320      	adds	r3, #32
 801f48a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f492:	b2db      	uxtb	r3, r3
 801f494:	2b12      	cmp	r3, #18
 801f496:	d125      	bne.n	801f4e4 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801f498:	e01c      	b.n	801f4d4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f49e:	2b00      	cmp	r3, #0
 801f4a0:	d00f      	beq.n	801f4c2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801f4a2:	687b      	ldr	r3, [r7, #4]
 801f4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4a6:	781a      	ldrb	r2, [r3, #0]
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4b0:	1c5a      	adds	r2, r3, #1
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f4ba:	1e5a      	subs	r2, r3, #1
 801f4bc:	687b      	ldr	r3, [r7, #4]
 801f4be:	62da      	str	r2, [r3, #44]	; 0x2c
 801f4c0:	e008      	b.n	801f4d4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	681a      	ldr	r2, [r3, #0]
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801f4d0:	601a      	str	r2, [r3, #0]
          break;
 801f4d2:	e033      	b.n	801f53c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801f4d4:	687b      	ldr	r3, [r7, #4]
 801f4d6:	681b      	ldr	r3, [r3, #0]
 801f4d8:	689b      	ldr	r3, [r3, #8]
 801f4da:	f003 0304 	and.w	r3, r3, #4
 801f4de:	2b00      	cmp	r3, #0
 801f4e0:	d1db      	bne.n	801f49a <HAL_QSPI_IRQHandler+0x42>
 801f4e2:	e02b      	b.n	801f53c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f4ea:	b2db      	uxtb	r3, r3
 801f4ec:	2b22      	cmp	r3, #34	; 0x22
 801f4ee:	d125      	bne.n	801f53c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801f4f0:	e01d      	b.n	801f52e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d010      	beq.n	801f51c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801f4fa:	687b      	ldr	r3, [r7, #4]
 801f4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f4fe:	68fa      	ldr	r2, [r7, #12]
 801f500:	7812      	ldrb	r2, [r2, #0]
 801f502:	b2d2      	uxtb	r2, r2
 801f504:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f50a:	1c5a      	adds	r2, r3, #1
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f514:	1e5a      	subs	r2, r3, #1
 801f516:	687b      	ldr	r3, [r7, #4]
 801f518:	639a      	str	r2, [r3, #56]	; 0x38
 801f51a:	e008      	b.n	801f52e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	681a      	ldr	r2, [r3, #0]
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	681b      	ldr	r3, [r3, #0]
 801f526:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801f52a:	601a      	str	r2, [r3, #0]
          break;
 801f52c:	e006      	b.n	801f53c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	689b      	ldr	r3, [r3, #8]
 801f534:	f003 0304 	and.w	r3, r3, #4
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d1da      	bne.n	801f4f2 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 801f53c:	6878      	ldr	r0, [r7, #4]
 801f53e:	f000 fda9 	bl	8020094 <HAL_QSPI_FifoThresholdCallback>
 801f542:	e142      	b.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 801f544:	697b      	ldr	r3, [r7, #20]
 801f546:	f003 0302 	and.w	r3, r3, #2
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	f000 80b6 	beq.w	801f6bc <HAL_QSPI_IRQHandler+0x264>
 801f550:	693b      	ldr	r3, [r7, #16]
 801f552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f556:	2b00      	cmp	r3, #0
 801f558:	f000 80b0 	beq.w	801f6bc <HAL_QSPI_IRQHandler+0x264>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	2202      	movs	r2, #2
 801f562:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	681a      	ldr	r2, [r3, #0]
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 801f572:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f574:	687b      	ldr	r3, [r7, #4]
 801f576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f57a:	b2db      	uxtb	r3, r3
 801f57c:	2b12      	cmp	r3, #18
 801f57e:	d123      	bne.n	801f5c8 <HAL_QSPI_IRQHandler+0x170>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	681b      	ldr	r3, [r3, #0]
 801f586:	f003 0304 	and.w	r3, r3, #4
 801f58a:	2b00      	cmp	r3, #0
 801f58c:	d011      	beq.n	801f5b2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801f58e:	687b      	ldr	r3, [r7, #4]
 801f590:	681b      	ldr	r3, [r3, #0]
 801f592:	681a      	ldr	r2, [r3, #0]
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	f022 0204 	bic.w	r2, r2, #4
 801f59c:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	681a      	ldr	r2, [r3, #0]
 801f5a6:	687b      	ldr	r3, [r7, #4]
 801f5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	f022 0201 	bic.w	r2, r2, #1
 801f5b0:	601a      	str	r2, [r3, #0]
      }

      /* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
 801f5b2:	6878      	ldr	r0, [r7, #4]
 801f5b4:	f000 fdf0 	bl	8020198 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f5b8:	687b      	ldr	r3, [r7, #4]
 801f5ba:	2201      	movs	r2, #1
 801f5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 801f5c0:	6878      	ldr	r0, [r7, #4]
 801f5c2:	f7e2 fa47 	bl	8001a54 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f5c6:	e0fd      	b.n	801f7c4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f5ce:	b2db      	uxtb	r3, r3
 801f5d0:	2b22      	cmp	r3, #34	; 0x22
 801f5d2:	d146      	bne.n	801f662 <HAL_QSPI_IRQHandler+0x20a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f5d4:	687b      	ldr	r3, [r7, #4]
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	681b      	ldr	r3, [r3, #0]
 801f5da:	f003 0304 	and.w	r3, r3, #4
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d012      	beq.n	801f608 <HAL_QSPI_IRQHandler+0x1b0>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	681b      	ldr	r3, [r3, #0]
 801f5e6:	681a      	ldr	r2, [r3, #0]
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	681b      	ldr	r3, [r3, #0]
 801f5ec:	f022 0204 	bic.w	r2, r2, #4
 801f5f0:	601a      	str	r2, [r3, #0]

        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f5fe:	681b      	ldr	r3, [r3, #0]
 801f600:	f022 0201 	bic.w	r2, r2, #1
 801f604:	601a      	str	r2, [r3, #0]
 801f606:	e021      	b.n	801f64c <HAL_QSPI_IRQHandler+0x1f4>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 801f608:	687b      	ldr	r3, [r7, #4]
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	3320      	adds	r3, #32
 801f60e:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801f610:	e013      	b.n	801f63a <HAL_QSPI_IRQHandler+0x1e2>
        {
          if (hqspi->RxXferCount > 0U)
 801f612:	687b      	ldr	r3, [r7, #4]
 801f614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f616:	2b00      	cmp	r3, #0
 801f618:	d017      	beq.n	801f64a <HAL_QSPI_IRQHandler+0x1f2>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f61e:	68fa      	ldr	r2, [r7, #12]
 801f620:	7812      	ldrb	r2, [r2, #0]
 801f622:	b2d2      	uxtb	r2, r2
 801f624:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f62a:	1c5a      	adds	r2, r3, #1
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f634:	1e5a      	subs	r2, r3, #1
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	689b      	ldr	r3, [r3, #8]
 801f640:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801f644:	2b00      	cmp	r3, #0
 801f646:	d1e4      	bne.n	801f612 <HAL_QSPI_IRQHandler+0x1ba>
 801f648:	e000      	b.n	801f64c <HAL_QSPI_IRQHandler+0x1f4>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 801f64a:	bf00      	nop
          }
        }
      }

      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
 801f64c:	6878      	ldr	r0, [r7, #4]
 801f64e:	f000 fda3 	bl	8020198 <HAL_QSPI_Abort_IT>

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	2201      	movs	r2, #1
 801f656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	f7e2 f9e6 	bl	8001a2c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f660:	e0b0      	b.n	801f7c4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f668:	b2db      	uxtb	r3, r3
 801f66a:	2b02      	cmp	r3, #2
 801f66c:	d107      	bne.n	801f67e <HAL_QSPI_IRQHandler+0x226>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f66e:	687b      	ldr	r3, [r7, #4]
 801f670:	2201      	movs	r2, #1
 801f672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 801f676:	6878      	ldr	r0, [r7, #4]
 801f678:	f7e2 f9c4 	bl	8001a04 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f67c:	e0a2      	b.n	801f7c4 <HAL_QSPI_IRQHandler+0x36c>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 801f67e:	687b      	ldr	r3, [r7, #4]
 801f680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f684:	b2db      	uxtb	r3, r3
 801f686:	2b08      	cmp	r3, #8
 801f688:	f040 809c 	bne.w	801f7c4 <HAL_QSPI_IRQHandler+0x36c>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	695a      	ldr	r2, [r3, #20]
 801f692:	687b      	ldr	r3, [r7, #4]
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801f69a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	2201      	movs	r2, #1
 801f6a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d103      	bne.n	801f6b4 <HAL_QSPI_IRQHandler+0x25c>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 801f6ac:	6878      	ldr	r0, [r7, #4]
 801f6ae:	f000 fcdd 	bl	802006c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f6b2:	e087      	b.n	801f7c4 <HAL_QSPI_IRQHandler+0x36c>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 801f6b4:	6878      	ldr	r0, [r7, #4]
 801f6b6:	f7e2 f9f5 	bl	8001aa4 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f6ba:	e083      	b.n	801f7c4 <HAL_QSPI_IRQHandler+0x36c>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	f003 0308 	and.w	r3, r3, #8
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d01f      	beq.n	801f706 <HAL_QSPI_IRQHandler+0x2ae>
 801f6c6:	693b      	ldr	r3, [r7, #16]
 801f6c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801f6cc:	2b00      	cmp	r3, #0
 801f6ce:	d01a      	beq.n	801f706 <HAL_QSPI_IRQHandler+0x2ae>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 801f6d0:	687b      	ldr	r3, [r7, #4]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	2208      	movs	r2, #8
 801f6d6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d00b      	beq.n	801f6fe <HAL_QSPI_IRQHandler+0x2a6>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	681b      	ldr	r3, [r3, #0]
 801f6ea:	681a      	ldr	r2, [r3, #0]
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	681b      	ldr	r3, [r3, #0]
 801f6f0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801f6f4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	2201      	movs	r2, #1
 801f6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 801f6fe:	6878      	ldr	r0, [r7, #4]
 801f700:	f7e2 f9bc 	bl	8001a7c <HAL_QSPI_StatusMatchCallback>
 801f704:	e061      	b.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 801f706:	697b      	ldr	r3, [r7, #20]
 801f708:	f003 0301 	and.w	r3, r3, #1
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d047      	beq.n	801f7a0 <HAL_QSPI_IRQHandler+0x348>
 801f710:	693b      	ldr	r3, [r7, #16]
 801f712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801f716:	2b00      	cmp	r3, #0
 801f718:	d042      	beq.n	801f7a0 <HAL_QSPI_IRQHandler+0x348>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 801f71a:	687b      	ldr	r3, [r7, #4]
 801f71c:	681b      	ldr	r3, [r3, #0]
 801f71e:	2201      	movs	r2, #1
 801f720:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	681b      	ldr	r3, [r3, #0]
 801f726:	681a      	ldr	r2, [r3, #0]
 801f728:	687b      	ldr	r3, [r7, #4]
 801f72a:	681b      	ldr	r3, [r3, #0]
 801f72c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 801f730:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f736:	f043 0202 	orr.w	r2, r3, #2
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f73e:	687b      	ldr	r3, [r7, #4]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	f003 0304 	and.w	r3, r3, #4
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d021      	beq.n	801f790 <HAL_QSPI_IRQHandler+0x338>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	681a      	ldr	r2, [r3, #0]
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	681b      	ldr	r3, [r3, #0]
 801f756:	f022 0204 	bic.w	r2, r2, #4
 801f75a:	601a      	str	r2, [r3, #0]

      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f760:	4a1c      	ldr	r2, [pc, #112]	; (801f7d4 <HAL_QSPI_IRQHandler+0x37c>)
 801f762:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 801f764:	687b      	ldr	r3, [r7, #4]
 801f766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f768:	4618      	mov	r0, r3
 801f76a:	f7fe ffe1 	bl	801e730 <HAL_DMA_Abort_IT>
 801f76e:	4603      	mov	r3, r0
 801f770:	2b00      	cmp	r3, #0
 801f772:	d029      	beq.n	801f7c8 <HAL_QSPI_IRQHandler+0x370>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f778:	f043 0204 	orr.w	r2, r3, #4
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 801f780:	687b      	ldr	r3, [r7, #4]
 801f782:	2201      	movs	r2, #1
 801f784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 801f788:	6878      	ldr	r0, [r7, #4]
 801f78a:	f7e2 f98b 	bl	8001aa4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f78e:	e01b      	b.n	801f7c8 <HAL_QSPI_IRQHandler+0x370>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 801f790:	687b      	ldr	r3, [r7, #4]
 801f792:	2201      	movs	r2, #1
 801f794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 801f798:	6878      	ldr	r0, [r7, #4]
 801f79a:	f7e2 f983 	bl	8001aa4 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f79e:	e013      	b.n	801f7c8 <HAL_QSPI_IRQHandler+0x370>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 801f7a0:	697b      	ldr	r3, [r7, #20]
 801f7a2:	f003 0310 	and.w	r3, r3, #16
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d00f      	beq.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
 801f7aa:	693b      	ldr	r3, [r7, #16]
 801f7ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d00a      	beq.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	2210      	movs	r2, #16
 801f7ba:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 801f7bc:	6878      	ldr	r0, [r7, #4]
 801f7be:	f000 fc73 	bl	80200a8 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 801f7c2:	e002      	b.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 801f7c4:	bf00      	nop
 801f7c6:	e000      	b.n	801f7ca <HAL_QSPI_IRQHandler+0x372>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 801f7c8:	bf00      	nop
}
 801f7ca:	bf00      	nop
 801f7cc:	3718      	adds	r7, #24
 801f7ce:	46bd      	mov	sp, r7
 801f7d0:	bd80      	pop	{r7, pc}
 801f7d2:	bf00      	nop
 801f7d4:	08020309 	.word	0x08020309

0801f7d8 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b088      	sub	sp, #32
 801f7dc:	af02      	add	r7, sp, #8
 801f7de:	60f8      	str	r0, [r7, #12]
 801f7e0:	60b9      	str	r1, [r7, #8]
 801f7e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801f7e4:	f7fe fc8c 	bl	801e100 <HAL_GetTick>
 801f7e8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f7f0:	b2db      	uxtb	r3, r3
 801f7f2:	2b01      	cmp	r3, #1
 801f7f4:	d101      	bne.n	801f7fa <HAL_QSPI_Command+0x22>
 801f7f6:	2302      	movs	r3, #2
 801f7f8:	e048      	b.n	801f88c <HAL_QSPI_Command+0xb4>
 801f7fa:	68fb      	ldr	r3, [r7, #12]
 801f7fc:	2201      	movs	r2, #1
 801f7fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801f802:	68fb      	ldr	r3, [r7, #12]
 801f804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f808:	b2db      	uxtb	r3, r3
 801f80a:	2b01      	cmp	r3, #1
 801f80c:	d137      	bne.n	801f87e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	2200      	movs	r2, #0
 801f812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	2202      	movs	r2, #2
 801f818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	9300      	str	r3, [sp, #0]
 801f820:	693b      	ldr	r3, [r7, #16]
 801f822:	2200      	movs	r2, #0
 801f824:	2120      	movs	r1, #32
 801f826:	68f8      	ldr	r0, [r7, #12]
 801f828:	f000 fda1 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801f82c:	4603      	mov	r3, r0
 801f82e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801f830:	7dfb      	ldrb	r3, [r7, #23]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d125      	bne.n	801f882 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801f836:	2200      	movs	r2, #0
 801f838:	68b9      	ldr	r1, [r7, #8]
 801f83a:	68f8      	ldr	r0, [r7, #12]
 801f83c:	f000 fe0a 	bl	8020454 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 801f840:	68bb      	ldr	r3, [r7, #8]
 801f842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f844:	2b00      	cmp	r3, #0
 801f846:	d115      	bne.n	801f874 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	9300      	str	r3, [sp, #0]
 801f84c:	693b      	ldr	r3, [r7, #16]
 801f84e:	2201      	movs	r2, #1
 801f850:	2102      	movs	r1, #2
 801f852:	68f8      	ldr	r0, [r7, #12]
 801f854:	f000 fd8b 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801f858:	4603      	mov	r3, r0
 801f85a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 801f85c:	7dfb      	ldrb	r3, [r7, #23]
 801f85e:	2b00      	cmp	r3, #0
 801f860:	d10f      	bne.n	801f882 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801f862:	68fb      	ldr	r3, [r7, #12]
 801f864:	681b      	ldr	r3, [r3, #0]
 801f866:	2202      	movs	r2, #2
 801f868:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	2201      	movs	r2, #1
 801f86e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f872:	e006      	b.n	801f882 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	2201      	movs	r2, #1
 801f878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801f87c:	e001      	b.n	801f882 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801f87e:	2302      	movs	r3, #2
 801f880:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801f882:	68fb      	ldr	r3, [r7, #12]
 801f884:	2200      	movs	r2, #0
 801f886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801f88a:	7dfb      	ldrb	r3, [r7, #23]
}
 801f88c:	4618      	mov	r0, r3
 801f88e:	3718      	adds	r7, #24
 801f890:	46bd      	mov	sp, r7
 801f892:	bd80      	pop	{r7, pc}

0801f894 <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
 801f894:	b580      	push	{r7, lr}
 801f896:	b084      	sub	sp, #16
 801f898:	af00      	add	r7, sp, #0
 801f89a:	6078      	str	r0, [r7, #4]
 801f89c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801f89e:	f7fe fc2f 	bl	801e100 <HAL_GetTick>
 801f8a2:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f8aa:	b2db      	uxtb	r3, r3
 801f8ac:	2b01      	cmp	r3, #1
 801f8ae:	d101      	bne.n	801f8b4 <HAL_QSPI_Command_IT+0x20>
 801f8b0:	2302      	movs	r3, #2
 801f8b2:	e04f      	b.n	801f954 <HAL_QSPI_Command_IT+0xc0>
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	2201      	movs	r2, #1
 801f8b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f8c2:	b2db      	uxtb	r3, r3
 801f8c4:	2b01      	cmp	r3, #1
 801f8c6:	d13e      	bne.n	801f946 <HAL_QSPI_Command_IT+0xb2>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	2202      	movs	r2, #2
 801f8d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout_CPUCycle(hqspi, QSPI_FLAG_BUSY, RESET, hqspi->Timeout);	
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f8da:	2200      	movs	r2, #0
 801f8dc:	2120      	movs	r1, #32
 801f8de:	6878      	ldr	r0, [r7, #4]
 801f8e0:	f000 fd7c 	bl	80203dc <QSPI_WaitFlagStateUntilTimeout_CPUCycle>
 801f8e4:	4603      	mov	r3, r0
 801f8e6:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 801f8e8:	7bfb      	ldrb	r3, [r7, #15]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d126      	bne.n	801f93c <HAL_QSPI_Command_IT+0xa8>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
 801f8ee:	683b      	ldr	r3, [r7, #0]
 801f8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d103      	bne.n	801f8fe <HAL_QSPI_Command_IT+0x6a>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	2203      	movs	r2, #3
 801f8fc:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801f8fe:	2200      	movs	r2, #0
 801f900:	6839      	ldr	r1, [r7, #0]
 801f902:	6878      	ldr	r0, [r7, #4]
 801f904:	f000 fda6 	bl	8020454 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 801f908:	683b      	ldr	r3, [r7, #0]
 801f90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d10c      	bne.n	801f92a <HAL_QSPI_Command_IT+0x96>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	2200      	movs	r2, #0
 801f914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	681a      	ldr	r2, [r3, #0]
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 801f926:	601a      	str	r2, [r3, #0]
 801f928:	e013      	b.n	801f952 <HAL_QSPI_Command_IT+0xbe>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	2201      	movs	r2, #1
 801f92e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	2200      	movs	r2, #0
 801f936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f93a:	e00a      	b.n	801f952 <HAL_QSPI_Command_IT+0xbe>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 801f93c:	687b      	ldr	r3, [r7, #4]
 801f93e:	2200      	movs	r2, #0
 801f940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801f944:	e005      	b.n	801f952 <HAL_QSPI_Command_IT+0xbe>
    }
  }
  else
  {
    status = HAL_BUSY;
 801f946:	2302      	movs	r3, #2
 801f948:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	2200      	movs	r2, #0
 801f94e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 801f952:	7bfb      	ldrb	r3, [r7, #15]
}
 801f954:	4618      	mov	r0, r3
 801f956:	3710      	adds	r7, #16
 801f958:	46bd      	mov	sp, r7
 801f95a:	bd80      	pop	{r7, pc}

0801f95c <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b08a      	sub	sp, #40	; 0x28
 801f960:	af02      	add	r7, sp, #8
 801f962:	60f8      	str	r0, [r7, #12]
 801f964:	60b9      	str	r1, [r7, #8]
 801f966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f968:	2300      	movs	r3, #0
 801f96a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 801f96c:	f7fe fbc8 	bl	801e100 <HAL_GetTick>
 801f970:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801f972:	68fb      	ldr	r3, [r7, #12]
 801f974:	681b      	ldr	r3, [r3, #0]
 801f976:	3320      	adds	r3, #32
 801f978:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801f97a:	68fb      	ldr	r3, [r7, #12]
 801f97c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801f980:	b2db      	uxtb	r3, r3
 801f982:	2b01      	cmp	r3, #1
 801f984:	d101      	bne.n	801f98a <HAL_QSPI_Transmit+0x2e>
 801f986:	2302      	movs	r3, #2
 801f988:	e07b      	b.n	801fa82 <HAL_QSPI_Transmit+0x126>
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	2201      	movs	r2, #1
 801f98e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801f998:	b2db      	uxtb	r3, r3
 801f99a:	2b01      	cmp	r3, #1
 801f99c:	d16a      	bne.n	801fa74 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801f99e:	68fb      	ldr	r3, [r7, #12]
 801f9a0:	2200      	movs	r2, #0
 801f9a2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801f9a4:	68bb      	ldr	r3, [r7, #8]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d05b      	beq.n	801fa62 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801f9aa:	68fb      	ldr	r3, [r7, #12]
 801f9ac:	2212      	movs	r2, #18
 801f9ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801f9b2:	68fb      	ldr	r3, [r7, #12]
 801f9b4:	681b      	ldr	r3, [r3, #0]
 801f9b6:	691b      	ldr	r3, [r3, #16]
 801f9b8:	1c5a      	adds	r2, r3, #1
 801f9ba:	68fb      	ldr	r3, [r7, #12]
 801f9bc:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801f9be:	68fb      	ldr	r3, [r7, #12]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	691b      	ldr	r3, [r3, #16]
 801f9c4:	1c5a      	adds	r2, r3, #1
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	68ba      	ldr	r2, [r7, #8]
 801f9ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801f9d0:	68fb      	ldr	r3, [r7, #12]
 801f9d2:	681b      	ldr	r3, [r3, #0]
 801f9d4:	695a      	ldr	r2, [r3, #20]
 801f9d6:	68fb      	ldr	r3, [r7, #12]
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801f9de:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 801f9e0:	e01b      	b.n	801fa1a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	9300      	str	r3, [sp, #0]
 801f9e6:	69bb      	ldr	r3, [r7, #24]
 801f9e8:	2201      	movs	r2, #1
 801f9ea:	2104      	movs	r1, #4
 801f9ec:	68f8      	ldr	r0, [r7, #12]
 801f9ee:	f000 fcbe 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801f9f2:	4603      	mov	r3, r0
 801f9f4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 801f9f6:	7ffb      	ldrb	r3, [r7, #31]
 801f9f8:	2b00      	cmp	r3, #0
 801f9fa:	d113      	bne.n	801fa24 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 801f9fc:	68fb      	ldr	r3, [r7, #12]
 801f9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa00:	781a      	ldrb	r2, [r3, #0]
 801fa02:	697b      	ldr	r3, [r7, #20]
 801fa04:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 801fa06:	68fb      	ldr	r3, [r7, #12]
 801fa08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa0a:	1c5a      	adds	r2, r3, #1
 801fa0c:	68fb      	ldr	r3, [r7, #12]
 801fa0e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 801fa10:	68fb      	ldr	r3, [r7, #12]
 801fa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa14:	1e5a      	subs	r2, r3, #1
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d1df      	bne.n	801f9e2 <HAL_QSPI_Transmit+0x86>
 801fa22:	e000      	b.n	801fa26 <HAL_QSPI_Transmit+0xca>
          break;
 801fa24:	bf00      	nop
      }

      if (status == HAL_OK)
 801fa26:	7ffb      	ldrb	r3, [r7, #31]
 801fa28:	2b00      	cmp	r3, #0
 801fa2a:	d115      	bne.n	801fa58 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	9300      	str	r3, [sp, #0]
 801fa30:	69bb      	ldr	r3, [r7, #24]
 801fa32:	2201      	movs	r2, #1
 801fa34:	2102      	movs	r1, #2
 801fa36:	68f8      	ldr	r0, [r7, #12]
 801fa38:	f000 fc99 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fa3c:	4603      	mov	r3, r0
 801fa3e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 801fa40:	7ffb      	ldrb	r3, [r7, #31]
 801fa42:	2b00      	cmp	r3, #0
 801fa44:	d108      	bne.n	801fa58 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	2202      	movs	r2, #2
 801fa4c:	60da      	str	r2, [r3, #12]

          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 801fa4e:	68f8      	ldr	r0, [r7, #12]
 801fa50:	f000 fb34 	bl	80200bc <HAL_QSPI_Abort>
 801fa54:	4603      	mov	r3, r0
 801fa56:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 801fa58:	68fb      	ldr	r3, [r7, #12]
 801fa5a:	2201      	movs	r2, #1
 801fa5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fa60:	e00a      	b.n	801fa78 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801fa62:	68fb      	ldr	r3, [r7, #12]
 801fa64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa66:	f043 0208 	orr.w	r2, r3, #8
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801fa6e:	2301      	movs	r3, #1
 801fa70:	77fb      	strb	r3, [r7, #31]
 801fa72:	e001      	b.n	801fa78 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 801fa74:	2302      	movs	r3, #2
 801fa76:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801fa78:	68fb      	ldr	r3, [r7, #12]
 801fa7a:	2200      	movs	r2, #0
 801fa7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801fa80:	7ffb      	ldrb	r3, [r7, #31]
}
 801fa82:	4618      	mov	r0, r3
 801fa84:	3720      	adds	r7, #32
 801fa86:	46bd      	mov	sp, r7
 801fa88:	bd80      	pop	{r7, pc}

0801fa8a <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 801fa8a:	b580      	push	{r7, lr}
 801fa8c:	b08a      	sub	sp, #40	; 0x28
 801fa8e:	af02      	add	r7, sp, #8
 801fa90:	60f8      	str	r0, [r7, #12]
 801fa92:	60b9      	str	r1, [r7, #8]
 801fa94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fa96:	2300      	movs	r3, #0
 801fa98:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 801fa9a:	f7fe fb31 	bl	801e100 <HAL_GetTick>
 801fa9e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 801faa0:	68fb      	ldr	r3, [r7, #12]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	699b      	ldr	r3, [r3, #24]
 801faa6:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	681b      	ldr	r3, [r3, #0]
 801faac:	3320      	adds	r3, #32
 801faae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801fab0:	68fb      	ldr	r3, [r7, #12]
 801fab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fab6:	b2db      	uxtb	r3, r3
 801fab8:	2b01      	cmp	r3, #1
 801faba:	d101      	bne.n	801fac0 <HAL_QSPI_Receive+0x36>
 801fabc:	2302      	movs	r3, #2
 801fabe:	e082      	b.n	801fbc6 <HAL_QSPI_Receive+0x13c>
 801fac0:	68fb      	ldr	r3, [r7, #12]
 801fac2:	2201      	movs	r2, #1
 801fac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801fac8:	68fb      	ldr	r3, [r7, #12]
 801faca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801face:	b2db      	uxtb	r3, r3
 801fad0:	2b01      	cmp	r3, #1
 801fad2:	d171      	bne.n	801fbb8 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801fad4:	68fb      	ldr	r3, [r7, #12]
 801fad6:	2200      	movs	r2, #0
 801fad8:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801fada:	68bb      	ldr	r3, [r7, #8]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d062      	beq.n	801fba6 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 801fae0:	68fb      	ldr	r3, [r7, #12]
 801fae2:	2222      	movs	r2, #34	; 0x22
 801fae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 801fae8:	68fb      	ldr	r3, [r7, #12]
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	691b      	ldr	r3, [r3, #16]
 801faee:	1c5a      	adds	r2, r3, #1
 801faf0:	68fb      	ldr	r3, [r7, #12]
 801faf2:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 801faf4:	68fb      	ldr	r3, [r7, #12]
 801faf6:	681b      	ldr	r3, [r3, #0]
 801faf8:	691b      	ldr	r3, [r3, #16]
 801fafa:	1c5a      	adds	r2, r3, #1
 801fafc:	68fb      	ldr	r3, [r7, #12]
 801fafe:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	68ba      	ldr	r2, [r7, #8]
 801fb04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 801fb06:	68fb      	ldr	r3, [r7, #12]
 801fb08:	681b      	ldr	r3, [r3, #0]
 801fb0a:	695b      	ldr	r3, [r3, #20]
 801fb0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801fb18:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 801fb1a:	68fb      	ldr	r3, [r7, #12]
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	697a      	ldr	r2, [r7, #20]
 801fb20:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 801fb22:	e01c      	b.n	801fb5e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	9300      	str	r3, [sp, #0]
 801fb28:	69bb      	ldr	r3, [r7, #24]
 801fb2a:	2201      	movs	r2, #1
 801fb2c:	2106      	movs	r1, #6
 801fb2e:	68f8      	ldr	r0, [r7, #12]
 801fb30:	f000 fc1d 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fb34:	4603      	mov	r3, r0
 801fb36:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 801fb38:	7ffb      	ldrb	r3, [r7, #31]
 801fb3a:	2b00      	cmp	r3, #0
 801fb3c:	d114      	bne.n	801fb68 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb42:	693a      	ldr	r2, [r7, #16]
 801fb44:	7812      	ldrb	r2, [r2, #0]
 801fb46:	b2d2      	uxtb	r2, r2
 801fb48:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fb4e:	1c5a      	adds	r2, r3, #1
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 801fb54:	68fb      	ldr	r3, [r7, #12]
 801fb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb58:	1e5a      	subs	r2, r3, #1
 801fb5a:	68fb      	ldr	r3, [r7, #12]
 801fb5c:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 801fb5e:	68fb      	ldr	r3, [r7, #12]
 801fb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fb62:	2b00      	cmp	r3, #0
 801fb64:	d1de      	bne.n	801fb24 <HAL_QSPI_Receive+0x9a>
 801fb66:	e000      	b.n	801fb6a <HAL_QSPI_Receive+0xe0>
          break;
 801fb68:	bf00      	nop
      }

      if (status == HAL_OK)
 801fb6a:	7ffb      	ldrb	r3, [r7, #31]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d115      	bne.n	801fb9c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	9300      	str	r3, [sp, #0]
 801fb74:	69bb      	ldr	r3, [r7, #24]
 801fb76:	2201      	movs	r2, #1
 801fb78:	2102      	movs	r1, #2
 801fb7a:	68f8      	ldr	r0, [r7, #12]
 801fb7c:	f000 fbf7 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fb80:	4603      	mov	r3, r0
 801fb82:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 801fb84:	7ffb      	ldrb	r3, [r7, #31]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	d108      	bne.n	801fb9c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 801fb8a:	68fb      	ldr	r3, [r7, #12]
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	2202      	movs	r2, #2
 801fb90:	60da      	str	r2, [r3, #12]

          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 801fb92:	68f8      	ldr	r0, [r7, #12]
 801fb94:	f000 fa92 	bl	80200bc <HAL_QSPI_Abort>
 801fb98:	4603      	mov	r3, r0
 801fb9a:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 801fb9c:	68fb      	ldr	r3, [r7, #12]
 801fb9e:	2201      	movs	r2, #1
 801fba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801fba4:	e00a      	b.n	801fbbc <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801fba6:	68fb      	ldr	r3, [r7, #12]
 801fba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fbaa:	f043 0208 	orr.w	r2, r3, #8
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	77fb      	strb	r3, [r7, #31]
 801fbb6:	e001      	b.n	801fbbc <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 801fbb8:	2302      	movs	r3, #2
 801fbba:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	2200      	movs	r2, #0
 801fbc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 801fbc4:	7ffb      	ldrb	r3, [r7, #31]
}
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	3720      	adds	r7, #32
 801fbca:	46bd      	mov	sp, r7
 801fbcc:	bd80      	pop	{r7, pc}
	...

0801fbd0 <HAL_QSPI_Transmit_DMA>:
  * @note   If DMA peripheral access is configured as word, the number
  *         of data and the fifo threshold should be aligned on word
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
 801fbd0:	b580      	push	{r7, lr}
 801fbd2:	b084      	sub	sp, #16
 801fbd4:	af00      	add	r7, sp, #0
 801fbd6:	6078      	str	r0, [r7, #4]
 801fbd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801fbda:	2300      	movs	r3, #0
 801fbdc:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	681b      	ldr	r3, [r3, #0]
 801fbe2:	691b      	ldr	r3, [r3, #16]
 801fbe4:	3301      	adds	r3, #1
 801fbe6:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fbee:	b2db      	uxtb	r3, r3
 801fbf0:	2b01      	cmp	r3, #1
 801fbf2:	d101      	bne.n	801fbf8 <HAL_QSPI_Transmit_DMA+0x28>
 801fbf4:	2302      	movs	r3, #2
 801fbf6:	e0e3      	b.n	801fdc0 <HAL_QSPI_Transmit_DMA+0x1f0>
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	2201      	movs	r2, #1
 801fbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fc06:	b2db      	uxtb	r3, r3
 801fc08:	2b01      	cmp	r3, #1
 801fc0a:	f040 80d2 	bne.w	801fdb2 <HAL_QSPI_Transmit_DMA+0x1e2>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801fc0e:	687b      	ldr	r3, [r7, #4]
 801fc10:	2200      	movs	r2, #0
 801fc12:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 801fc14:	683b      	ldr	r3, [r7, #0]
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	f000 80be 	beq.w	801fd98 <HAL_QSPI_Transmit_DMA+0x1c8>
    {
      /* Configure counters of the handle */
      if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_BYTE)
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fc20:	695b      	ldr	r3, [r3, #20]
 801fc22:	2b00      	cmp	r3, #0
 801fc24:	d103      	bne.n	801fc2e <HAL_QSPI_Transmit_DMA+0x5e>
      {
        hqspi->TxXferCount = data_size;
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	68ba      	ldr	r2, [r7, #8]
 801fc2a:	62da      	str	r2, [r3, #44]	; 0x2c
 801fc2c:	e044      	b.n	801fcb8 <HAL_QSPI_Transmit_DMA+0xe8>
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_HALFWORD)
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fc32:	695b      	ldr	r3, [r3, #20]
 801fc34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fc38:	d11c      	bne.n	801fc74 <HAL_QSPI_Transmit_DMA+0xa4>
      {
        if (((data_size % 2U) != 0U) || ((hqspi->Init.FifoThreshold % 2U) != 0U))
 801fc3a:	68bb      	ldr	r3, [r7, #8]
 801fc3c:	f003 0301 	and.w	r3, r3, #1
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d105      	bne.n	801fc50 <HAL_QSPI_Transmit_DMA+0x80>
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	689b      	ldr	r3, [r3, #8]
 801fc48:	f003 0301 	and.w	r3, r3, #1
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d00c      	beq.n	801fc6a <HAL_QSPI_Transmit_DMA+0x9a>
        {
          /* The number of data or the fifo threshold is not aligned on halfword
          => no transfer possible with DMA peripheral access configured as halfword */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc54:	f043 0208 	orr.w	r2, r3, #8
 801fc58:	687b      	ldr	r3, [r7, #4]
 801fc5a:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 801fc5c:	2301      	movs	r3, #1
 801fc5e:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	2200      	movs	r2, #0
 801fc64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fc68:	e026      	b.n	801fcb8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 1U);
 801fc6a:	68bb      	ldr	r3, [r7, #8]
 801fc6c:	085a      	lsrs	r2, r3, #1
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	62da      	str	r2, [r3, #44]	; 0x2c
 801fc72:	e021      	b.n	801fcb8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
      }
      else if (hqspi->hdma->Init.PeriphDataAlignment == DMA_PDATAALIGN_WORD)
 801fc74:	687b      	ldr	r3, [r7, #4]
 801fc76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fc78:	695b      	ldr	r3, [r3, #20]
 801fc7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fc7e:	d11b      	bne.n	801fcb8 <HAL_QSPI_Transmit_DMA+0xe8>
      {
        if (((data_size % 4U) != 0U) || ((hqspi->Init.FifoThreshold % 4U) != 0U))
 801fc80:	68bb      	ldr	r3, [r7, #8]
 801fc82:	f003 0303 	and.w	r3, r3, #3
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	d105      	bne.n	801fc96 <HAL_QSPI_Transmit_DMA+0xc6>
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	689b      	ldr	r3, [r3, #8]
 801fc8e:	f003 0303 	and.w	r3, r3, #3
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d00c      	beq.n	801fcb0 <HAL_QSPI_Transmit_DMA+0xe0>
        {
          /* The number of data or the fifo threshold is not aligned on word
          => no transfer possible with DMA peripheral access configured as word */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc9a:	f043 0208 	orr.w	r2, r3, #8
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
 801fca2:	2301      	movs	r3, #1
 801fca4:	73fb      	strb	r3, [r7, #15]

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	2200      	movs	r2, #0
 801fcaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fcae:	e003      	b.n	801fcb8 <HAL_QSPI_Transmit_DMA+0xe8>
        }
        else
        {
          hqspi->TxXferCount = (data_size >> 2U);
 801fcb0:	68bb      	ldr	r3, [r7, #8]
 801fcb2:	089a      	lsrs	r2, r3, #2
 801fcb4:	687b      	ldr	r3, [r7, #4]
 801fcb6:	62da      	str	r2, [r3, #44]	; 0x2c
      else
      {
        /* Nothing to do */
      }

      if (status == HAL_OK)
 801fcb8:	7bfb      	ldrb	r3, [r7, #15]
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d17f      	bne.n	801fdbe <HAL_QSPI_Transmit_DMA+0x1ee>
      {
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	2212      	movs	r2, #18
 801fcc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	2203      	movs	r2, #3
 801fccc:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	683a      	ldr	r2, [r7, #0]
 801fcda:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	681b      	ldr	r3, [r3, #0]
 801fce0:	695a      	ldr	r2, [r3, #20]
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 801fcea:	615a      	str	r2, [r3, #20]

        /* Set the QSPI DMA transfer complete callback */
        hqspi->hdma->XferCpltCallback = QSPI_DMATxCplt;
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fcf0:	4a35      	ldr	r2, [pc, #212]	; (801fdc8 <HAL_QSPI_Transmit_DMA+0x1f8>)
 801fcf2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the QSPI DMA Half transfer complete callback */
        hqspi->hdma->XferHalfCpltCallback = QSPI_DMATxHalfCplt;
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fcf8:	4a34      	ldr	r2, [pc, #208]	; (801fdcc <HAL_QSPI_Transmit_DMA+0x1fc>)
 801fcfa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hqspi->hdma->XferErrorCallback = QSPI_DMAError;
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd00:	4a33      	ldr	r2, [pc, #204]	; (801fdd0 <HAL_QSPI_Transmit_DMA+0x200>)
 801fd02:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Clear the DMA abort callback */
        hqspi->hdma->XferAbortCallback = NULL;
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd08:	2200      	movs	r2, #0
 801fd0a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_PERIPH_TO_MEMORY;
#else
        /* Configure the direction of the DMA */
        hqspi->hdma->Init.Direction = DMA_MEMORY_TO_PERIPH;
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd10:	2240      	movs	r2, #64	; 0x40
 801fd12:	609a      	str	r2, [r3, #8]
#endif /* QSPI1_V2_1L */

        /* Update direction mode bit */
        MODIFY_REG(hqspi->hdma->Instance->CR, DMA_SxCR_DIR, hqspi->hdma->Init.Direction);
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	681b      	ldr	r3, [r3, #0]
 801fd1c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd24:	689a      	ldr	r2, [r3, #8]
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801fd2a:	681b      	ldr	r3, [r3, #0]
 801fd2c:	430a      	orrs	r2, r1
 801fd2e:	601a      	str	r2, [r3, #0]

        /* Enable the QSPI transmit DMA Channel */
        if (HAL_DMA_Start_IT(hqspi->hdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize) == HAL_OK)
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801fd34:	6839      	ldr	r1, [r7, #0]
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	3320      	adds	r3, #32
 801fd3c:	461a      	mov	r2, r3
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd42:	f7fe fc2d 	bl	801e5a0 <HAL_DMA_Start_IT>
 801fd46:	4603      	mov	r3, r0
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d114      	bne.n	801fd76 <HAL_QSPI_Transmit_DMA+0x1a6>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	2200      	movs	r2, #0
 801fd50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
 801fd54:	687b      	ldr	r3, [r7, #4]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	681a      	ldr	r2, [r3, #0]
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801fd62:	601a      	str	r2, [r3, #0]

          /* Enable the DMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	681b      	ldr	r3, [r3, #0]
 801fd68:	681a      	ldr	r2, [r3, #0]
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	681b      	ldr	r3, [r3, #0]
 801fd6e:	f042 0204 	orr.w	r2, r2, #4
 801fd72:	601a      	str	r2, [r3, #0]
 801fd74:	e023      	b.n	801fdbe <HAL_QSPI_Transmit_DMA+0x1ee>
        }
        else
        {
          status = HAL_ERROR;
 801fd76:	2301      	movs	r3, #1
 801fd78:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 801fd7a:	687b      	ldr	r3, [r7, #4]
 801fd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fd7e:	f043 0204 	orr.w	r2, r3, #4
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	2201      	movs	r2, #1
 801fd8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	2200      	movs	r2, #0
 801fd92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fd96:	e012      	b.n	801fdbe <HAL_QSPI_Transmit_DMA+0x1ee>
        }
     }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fd9c:	f043 0208 	orr.w	r2, r3, #8
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 801fda4:	2301      	movs	r3, #1
 801fda6:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	2200      	movs	r2, #0
 801fdac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801fdb0:	e005      	b.n	801fdbe <HAL_QSPI_Transmit_DMA+0x1ee>
    }
  }
  else
  {
    status = HAL_BUSY;
 801fdb2:	2302      	movs	r3, #2
 801fdb4:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	2200      	movs	r2, #0
 801fdba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801fdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 801fdc0:	4618      	mov	r0, r3
 801fdc2:	3710      	adds	r7, #16
 801fdc4:	46bd      	mov	sp, r7
 801fdc6:	bd80      	pop	{r7, pc}
 801fdc8:	0802026d 	.word	0x0802026d
 801fdcc:	0802029d 	.word	0x0802029d
 801fdd0:	080202b9 	.word	0x080202b9

0801fdd4 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 801fdd4:	b580      	push	{r7, lr}
 801fdd6:	b088      	sub	sp, #32
 801fdd8:	af02      	add	r7, sp, #8
 801fdda:	60f8      	str	r0, [r7, #12]
 801fddc:	60b9      	str	r1, [r7, #8]
 801fdde:	607a      	str	r2, [r7, #4]
 801fde0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801fde2:	f7fe f98d 	bl	801e100 <HAL_GetTick>
 801fde6:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801fde8:	68fb      	ldr	r3, [r7, #12]
 801fdea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fdee:	b2db      	uxtb	r3, r3
 801fdf0:	2b01      	cmp	r3, #1
 801fdf2:	d101      	bne.n	801fdf8 <HAL_QSPI_AutoPolling+0x24>
 801fdf4:	2302      	movs	r3, #2
 801fdf6:	e060      	b.n	801feba <HAL_QSPI_AutoPolling+0xe6>
 801fdf8:	68fb      	ldr	r3, [r7, #12]
 801fdfa:	2201      	movs	r2, #1
 801fdfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801fe06:	b2db      	uxtb	r3, r3
 801fe08:	2b01      	cmp	r3, #1
 801fe0a:	d14f      	bne.n	801feac <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	2200      	movs	r2, #0
 801fe10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	2242      	movs	r2, #66	; 0x42
 801fe16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	9300      	str	r3, [sp, #0]
 801fe1e:	693b      	ldr	r3, [r7, #16]
 801fe20:	2200      	movs	r2, #0
 801fe22:	2120      	movs	r1, #32
 801fe24:	68f8      	ldr	r0, [r7, #12]
 801fe26:	f000 faa2 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fe2a:	4603      	mov	r3, r0
 801fe2c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801fe2e:	7dfb      	ldrb	r3, [r7, #23]
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	d13d      	bne.n	801feb0 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801fe34:	68fb      	ldr	r3, [r7, #12]
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	687a      	ldr	r2, [r7, #4]
 801fe3a:	6812      	ldr	r2, [r2, #0]
 801fe3c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	687a      	ldr	r2, [r7, #4]
 801fe44:	6852      	ldr	r2, [r2, #4]
 801fe46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 801fe48:	68fb      	ldr	r3, [r7, #12]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	687a      	ldr	r2, [r7, #4]
 801fe4e:	6892      	ldr	r2, [r2, #8]
 801fe50:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801fe52:	68fb      	ldr	r3, [r7, #12]
 801fe54:	681b      	ldr	r3, [r3, #0]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	691b      	ldr	r3, [r3, #16]
 801fe60:	431a      	orrs	r2, r3
 801fe62:	68fb      	ldr	r3, [r7, #12]
 801fe64:	681b      	ldr	r3, [r3, #0]
 801fe66:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801fe6a:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	68da      	ldr	r2, [r3, #12]
 801fe70:	68bb      	ldr	r3, [r7, #8]
 801fe72:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801fe74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801fe78:	68b9      	ldr	r1, [r7, #8]
 801fe7a:	68f8      	ldr	r0, [r7, #12]
 801fe7c:	f000 faea 	bl	8020454 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 801fe80:	683b      	ldr	r3, [r7, #0]
 801fe82:	9300      	str	r3, [sp, #0]
 801fe84:	693b      	ldr	r3, [r7, #16]
 801fe86:	2201      	movs	r2, #1
 801fe88:	2108      	movs	r1, #8
 801fe8a:	68f8      	ldr	r0, [r7, #12]
 801fe8c:	f000 fa6f 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fe90:	4603      	mov	r3, r0
 801fe92:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 801fe94:	7dfb      	ldrb	r3, [r7, #23]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d10a      	bne.n	801feb0 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 801fe9a:	68fb      	ldr	r3, [r7, #12]
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	2208      	movs	r2, #8
 801fea0:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 801fea2:	68fb      	ldr	r3, [r7, #12]
 801fea4:	2201      	movs	r2, #1
 801fea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801feaa:	e001      	b.n	801feb0 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 801feac:	2302      	movs	r3, #2
 801feae:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 801feb0:	68fb      	ldr	r3, [r7, #12]
 801feb2:	2200      	movs	r2, #0
 801feb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801feb8:	7dfb      	ldrb	r3, [r7, #23]
}
 801feba:	4618      	mov	r0, r3
 801febc:	3718      	adds	r7, #24
 801febe:	46bd      	mov	sp, r7
 801fec0:	bd80      	pop	{r7, pc}

0801fec2 <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
 801fec2:	b580      	push	{r7, lr}
 801fec4:	b086      	sub	sp, #24
 801fec6:	af00      	add	r7, sp, #0
 801fec8:	60f8      	str	r0, [r7, #12]
 801feca:	60b9      	str	r1, [r7, #8]
 801fecc:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801fed4:	b2db      	uxtb	r3, r3
 801fed6:	2b01      	cmp	r3, #1
 801fed8:	d101      	bne.n	801fede <HAL_QSPI_AutoPolling_IT+0x1c>
 801feda:	2302      	movs	r3, #2
 801fedc:	e060      	b.n	801ffa0 <HAL_QSPI_AutoPolling_IT+0xde>
 801fede:	68fb      	ldr	r3, [r7, #12]
 801fee0:	2201      	movs	r2, #1
 801fee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801feec:	b2db      	uxtb	r3, r3
 801feee:	2b01      	cmp	r3, #1
 801fef0:	d14f      	bne.n	801ff92 <HAL_QSPI_AutoPolling_IT+0xd0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	2200      	movs	r2, #0
 801fef6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 801fef8:	68fb      	ldr	r3, [r7, #12]
 801fefa:	2242      	movs	r2, #66	; 0x42
 801fefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout_CPUCycle(hqspi, QSPI_FLAG_BUSY, RESET, hqspi->Timeout);	
 801ff00:	68fb      	ldr	r3, [r7, #12]
 801ff02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ff04:	2200      	movs	r2, #0
 801ff06:	2120      	movs	r1, #32
 801ff08:	68f8      	ldr	r0, [r7, #12]
 801ff0a:	f000 fa67 	bl	80203dc <QSPI_WaitFlagStateUntilTimeout_CPUCycle>
 801ff0e:	4603      	mov	r3, r0
 801ff10:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 801ff12:	7dfb      	ldrb	r3, [r7, #23]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d137      	bne.n	801ff88 <HAL_QSPI_AutoPolling_IT+0xc6>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	687a      	ldr	r2, [r7, #4]
 801ff1e:	6812      	ldr	r2, [r2, #0]
 801ff20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 801ff22:	68fb      	ldr	r3, [r7, #12]
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	687a      	ldr	r2, [r7, #4]
 801ff28:	6852      	ldr	r2, [r2, #4]
 801ff2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 801ff2c:	68fb      	ldr	r3, [r7, #12]
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	687a      	ldr	r2, [r7, #4]
 801ff32:	6892      	ldr	r2, [r2, #8]
 801ff34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 801ff36:	68fb      	ldr	r3, [r7, #12]
 801ff38:	681b      	ldr	r3, [r3, #0]
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	691a      	ldr	r2, [r3, #16]
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	695b      	ldr	r3, [r3, #20]
 801ff48:	431a      	orrs	r2, r3
 801ff4a:	68fb      	ldr	r3, [r7, #12]
 801ff4c:	681b      	ldr	r3, [r3, #0]
 801ff4e:	430a      	orrs	r2, r1
 801ff50:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
 801ff52:	68fb      	ldr	r3, [r7, #12]
 801ff54:	681b      	ldr	r3, [r3, #0]
 801ff56:	2209      	movs	r2, #9
 801ff58:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	68da      	ldr	r2, [r3, #12]
 801ff5e:	68bb      	ldr	r3, [r7, #8]
 801ff60:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 801ff62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801ff66:	68b9      	ldr	r1, [r7, #8]
 801ff68:	68f8      	ldr	r0, [r7, #12]
 801ff6a:	f000 fa73 	bl	8020454 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	2200      	movs	r2, #0
 801ff72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	681a      	ldr	r2, [r3, #0]
 801ff7c:	68fb      	ldr	r3, [r7, #12]
 801ff7e:	681b      	ldr	r3, [r3, #0]
 801ff80:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
 801ff84:	601a      	str	r2, [r3, #0]
 801ff86:	e00a      	b.n	801ff9e <HAL_QSPI_AutoPolling_IT+0xdc>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	2200      	movs	r2, #0
 801ff8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ff90:	e005      	b.n	801ff9e <HAL_QSPI_AutoPolling_IT+0xdc>
    }
  }
  else
  {
    status = HAL_BUSY;
 801ff92:	2302      	movs	r3, #2
 801ff94:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	2200      	movs	r2, #0
 801ff9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
 801ff9e:	7dfb      	ldrb	r3, [r7, #23]
}
 801ffa0:	4618      	mov	r0, r3
 801ffa2:	3718      	adds	r7, #24
 801ffa4:	46bd      	mov	sp, r7
 801ffa6:	bd80      	pop	{r7, pc}

0801ffa8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b088      	sub	sp, #32
 801ffac:	af02      	add	r7, sp, #8
 801ffae:	60f8      	str	r0, [r7, #12]
 801ffb0:	60b9      	str	r1, [r7, #8]
 801ffb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 801ffb4:	f7fe f8a4 	bl	801e100 <HAL_GetTick>
 801ffb8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ffc0:	b2db      	uxtb	r3, r3
 801ffc2:	2b01      	cmp	r3, #1
 801ffc4:	d101      	bne.n	801ffca <HAL_QSPI_MemoryMapped+0x22>
 801ffc6:	2302      	movs	r3, #2
 801ffc8:	e04c      	b.n	8020064 <HAL_QSPI_MemoryMapped+0xbc>
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	2201      	movs	r2, #1
 801ffce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ffd8:	b2db      	uxtb	r3, r3
 801ffda:	2b01      	cmp	r3, #1
 801ffdc:	d13b      	bne.n	8020056 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 801ffde:	68fb      	ldr	r3, [r7, #12]
 801ffe0:	2200      	movs	r2, #0
 801ffe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 801ffe4:	68fb      	ldr	r3, [r7, #12]
 801ffe6:	2282      	movs	r2, #130	; 0x82
 801ffe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801ffec:	68fb      	ldr	r3, [r7, #12]
 801ffee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801fff0:	9300      	str	r3, [sp, #0]
 801fff2:	693b      	ldr	r3, [r7, #16]
 801fff4:	2200      	movs	r2, #0
 801fff6:	2120      	movs	r1, #32
 801fff8:	68f8      	ldr	r0, [r7, #12]
 801fffa:	f000 f9b8 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 801fffe:	4603      	mov	r3, r0
 8020000:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8020002:	7dfb      	ldrb	r3, [r7, #23]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d128      	bne.n	802005a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	681b      	ldr	r3, [r3, #0]
 802000e:	f023 0108 	bic.w	r1, r3, #8
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	685a      	ldr	r2, [r3, #4]
 8020016:	68fb      	ldr	r3, [r7, #12]
 8020018:	681b      	ldr	r3, [r3, #0]
 802001a:	430a      	orrs	r2, r1
 802001c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 802001e:	687b      	ldr	r3, [r7, #4]
 8020020:	685b      	ldr	r3, [r3, #4]
 8020022:	2b08      	cmp	r3, #8
 8020024:	d110      	bne.n	8020048 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8020026:	68fb      	ldr	r3, [r7, #12]
 8020028:	681b      	ldr	r3, [r3, #0]
 802002a:	687a      	ldr	r2, [r7, #4]
 802002c:	6812      	ldr	r2, [r2, #0]
 802002e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	2210      	movs	r2, #16
 8020036:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	681a      	ldr	r2, [r3, #0]
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8020046:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8020048:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 802004c:	68b9      	ldr	r1, [r7, #8]
 802004e:	68f8      	ldr	r0, [r7, #12]
 8020050:	f000 fa00 	bl	8020454 <QSPI_Config>
 8020054:	e001      	b.n	802005a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8020056:	2302      	movs	r3, #2
 8020058:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 802005a:	68fb      	ldr	r3, [r7, #12]
 802005c:	2200      	movs	r2, #0
 802005e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8020062:	7dfb      	ldrb	r3, [r7, #23]
}
 8020064:	4618      	mov	r0, r3
 8020066:	3718      	adds	r7, #24
 8020068:	46bd      	mov	sp, r7
 802006a:	bd80      	pop	{r7, pc}

0802006c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 802006c:	b480      	push	{r7}
 802006e:	b083      	sub	sp, #12
 8020070:	af00      	add	r7, sp, #0
 8020072:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8020074:	bf00      	nop
 8020076:	370c      	adds	r7, #12
 8020078:	46bd      	mov	sp, r7
 802007a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802007e:	4770      	bx	lr

08020080 <HAL_QSPI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxHalfCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8020080:	b480      	push	{r7}
 8020082:	b083      	sub	sp, #12
 8020084:	af00      	add	r7, sp, #0
 8020086:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8020088:	bf00      	nop
 802008a:	370c      	adds	r7, #12
 802008c:	46bd      	mov	sp, r7
 802008e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020092:	4770      	bx	lr

08020094 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8020094:	b480      	push	{r7}
 8020096:	b083      	sub	sp, #12
 8020098:	af00      	add	r7, sp, #0
 802009a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 802009c:	bf00      	nop
 802009e:	370c      	adds	r7, #12
 80200a0:	46bd      	mov	sp, r7
 80200a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200a6:	4770      	bx	lr

080200a8 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 80200a8:	b480      	push	{r7}
 80200aa:	b083      	sub	sp, #12
 80200ac:	af00      	add	r7, sp, #0
 80200ae:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 80200b0:	bf00      	nop
 80200b2:	370c      	adds	r7, #12
 80200b4:	46bd      	mov	sp, r7
 80200b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ba:	4770      	bx	lr

080200bc <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 80200bc:	b580      	push	{r7, lr}
 80200be:	b086      	sub	sp, #24
 80200c0:	af02      	add	r7, sp, #8
 80200c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80200c4:	2300      	movs	r3, #0
 80200c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80200c8:	f7fe f81a 	bl	801e100 <HAL_GetTick>
 80200cc:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80200d4:	b2db      	uxtb	r3, r3
 80200d6:	f003 0302 	and.w	r3, r3, #2
 80200da:	2b00      	cmp	r3, #0
 80200dc:	d056      	beq.n	802018c <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	2200      	movs	r2, #0
 80200e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	f003 0304 	and.w	r3, r3, #4
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d017      	beq.n	8020124 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	681b      	ldr	r3, [r3, #0]
 80200f8:	681a      	ldr	r2, [r3, #0]
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	681b      	ldr	r3, [r3, #0]
 80200fe:	f022 0204 	bic.w	r2, r2, #4
 8020102:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020108:	4618      	mov	r0, r3
 802010a:	f7fe faa1 	bl	801e650 <HAL_DMA_Abort>
 802010e:	4603      	mov	r3, r0
 8020110:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 8020112:	7bfb      	ldrb	r3, [r7, #15]
 8020114:	2b00      	cmp	r3, #0
 8020116:	d005      	beq.n	8020124 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802011c:	f043 0204 	orr.w	r2, r3, #4
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	681b      	ldr	r3, [r3, #0]
 8020128:	681a      	ldr	r2, [r3, #0]
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	f042 0202 	orr.w	r2, r2, #2
 8020132:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8020138:	9300      	str	r3, [sp, #0]
 802013a:	68bb      	ldr	r3, [r7, #8]
 802013c:	2201      	movs	r2, #1
 802013e:	2102      	movs	r1, #2
 8020140:	6878      	ldr	r0, [r7, #4]
 8020142:	f000 f914 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 8020146:	4603      	mov	r3, r0
 8020148:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 802014a:	7bfb      	ldrb	r3, [r7, #15]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d10e      	bne.n	802016e <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8020150:	687b      	ldr	r3, [r7, #4]
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	2202      	movs	r2, #2
 8020156:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8020158:	687b      	ldr	r3, [r7, #4]
 802015a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802015c:	9300      	str	r3, [sp, #0]
 802015e:	68bb      	ldr	r3, [r7, #8]
 8020160:	2200      	movs	r2, #0
 8020162:	2120      	movs	r1, #32
 8020164:	6878      	ldr	r0, [r7, #4]
 8020166:	f000 f902 	bl	802036e <QSPI_WaitFlagStateUntilTimeout>
 802016a:	4603      	mov	r3, r0
 802016c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 802016e:	7bfb      	ldrb	r3, [r7, #15]
 8020170:	2b00      	cmp	r3, #0
 8020172:	d10b      	bne.n	802018c <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	681b      	ldr	r3, [r3, #0]
 8020178:	695a      	ldr	r2, [r3, #20]
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	681b      	ldr	r3, [r3, #0]
 802017e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8020182:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	2201      	movs	r2, #1
 8020188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
 802018c:	7bfb      	ldrb	r3, [r7, #15]
}
 802018e:	4618      	mov	r0, r3
 8020190:	3710      	adds	r7, #16
 8020192:	46bd      	mov	sp, r7
 8020194:	bd80      	pop	{r7, pc}
	...

08020198 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
 8020198:	b580      	push	{r7, lr}
 802019a:	b084      	sub	sp, #16
 802019c:	af00      	add	r7, sp, #0
 802019e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80201a0:	2300      	movs	r3, #0
 80201a2:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80201a4:	687b      	ldr	r3, [r7, #4]
 80201a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80201aa:	b2db      	uxtb	r3, r3
 80201ac:	f003 0302 	and.w	r3, r3, #2
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d046      	beq.n	8020242 <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80201b4:	687b      	ldr	r3, [r7, #4]
 80201b6:	2200      	movs	r2, #0
 80201b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
 80201bc:	687b      	ldr	r3, [r7, #4]
 80201be:	2208      	movs	r2, #8
 80201c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
 80201c4:	687b      	ldr	r3, [r7, #4]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	681a      	ldr	r2, [r3, #0]
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80201d2:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	f003 0304 	and.w	r3, r3, #4
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d01b      	beq.n	802021a <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80201e2:	687b      	ldr	r3, [r7, #4]
 80201e4:	681b      	ldr	r3, [r3, #0]
 80201e6:	681a      	ldr	r2, [r3, #0]
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	f022 0204 	bic.w	r2, r2, #4
 80201f0:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201f6:	4a15      	ldr	r2, [pc, #84]	; (802024c <HAL_QSPI_Abort_IT+0xb4>)
 80201f8:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80201fe:	4618      	mov	r0, r3
 8020200:	f7fe fa96 	bl	801e730 <HAL_DMA_Abort_IT>
 8020204:	4603      	mov	r3, r0
 8020206:	2b00      	cmp	r3, #0
 8020208:	d01b      	beq.n	8020242 <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	2201      	movs	r2, #1
 802020e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8020212:	6878      	ldr	r0, [r7, #4]
 8020214:	f7ff ff2a 	bl	802006c <HAL_QSPI_AbortCpltCallback>
 8020218:	e013      	b.n	8020242 <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	2202      	movs	r2, #2
 8020220:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	681a      	ldr	r2, [r3, #0]
 8020228:	687b      	ldr	r3, [r7, #4]
 802022a:	681b      	ldr	r3, [r3, #0]
 802022c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8020230:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	681a      	ldr	r2, [r3, #0]
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	f042 0202 	orr.w	r2, r2, #2
 8020240:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
 8020242:	7bfb      	ldrb	r3, [r7, #15]
}
 8020244:	4618      	mov	r0, r3
 8020246:	3710      	adds	r7, #16
 8020248:	46bd      	mov	sp, r7
 802024a:	bd80      	pop	{r7, pc}
 802024c:	08020309 	.word	0x08020309

08020250 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8020250:	b480      	push	{r7}
 8020252:	b083      	sub	sp, #12
 8020254:	af00      	add	r7, sp, #0
 8020256:	6078      	str	r0, [r7, #4]
 8020258:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	683a      	ldr	r2, [r7, #0]
 802025e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8020260:	bf00      	nop
 8020262:	370c      	adds	r7, #12
 8020264:	46bd      	mov	sp, r7
 8020266:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026a:	4770      	bx	lr

0802026c <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 802026c:	b480      	push	{r7}
 802026e:	b085      	sub	sp, #20
 8020270:	af00      	add	r7, sp, #0
 8020272:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020278:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
 802027a:	68fb      	ldr	r3, [r7, #12]
 802027c:	2200      	movs	r2, #0
 802027e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8020280:	68fb      	ldr	r3, [r7, #12]
 8020282:	681b      	ldr	r3, [r3, #0]
 8020284:	681a      	ldr	r2, [r3, #0]
 8020286:	68fb      	ldr	r3, [r7, #12]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 802028e:	601a      	str	r2, [r3, #0]
}
 8020290:	bf00      	nop
 8020292:	3714      	adds	r7, #20
 8020294:	46bd      	mov	sp, r7
 8020296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802029a:	4770      	bx	lr

0802029c <QSPI_DMATxHalfCplt>:
  * @brief  DMA QSPI transmit process half complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 802029c:	b580      	push	{r7, lr}
 802029e:	b084      	sub	sp, #16
 80202a0:	af00      	add	r7, sp, #0
 80202a2:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hdma->Parent);
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
  hqspi->TxHalfCpltCallback(hqspi);
#else
  HAL_QSPI_TxHalfCpltCallback(hqspi);
 80202aa:	68f8      	ldr	r0, [r7, #12]
 80202ac:	f7ff fee8 	bl	8020080 <HAL_QSPI_TxHalfCpltCallback>
#endif
}
 80202b0:	bf00      	nop
 80202b2:	3710      	adds	r7, #16
 80202b4:	46bd      	mov	sp, r7
 80202b6:	bd80      	pop	{r7, pc}

080202b8 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80202b8:	b580      	push	{r7, lr}
 80202ba:	b084      	sub	sp, #16
 80202bc:	af00      	add	r7, sp, #0
 80202be:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80202c4:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80202c6:	6878      	ldr	r0, [r7, #4]
 80202c8:	f7fe fc32 	bl	801eb30 <HAL_DMA_GetError>
 80202cc:	4603      	mov	r3, r0
 80202ce:	2b02      	cmp	r3, #2
 80202d0:	d016      	beq.n	8020300 <QSPI_DMAError+0x48>
  {
  hqspi->RxXferCount = 0U;
 80202d2:	68fb      	ldr	r3, [r7, #12]
 80202d4:	2200      	movs	r2, #0
 80202d6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 80202d8:	68fb      	ldr	r3, [r7, #12]
 80202da:	2200      	movs	r2, #0
 80202dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
 80202de:	68fb      	ldr	r3, [r7, #12]
 80202e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80202e2:	f043 0204 	orr.w	r2, r3, #4
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80202ea:	68fb      	ldr	r3, [r7, #12]
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	681a      	ldr	r2, [r3, #0]
 80202f0:	68fb      	ldr	r3, [r7, #12]
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	f022 0204 	bic.w	r2, r2, #4
 80202f8:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
 80202fa:	68f8      	ldr	r0, [r7, #12]
 80202fc:	f7ff ff4c 	bl	8020198 <HAL_QSPI_Abort_IT>

  }
}
 8020300:	bf00      	nop
 8020302:	3710      	adds	r7, #16
 8020304:	46bd      	mov	sp, r7
 8020306:	bd80      	pop	{r7, pc}

08020308 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8020308:	b580      	push	{r7, lr}
 802030a:	b084      	sub	sp, #16
 802030c:	af00      	add	r7, sp, #0
 802030e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hdma->Parent);
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020314:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	2200      	movs	r2, #0
 802031a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 802031c:	68fb      	ldr	r3, [r7, #12]
 802031e:	2200      	movs	r2, #0
 8020320:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8020322:	68fb      	ldr	r3, [r7, #12]
 8020324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8020328:	b2db      	uxtb	r3, r3
 802032a:	2b08      	cmp	r3, #8
 802032c:	d114      	bne.n	8020358 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	2202      	movs	r2, #2
 8020334:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8020336:	68fb      	ldr	r3, [r7, #12]
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	681a      	ldr	r2, [r3, #0]
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8020344:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8020346:	68fb      	ldr	r3, [r7, #12]
 8020348:	681b      	ldr	r3, [r3, #0]
 802034a:	681a      	ldr	r2, [r3, #0]
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	f042 0202 	orr.w	r2, r2, #2
 8020354:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8020356:	e006      	b.n	8020366 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8020358:	68fb      	ldr	r3, [r7, #12]
 802035a:	2201      	movs	r2, #1
 802035c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8020360:	68f8      	ldr	r0, [r7, #12]
 8020362:	f7e1 fb9f 	bl	8001aa4 <HAL_QSPI_ErrorCallback>
}
 8020366:	bf00      	nop
 8020368:	3710      	adds	r7, #16
 802036a:	46bd      	mov	sp, r7
 802036c:	bd80      	pop	{r7, pc}

0802036e <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 802036e:	b580      	push	{r7, lr}
 8020370:	b084      	sub	sp, #16
 8020372:	af00      	add	r7, sp, #0
 8020374:	60f8      	str	r0, [r7, #12]
 8020376:	60b9      	str	r1, [r7, #8]
 8020378:	603b      	str	r3, [r7, #0]
 802037a:	4613      	mov	r3, r2
 802037c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 802037e:	e01a      	b.n	80203b6 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8020380:	69bb      	ldr	r3, [r7, #24]
 8020382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020386:	d016      	beq.n	80203b6 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020388:	f7fd feba 	bl	801e100 <HAL_GetTick>
 802038c:	4602      	mov	r2, r0
 802038e:	683b      	ldr	r3, [r7, #0]
 8020390:	1ad3      	subs	r3, r2, r3
 8020392:	69ba      	ldr	r2, [r7, #24]
 8020394:	429a      	cmp	r2, r3
 8020396:	d302      	bcc.n	802039e <QSPI_WaitFlagStateUntilTimeout+0x30>
 8020398:	69bb      	ldr	r3, [r7, #24]
 802039a:	2b00      	cmp	r3, #0
 802039c:	d10b      	bne.n	80203b6 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 802039e:	68fb      	ldr	r3, [r7, #12]
 80203a0:	2204      	movs	r2, #4
 80203a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80203a6:	68fb      	ldr	r3, [r7, #12]
 80203a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80203aa:	f043 0201 	orr.w	r2, r3, #1
 80203ae:	68fb      	ldr	r3, [r7, #12]
 80203b0:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80203b2:	2301      	movs	r3, #1
 80203b4:	e00e      	b.n	80203d4 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	681b      	ldr	r3, [r3, #0]
 80203ba:	689a      	ldr	r2, [r3, #8]
 80203bc:	68bb      	ldr	r3, [r7, #8]
 80203be:	4013      	ands	r3, r2
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	bf14      	ite	ne
 80203c4:	2301      	movne	r3, #1
 80203c6:	2300      	moveq	r3, #0
 80203c8:	b2db      	uxtb	r3, r3
 80203ca:	461a      	mov	r2, r3
 80203cc:	79fb      	ldrb	r3, [r7, #7]
 80203ce:	429a      	cmp	r2, r3
 80203d0:	d1d6      	bne.n	8020380 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80203d2:	2300      	movs	r3, #0
}
 80203d4:	4618      	mov	r0, r3
 80203d6:	3710      	adds	r7, #16
 80203d8:	46bd      	mov	sp, r7
 80203da:	bd80      	pop	{r7, pc}

080203dc <QSPI_WaitFlagStateUntilTimeout_CPUCycle>:
  * @param  State : Value of the flag expected
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout_CPUCycle(QSPI_HandleTypeDef *hqspi, uint32_t Flag, FlagStatus State, uint32_t Timeout)
{ 
 80203dc:	b480      	push	{r7}
 80203de:	b087      	sub	sp, #28
 80203e0:	af00      	add	r7, sp, #0
 80203e2:	60f8      	str	r0, [r7, #12]
 80203e4:	60b9      	str	r1, [r7, #8]
 80203e6:	603b      	str	r3, [r7, #0]
 80203e8:	4613      	mov	r3, r2
 80203ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count = Timeout * (SystemCoreClock / 16U / 1000U);
 80203ec:	4b17      	ldr	r3, [pc, #92]	; (802044c <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x70>)
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	4a17      	ldr	r2, [pc, #92]	; (8020450 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x74>)
 80203f2:	fba2 2303 	umull	r2, r3, r2, r3
 80203f6:	0a9b      	lsrs	r3, r3, #10
 80203f8:	683a      	ldr	r2, [r7, #0]
 80203fa:	fb02 f303 	mul.w	r3, r2, r3
 80203fe:	617b      	str	r3, [r7, #20]
   do
   {
     if (count-- == 0U)
 8020400:	697b      	ldr	r3, [r7, #20]
 8020402:	1e5a      	subs	r2, r3, #1
 8020404:	617a      	str	r2, [r7, #20]
 8020406:	2b00      	cmp	r3, #0
 8020408:	d10b      	bne.n	8020422 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x46>
     {
       hqspi->State     = HAL_QSPI_STATE_ERROR;
 802040a:	68fb      	ldr	r3, [r7, #12]
 802040c:	2204      	movs	r2, #4
 802040e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
       hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8020412:	68fb      	ldr	r3, [r7, #12]
 8020414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020416:	f043 0201 	orr.w	r2, r3, #1
 802041a:	68fb      	ldr	r3, [r7, #12]
 802041c:	645a      	str	r2, [r3, #68]	; 0x44
       return HAL_TIMEOUT;
 802041e:	2303      	movs	r3, #3
 8020420:	e00e      	b.n	8020440 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x64>
     }
   }
   while ((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State);
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	681b      	ldr	r3, [r3, #0]
 8020426:	689a      	ldr	r2, [r3, #8]
 8020428:	68bb      	ldr	r3, [r7, #8]
 802042a:	4013      	ands	r3, r2
 802042c:	2b00      	cmp	r3, #0
 802042e:	bf14      	ite	ne
 8020430:	2301      	movne	r3, #1
 8020432:	2300      	moveq	r3, #0
 8020434:	b2db      	uxtb	r3, r3
 8020436:	461a      	mov	r2, r3
 8020438:	79fb      	ldrb	r3, [r7, #7]
 802043a:	429a      	cmp	r2, r3
 802043c:	d1e0      	bne.n	8020400 <QSPI_WaitFlagStateUntilTimeout_CPUCycle+0x24>
   
   return HAL_OK;   
 802043e:	2300      	movs	r3, #0
}
 8020440:	4618      	mov	r0, r3
 8020442:	371c      	adds	r7, #28
 8020444:	46bd      	mov	sp, r7
 8020446:	f85d 7b04 	ldr.w	r7, [sp], #4
 802044a:	4770      	bx	lr
 802044c:	20000004 	.word	0x20000004
 8020450:	10624dd3 	.word	0x10624dd3

08020454 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8020454:	b480      	push	{r7}
 8020456:	b085      	sub	sp, #20
 8020458:	af00      	add	r7, sp, #0
 802045a:	60f8      	str	r0, [r7, #12]
 802045c:	60b9      	str	r1, [r7, #8]
 802045e:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8020460:	68bb      	ldr	r3, [r7, #8]
 8020462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020464:	2b00      	cmp	r3, #0
 8020466:	d009      	beq.n	802047c <QSPI_Config+0x28>
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 802046e:	d005      	beq.n	802047c <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8020470:	68bb      	ldr	r3, [r7, #8]
 8020472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8020474:	68fb      	ldr	r3, [r7, #12]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	3a01      	subs	r2, #1
 802047a:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 802047c:	68bb      	ldr	r3, [r7, #8]
 802047e:	699b      	ldr	r3, [r3, #24]
 8020480:	2b00      	cmp	r3, #0
 8020482:	f000 80b9 	beq.w	80205f8 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8020486:	68bb      	ldr	r3, [r7, #8]
 8020488:	6a1b      	ldr	r3, [r3, #32]
 802048a:	2b00      	cmp	r3, #0
 802048c:	d05f      	beq.n	802054e <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 802048e:	68fb      	ldr	r3, [r7, #12]
 8020490:	681b      	ldr	r3, [r3, #0]
 8020492:	68ba      	ldr	r2, [r7, #8]
 8020494:	6892      	ldr	r2, [r2, #8]
 8020496:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8020498:	68bb      	ldr	r3, [r7, #8]
 802049a:	69db      	ldr	r3, [r3, #28]
 802049c:	2b00      	cmp	r3, #0
 802049e:	d031      	beq.n	8020504 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80204a0:	68bb      	ldr	r3, [r7, #8]
 80204a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80204a4:	68bb      	ldr	r3, [r7, #8]
 80204a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204a8:	431a      	orrs	r2, r3
 80204aa:	68bb      	ldr	r3, [r7, #8]
 80204ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80204ae:	431a      	orrs	r2, r3
 80204b0:	68bb      	ldr	r3, [r7, #8]
 80204b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204b4:	431a      	orrs	r2, r3
 80204b6:	68bb      	ldr	r3, [r7, #8]
 80204b8:	695b      	ldr	r3, [r3, #20]
 80204ba:	049b      	lsls	r3, r3, #18
 80204bc:	431a      	orrs	r2, r3
 80204be:	68bb      	ldr	r3, [r7, #8]
 80204c0:	691b      	ldr	r3, [r3, #16]
 80204c2:	431a      	orrs	r2, r3
 80204c4:	68bb      	ldr	r3, [r7, #8]
 80204c6:	6a1b      	ldr	r3, [r3, #32]
 80204c8:	431a      	orrs	r2, r3
 80204ca:	68bb      	ldr	r3, [r7, #8]
 80204cc:	68db      	ldr	r3, [r3, #12]
 80204ce:	431a      	orrs	r2, r3
 80204d0:	68bb      	ldr	r3, [r7, #8]
 80204d2:	69db      	ldr	r3, [r3, #28]
 80204d4:	431a      	orrs	r2, r3
 80204d6:	68bb      	ldr	r3, [r7, #8]
 80204d8:	699b      	ldr	r3, [r3, #24]
 80204da:	431a      	orrs	r2, r3
 80204dc:	68bb      	ldr	r3, [r7, #8]
 80204de:	681b      	ldr	r3, [r3, #0]
 80204e0:	ea42 0103 	orr.w	r1, r2, r3
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	687a      	ldr	r2, [r7, #4]
 80204ea:	430a      	orrs	r2, r1
 80204ec:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80204f4:	f000 812e 	beq.w	8020754 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80204f8:	68fb      	ldr	r3, [r7, #12]
 80204fa:	681b      	ldr	r3, [r3, #0]
 80204fc:	68ba      	ldr	r2, [r7, #8]
 80204fe:	6852      	ldr	r2, [r2, #4]
 8020500:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8020502:	e127      	b.n	8020754 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8020504:	68bb      	ldr	r3, [r7, #8]
 8020506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020508:	68bb      	ldr	r3, [r7, #8]
 802050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802050c:	431a      	orrs	r2, r3
 802050e:	68bb      	ldr	r3, [r7, #8]
 8020510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020512:	431a      	orrs	r2, r3
 8020514:	68bb      	ldr	r3, [r7, #8]
 8020516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020518:	431a      	orrs	r2, r3
 802051a:	68bb      	ldr	r3, [r7, #8]
 802051c:	695b      	ldr	r3, [r3, #20]
 802051e:	049b      	lsls	r3, r3, #18
 8020520:	431a      	orrs	r2, r3
 8020522:	68bb      	ldr	r3, [r7, #8]
 8020524:	691b      	ldr	r3, [r3, #16]
 8020526:	431a      	orrs	r2, r3
 8020528:	68bb      	ldr	r3, [r7, #8]
 802052a:	6a1b      	ldr	r3, [r3, #32]
 802052c:	431a      	orrs	r2, r3
 802052e:	68bb      	ldr	r3, [r7, #8]
 8020530:	69db      	ldr	r3, [r3, #28]
 8020532:	431a      	orrs	r2, r3
 8020534:	68bb      	ldr	r3, [r7, #8]
 8020536:	699b      	ldr	r3, [r3, #24]
 8020538:	431a      	orrs	r2, r3
 802053a:	68bb      	ldr	r3, [r7, #8]
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	ea42 0103 	orr.w	r1, r2, r3
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	681b      	ldr	r3, [r3, #0]
 8020546:	687a      	ldr	r2, [r7, #4]
 8020548:	430a      	orrs	r2, r1
 802054a:	615a      	str	r2, [r3, #20]
}
 802054c:	e102      	b.n	8020754 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802054e:	68bb      	ldr	r3, [r7, #8]
 8020550:	69db      	ldr	r3, [r3, #28]
 8020552:	2b00      	cmp	r3, #0
 8020554:	d02e      	beq.n	80205b4 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8020556:	68bb      	ldr	r3, [r7, #8]
 8020558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802055a:	68bb      	ldr	r3, [r7, #8]
 802055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802055e:	431a      	orrs	r2, r3
 8020560:	68bb      	ldr	r3, [r7, #8]
 8020562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020564:	431a      	orrs	r2, r3
 8020566:	68bb      	ldr	r3, [r7, #8]
 8020568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802056a:	431a      	orrs	r2, r3
 802056c:	68bb      	ldr	r3, [r7, #8]
 802056e:	695b      	ldr	r3, [r3, #20]
 8020570:	049b      	lsls	r3, r3, #18
 8020572:	431a      	orrs	r2, r3
 8020574:	68bb      	ldr	r3, [r7, #8]
 8020576:	6a1b      	ldr	r3, [r3, #32]
 8020578:	431a      	orrs	r2, r3
 802057a:	68bb      	ldr	r3, [r7, #8]
 802057c:	68db      	ldr	r3, [r3, #12]
 802057e:	431a      	orrs	r2, r3
 8020580:	68bb      	ldr	r3, [r7, #8]
 8020582:	69db      	ldr	r3, [r3, #28]
 8020584:	431a      	orrs	r2, r3
 8020586:	68bb      	ldr	r3, [r7, #8]
 8020588:	699b      	ldr	r3, [r3, #24]
 802058a:	431a      	orrs	r2, r3
 802058c:	68bb      	ldr	r3, [r7, #8]
 802058e:	681b      	ldr	r3, [r3, #0]
 8020590:	ea42 0103 	orr.w	r1, r2, r3
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	681b      	ldr	r3, [r3, #0]
 8020598:	687a      	ldr	r2, [r7, #4]
 802059a:	430a      	orrs	r2, r1
 802059c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802059e:	687b      	ldr	r3, [r7, #4]
 80205a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80205a4:	f000 80d6 	beq.w	8020754 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	681b      	ldr	r3, [r3, #0]
 80205ac:	68ba      	ldr	r2, [r7, #8]
 80205ae:	6852      	ldr	r2, [r2, #4]
 80205b0:	619a      	str	r2, [r3, #24]
}
 80205b2:	e0cf      	b.n	8020754 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80205b4:	68bb      	ldr	r3, [r7, #8]
 80205b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80205b8:	68bb      	ldr	r3, [r7, #8]
 80205ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205bc:	431a      	orrs	r2, r3
 80205be:	68bb      	ldr	r3, [r7, #8]
 80205c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80205c2:	431a      	orrs	r2, r3
 80205c4:	68bb      	ldr	r3, [r7, #8]
 80205c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205c8:	431a      	orrs	r2, r3
 80205ca:	68bb      	ldr	r3, [r7, #8]
 80205cc:	695b      	ldr	r3, [r3, #20]
 80205ce:	049b      	lsls	r3, r3, #18
 80205d0:	431a      	orrs	r2, r3
 80205d2:	68bb      	ldr	r3, [r7, #8]
 80205d4:	6a1b      	ldr	r3, [r3, #32]
 80205d6:	431a      	orrs	r2, r3
 80205d8:	68bb      	ldr	r3, [r7, #8]
 80205da:	69db      	ldr	r3, [r3, #28]
 80205dc:	431a      	orrs	r2, r3
 80205de:	68bb      	ldr	r3, [r7, #8]
 80205e0:	699b      	ldr	r3, [r3, #24]
 80205e2:	431a      	orrs	r2, r3
 80205e4:	68bb      	ldr	r3, [r7, #8]
 80205e6:	681b      	ldr	r3, [r3, #0]
 80205e8:	ea42 0103 	orr.w	r1, r2, r3
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	687a      	ldr	r2, [r7, #4]
 80205f2:	430a      	orrs	r2, r1
 80205f4:	615a      	str	r2, [r3, #20]
}
 80205f6:	e0ad      	b.n	8020754 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80205f8:	68bb      	ldr	r3, [r7, #8]
 80205fa:	6a1b      	ldr	r3, [r3, #32]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d058      	beq.n	80206b2 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8020600:	68fb      	ldr	r3, [r7, #12]
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	68ba      	ldr	r2, [r7, #8]
 8020606:	6892      	ldr	r2, [r2, #8]
 8020608:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 802060a:	68bb      	ldr	r3, [r7, #8]
 802060c:	69db      	ldr	r3, [r3, #28]
 802060e:	2b00      	cmp	r3, #0
 8020610:	d02d      	beq.n	802066e <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8020612:	68bb      	ldr	r3, [r7, #8]
 8020614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020616:	68bb      	ldr	r3, [r7, #8]
 8020618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802061a:	431a      	orrs	r2, r3
 802061c:	68bb      	ldr	r3, [r7, #8]
 802061e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020620:	431a      	orrs	r2, r3
 8020622:	68bb      	ldr	r3, [r7, #8]
 8020624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020626:	431a      	orrs	r2, r3
 8020628:	68bb      	ldr	r3, [r7, #8]
 802062a:	695b      	ldr	r3, [r3, #20]
 802062c:	049b      	lsls	r3, r3, #18
 802062e:	431a      	orrs	r2, r3
 8020630:	68bb      	ldr	r3, [r7, #8]
 8020632:	691b      	ldr	r3, [r3, #16]
 8020634:	431a      	orrs	r2, r3
 8020636:	68bb      	ldr	r3, [r7, #8]
 8020638:	6a1b      	ldr	r3, [r3, #32]
 802063a:	431a      	orrs	r2, r3
 802063c:	68bb      	ldr	r3, [r7, #8]
 802063e:	68db      	ldr	r3, [r3, #12]
 8020640:	431a      	orrs	r2, r3
 8020642:	68bb      	ldr	r3, [r7, #8]
 8020644:	69db      	ldr	r3, [r3, #28]
 8020646:	431a      	orrs	r2, r3
 8020648:	68bb      	ldr	r3, [r7, #8]
 802064a:	699b      	ldr	r3, [r3, #24]
 802064c:	ea42 0103 	orr.w	r1, r2, r3
 8020650:	68fb      	ldr	r3, [r7, #12]
 8020652:	681b      	ldr	r3, [r3, #0]
 8020654:	687a      	ldr	r2, [r7, #4]
 8020656:	430a      	orrs	r2, r1
 8020658:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8020660:	d078      	beq.n	8020754 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	681b      	ldr	r3, [r3, #0]
 8020666:	68ba      	ldr	r2, [r7, #8]
 8020668:	6852      	ldr	r2, [r2, #4]
 802066a:	619a      	str	r2, [r3, #24]
}
 802066c:	e072      	b.n	8020754 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 802066e:	68bb      	ldr	r3, [r7, #8]
 8020670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020672:	68bb      	ldr	r3, [r7, #8]
 8020674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020676:	431a      	orrs	r2, r3
 8020678:	68bb      	ldr	r3, [r7, #8]
 802067a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802067c:	431a      	orrs	r2, r3
 802067e:	68bb      	ldr	r3, [r7, #8]
 8020680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020682:	431a      	orrs	r2, r3
 8020684:	68bb      	ldr	r3, [r7, #8]
 8020686:	695b      	ldr	r3, [r3, #20]
 8020688:	049b      	lsls	r3, r3, #18
 802068a:	431a      	orrs	r2, r3
 802068c:	68bb      	ldr	r3, [r7, #8]
 802068e:	691b      	ldr	r3, [r3, #16]
 8020690:	431a      	orrs	r2, r3
 8020692:	68bb      	ldr	r3, [r7, #8]
 8020694:	6a1b      	ldr	r3, [r3, #32]
 8020696:	431a      	orrs	r2, r3
 8020698:	68bb      	ldr	r3, [r7, #8]
 802069a:	69db      	ldr	r3, [r3, #28]
 802069c:	431a      	orrs	r2, r3
 802069e:	68bb      	ldr	r3, [r7, #8]
 80206a0:	699b      	ldr	r3, [r3, #24]
 80206a2:	ea42 0103 	orr.w	r1, r2, r3
 80206a6:	68fb      	ldr	r3, [r7, #12]
 80206a8:	681b      	ldr	r3, [r3, #0]
 80206aa:	687a      	ldr	r2, [r7, #4]
 80206ac:	430a      	orrs	r2, r1
 80206ae:	615a      	str	r2, [r3, #20]
}
 80206b0:	e050      	b.n	8020754 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80206b2:	68bb      	ldr	r3, [r7, #8]
 80206b4:	69db      	ldr	r3, [r3, #28]
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d02a      	beq.n	8020710 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80206ba:	68bb      	ldr	r3, [r7, #8]
 80206bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80206be:	68bb      	ldr	r3, [r7, #8]
 80206c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80206c2:	431a      	orrs	r2, r3
 80206c4:	68bb      	ldr	r3, [r7, #8]
 80206c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80206c8:	431a      	orrs	r2, r3
 80206ca:	68bb      	ldr	r3, [r7, #8]
 80206cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80206ce:	431a      	orrs	r2, r3
 80206d0:	68bb      	ldr	r3, [r7, #8]
 80206d2:	695b      	ldr	r3, [r3, #20]
 80206d4:	049b      	lsls	r3, r3, #18
 80206d6:	431a      	orrs	r2, r3
 80206d8:	68bb      	ldr	r3, [r7, #8]
 80206da:	6a1b      	ldr	r3, [r3, #32]
 80206dc:	431a      	orrs	r2, r3
 80206de:	68bb      	ldr	r3, [r7, #8]
 80206e0:	68db      	ldr	r3, [r3, #12]
 80206e2:	431a      	orrs	r2, r3
 80206e4:	68bb      	ldr	r3, [r7, #8]
 80206e6:	69db      	ldr	r3, [r3, #28]
 80206e8:	431a      	orrs	r2, r3
 80206ea:	68bb      	ldr	r3, [r7, #8]
 80206ec:	699b      	ldr	r3, [r3, #24]
 80206ee:	ea42 0103 	orr.w	r1, r2, r3
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	687a      	ldr	r2, [r7, #4]
 80206f8:	430a      	orrs	r2, r1
 80206fa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80206fc:	687b      	ldr	r3, [r7, #4]
 80206fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8020702:	d027      	beq.n	8020754 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8020704:	68fb      	ldr	r3, [r7, #12]
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	68ba      	ldr	r2, [r7, #8]
 802070a:	6852      	ldr	r2, [r2, #4]
 802070c:	619a      	str	r2, [r3, #24]
}
 802070e:	e021      	b.n	8020754 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8020710:	68bb      	ldr	r3, [r7, #8]
 8020712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020714:	2b00      	cmp	r3, #0
 8020716:	d01d      	beq.n	8020754 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8020718:	68bb      	ldr	r3, [r7, #8]
 802071a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802071c:	68bb      	ldr	r3, [r7, #8]
 802071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020720:	431a      	orrs	r2, r3
 8020722:	68bb      	ldr	r3, [r7, #8]
 8020724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020726:	431a      	orrs	r2, r3
 8020728:	68bb      	ldr	r3, [r7, #8]
 802072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802072c:	431a      	orrs	r2, r3
 802072e:	68bb      	ldr	r3, [r7, #8]
 8020730:	695b      	ldr	r3, [r3, #20]
 8020732:	049b      	lsls	r3, r3, #18
 8020734:	431a      	orrs	r2, r3
 8020736:	68bb      	ldr	r3, [r7, #8]
 8020738:	6a1b      	ldr	r3, [r3, #32]
 802073a:	431a      	orrs	r2, r3
 802073c:	68bb      	ldr	r3, [r7, #8]
 802073e:	69db      	ldr	r3, [r3, #28]
 8020740:	431a      	orrs	r2, r3
 8020742:	68bb      	ldr	r3, [r7, #8]
 8020744:	699b      	ldr	r3, [r3, #24]
 8020746:	ea42 0103 	orr.w	r1, r2, r3
 802074a:	68fb      	ldr	r3, [r7, #12]
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	687a      	ldr	r2, [r7, #4]
 8020750:	430a      	orrs	r2, r1
 8020752:	615a      	str	r2, [r3, #20]
}
 8020754:	bf00      	nop
 8020756:	3714      	adds	r7, #20
 8020758:	46bd      	mov	sp, r7
 802075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802075e:	4770      	bx	lr

08020760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8020760:	b580      	push	{r7, lr}
 8020762:	b084      	sub	sp, #16
 8020764:	af00      	add	r7, sp, #0
 8020766:	6078      	str	r0, [r7, #4]
 8020768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	2b00      	cmp	r3, #0
 802076e:	d101      	bne.n	8020774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8020770:	2301      	movs	r3, #1
 8020772:	e0cc      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8020774:	4b68      	ldr	r3, [pc, #416]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	f003 030f 	and.w	r3, r3, #15
 802077c:	683a      	ldr	r2, [r7, #0]
 802077e:	429a      	cmp	r2, r3
 8020780:	d90c      	bls.n	802079c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8020782:	4b65      	ldr	r3, [pc, #404]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 8020784:	683a      	ldr	r2, [r7, #0]
 8020786:	b2d2      	uxtb	r2, r2
 8020788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 802078a:	4b63      	ldr	r3, [pc, #396]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	f003 030f 	and.w	r3, r3, #15
 8020792:	683a      	ldr	r2, [r7, #0]
 8020794:	429a      	cmp	r2, r3
 8020796:	d001      	beq.n	802079c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8020798:	2301      	movs	r3, #1
 802079a:	e0b8      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	681b      	ldr	r3, [r3, #0]
 80207a0:	f003 0302 	and.w	r3, r3, #2
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d020      	beq.n	80207ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80207a8:	687b      	ldr	r3, [r7, #4]
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	f003 0304 	and.w	r3, r3, #4
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d005      	beq.n	80207c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80207b4:	4b59      	ldr	r3, [pc, #356]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207b6:	689b      	ldr	r3, [r3, #8]
 80207b8:	4a58      	ldr	r2, [pc, #352]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80207be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	f003 0308 	and.w	r3, r3, #8
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	d005      	beq.n	80207d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80207cc:	4b53      	ldr	r3, [pc, #332]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207ce:	689b      	ldr	r3, [r3, #8]
 80207d0:	4a52      	ldr	r2, [pc, #328]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80207d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80207d8:	4b50      	ldr	r3, [pc, #320]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207da:	689b      	ldr	r3, [r3, #8]
 80207dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	689b      	ldr	r3, [r3, #8]
 80207e4:	494d      	ldr	r1, [pc, #308]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80207e6:	4313      	orrs	r3, r2
 80207e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	681b      	ldr	r3, [r3, #0]
 80207ee:	f003 0301 	and.w	r3, r3, #1
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d044      	beq.n	8020880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80207f6:	687b      	ldr	r3, [r7, #4]
 80207f8:	685b      	ldr	r3, [r3, #4]
 80207fa:	2b01      	cmp	r3, #1
 80207fc:	d107      	bne.n	802080e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80207fe:	4b47      	ldr	r3, [pc, #284]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020806:	2b00      	cmp	r3, #0
 8020808:	d119      	bne.n	802083e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802080a:	2301      	movs	r3, #1
 802080c:	e07f      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	685b      	ldr	r3, [r3, #4]
 8020812:	2b02      	cmp	r3, #2
 8020814:	d003      	beq.n	802081e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 802081a:	2b03      	cmp	r3, #3
 802081c:	d107      	bne.n	802082e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 802081e:	4b3f      	ldr	r3, [pc, #252]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020826:	2b00      	cmp	r3, #0
 8020828:	d109      	bne.n	802083e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802082a:	2301      	movs	r3, #1
 802082c:	e06f      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 802082e:	4b3b      	ldr	r3, [pc, #236]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	f003 0302 	and.w	r3, r3, #2
 8020836:	2b00      	cmp	r3, #0
 8020838:	d101      	bne.n	802083e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 802083a:	2301      	movs	r3, #1
 802083c:	e067      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 802083e:	4b37      	ldr	r3, [pc, #220]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 8020840:	689b      	ldr	r3, [r3, #8]
 8020842:	f023 0203 	bic.w	r2, r3, #3
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	685b      	ldr	r3, [r3, #4]
 802084a:	4934      	ldr	r1, [pc, #208]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 802084c:	4313      	orrs	r3, r2
 802084e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8020850:	f7fd fc56 	bl	801e100 <HAL_GetTick>
 8020854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8020856:	e00a      	b.n	802086e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8020858:	f7fd fc52 	bl	801e100 <HAL_GetTick>
 802085c:	4602      	mov	r2, r0
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	1ad3      	subs	r3, r2, r3
 8020862:	f241 3288 	movw	r2, #5000	; 0x1388
 8020866:	4293      	cmp	r3, r2
 8020868:	d901      	bls.n	802086e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 802086a:	2303      	movs	r3, #3
 802086c:	e04f      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 802086e:	4b2b      	ldr	r3, [pc, #172]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 8020870:	689b      	ldr	r3, [r3, #8]
 8020872:	f003 020c 	and.w	r2, r3, #12
 8020876:	687b      	ldr	r3, [r7, #4]
 8020878:	685b      	ldr	r3, [r3, #4]
 802087a:	009b      	lsls	r3, r3, #2
 802087c:	429a      	cmp	r2, r3
 802087e:	d1eb      	bne.n	8020858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8020880:	4b25      	ldr	r3, [pc, #148]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 8020882:	681b      	ldr	r3, [r3, #0]
 8020884:	f003 030f 	and.w	r3, r3, #15
 8020888:	683a      	ldr	r2, [r7, #0]
 802088a:	429a      	cmp	r2, r3
 802088c:	d20c      	bcs.n	80208a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 802088e:	4b22      	ldr	r3, [pc, #136]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 8020890:	683a      	ldr	r2, [r7, #0]
 8020892:	b2d2      	uxtb	r2, r2
 8020894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8020896:	4b20      	ldr	r3, [pc, #128]	; (8020918 <HAL_RCC_ClockConfig+0x1b8>)
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	f003 030f 	and.w	r3, r3, #15
 802089e:	683a      	ldr	r2, [r7, #0]
 80208a0:	429a      	cmp	r2, r3
 80208a2:	d001      	beq.n	80208a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80208a4:	2301      	movs	r3, #1
 80208a6:	e032      	b.n	802090e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	f003 0304 	and.w	r3, r3, #4
 80208b0:	2b00      	cmp	r3, #0
 80208b2:	d008      	beq.n	80208c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80208b4:	4b19      	ldr	r3, [pc, #100]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80208b6:	689b      	ldr	r3, [r3, #8]
 80208b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	68db      	ldr	r3, [r3, #12]
 80208c0:	4916      	ldr	r1, [pc, #88]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80208c2:	4313      	orrs	r3, r2
 80208c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	681b      	ldr	r3, [r3, #0]
 80208ca:	f003 0308 	and.w	r3, r3, #8
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	d009      	beq.n	80208e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80208d2:	4b12      	ldr	r3, [pc, #72]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80208d4:	689b      	ldr	r3, [r3, #8]
 80208d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80208da:	687b      	ldr	r3, [r7, #4]
 80208dc:	691b      	ldr	r3, [r3, #16]
 80208de:	00db      	lsls	r3, r3, #3
 80208e0:	490e      	ldr	r1, [pc, #56]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80208e2:	4313      	orrs	r3, r2
 80208e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80208e6:	f000 f821 	bl	802092c <HAL_RCC_GetSysClockFreq>
 80208ea:	4602      	mov	r2, r0
 80208ec:	4b0b      	ldr	r3, [pc, #44]	; (802091c <HAL_RCC_ClockConfig+0x1bc>)
 80208ee:	689b      	ldr	r3, [r3, #8]
 80208f0:	091b      	lsrs	r3, r3, #4
 80208f2:	f003 030f 	and.w	r3, r3, #15
 80208f6:	490a      	ldr	r1, [pc, #40]	; (8020920 <HAL_RCC_ClockConfig+0x1c0>)
 80208f8:	5ccb      	ldrb	r3, [r1, r3]
 80208fa:	fa22 f303 	lsr.w	r3, r2, r3
 80208fe:	4a09      	ldr	r2, [pc, #36]	; (8020924 <HAL_RCC_ClockConfig+0x1c4>)
 8020900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8020902:	4b09      	ldr	r3, [pc, #36]	; (8020928 <HAL_RCC_ClockConfig+0x1c8>)
 8020904:	681b      	ldr	r3, [r3, #0]
 8020906:	4618      	mov	r0, r3
 8020908:	f7e1 fc96 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 802090c:	2300      	movs	r3, #0
}
 802090e:	4618      	mov	r0, r3
 8020910:	3710      	adds	r7, #16
 8020912:	46bd      	mov	sp, r7
 8020914:	bd80      	pop	{r7, pc}
 8020916:	bf00      	nop
 8020918:	40023c00 	.word	0x40023c00
 802091c:	40023800 	.word	0x40023800
 8020920:	080284a8 	.word	0x080284a8
 8020924:	20000004 	.word	0x20000004
 8020928:	2000000c 	.word	0x2000000c

0802092c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 802092c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8020930:	b084      	sub	sp, #16
 8020932:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8020934:	2300      	movs	r3, #0
 8020936:	607b      	str	r3, [r7, #4]
 8020938:	2300      	movs	r3, #0
 802093a:	60fb      	str	r3, [r7, #12]
 802093c:	2300      	movs	r3, #0
 802093e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8020940:	2300      	movs	r3, #0
 8020942:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8020944:	4b67      	ldr	r3, [pc, #412]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8020946:	689b      	ldr	r3, [r3, #8]
 8020948:	f003 030c 	and.w	r3, r3, #12
 802094c:	2b08      	cmp	r3, #8
 802094e:	d00d      	beq.n	802096c <HAL_RCC_GetSysClockFreq+0x40>
 8020950:	2b08      	cmp	r3, #8
 8020952:	f200 80bd 	bhi.w	8020ad0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8020956:	2b00      	cmp	r3, #0
 8020958:	d002      	beq.n	8020960 <HAL_RCC_GetSysClockFreq+0x34>
 802095a:	2b04      	cmp	r3, #4
 802095c:	d003      	beq.n	8020966 <HAL_RCC_GetSysClockFreq+0x3a>
 802095e:	e0b7      	b.n	8020ad0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8020960:	4b61      	ldr	r3, [pc, #388]	; (8020ae8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8020962:	60bb      	str	r3, [r7, #8]
       break;
 8020964:	e0b7      	b.n	8020ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8020966:	4b61      	ldr	r3, [pc, #388]	; (8020aec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8020968:	60bb      	str	r3, [r7, #8]
      break;
 802096a:	e0b4      	b.n	8020ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 802096c:	4b5d      	ldr	r3, [pc, #372]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 802096e:	685b      	ldr	r3, [r3, #4]
 8020970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8020974:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8020976:	4b5b      	ldr	r3, [pc, #364]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8020978:	685b      	ldr	r3, [r3, #4]
 802097a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802097e:	2b00      	cmp	r3, #0
 8020980:	d04d      	beq.n	8020a1e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020982:	4b58      	ldr	r3, [pc, #352]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8020984:	685b      	ldr	r3, [r3, #4]
 8020986:	099b      	lsrs	r3, r3, #6
 8020988:	461a      	mov	r2, r3
 802098a:	f04f 0300 	mov.w	r3, #0
 802098e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8020992:	f04f 0100 	mov.w	r1, #0
 8020996:	ea02 0800 	and.w	r8, r2, r0
 802099a:	ea03 0901 	and.w	r9, r3, r1
 802099e:	4640      	mov	r0, r8
 80209a0:	4649      	mov	r1, r9
 80209a2:	f04f 0200 	mov.w	r2, #0
 80209a6:	f04f 0300 	mov.w	r3, #0
 80209aa:	014b      	lsls	r3, r1, #5
 80209ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80209b0:	0142      	lsls	r2, r0, #5
 80209b2:	4610      	mov	r0, r2
 80209b4:	4619      	mov	r1, r3
 80209b6:	ebb0 0008 	subs.w	r0, r0, r8
 80209ba:	eb61 0109 	sbc.w	r1, r1, r9
 80209be:	f04f 0200 	mov.w	r2, #0
 80209c2:	f04f 0300 	mov.w	r3, #0
 80209c6:	018b      	lsls	r3, r1, #6
 80209c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80209cc:	0182      	lsls	r2, r0, #6
 80209ce:	1a12      	subs	r2, r2, r0
 80209d0:	eb63 0301 	sbc.w	r3, r3, r1
 80209d4:	f04f 0000 	mov.w	r0, #0
 80209d8:	f04f 0100 	mov.w	r1, #0
 80209dc:	00d9      	lsls	r1, r3, #3
 80209de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80209e2:	00d0      	lsls	r0, r2, #3
 80209e4:	4602      	mov	r2, r0
 80209e6:	460b      	mov	r3, r1
 80209e8:	eb12 0208 	adds.w	r2, r2, r8
 80209ec:	eb43 0309 	adc.w	r3, r3, r9
 80209f0:	f04f 0000 	mov.w	r0, #0
 80209f4:	f04f 0100 	mov.w	r1, #0
 80209f8:	0259      	lsls	r1, r3, #9
 80209fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80209fe:	0250      	lsls	r0, r2, #9
 8020a00:	4602      	mov	r2, r0
 8020a02:	460b      	mov	r3, r1
 8020a04:	4610      	mov	r0, r2
 8020a06:	4619      	mov	r1, r3
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	461a      	mov	r2, r3
 8020a0c:	f04f 0300 	mov.w	r3, #0
 8020a10:	f7e0 f91e 	bl	8000c50 <__aeabi_uldivmod>
 8020a14:	4602      	mov	r2, r0
 8020a16:	460b      	mov	r3, r1
 8020a18:	4613      	mov	r3, r2
 8020a1a:	60fb      	str	r3, [r7, #12]
 8020a1c:	e04a      	b.n	8020ab4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8020a1e:	4b31      	ldr	r3, [pc, #196]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8020a20:	685b      	ldr	r3, [r3, #4]
 8020a22:	099b      	lsrs	r3, r3, #6
 8020a24:	461a      	mov	r2, r3
 8020a26:	f04f 0300 	mov.w	r3, #0
 8020a2a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8020a2e:	f04f 0100 	mov.w	r1, #0
 8020a32:	ea02 0400 	and.w	r4, r2, r0
 8020a36:	ea03 0501 	and.w	r5, r3, r1
 8020a3a:	4620      	mov	r0, r4
 8020a3c:	4629      	mov	r1, r5
 8020a3e:	f04f 0200 	mov.w	r2, #0
 8020a42:	f04f 0300 	mov.w	r3, #0
 8020a46:	014b      	lsls	r3, r1, #5
 8020a48:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8020a4c:	0142      	lsls	r2, r0, #5
 8020a4e:	4610      	mov	r0, r2
 8020a50:	4619      	mov	r1, r3
 8020a52:	1b00      	subs	r0, r0, r4
 8020a54:	eb61 0105 	sbc.w	r1, r1, r5
 8020a58:	f04f 0200 	mov.w	r2, #0
 8020a5c:	f04f 0300 	mov.w	r3, #0
 8020a60:	018b      	lsls	r3, r1, #6
 8020a62:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8020a66:	0182      	lsls	r2, r0, #6
 8020a68:	1a12      	subs	r2, r2, r0
 8020a6a:	eb63 0301 	sbc.w	r3, r3, r1
 8020a6e:	f04f 0000 	mov.w	r0, #0
 8020a72:	f04f 0100 	mov.w	r1, #0
 8020a76:	00d9      	lsls	r1, r3, #3
 8020a78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8020a7c:	00d0      	lsls	r0, r2, #3
 8020a7e:	4602      	mov	r2, r0
 8020a80:	460b      	mov	r3, r1
 8020a82:	1912      	adds	r2, r2, r4
 8020a84:	eb45 0303 	adc.w	r3, r5, r3
 8020a88:	f04f 0000 	mov.w	r0, #0
 8020a8c:	f04f 0100 	mov.w	r1, #0
 8020a90:	0299      	lsls	r1, r3, #10
 8020a92:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8020a96:	0290      	lsls	r0, r2, #10
 8020a98:	4602      	mov	r2, r0
 8020a9a:	460b      	mov	r3, r1
 8020a9c:	4610      	mov	r0, r2
 8020a9e:	4619      	mov	r1, r3
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	461a      	mov	r2, r3
 8020aa4:	f04f 0300 	mov.w	r3, #0
 8020aa8:	f7e0 f8d2 	bl	8000c50 <__aeabi_uldivmod>
 8020aac:	4602      	mov	r2, r0
 8020aae:	460b      	mov	r3, r1
 8020ab0:	4613      	mov	r3, r2
 8020ab2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8020ab4:	4b0b      	ldr	r3, [pc, #44]	; (8020ae4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8020ab6:	685b      	ldr	r3, [r3, #4]
 8020ab8:	0c1b      	lsrs	r3, r3, #16
 8020aba:	f003 0303 	and.w	r3, r3, #3
 8020abe:	3301      	adds	r3, #1
 8020ac0:	005b      	lsls	r3, r3, #1
 8020ac2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8020ac4:	68fa      	ldr	r2, [r7, #12]
 8020ac6:	683b      	ldr	r3, [r7, #0]
 8020ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8020acc:	60bb      	str	r3, [r7, #8]
      break;
 8020ace:	e002      	b.n	8020ad6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8020ad0:	4b05      	ldr	r3, [pc, #20]	; (8020ae8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8020ad2:	60bb      	str	r3, [r7, #8]
      break;
 8020ad4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8020ad6:	68bb      	ldr	r3, [r7, #8]
}
 8020ad8:	4618      	mov	r0, r3
 8020ada:	3710      	adds	r7, #16
 8020adc:	46bd      	mov	sp, r7
 8020ade:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8020ae2:	bf00      	nop
 8020ae4:	40023800 	.word	0x40023800
 8020ae8:	00f42400 	.word	0x00f42400
 8020aec:	007a1200 	.word	0x007a1200

08020af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8020af0:	b480      	push	{r7}
 8020af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8020af4:	4b03      	ldr	r3, [pc, #12]	; (8020b04 <HAL_RCC_GetHCLKFreq+0x14>)
 8020af6:	681b      	ldr	r3, [r3, #0]
}
 8020af8:	4618      	mov	r0, r3
 8020afa:	46bd      	mov	sp, r7
 8020afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b00:	4770      	bx	lr
 8020b02:	bf00      	nop
 8020b04:	20000004 	.word	0x20000004

08020b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8020b08:	b580      	push	{r7, lr}
 8020b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8020b0c:	f7ff fff0 	bl	8020af0 <HAL_RCC_GetHCLKFreq>
 8020b10:	4602      	mov	r2, r0
 8020b12:	4b05      	ldr	r3, [pc, #20]	; (8020b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8020b14:	689b      	ldr	r3, [r3, #8]
 8020b16:	0b5b      	lsrs	r3, r3, #13
 8020b18:	f003 0307 	and.w	r3, r3, #7
 8020b1c:	4903      	ldr	r1, [pc, #12]	; (8020b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8020b1e:	5ccb      	ldrb	r3, [r1, r3]
 8020b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8020b24:	4618      	mov	r0, r3
 8020b26:	bd80      	pop	{r7, pc}
 8020b28:	40023800 	.word	0x40023800
 8020b2c:	080284b8 	.word	0x080284b8

08020b30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8020b30:	b480      	push	{r7}
 8020b32:	b083      	sub	sp, #12
 8020b34:	af00      	add	r7, sp, #0
 8020b36:	6078      	str	r0, [r7, #4]
 8020b38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8020b3a:	687b      	ldr	r3, [r7, #4]
 8020b3c:	220f      	movs	r2, #15
 8020b3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8020b40:	4b12      	ldr	r3, [pc, #72]	; (8020b8c <HAL_RCC_GetClockConfig+0x5c>)
 8020b42:	689b      	ldr	r3, [r3, #8]
 8020b44:	f003 0203 	and.w	r2, r3, #3
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8020b4c:	4b0f      	ldr	r3, [pc, #60]	; (8020b8c <HAL_RCC_GetClockConfig+0x5c>)
 8020b4e:	689b      	ldr	r3, [r3, #8]
 8020b50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8020b54:	687b      	ldr	r3, [r7, #4]
 8020b56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8020b58:	4b0c      	ldr	r3, [pc, #48]	; (8020b8c <HAL_RCC_GetClockConfig+0x5c>)
 8020b5a:	689b      	ldr	r3, [r3, #8]
 8020b5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8020b64:	4b09      	ldr	r3, [pc, #36]	; (8020b8c <HAL_RCC_GetClockConfig+0x5c>)
 8020b66:	689b      	ldr	r3, [r3, #8]
 8020b68:	08db      	lsrs	r3, r3, #3
 8020b6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8020b72:	4b07      	ldr	r3, [pc, #28]	; (8020b90 <HAL_RCC_GetClockConfig+0x60>)
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	f003 020f 	and.w	r2, r3, #15
 8020b7a:	683b      	ldr	r3, [r7, #0]
 8020b7c:	601a      	str	r2, [r3, #0]
}
 8020b7e:	bf00      	nop
 8020b80:	370c      	adds	r7, #12
 8020b82:	46bd      	mov	sp, r7
 8020b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b88:	4770      	bx	lr
 8020b8a:	bf00      	nop
 8020b8c:	40023800 	.word	0x40023800
 8020b90:	40023c00 	.word	0x40023c00

08020b94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8020b94:	b580      	push	{r7, lr}
 8020b96:	b086      	sub	sp, #24
 8020b98:	af00      	add	r7, sp, #0
 8020b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	2b00      	cmp	r3, #0
 8020ba0:	d101      	bne.n	8020ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8020ba2:	2301      	movs	r3, #1
 8020ba4:	e270      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8020ba6:	687b      	ldr	r3, [r7, #4]
 8020ba8:	681b      	ldr	r3, [r3, #0]
 8020baa:	f003 0301 	and.w	r3, r3, #1
 8020bae:	2b00      	cmp	r3, #0
 8020bb0:	d075      	beq.n	8020c9e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8020bb2:	4ba3      	ldr	r3, [pc, #652]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020bb4:	689b      	ldr	r3, [r3, #8]
 8020bb6:	f003 030c 	and.w	r3, r3, #12
 8020bba:	2b04      	cmp	r3, #4
 8020bbc:	d00c      	beq.n	8020bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020bbe:	4ba0      	ldr	r3, [pc, #640]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020bc0:	689b      	ldr	r3, [r3, #8]
 8020bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8020bc6:	2b08      	cmp	r3, #8
 8020bc8:	d112      	bne.n	8020bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8020bca:	4b9d      	ldr	r3, [pc, #628]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020bcc:	685b      	ldr	r3, [r3, #4]
 8020bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8020bd6:	d10b      	bne.n	8020bf0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020bd8:	4b99      	ldr	r3, [pc, #612]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020bda:	681b      	ldr	r3, [r3, #0]
 8020bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d05b      	beq.n	8020c9c <HAL_RCC_OscConfig+0x108>
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	685b      	ldr	r3, [r3, #4]
 8020be8:	2b00      	cmp	r3, #0
 8020bea:	d157      	bne.n	8020c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8020bec:	2301      	movs	r3, #1
 8020bee:	e24b      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	685b      	ldr	r3, [r3, #4]
 8020bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020bf8:	d106      	bne.n	8020c08 <HAL_RCC_OscConfig+0x74>
 8020bfa:	4b91      	ldr	r3, [pc, #580]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020bfc:	681b      	ldr	r3, [r3, #0]
 8020bfe:	4a90      	ldr	r2, [pc, #576]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020c04:	6013      	str	r3, [r2, #0]
 8020c06:	e01d      	b.n	8020c44 <HAL_RCC_OscConfig+0xb0>
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	685b      	ldr	r3, [r3, #4]
 8020c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8020c10:	d10c      	bne.n	8020c2c <HAL_RCC_OscConfig+0x98>
 8020c12:	4b8b      	ldr	r3, [pc, #556]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c14:	681b      	ldr	r3, [r3, #0]
 8020c16:	4a8a      	ldr	r2, [pc, #552]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8020c1c:	6013      	str	r3, [r2, #0]
 8020c1e:	4b88      	ldr	r3, [pc, #544]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	4a87      	ldr	r2, [pc, #540]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8020c28:	6013      	str	r3, [r2, #0]
 8020c2a:	e00b      	b.n	8020c44 <HAL_RCC_OscConfig+0xb0>
 8020c2c:	4b84      	ldr	r3, [pc, #528]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	4a83      	ldr	r2, [pc, #524]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8020c36:	6013      	str	r3, [r2, #0]
 8020c38:	4b81      	ldr	r3, [pc, #516]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c3a:	681b      	ldr	r3, [r3, #0]
 8020c3c:	4a80      	ldr	r2, [pc, #512]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8020c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	685b      	ldr	r3, [r3, #4]
 8020c48:	2b00      	cmp	r3, #0
 8020c4a:	d013      	beq.n	8020c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020c4c:	f7fd fa58 	bl	801e100 <HAL_GetTick>
 8020c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020c52:	e008      	b.n	8020c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020c54:	f7fd fa54 	bl	801e100 <HAL_GetTick>
 8020c58:	4602      	mov	r2, r0
 8020c5a:	693b      	ldr	r3, [r7, #16]
 8020c5c:	1ad3      	subs	r3, r2, r3
 8020c5e:	2b64      	cmp	r3, #100	; 0x64
 8020c60:	d901      	bls.n	8020c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8020c62:	2303      	movs	r3, #3
 8020c64:	e210      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8020c66:	4b76      	ldr	r3, [pc, #472]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c68:	681b      	ldr	r3, [r3, #0]
 8020c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020c6e:	2b00      	cmp	r3, #0
 8020c70:	d0f0      	beq.n	8020c54 <HAL_RCC_OscConfig+0xc0>
 8020c72:	e014      	b.n	8020c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020c74:	f7fd fa44 	bl	801e100 <HAL_GetTick>
 8020c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020c7a:	e008      	b.n	8020c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8020c7c:	f7fd fa40 	bl	801e100 <HAL_GetTick>
 8020c80:	4602      	mov	r2, r0
 8020c82:	693b      	ldr	r3, [r7, #16]
 8020c84:	1ad3      	subs	r3, r2, r3
 8020c86:	2b64      	cmp	r3, #100	; 0x64
 8020c88:	d901      	bls.n	8020c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8020c8a:	2303      	movs	r3, #3
 8020c8c:	e1fc      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8020c8e:	4b6c      	ldr	r3, [pc, #432]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020c90:	681b      	ldr	r3, [r3, #0]
 8020c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8020c96:	2b00      	cmp	r3, #0
 8020c98:	d1f0      	bne.n	8020c7c <HAL_RCC_OscConfig+0xe8>
 8020c9a:	e000      	b.n	8020c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8020c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8020c9e:	687b      	ldr	r3, [r7, #4]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	f003 0302 	and.w	r3, r3, #2
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d063      	beq.n	8020d72 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8020caa:	4b65      	ldr	r3, [pc, #404]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020cac:	689b      	ldr	r3, [r3, #8]
 8020cae:	f003 030c 	and.w	r3, r3, #12
 8020cb2:	2b00      	cmp	r3, #0
 8020cb4:	d00b      	beq.n	8020cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8020cb6:	4b62      	ldr	r3, [pc, #392]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020cb8:	689b      	ldr	r3, [r3, #8]
 8020cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8020cbe:	2b08      	cmp	r3, #8
 8020cc0:	d11c      	bne.n	8020cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8020cc2:	4b5f      	ldr	r3, [pc, #380]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020cc4:	685b      	ldr	r3, [r3, #4]
 8020cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8020cca:	2b00      	cmp	r3, #0
 8020ccc:	d116      	bne.n	8020cfc <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020cce:	4b5c      	ldr	r3, [pc, #368]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	f003 0302 	and.w	r3, r3, #2
 8020cd6:	2b00      	cmp	r3, #0
 8020cd8:	d005      	beq.n	8020ce6 <HAL_RCC_OscConfig+0x152>
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	68db      	ldr	r3, [r3, #12]
 8020cde:	2b01      	cmp	r3, #1
 8020ce0:	d001      	beq.n	8020ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8020ce2:	2301      	movs	r3, #1
 8020ce4:	e1d0      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020ce6:	4b56      	ldr	r3, [pc, #344]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020ce8:	681b      	ldr	r3, [r3, #0]
 8020cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	691b      	ldr	r3, [r3, #16]
 8020cf2:	00db      	lsls	r3, r3, #3
 8020cf4:	4952      	ldr	r1, [pc, #328]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020cf6:	4313      	orrs	r3, r2
 8020cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8020cfa:	e03a      	b.n	8020d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	68db      	ldr	r3, [r3, #12]
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d020      	beq.n	8020d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8020d04:	4b4f      	ldr	r3, [pc, #316]	; (8020e44 <HAL_RCC_OscConfig+0x2b0>)
 8020d06:	2201      	movs	r2, #1
 8020d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020d0a:	f7fd f9f9 	bl	801e100 <HAL_GetTick>
 8020d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020d10:	e008      	b.n	8020d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020d12:	f7fd f9f5 	bl	801e100 <HAL_GetTick>
 8020d16:	4602      	mov	r2, r0
 8020d18:	693b      	ldr	r3, [r7, #16]
 8020d1a:	1ad3      	subs	r3, r2, r3
 8020d1c:	2b02      	cmp	r3, #2
 8020d1e:	d901      	bls.n	8020d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8020d20:	2303      	movs	r3, #3
 8020d22:	e1b1      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8020d24:	4b46      	ldr	r3, [pc, #280]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020d26:	681b      	ldr	r3, [r3, #0]
 8020d28:	f003 0302 	and.w	r3, r3, #2
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d0f0      	beq.n	8020d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8020d30:	4b43      	ldr	r3, [pc, #268]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020d32:	681b      	ldr	r3, [r3, #0]
 8020d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	691b      	ldr	r3, [r3, #16]
 8020d3c:	00db      	lsls	r3, r3, #3
 8020d3e:	4940      	ldr	r1, [pc, #256]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020d40:	4313      	orrs	r3, r2
 8020d42:	600b      	str	r3, [r1, #0]
 8020d44:	e015      	b.n	8020d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8020d46:	4b3f      	ldr	r3, [pc, #252]	; (8020e44 <HAL_RCC_OscConfig+0x2b0>)
 8020d48:	2200      	movs	r2, #0
 8020d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020d4c:	f7fd f9d8 	bl	801e100 <HAL_GetTick>
 8020d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8020d52:	e008      	b.n	8020d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8020d54:	f7fd f9d4 	bl	801e100 <HAL_GetTick>
 8020d58:	4602      	mov	r2, r0
 8020d5a:	693b      	ldr	r3, [r7, #16]
 8020d5c:	1ad3      	subs	r3, r2, r3
 8020d5e:	2b02      	cmp	r3, #2
 8020d60:	d901      	bls.n	8020d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8020d62:	2303      	movs	r3, #3
 8020d64:	e190      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8020d66:	4b36      	ldr	r3, [pc, #216]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020d68:	681b      	ldr	r3, [r3, #0]
 8020d6a:	f003 0302 	and.w	r3, r3, #2
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	d1f0      	bne.n	8020d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8020d72:	687b      	ldr	r3, [r7, #4]
 8020d74:	681b      	ldr	r3, [r3, #0]
 8020d76:	f003 0308 	and.w	r3, r3, #8
 8020d7a:	2b00      	cmp	r3, #0
 8020d7c:	d030      	beq.n	8020de0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	695b      	ldr	r3, [r3, #20]
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d016      	beq.n	8020db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8020d86:	4b30      	ldr	r3, [pc, #192]	; (8020e48 <HAL_RCC_OscConfig+0x2b4>)
 8020d88:	2201      	movs	r2, #1
 8020d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020d8c:	f7fd f9b8 	bl	801e100 <HAL_GetTick>
 8020d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8020d92:	e008      	b.n	8020da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020d94:	f7fd f9b4 	bl	801e100 <HAL_GetTick>
 8020d98:	4602      	mov	r2, r0
 8020d9a:	693b      	ldr	r3, [r7, #16]
 8020d9c:	1ad3      	subs	r3, r2, r3
 8020d9e:	2b02      	cmp	r3, #2
 8020da0:	d901      	bls.n	8020da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8020da2:	2303      	movs	r3, #3
 8020da4:	e170      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8020da6:	4b26      	ldr	r3, [pc, #152]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020daa:	f003 0302 	and.w	r3, r3, #2
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d0f0      	beq.n	8020d94 <HAL_RCC_OscConfig+0x200>
 8020db2:	e015      	b.n	8020de0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8020db4:	4b24      	ldr	r3, [pc, #144]	; (8020e48 <HAL_RCC_OscConfig+0x2b4>)
 8020db6:	2200      	movs	r2, #0
 8020db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020dba:	f7fd f9a1 	bl	801e100 <HAL_GetTick>
 8020dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020dc0:	e008      	b.n	8020dd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8020dc2:	f7fd f99d 	bl	801e100 <HAL_GetTick>
 8020dc6:	4602      	mov	r2, r0
 8020dc8:	693b      	ldr	r3, [r7, #16]
 8020dca:	1ad3      	subs	r3, r2, r3
 8020dcc:	2b02      	cmp	r3, #2
 8020dce:	d901      	bls.n	8020dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8020dd0:	2303      	movs	r3, #3
 8020dd2:	e159      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8020dd4:	4b1a      	ldr	r3, [pc, #104]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8020dd8:	f003 0302 	and.w	r3, r3, #2
 8020ddc:	2b00      	cmp	r3, #0
 8020dde:	d1f0      	bne.n	8020dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8020de0:	687b      	ldr	r3, [r7, #4]
 8020de2:	681b      	ldr	r3, [r3, #0]
 8020de4:	f003 0304 	and.w	r3, r3, #4
 8020de8:	2b00      	cmp	r3, #0
 8020dea:	f000 80a0 	beq.w	8020f2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8020dee:	2300      	movs	r3, #0
 8020df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8020df2:	4b13      	ldr	r3, [pc, #76]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020dfa:	2b00      	cmp	r3, #0
 8020dfc:	d10f      	bne.n	8020e1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8020dfe:	2300      	movs	r3, #0
 8020e00:	60bb      	str	r3, [r7, #8]
 8020e02:	4b0f      	ldr	r3, [pc, #60]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e06:	4a0e      	ldr	r2, [pc, #56]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8020e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8020e0e:	4b0c      	ldr	r3, [pc, #48]	; (8020e40 <HAL_RCC_OscConfig+0x2ac>)
 8020e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8020e16:	60bb      	str	r3, [r7, #8]
 8020e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8020e1a:	2301      	movs	r3, #1
 8020e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020e1e:	4b0b      	ldr	r3, [pc, #44]	; (8020e4c <HAL_RCC_OscConfig+0x2b8>)
 8020e20:	681b      	ldr	r3, [r3, #0]
 8020e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d121      	bne.n	8020e6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8020e2a:	4b08      	ldr	r3, [pc, #32]	; (8020e4c <HAL_RCC_OscConfig+0x2b8>)
 8020e2c:	681b      	ldr	r3, [r3, #0]
 8020e2e:	4a07      	ldr	r2, [pc, #28]	; (8020e4c <HAL_RCC_OscConfig+0x2b8>)
 8020e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8020e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8020e36:	f7fd f963 	bl	801e100 <HAL_GetTick>
 8020e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020e3c:	e011      	b.n	8020e62 <HAL_RCC_OscConfig+0x2ce>
 8020e3e:	bf00      	nop
 8020e40:	40023800 	.word	0x40023800
 8020e44:	42470000 	.word	0x42470000
 8020e48:	42470e80 	.word	0x42470e80
 8020e4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8020e50:	f7fd f956 	bl	801e100 <HAL_GetTick>
 8020e54:	4602      	mov	r2, r0
 8020e56:	693b      	ldr	r3, [r7, #16]
 8020e58:	1ad3      	subs	r3, r2, r3
 8020e5a:	2b02      	cmp	r3, #2
 8020e5c:	d901      	bls.n	8020e62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8020e5e:	2303      	movs	r3, #3
 8020e60:	e112      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8020e62:	4b8b      	ldr	r3, [pc, #556]	; (8021090 <HAL_RCC_OscConfig+0x4fc>)
 8020e64:	681b      	ldr	r3, [r3, #0]
 8020e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d0f0      	beq.n	8020e50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	689b      	ldr	r3, [r3, #8]
 8020e72:	2b01      	cmp	r3, #1
 8020e74:	d106      	bne.n	8020e84 <HAL_RCC_OscConfig+0x2f0>
 8020e76:	4b87      	ldr	r3, [pc, #540]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e7a:	4a86      	ldr	r2, [pc, #536]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e7c:	f043 0301 	orr.w	r3, r3, #1
 8020e80:	6713      	str	r3, [r2, #112]	; 0x70
 8020e82:	e01c      	b.n	8020ebe <HAL_RCC_OscConfig+0x32a>
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	689b      	ldr	r3, [r3, #8]
 8020e88:	2b05      	cmp	r3, #5
 8020e8a:	d10c      	bne.n	8020ea6 <HAL_RCC_OscConfig+0x312>
 8020e8c:	4b81      	ldr	r3, [pc, #516]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e90:	4a80      	ldr	r2, [pc, #512]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e92:	f043 0304 	orr.w	r3, r3, #4
 8020e96:	6713      	str	r3, [r2, #112]	; 0x70
 8020e98:	4b7e      	ldr	r3, [pc, #504]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020e9c:	4a7d      	ldr	r2, [pc, #500]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020e9e:	f043 0301 	orr.w	r3, r3, #1
 8020ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8020ea4:	e00b      	b.n	8020ebe <HAL_RCC_OscConfig+0x32a>
 8020ea6:	4b7b      	ldr	r3, [pc, #492]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020eaa:	4a7a      	ldr	r2, [pc, #488]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020eac:	f023 0301 	bic.w	r3, r3, #1
 8020eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8020eb2:	4b78      	ldr	r3, [pc, #480]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020eb6:	4a77      	ldr	r2, [pc, #476]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020eb8:	f023 0304 	bic.w	r3, r3, #4
 8020ebc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	689b      	ldr	r3, [r3, #8]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d015      	beq.n	8020ef2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020ec6:	f7fd f91b 	bl	801e100 <HAL_GetTick>
 8020eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020ecc:	e00a      	b.n	8020ee4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8020ece:	f7fd f917 	bl	801e100 <HAL_GetTick>
 8020ed2:	4602      	mov	r2, r0
 8020ed4:	693b      	ldr	r3, [r7, #16]
 8020ed6:	1ad3      	subs	r3, r2, r3
 8020ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8020edc:	4293      	cmp	r3, r2
 8020ede:	d901      	bls.n	8020ee4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8020ee0:	2303      	movs	r3, #3
 8020ee2:	e0d1      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8020ee4:	4b6b      	ldr	r3, [pc, #428]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020ee8:	f003 0302 	and.w	r3, r3, #2
 8020eec:	2b00      	cmp	r3, #0
 8020eee:	d0ee      	beq.n	8020ece <HAL_RCC_OscConfig+0x33a>
 8020ef0:	e014      	b.n	8020f1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8020ef2:	f7fd f905 	bl	801e100 <HAL_GetTick>
 8020ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8020ef8:	e00a      	b.n	8020f10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8020efa:	f7fd f901 	bl	801e100 <HAL_GetTick>
 8020efe:	4602      	mov	r2, r0
 8020f00:	693b      	ldr	r3, [r7, #16]
 8020f02:	1ad3      	subs	r3, r2, r3
 8020f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8020f08:	4293      	cmp	r3, r2
 8020f0a:	d901      	bls.n	8020f10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8020f0c:	2303      	movs	r3, #3
 8020f0e:	e0bb      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8020f10:	4b60      	ldr	r3, [pc, #384]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020f14:	f003 0302 	and.w	r3, r3, #2
 8020f18:	2b00      	cmp	r3, #0
 8020f1a:	d1ee      	bne.n	8020efa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8020f1c:	7dfb      	ldrb	r3, [r7, #23]
 8020f1e:	2b01      	cmp	r3, #1
 8020f20:	d105      	bne.n	8020f2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8020f22:	4b5c      	ldr	r3, [pc, #368]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f26:	4a5b      	ldr	r2, [pc, #364]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8020f2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8020f2e:	687b      	ldr	r3, [r7, #4]
 8020f30:	699b      	ldr	r3, [r3, #24]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	f000 80a7 	beq.w	8021086 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8020f38:	4b56      	ldr	r3, [pc, #344]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020f3a:	689b      	ldr	r3, [r3, #8]
 8020f3c:	f003 030c 	and.w	r3, r3, #12
 8020f40:	2b08      	cmp	r3, #8
 8020f42:	d060      	beq.n	8021006 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8020f44:	687b      	ldr	r3, [r7, #4]
 8020f46:	699b      	ldr	r3, [r3, #24]
 8020f48:	2b02      	cmp	r3, #2
 8020f4a:	d145      	bne.n	8020fd8 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8020f4c:	4b52      	ldr	r3, [pc, #328]	; (8021098 <HAL_RCC_OscConfig+0x504>)
 8020f4e:	2200      	movs	r2, #0
 8020f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020f52:	f7fd f8d5 	bl	801e100 <HAL_GetTick>
 8020f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020f58:	e008      	b.n	8020f6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020f5a:	f7fd f8d1 	bl	801e100 <HAL_GetTick>
 8020f5e:	4602      	mov	r2, r0
 8020f60:	693b      	ldr	r3, [r7, #16]
 8020f62:	1ad3      	subs	r3, r2, r3
 8020f64:	2b02      	cmp	r3, #2
 8020f66:	d901      	bls.n	8020f6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8020f68:	2303      	movs	r3, #3
 8020f6a:	e08d      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020f6c:	4b49      	ldr	r3, [pc, #292]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020f6e:	681b      	ldr	r3, [r3, #0]
 8020f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020f74:	2b00      	cmp	r3, #0
 8020f76:	d1f0      	bne.n	8020f5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8020f78:	687b      	ldr	r3, [r7, #4]
 8020f7a:	69da      	ldr	r2, [r3, #28]
 8020f7c:	687b      	ldr	r3, [r7, #4]
 8020f7e:	6a1b      	ldr	r3, [r3, #32]
 8020f80:	431a      	orrs	r2, r3
 8020f82:	687b      	ldr	r3, [r7, #4]
 8020f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f86:	019b      	lsls	r3, r3, #6
 8020f88:	431a      	orrs	r2, r3
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020f8e:	085b      	lsrs	r3, r3, #1
 8020f90:	3b01      	subs	r3, #1
 8020f92:	041b      	lsls	r3, r3, #16
 8020f94:	431a      	orrs	r2, r3
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020f9a:	061b      	lsls	r3, r3, #24
 8020f9c:	431a      	orrs	r2, r3
 8020f9e:	687b      	ldr	r3, [r7, #4]
 8020fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020fa2:	071b      	lsls	r3, r3, #28
 8020fa4:	493b      	ldr	r1, [pc, #236]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020fa6:	4313      	orrs	r3, r2
 8020fa8:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8020faa:	4b3b      	ldr	r3, [pc, #236]	; (8021098 <HAL_RCC_OscConfig+0x504>)
 8020fac:	2201      	movs	r2, #1
 8020fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020fb0:	f7fd f8a6 	bl	801e100 <HAL_GetTick>
 8020fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020fb6:	e008      	b.n	8020fca <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020fb8:	f7fd f8a2 	bl	801e100 <HAL_GetTick>
 8020fbc:	4602      	mov	r2, r0
 8020fbe:	693b      	ldr	r3, [r7, #16]
 8020fc0:	1ad3      	subs	r3, r2, r3
 8020fc2:	2b02      	cmp	r3, #2
 8020fc4:	d901      	bls.n	8020fca <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8020fc6:	2303      	movs	r3, #3
 8020fc8:	e05e      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8020fca:	4b32      	ldr	r3, [pc, #200]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020fcc:	681b      	ldr	r3, [r3, #0]
 8020fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020fd2:	2b00      	cmp	r3, #0
 8020fd4:	d0f0      	beq.n	8020fb8 <HAL_RCC_OscConfig+0x424>
 8020fd6:	e056      	b.n	8021086 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8020fd8:	4b2f      	ldr	r3, [pc, #188]	; (8021098 <HAL_RCC_OscConfig+0x504>)
 8020fda:	2200      	movs	r2, #0
 8020fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8020fde:	f7fd f88f 	bl	801e100 <HAL_GetTick>
 8020fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020fe4:	e008      	b.n	8020ff8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8020fe6:	f7fd f88b 	bl	801e100 <HAL_GetTick>
 8020fea:	4602      	mov	r2, r0
 8020fec:	693b      	ldr	r3, [r7, #16]
 8020fee:	1ad3      	subs	r3, r2, r3
 8020ff0:	2b02      	cmp	r3, #2
 8020ff2:	d901      	bls.n	8020ff8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8020ff4:	2303      	movs	r3, #3
 8020ff6:	e047      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8020ff8:	4b26      	ldr	r3, [pc, #152]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8021000:	2b00      	cmp	r3, #0
 8021002:	d1f0      	bne.n	8020fe6 <HAL_RCC_OscConfig+0x452>
 8021004:	e03f      	b.n	8021086 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	699b      	ldr	r3, [r3, #24]
 802100a:	2b01      	cmp	r3, #1
 802100c:	d101      	bne.n	8021012 <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 802100e:	2301      	movs	r3, #1
 8021010:	e03a      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8021012:	4b20      	ldr	r3, [pc, #128]	; (8021094 <HAL_RCC_OscConfig+0x500>)
 8021014:	685b      	ldr	r3, [r3, #4]
 8021016:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	699b      	ldr	r3, [r3, #24]
 802101c:	2b01      	cmp	r3, #1
 802101e:	d030      	beq.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021020:	68fb      	ldr	r3, [r7, #12]
 8021022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8021026:	687b      	ldr	r3, [r7, #4]
 8021028:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 802102a:	429a      	cmp	r2, r3
 802102c:	d129      	bne.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802102e:	68fb      	ldr	r3, [r7, #12]
 8021030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8021034:	687b      	ldr	r3, [r7, #4]
 8021036:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8021038:	429a      	cmp	r2, r3
 802103a:	d122      	bne.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802103c:	68fa      	ldr	r2, [r7, #12]
 802103e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8021042:	4013      	ands	r3, r2
 8021044:	687a      	ldr	r2, [r7, #4]
 8021046:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8021048:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 802104a:	4293      	cmp	r3, r2
 802104c:	d119      	bne.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8021054:	687b      	ldr	r3, [r7, #4]
 8021056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021058:	085b      	lsrs	r3, r3, #1
 802105a:	3b01      	subs	r3, #1
 802105c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 802105e:	429a      	cmp	r2, r3
 8021060:	d10f      	bne.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8021062:	68fb      	ldr	r3, [r7, #12]
 8021064:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8021068:	687b      	ldr	r3, [r7, #4]
 802106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802106c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 802106e:	429a      	cmp	r2, r3
 8021070:	d107      	bne.n	8021082 <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8021072:	68fb      	ldr	r3, [r7, #12]
 8021074:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802107c:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 802107e:	429a      	cmp	r2, r3
 8021080:	d001      	beq.n	8021086 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8021082:	2301      	movs	r3, #1
 8021084:	e000      	b.n	8021088 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8021086:	2300      	movs	r3, #0
}
 8021088:	4618      	mov	r0, r3
 802108a:	3718      	adds	r7, #24
 802108c:	46bd      	mov	sp, r7
 802108e:	bd80      	pop	{r7, pc}
 8021090:	40007000 	.word	0x40007000
 8021094:	40023800 	.word	0x40023800
 8021098:	42470060 	.word	0x42470060

0802109c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 802109c:	b580      	push	{r7, lr}
 802109e:	b082      	sub	sp, #8
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
 80210a4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d101      	bne.n	80210b0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80210ac:	2301      	movs	r3, #1
 80210ae:	e025      	b.n	80210fc <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80210b6:	b2db      	uxtb	r3, r3
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d106      	bne.n	80210ca <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	2200      	movs	r2, #0
 80210c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80210c4:	6878      	ldr	r0, [r7, #4]
 80210c6:	f7e0 ffe9 	bl	800209c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	2202      	movs	r2, #2
 80210ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	681a      	ldr	r2, [r3, #0]
 80210d6:	687b      	ldr	r3, [r7, #4]
 80210d8:	3304      	adds	r3, #4
 80210da:	4619      	mov	r1, r3
 80210dc:	4610      	mov	r0, r2
 80210de:	f000 fadf 	bl	80216a0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	6818      	ldr	r0, [r3, #0]
 80210e6:	687b      	ldr	r3, [r7, #4]
 80210e8:	685b      	ldr	r3, [r3, #4]
 80210ea:	461a      	mov	r2, r3
 80210ec:	6839      	ldr	r1, [r7, #0]
 80210ee:	f000 fb4a 	bl	8021786 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80210f2:	687b      	ldr	r3, [r7, #4]
 80210f4:	2201      	movs	r2, #1
 80210f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80210fa:	2300      	movs	r3, #0
}
 80210fc:	4618      	mov	r0, r3
 80210fe:	3708      	adds	r7, #8
 8021100:	46bd      	mov	sp, r7
 8021102:	bd80      	pop	{r7, pc}

08021104 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8021104:	b580      	push	{r7, lr}
 8021106:	b084      	sub	sp, #16
 8021108:	af00      	add	r7, sp, #0
 802110a:	60f8      	str	r0, [r7, #12]
 802110c:	60b9      	str	r1, [r7, #8]
 802110e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021110:	68fb      	ldr	r3, [r7, #12]
 8021112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021116:	b2db      	uxtb	r3, r3
 8021118:	2b02      	cmp	r3, #2
 802111a:	d101      	bne.n	8021120 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 802111c:	2302      	movs	r3, #2
 802111e:	e018      	b.n	8021152 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8021120:	68fb      	ldr	r3, [r7, #12]
 8021122:	2202      	movs	r2, #2
 8021124:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8021128:	68fb      	ldr	r3, [r7, #12]
 802112a:	681b      	ldr	r3, [r3, #0]
 802112c:	687a      	ldr	r2, [r7, #4]
 802112e:	68b9      	ldr	r1, [r7, #8]
 8021130:	4618      	mov	r0, r3
 8021132:	f000 fba7 	bl	8021884 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8021136:	68bb      	ldr	r3, [r7, #8]
 8021138:	681b      	ldr	r3, [r3, #0]
 802113a:	2b02      	cmp	r3, #2
 802113c:	d104      	bne.n	8021148 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 802113e:	68fb      	ldr	r3, [r7, #12]
 8021140:	2205      	movs	r2, #5
 8021142:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8021146:	e003      	b.n	8021150 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8021148:	68fb      	ldr	r3, [r7, #12]
 802114a:	2201      	movs	r2, #1
 802114c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8021150:	2300      	movs	r3, #0
}
 8021152:	4618      	mov	r0, r3
 8021154:	3710      	adds	r7, #16
 8021156:	46bd      	mov	sp, r7
 8021158:	bd80      	pop	{r7, pc}

0802115a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802115a:	b580      	push	{r7, lr}
 802115c:	b082      	sub	sp, #8
 802115e:	af00      	add	r7, sp, #0
 8021160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	2b00      	cmp	r3, #0
 8021166:	d101      	bne.n	802116c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8021168:	2301      	movs	r3, #1
 802116a:	e041      	b.n	80211f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021172:	b2db      	uxtb	r3, r3
 8021174:	2b00      	cmp	r3, #0
 8021176:	d106      	bne.n	8021186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	2200      	movs	r2, #0
 802117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8021180:	6878      	ldr	r0, [r7, #4]
 8021182:	f7e0 fe03 	bl	8001d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021186:	687b      	ldr	r3, [r7, #4]
 8021188:	2202      	movs	r2, #2
 802118a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	681a      	ldr	r2, [r3, #0]
 8021192:	687b      	ldr	r3, [r7, #4]
 8021194:	3304      	adds	r3, #4
 8021196:	4619      	mov	r1, r3
 8021198:	4610      	mov	r0, r2
 802119a:	f000 f9cd 	bl	8021538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	2201      	movs	r2, #1
 80211a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	2201      	movs	r2, #1
 80211aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80211ae:	687b      	ldr	r3, [r7, #4]
 80211b0:	2201      	movs	r2, #1
 80211b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	2201      	movs	r2, #1
 80211ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80211be:	687b      	ldr	r3, [r7, #4]
 80211c0:	2201      	movs	r2, #1
 80211c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80211c6:	687b      	ldr	r3, [r7, #4]
 80211c8:	2201      	movs	r2, #1
 80211ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	2201      	movs	r2, #1
 80211d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80211d6:	687b      	ldr	r3, [r7, #4]
 80211d8:	2201      	movs	r2, #1
 80211da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80211de:	687b      	ldr	r3, [r7, #4]
 80211e0:	2201      	movs	r2, #1
 80211e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80211e6:	687b      	ldr	r3, [r7, #4]
 80211e8:	2201      	movs	r2, #1
 80211ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80211ee:	2300      	movs	r3, #0
}
 80211f0:	4618      	mov	r0, r3
 80211f2:	3708      	adds	r7, #8
 80211f4:	46bd      	mov	sp, r7
 80211f6:	bd80      	pop	{r7, pc}

080211f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80211f8:	b480      	push	{r7}
 80211fa:	b085      	sub	sp, #20
 80211fc:	af00      	add	r7, sp, #0
 80211fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8021200:	687b      	ldr	r3, [r7, #4]
 8021202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8021206:	b2db      	uxtb	r3, r3
 8021208:	2b01      	cmp	r3, #1
 802120a:	d001      	beq.n	8021210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802120c:	2301      	movs	r3, #1
 802120e:	e04e      	b.n	80212ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	2202      	movs	r2, #2
 8021214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8021218:	687b      	ldr	r3, [r7, #4]
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	68da      	ldr	r2, [r3, #12]
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	681b      	ldr	r3, [r3, #0]
 8021222:	f042 0201 	orr.w	r2, r2, #1
 8021226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	681b      	ldr	r3, [r3, #0]
 802122c:	4a23      	ldr	r2, [pc, #140]	; (80212bc <HAL_TIM_Base_Start_IT+0xc4>)
 802122e:	4293      	cmp	r3, r2
 8021230:	d022      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	681b      	ldr	r3, [r3, #0]
 8021236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802123a:	d01d      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	681b      	ldr	r3, [r3, #0]
 8021240:	4a1f      	ldr	r2, [pc, #124]	; (80212c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8021242:	4293      	cmp	r3, r2
 8021244:	d018      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	681b      	ldr	r3, [r3, #0]
 802124a:	4a1e      	ldr	r2, [pc, #120]	; (80212c4 <HAL_TIM_Base_Start_IT+0xcc>)
 802124c:	4293      	cmp	r3, r2
 802124e:	d013      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	4a1c      	ldr	r2, [pc, #112]	; (80212c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8021256:	4293      	cmp	r3, r2
 8021258:	d00e      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 802125a:	687b      	ldr	r3, [r7, #4]
 802125c:	681b      	ldr	r3, [r3, #0]
 802125e:	4a1b      	ldr	r2, [pc, #108]	; (80212cc <HAL_TIM_Base_Start_IT+0xd4>)
 8021260:	4293      	cmp	r3, r2
 8021262:	d009      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	681b      	ldr	r3, [r3, #0]
 8021268:	4a19      	ldr	r2, [pc, #100]	; (80212d0 <HAL_TIM_Base_Start_IT+0xd8>)
 802126a:	4293      	cmp	r3, r2
 802126c:	d004      	beq.n	8021278 <HAL_TIM_Base_Start_IT+0x80>
 802126e:	687b      	ldr	r3, [r7, #4]
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	4a18      	ldr	r2, [pc, #96]	; (80212d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8021274:	4293      	cmp	r3, r2
 8021276:	d111      	bne.n	802129c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8021278:	687b      	ldr	r3, [r7, #4]
 802127a:	681b      	ldr	r3, [r3, #0]
 802127c:	689b      	ldr	r3, [r3, #8]
 802127e:	f003 0307 	and.w	r3, r3, #7
 8021282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8021284:	68fb      	ldr	r3, [r7, #12]
 8021286:	2b06      	cmp	r3, #6
 8021288:	d010      	beq.n	80212ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	681b      	ldr	r3, [r3, #0]
 802128e:	681a      	ldr	r2, [r3, #0]
 8021290:	687b      	ldr	r3, [r7, #4]
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	f042 0201 	orr.w	r2, r2, #1
 8021298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802129a:	e007      	b.n	80212ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	681a      	ldr	r2, [r3, #0]
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	681b      	ldr	r3, [r3, #0]
 80212a6:	f042 0201 	orr.w	r2, r2, #1
 80212aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80212ac:	2300      	movs	r3, #0
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	3714      	adds	r7, #20
 80212b2:	46bd      	mov	sp, r7
 80212b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b8:	4770      	bx	lr
 80212ba:	bf00      	nop
 80212bc:	40010000 	.word	0x40010000
 80212c0:	40000400 	.word	0x40000400
 80212c4:	40000800 	.word	0x40000800
 80212c8:	40000c00 	.word	0x40000c00
 80212cc:	40010400 	.word	0x40010400
 80212d0:	40014000 	.word	0x40014000
 80212d4:	40001800 	.word	0x40001800

080212d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80212d8:	b580      	push	{r7, lr}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80212e0:	687b      	ldr	r3, [r7, #4]
 80212e2:	681b      	ldr	r3, [r3, #0]
 80212e4:	691b      	ldr	r3, [r3, #16]
 80212e6:	f003 0302 	and.w	r3, r3, #2
 80212ea:	2b02      	cmp	r3, #2
 80212ec:	d122      	bne.n	8021334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	681b      	ldr	r3, [r3, #0]
 80212f2:	68db      	ldr	r3, [r3, #12]
 80212f4:	f003 0302 	and.w	r3, r3, #2
 80212f8:	2b02      	cmp	r3, #2
 80212fa:	d11b      	bne.n	8021334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80212fc:	687b      	ldr	r3, [r7, #4]
 80212fe:	681b      	ldr	r3, [r3, #0]
 8021300:	f06f 0202 	mvn.w	r2, #2
 8021304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8021306:	687b      	ldr	r3, [r7, #4]
 8021308:	2201      	movs	r2, #1
 802130a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802130c:	687b      	ldr	r3, [r7, #4]
 802130e:	681b      	ldr	r3, [r3, #0]
 8021310:	699b      	ldr	r3, [r3, #24]
 8021312:	f003 0303 	and.w	r3, r3, #3
 8021316:	2b00      	cmp	r3, #0
 8021318:	d003      	beq.n	8021322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802131a:	6878      	ldr	r0, [r7, #4]
 802131c:	f000 f8ee 	bl	80214fc <HAL_TIM_IC_CaptureCallback>
 8021320:	e005      	b.n	802132e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8021322:	6878      	ldr	r0, [r7, #4]
 8021324:	f000 f8e0 	bl	80214e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021328:	6878      	ldr	r0, [r7, #4]
 802132a:	f000 f8f1 	bl	8021510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802132e:	687b      	ldr	r3, [r7, #4]
 8021330:	2200      	movs	r2, #0
 8021332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8021334:	687b      	ldr	r3, [r7, #4]
 8021336:	681b      	ldr	r3, [r3, #0]
 8021338:	691b      	ldr	r3, [r3, #16]
 802133a:	f003 0304 	and.w	r3, r3, #4
 802133e:	2b04      	cmp	r3, #4
 8021340:	d122      	bne.n	8021388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8021342:	687b      	ldr	r3, [r7, #4]
 8021344:	681b      	ldr	r3, [r3, #0]
 8021346:	68db      	ldr	r3, [r3, #12]
 8021348:	f003 0304 	and.w	r3, r3, #4
 802134c:	2b04      	cmp	r3, #4
 802134e:	d11b      	bne.n	8021388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8021350:	687b      	ldr	r3, [r7, #4]
 8021352:	681b      	ldr	r3, [r3, #0]
 8021354:	f06f 0204 	mvn.w	r2, #4
 8021358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802135a:	687b      	ldr	r3, [r7, #4]
 802135c:	2202      	movs	r2, #2
 802135e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	699b      	ldr	r3, [r3, #24]
 8021366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 802136a:	2b00      	cmp	r3, #0
 802136c:	d003      	beq.n	8021376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802136e:	6878      	ldr	r0, [r7, #4]
 8021370:	f000 f8c4 	bl	80214fc <HAL_TIM_IC_CaptureCallback>
 8021374:	e005      	b.n	8021382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8021376:	6878      	ldr	r0, [r7, #4]
 8021378:	f000 f8b6 	bl	80214e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802137c:	6878      	ldr	r0, [r7, #4]
 802137e:	f000 f8c7 	bl	8021510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8021382:	687b      	ldr	r3, [r7, #4]
 8021384:	2200      	movs	r2, #0
 8021386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	691b      	ldr	r3, [r3, #16]
 802138e:	f003 0308 	and.w	r3, r3, #8
 8021392:	2b08      	cmp	r3, #8
 8021394:	d122      	bne.n	80213dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	68db      	ldr	r3, [r3, #12]
 802139c:	f003 0308 	and.w	r3, r3, #8
 80213a0:	2b08      	cmp	r3, #8
 80213a2:	d11b      	bne.n	80213dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	f06f 0208 	mvn.w	r2, #8
 80213ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	2204      	movs	r2, #4
 80213b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	69db      	ldr	r3, [r3, #28]
 80213ba:	f003 0303 	and.w	r3, r3, #3
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d003      	beq.n	80213ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80213c2:	6878      	ldr	r0, [r7, #4]
 80213c4:	f000 f89a 	bl	80214fc <HAL_TIM_IC_CaptureCallback>
 80213c8:	e005      	b.n	80213d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80213ca:	6878      	ldr	r0, [r7, #4]
 80213cc:	f000 f88c 	bl	80214e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80213d0:	6878      	ldr	r0, [r7, #4]
 80213d2:	f000 f89d 	bl	8021510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80213d6:	687b      	ldr	r3, [r7, #4]
 80213d8:	2200      	movs	r2, #0
 80213da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80213dc:	687b      	ldr	r3, [r7, #4]
 80213de:	681b      	ldr	r3, [r3, #0]
 80213e0:	691b      	ldr	r3, [r3, #16]
 80213e2:	f003 0310 	and.w	r3, r3, #16
 80213e6:	2b10      	cmp	r3, #16
 80213e8:	d122      	bne.n	8021430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80213ea:	687b      	ldr	r3, [r7, #4]
 80213ec:	681b      	ldr	r3, [r3, #0]
 80213ee:	68db      	ldr	r3, [r3, #12]
 80213f0:	f003 0310 	and.w	r3, r3, #16
 80213f4:	2b10      	cmp	r3, #16
 80213f6:	d11b      	bne.n	8021430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80213f8:	687b      	ldr	r3, [r7, #4]
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	f06f 0210 	mvn.w	r2, #16
 8021400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8021402:	687b      	ldr	r3, [r7, #4]
 8021404:	2208      	movs	r2, #8
 8021406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8021408:	687b      	ldr	r3, [r7, #4]
 802140a:	681b      	ldr	r3, [r3, #0]
 802140c:	69db      	ldr	r3, [r3, #28]
 802140e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8021412:	2b00      	cmp	r3, #0
 8021414:	d003      	beq.n	802141e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8021416:	6878      	ldr	r0, [r7, #4]
 8021418:	f000 f870 	bl	80214fc <HAL_TIM_IC_CaptureCallback>
 802141c:	e005      	b.n	802142a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802141e:	6878      	ldr	r0, [r7, #4]
 8021420:	f000 f862 	bl	80214e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8021424:	6878      	ldr	r0, [r7, #4]
 8021426:	f000 f873 	bl	8021510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	2200      	movs	r2, #0
 802142e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	681b      	ldr	r3, [r3, #0]
 8021434:	691b      	ldr	r3, [r3, #16]
 8021436:	f003 0301 	and.w	r3, r3, #1
 802143a:	2b01      	cmp	r3, #1
 802143c:	d10e      	bne.n	802145c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 802143e:	687b      	ldr	r3, [r7, #4]
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	68db      	ldr	r3, [r3, #12]
 8021444:	f003 0301 	and.w	r3, r3, #1
 8021448:	2b01      	cmp	r3, #1
 802144a:	d107      	bne.n	802145c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	f06f 0201 	mvn.w	r2, #1
 8021454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8021456:	6878      	ldr	r0, [r7, #4]
 8021458:	f7e0 fc36 	bl	8001cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	691b      	ldr	r3, [r3, #16]
 8021462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021466:	2b80      	cmp	r3, #128	; 0x80
 8021468:	d10e      	bne.n	8021488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 802146a:	687b      	ldr	r3, [r7, #4]
 802146c:	681b      	ldr	r3, [r3, #0]
 802146e:	68db      	ldr	r3, [r3, #12]
 8021470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021474:	2b80      	cmp	r3, #128	; 0x80
 8021476:	d107      	bne.n	8021488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	681b      	ldr	r3, [r3, #0]
 802147c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8021480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8021482:	6878      	ldr	r0, [r7, #4]
 8021484:	f000 f902 	bl	802168c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8021488:	687b      	ldr	r3, [r7, #4]
 802148a:	681b      	ldr	r3, [r3, #0]
 802148c:	691b      	ldr	r3, [r3, #16]
 802148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021492:	2b40      	cmp	r3, #64	; 0x40
 8021494:	d10e      	bne.n	80214b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8021496:	687b      	ldr	r3, [r7, #4]
 8021498:	681b      	ldr	r3, [r3, #0]
 802149a:	68db      	ldr	r3, [r3, #12]
 802149c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214a0:	2b40      	cmp	r3, #64	; 0x40
 80214a2:	d107      	bne.n	80214b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	681b      	ldr	r3, [r3, #0]
 80214a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80214ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80214ae:	6878      	ldr	r0, [r7, #4]
 80214b0:	f000 f838 	bl	8021524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80214b4:	687b      	ldr	r3, [r7, #4]
 80214b6:	681b      	ldr	r3, [r3, #0]
 80214b8:	691b      	ldr	r3, [r3, #16]
 80214ba:	f003 0320 	and.w	r3, r3, #32
 80214be:	2b20      	cmp	r3, #32
 80214c0:	d10e      	bne.n	80214e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80214c2:	687b      	ldr	r3, [r7, #4]
 80214c4:	681b      	ldr	r3, [r3, #0]
 80214c6:	68db      	ldr	r3, [r3, #12]
 80214c8:	f003 0320 	and.w	r3, r3, #32
 80214cc:	2b20      	cmp	r3, #32
 80214ce:	d107      	bne.n	80214e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80214d0:	687b      	ldr	r3, [r7, #4]
 80214d2:	681b      	ldr	r3, [r3, #0]
 80214d4:	f06f 0220 	mvn.w	r2, #32
 80214d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80214da:	6878      	ldr	r0, [r7, #4]
 80214dc:	f000 f8cc 	bl	8021678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80214e0:	bf00      	nop
 80214e2:	3708      	adds	r7, #8
 80214e4:	46bd      	mov	sp, r7
 80214e6:	bd80      	pop	{r7, pc}

080214e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80214e8:	b480      	push	{r7}
 80214ea:	b083      	sub	sp, #12
 80214ec:	af00      	add	r7, sp, #0
 80214ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80214f0:	bf00      	nop
 80214f2:	370c      	adds	r7, #12
 80214f4:	46bd      	mov	sp, r7
 80214f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214fa:	4770      	bx	lr

080214fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80214fc:	b480      	push	{r7}
 80214fe:	b083      	sub	sp, #12
 8021500:	af00      	add	r7, sp, #0
 8021502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8021504:	bf00      	nop
 8021506:	370c      	adds	r7, #12
 8021508:	46bd      	mov	sp, r7
 802150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802150e:	4770      	bx	lr

08021510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8021510:	b480      	push	{r7}
 8021512:	b083      	sub	sp, #12
 8021514:	af00      	add	r7, sp, #0
 8021516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8021518:	bf00      	nop
 802151a:	370c      	adds	r7, #12
 802151c:	46bd      	mov	sp, r7
 802151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021522:	4770      	bx	lr

08021524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8021524:	b480      	push	{r7}
 8021526:	b083      	sub	sp, #12
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802152c:	bf00      	nop
 802152e:	370c      	adds	r7, #12
 8021530:	46bd      	mov	sp, r7
 8021532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021536:	4770      	bx	lr

08021538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8021538:	b480      	push	{r7}
 802153a:	b085      	sub	sp, #20
 802153c:	af00      	add	r7, sp, #0
 802153e:	6078      	str	r0, [r7, #4]
 8021540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	681b      	ldr	r3, [r3, #0]
 8021546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	4a40      	ldr	r2, [pc, #256]	; (802164c <TIM_Base_SetConfig+0x114>)
 802154c:	4293      	cmp	r3, r2
 802154e:	d013      	beq.n	8021578 <TIM_Base_SetConfig+0x40>
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021556:	d00f      	beq.n	8021578 <TIM_Base_SetConfig+0x40>
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	4a3d      	ldr	r2, [pc, #244]	; (8021650 <TIM_Base_SetConfig+0x118>)
 802155c:	4293      	cmp	r3, r2
 802155e:	d00b      	beq.n	8021578 <TIM_Base_SetConfig+0x40>
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	4a3c      	ldr	r2, [pc, #240]	; (8021654 <TIM_Base_SetConfig+0x11c>)
 8021564:	4293      	cmp	r3, r2
 8021566:	d007      	beq.n	8021578 <TIM_Base_SetConfig+0x40>
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	4a3b      	ldr	r2, [pc, #236]	; (8021658 <TIM_Base_SetConfig+0x120>)
 802156c:	4293      	cmp	r3, r2
 802156e:	d003      	beq.n	8021578 <TIM_Base_SetConfig+0x40>
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	4a3a      	ldr	r2, [pc, #232]	; (802165c <TIM_Base_SetConfig+0x124>)
 8021574:	4293      	cmp	r3, r2
 8021576:	d108      	bne.n	802158a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8021578:	68fb      	ldr	r3, [r7, #12]
 802157a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 802157e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8021580:	683b      	ldr	r3, [r7, #0]
 8021582:	685b      	ldr	r3, [r3, #4]
 8021584:	68fa      	ldr	r2, [r7, #12]
 8021586:	4313      	orrs	r3, r2
 8021588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 802158a:	687b      	ldr	r3, [r7, #4]
 802158c:	4a2f      	ldr	r2, [pc, #188]	; (802164c <TIM_Base_SetConfig+0x114>)
 802158e:	4293      	cmp	r3, r2
 8021590:	d02b      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8021598:	d027      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	4a2c      	ldr	r2, [pc, #176]	; (8021650 <TIM_Base_SetConfig+0x118>)
 802159e:	4293      	cmp	r3, r2
 80215a0:	d023      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	4a2b      	ldr	r2, [pc, #172]	; (8021654 <TIM_Base_SetConfig+0x11c>)
 80215a6:	4293      	cmp	r3, r2
 80215a8:	d01f      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	4a2a      	ldr	r2, [pc, #168]	; (8021658 <TIM_Base_SetConfig+0x120>)
 80215ae:	4293      	cmp	r3, r2
 80215b0:	d01b      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	4a29      	ldr	r2, [pc, #164]	; (802165c <TIM_Base_SetConfig+0x124>)
 80215b6:	4293      	cmp	r3, r2
 80215b8:	d017      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	4a28      	ldr	r2, [pc, #160]	; (8021660 <TIM_Base_SetConfig+0x128>)
 80215be:	4293      	cmp	r3, r2
 80215c0:	d013      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	4a27      	ldr	r2, [pc, #156]	; (8021664 <TIM_Base_SetConfig+0x12c>)
 80215c6:	4293      	cmp	r3, r2
 80215c8:	d00f      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215ca:	687b      	ldr	r3, [r7, #4]
 80215cc:	4a26      	ldr	r2, [pc, #152]	; (8021668 <TIM_Base_SetConfig+0x130>)
 80215ce:	4293      	cmp	r3, r2
 80215d0:	d00b      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	4a25      	ldr	r2, [pc, #148]	; (802166c <TIM_Base_SetConfig+0x134>)
 80215d6:	4293      	cmp	r3, r2
 80215d8:	d007      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	4a24      	ldr	r2, [pc, #144]	; (8021670 <TIM_Base_SetConfig+0x138>)
 80215de:	4293      	cmp	r3, r2
 80215e0:	d003      	beq.n	80215ea <TIM_Base_SetConfig+0xb2>
 80215e2:	687b      	ldr	r3, [r7, #4]
 80215e4:	4a23      	ldr	r2, [pc, #140]	; (8021674 <TIM_Base_SetConfig+0x13c>)
 80215e6:	4293      	cmp	r3, r2
 80215e8:	d108      	bne.n	80215fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80215ea:	68fb      	ldr	r3, [r7, #12]
 80215ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80215f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80215f2:	683b      	ldr	r3, [r7, #0]
 80215f4:	68db      	ldr	r3, [r3, #12]
 80215f6:	68fa      	ldr	r2, [r7, #12]
 80215f8:	4313      	orrs	r3, r2
 80215fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80215fc:	68fb      	ldr	r3, [r7, #12]
 80215fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8021602:	683b      	ldr	r3, [r7, #0]
 8021604:	695b      	ldr	r3, [r3, #20]
 8021606:	4313      	orrs	r3, r2
 8021608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802160a:	687b      	ldr	r3, [r7, #4]
 802160c:	68fa      	ldr	r2, [r7, #12]
 802160e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8021610:	683b      	ldr	r3, [r7, #0]
 8021612:	689a      	ldr	r2, [r3, #8]
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8021618:	683b      	ldr	r3, [r7, #0]
 802161a:	681a      	ldr	r2, [r3, #0]
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	4a0a      	ldr	r2, [pc, #40]	; (802164c <TIM_Base_SetConfig+0x114>)
 8021624:	4293      	cmp	r3, r2
 8021626:	d003      	beq.n	8021630 <TIM_Base_SetConfig+0xf8>
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	4a0c      	ldr	r2, [pc, #48]	; (802165c <TIM_Base_SetConfig+0x124>)
 802162c:	4293      	cmp	r3, r2
 802162e:	d103      	bne.n	8021638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8021630:	683b      	ldr	r3, [r7, #0]
 8021632:	691a      	ldr	r2, [r3, #16]
 8021634:	687b      	ldr	r3, [r7, #4]
 8021636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	2201      	movs	r2, #1
 802163c:	615a      	str	r2, [r3, #20]
}
 802163e:	bf00      	nop
 8021640:	3714      	adds	r7, #20
 8021642:	46bd      	mov	sp, r7
 8021644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021648:	4770      	bx	lr
 802164a:	bf00      	nop
 802164c:	40010000 	.word	0x40010000
 8021650:	40000400 	.word	0x40000400
 8021654:	40000800 	.word	0x40000800
 8021658:	40000c00 	.word	0x40000c00
 802165c:	40010400 	.word	0x40010400
 8021660:	40014000 	.word	0x40014000
 8021664:	40014400 	.word	0x40014400
 8021668:	40014800 	.word	0x40014800
 802166c:	40001800 	.word	0x40001800
 8021670:	40001c00 	.word	0x40001c00
 8021674:	40002000 	.word	0x40002000

08021678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8021678:	b480      	push	{r7}
 802167a:	b083      	sub	sp, #12
 802167c:	af00      	add	r7, sp, #0
 802167e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021680:	bf00      	nop
 8021682:	370c      	adds	r7, #12
 8021684:	46bd      	mov	sp, r7
 8021686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802168a:	4770      	bx	lr

0802168c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802168c:	b480      	push	{r7}
 802168e:	b083      	sub	sp, #12
 8021690:	af00      	add	r7, sp, #0
 8021692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021694:	bf00      	nop
 8021696:	370c      	adds	r7, #12
 8021698:	46bd      	mov	sp, r7
 802169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802169e:	4770      	bx	lr

080216a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80216a0:	b480      	push	{r7}
 80216a2:	b085      	sub	sp, #20
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
 80216a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80216aa:	2300      	movs	r3, #0
 80216ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80216ae:	2300      	movs	r3, #0
 80216b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80216b2:	683b      	ldr	r3, [r7, #0]
 80216b4:	681b      	ldr	r3, [r3, #0]
 80216b6:	2b01      	cmp	r3, #1
 80216b8:	d029      	beq.n	802170e <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80216c0:	68fb      	ldr	r3, [r7, #12]
 80216c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80216c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80216ca:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80216cc:	683b      	ldr	r3, [r7, #0]
 80216ce:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80216d0:	683b      	ldr	r3, [r7, #0]
 80216d2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80216d4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80216d6:	683b      	ldr	r3, [r7, #0]
 80216d8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80216da:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80216dc:	683b      	ldr	r3, [r7, #0]
 80216de:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80216e0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80216e2:	683b      	ldr	r3, [r7, #0]
 80216e4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80216e6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80216e8:	683b      	ldr	r3, [r7, #0]
 80216ea:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80216ec:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80216ee:	683b      	ldr	r3, [r7, #0]
 80216f0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80216f2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80216f4:	683b      	ldr	r3, [r7, #0]
 80216f6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80216f8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80216fe:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8021700:	68fa      	ldr	r2, [r7, #12]
 8021702:	4313      	orrs	r3, r2
 8021704:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	68fa      	ldr	r2, [r7, #12]
 802170a:	601a      	str	r2, [r3, #0]
 802170c:	e034      	b.n	8021778 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	681b      	ldr	r3, [r3, #0]
 8021712:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 802171a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 802171c:	683b      	ldr	r3, [r7, #0]
 802171e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8021720:	683b      	ldr	r3, [r7, #0]
 8021722:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8021724:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8021726:	683b      	ldr	r3, [r7, #0]
 8021728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 802172a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 802172c:	68fa      	ldr	r2, [r7, #12]
 802172e:	4313      	orrs	r3, r2
 8021730:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8021732:	687b      	ldr	r3, [r7, #4]
 8021734:	685b      	ldr	r3, [r3, #4]
 8021736:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8021738:	68bb      	ldr	r3, [r7, #8]
 802173a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 802173e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8021742:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8021744:	683b      	ldr	r3, [r7, #0]
 8021746:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8021748:	683b      	ldr	r3, [r7, #0]
 802174a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 802174c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 802174e:	683b      	ldr	r3, [r7, #0]
 8021750:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8021752:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8021754:	683b      	ldr	r3, [r7, #0]
 8021756:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8021758:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 802175a:	683b      	ldr	r3, [r7, #0]
 802175c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 802175e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8021760:	683b      	ldr	r3, [r7, #0]
 8021762:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8021764:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8021766:	68ba      	ldr	r2, [r7, #8]
 8021768:	4313      	orrs	r3, r2
 802176a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 802176c:	687b      	ldr	r3, [r7, #4]
 802176e:	68fa      	ldr	r2, [r7, #12]
 8021770:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8021772:	687b      	ldr	r3, [r7, #4]
 8021774:	68ba      	ldr	r2, [r7, #8]
 8021776:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8021778:	2300      	movs	r3, #0
}
 802177a:	4618      	mov	r0, r3
 802177c:	3714      	adds	r7, #20
 802177e:	46bd      	mov	sp, r7
 8021780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021784:	4770      	bx	lr

08021786 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8021786:	b480      	push	{r7}
 8021788:	b087      	sub	sp, #28
 802178a:	af00      	add	r7, sp, #0
 802178c:	60f8      	str	r0, [r7, #12]
 802178e:	60b9      	str	r1, [r7, #8]
 8021790:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8021792:	2300      	movs	r3, #0
 8021794:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8021796:	2300      	movs	r3, #0
 8021798:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	2b01      	cmp	r3, #1
 802179e:	d02e      	beq.n	80217fe <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80217a0:	68fb      	ldr	r3, [r7, #12]
 80217a2:	689b      	ldr	r3, [r3, #8]
 80217a4:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80217a6:	697b      	ldr	r3, [r7, #20]
 80217a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80217ac:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80217ae:	68bb      	ldr	r3, [r7, #8]
 80217b0:	681b      	ldr	r3, [r3, #0]
 80217b2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80217b4:	68bb      	ldr	r3, [r7, #8]
 80217b6:	685b      	ldr	r3, [r3, #4]
 80217b8:	3b01      	subs	r3, #1
 80217ba:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80217bc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80217be:	68bb      	ldr	r3, [r7, #8]
 80217c0:	689b      	ldr	r3, [r3, #8]
 80217c2:	3b01      	subs	r3, #1
 80217c4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80217c6:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80217c8:	68bb      	ldr	r3, [r7, #8]
 80217ca:	68db      	ldr	r3, [r3, #12]
 80217cc:	3b01      	subs	r3, #1
 80217ce:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80217d0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80217d2:	68bb      	ldr	r3, [r7, #8]
 80217d4:	691b      	ldr	r3, [r3, #16]
 80217d6:	3b01      	subs	r3, #1
 80217d8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80217da:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80217dc:	68bb      	ldr	r3, [r7, #8]
 80217de:	695b      	ldr	r3, [r3, #20]
 80217e0:	3b01      	subs	r3, #1
 80217e2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80217e4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80217e6:	68bb      	ldr	r3, [r7, #8]
 80217e8:	699b      	ldr	r3, [r3, #24]
 80217ea:	3b01      	subs	r3, #1
 80217ec:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80217ee:	4313      	orrs	r3, r2
 80217f0:	697a      	ldr	r2, [r7, #20]
 80217f2:	4313      	orrs	r3, r2
 80217f4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	697a      	ldr	r2, [r7, #20]
 80217fa:	609a      	str	r2, [r3, #8]
 80217fc:	e03b      	b.n	8021876 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80217fe:	68fb      	ldr	r3, [r7, #12]
 8021800:	689b      	ldr	r3, [r3, #8]
 8021802:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8021804:	697b      	ldr	r3, [r7, #20]
 8021806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 802180a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802180e:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8021810:	68bb      	ldr	r3, [r7, #8]
 8021812:	68db      	ldr	r3, [r3, #12]
 8021814:	3b01      	subs	r3, #1
 8021816:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8021818:	68bb      	ldr	r3, [r7, #8]
 802181a:	695b      	ldr	r3, [r3, #20]
 802181c:	3b01      	subs	r3, #1
 802181e:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8021820:	4313      	orrs	r3, r2
 8021822:	697a      	ldr	r2, [r7, #20]
 8021824:	4313      	orrs	r3, r2
 8021826:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8021828:	68fb      	ldr	r3, [r7, #12]
 802182a:	68db      	ldr	r3, [r3, #12]
 802182c:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 802182e:	693b      	ldr	r3, [r7, #16]
 8021830:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8021834:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8021836:	68bb      	ldr	r3, [r7, #8]
 8021838:	681b      	ldr	r3, [r3, #0]
 802183a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 802183c:	68bb      	ldr	r3, [r7, #8]
 802183e:	685b      	ldr	r3, [r3, #4]
 8021840:	3b01      	subs	r3, #1
 8021842:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8021844:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8021846:	68bb      	ldr	r3, [r7, #8]
 8021848:	689b      	ldr	r3, [r3, #8]
 802184a:	3b01      	subs	r3, #1
 802184c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 802184e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8021850:	68bb      	ldr	r3, [r7, #8]
 8021852:	691b      	ldr	r3, [r3, #16]
 8021854:	3b01      	subs	r3, #1
 8021856:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8021858:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 802185a:	68bb      	ldr	r3, [r7, #8]
 802185c:	699b      	ldr	r3, [r3, #24]
 802185e:	3b01      	subs	r3, #1
 8021860:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8021862:	4313      	orrs	r3, r2
 8021864:	693a      	ldr	r2, [r7, #16]
 8021866:	4313      	orrs	r3, r2
 8021868:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 802186a:	68fb      	ldr	r3, [r7, #12]
 802186c:	697a      	ldr	r2, [r7, #20]
 802186e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	693a      	ldr	r2, [r7, #16]
 8021874:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8021876:	2300      	movs	r3, #0
}
 8021878:	4618      	mov	r0, r3
 802187a:	371c      	adds	r7, #28
 802187c:	46bd      	mov	sp, r7
 802187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021882:	4770      	bx	lr

08021884 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8021884:	b580      	push	{r7, lr}
 8021886:	b086      	sub	sp, #24
 8021888:	af00      	add	r7, sp, #0
 802188a:	60f8      	str	r0, [r7, #12]
 802188c:	60b9      	str	r1, [r7, #8]
 802188e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8021890:	2300      	movs	r3, #0
 8021892:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8021894:	2300      	movs	r3, #0
 8021896:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8021898:	68bb      	ldr	r3, [r7, #8]
 802189a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 802189c:	68bb      	ldr	r3, [r7, #8]
 802189e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80218a0:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80218a2:	68bb      	ldr	r3, [r7, #8]
 80218a4:	689b      	ldr	r3, [r3, #8]
 80218a6:	3b01      	subs	r3, #1
 80218a8:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80218aa:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80218ac:	68bb      	ldr	r3, [r7, #8]
 80218ae:	68db      	ldr	r3, [r3, #12]
 80218b0:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80218b2:	4313      	orrs	r3, r2
 80218b4:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80218b6:	693a      	ldr	r2, [r7, #16]
 80218b8:	68fb      	ldr	r3, [r7, #12]
 80218ba:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80218bc:	f7fc fc20 	bl	801e100 <HAL_GetTick>
 80218c0:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80218c2:	e010      	b.n	80218e6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80218c4:	687b      	ldr	r3, [r7, #4]
 80218c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80218ca:	d00c      	beq.n	80218e6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	2b00      	cmp	r3, #0
 80218d0:	d007      	beq.n	80218e2 <FMC_SDRAM_SendCommand+0x5e>
 80218d2:	f7fc fc15 	bl	801e100 <HAL_GetTick>
 80218d6:	4602      	mov	r2, r0
 80218d8:	697b      	ldr	r3, [r7, #20]
 80218da:	1ad3      	subs	r3, r2, r3
 80218dc:	687a      	ldr	r2, [r7, #4]
 80218de:	429a      	cmp	r2, r3
 80218e0:	d201      	bcs.n	80218e6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80218e2:	2303      	movs	r3, #3
 80218e4:	e006      	b.n	80218f4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80218e6:	68fb      	ldr	r3, [r7, #12]
 80218e8:	699b      	ldr	r3, [r3, #24]
 80218ea:	f003 0320 	and.w	r3, r3, #32
 80218ee:	2b20      	cmp	r3, #32
 80218f0:	d0e8      	beq.n	80218c4 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80218f2:	2300      	movs	r3, #0
}
 80218f4:	4618      	mov	r0, r3
 80218f6:	3718      	adds	r7, #24
 80218f8:	46bd      	mov	sp, r7
 80218fa:	bd80      	pop	{r7, pc}

080218fc <_ZdlPv>:
 80218fc:	f000 b95c 	b.w	8021bb8 <free>

08021900 <_ZdlPvj>:
 8021900:	f7ff bffc 	b.w	80218fc <_ZdlPv>

08021904 <_ZdaPv>:
 8021904:	f7ff bffa 	b.w	80218fc <_ZdlPv>

08021908 <__cxa_guard_acquire>:
 8021908:	6803      	ldr	r3, [r0, #0]
 802190a:	07db      	lsls	r3, r3, #31
 802190c:	d406      	bmi.n	802191c <__cxa_guard_acquire+0x14>
 802190e:	7843      	ldrb	r3, [r0, #1]
 8021910:	b103      	cbz	r3, 8021914 <__cxa_guard_acquire+0xc>
 8021912:	deff      	udf	#255	; 0xff
 8021914:	2301      	movs	r3, #1
 8021916:	7043      	strb	r3, [r0, #1]
 8021918:	4618      	mov	r0, r3
 802191a:	4770      	bx	lr
 802191c:	2000      	movs	r0, #0
 802191e:	4770      	bx	lr

08021920 <__cxa_guard_release>:
 8021920:	2301      	movs	r3, #1
 8021922:	6003      	str	r3, [r0, #0]
 8021924:	4770      	bx	lr

08021926 <_Znwj>:
 8021926:	2801      	cmp	r0, #1
 8021928:	bf38      	it	cc
 802192a:	2001      	movcc	r0, #1
 802192c:	b510      	push	{r4, lr}
 802192e:	4604      	mov	r4, r0
 8021930:	4620      	mov	r0, r4
 8021932:	f000 f939 	bl	8021ba8 <malloc>
 8021936:	b930      	cbnz	r0, 8021946 <_Znwj+0x20>
 8021938:	f000 f81e 	bl	8021978 <_ZSt15get_new_handlerv>
 802193c:	b908      	cbnz	r0, 8021942 <_Znwj+0x1c>
 802193e:	f000 f8c7 	bl	8021ad0 <abort>
 8021942:	4780      	blx	r0
 8021944:	e7f4      	b.n	8021930 <_Znwj+0xa>
 8021946:	bd10      	pop	{r4, pc}

08021948 <_Znaj>:
 8021948:	f7ff bfed 	b.w	8021926 <_Znwj>

0802194c <__cxa_pure_virtual>:
 802194c:	b508      	push	{r3, lr}
 802194e:	f000 f80d 	bl	802196c <_ZSt9terminatev>

08021952 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021952:	b508      	push	{r3, lr}
 8021954:	4780      	blx	r0
 8021956:	f000 f8bb 	bl	8021ad0 <abort>
	...

0802195c <_ZSt13get_terminatev>:
 802195c:	4b02      	ldr	r3, [pc, #8]	; (8021968 <_ZSt13get_terminatev+0xc>)
 802195e:	6818      	ldr	r0, [r3, #0]
 8021960:	f3bf 8f5b 	dmb	ish
 8021964:	4770      	bx	lr
 8021966:	bf00      	nop
 8021968:	20000014 	.word	0x20000014

0802196c <_ZSt9terminatev>:
 802196c:	b508      	push	{r3, lr}
 802196e:	f7ff fff5 	bl	802195c <_ZSt13get_terminatev>
 8021972:	f7ff ffee 	bl	8021952 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08021978 <_ZSt15get_new_handlerv>:
 8021978:	4b02      	ldr	r3, [pc, #8]	; (8021984 <_ZSt15get_new_handlerv+0xc>)
 802197a:	6818      	ldr	r0, [r3, #0]
 802197c:	f3bf 8f5b 	dmb	ish
 8021980:	4770      	bx	lr
 8021982:	bf00      	nop
 8021984:	20000460 	.word	0x20000460

08021988 <frexp>:
 8021988:	b570      	push	{r4, r5, r6, lr}
 802198a:	2100      	movs	r1, #0
 802198c:	ec55 4b10 	vmov	r4, r5, d0
 8021990:	6001      	str	r1, [r0, #0]
 8021992:	4916      	ldr	r1, [pc, #88]	; (80219ec <frexp+0x64>)
 8021994:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8021998:	428a      	cmp	r2, r1
 802199a:	4606      	mov	r6, r0
 802199c:	462b      	mov	r3, r5
 802199e:	dc22      	bgt.n	80219e6 <frexp+0x5e>
 80219a0:	ee10 1a10 	vmov	r1, s0
 80219a4:	4311      	orrs	r1, r2
 80219a6:	d01e      	beq.n	80219e6 <frexp+0x5e>
 80219a8:	4911      	ldr	r1, [pc, #68]	; (80219f0 <frexp+0x68>)
 80219aa:	4029      	ands	r1, r5
 80219ac:	b969      	cbnz	r1, 80219ca <frexp+0x42>
 80219ae:	4b11      	ldr	r3, [pc, #68]	; (80219f4 <frexp+0x6c>)
 80219b0:	2200      	movs	r2, #0
 80219b2:	ee10 0a10 	vmov	r0, s0
 80219b6:	4629      	mov	r1, r5
 80219b8:	f7de fe38 	bl	800062c <__aeabi_dmul>
 80219bc:	460b      	mov	r3, r1
 80219be:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80219c2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80219c6:	4604      	mov	r4, r0
 80219c8:	6031      	str	r1, [r6, #0]
 80219ca:	6831      	ldr	r1, [r6, #0]
 80219cc:	1512      	asrs	r2, r2, #20
 80219ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80219d2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80219d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80219da:	440a      	add	r2, r1
 80219dc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80219e0:	6032      	str	r2, [r6, #0]
 80219e2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80219e6:	ec45 4b10 	vmov	d0, r4, r5
 80219ea:	bd70      	pop	{r4, r5, r6, pc}
 80219ec:	7fefffff 	.word	0x7fefffff
 80219f0:	7ff00000 	.word	0x7ff00000
 80219f4:	43500000 	.word	0x43500000

080219f8 <round>:
 80219f8:	ec51 0b10 	vmov	r0, r1, d0
 80219fc:	b570      	push	{r4, r5, r6, lr}
 80219fe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8021a02:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8021a06:	2c13      	cmp	r4, #19
 8021a08:	ee10 2a10 	vmov	r2, s0
 8021a0c:	460b      	mov	r3, r1
 8021a0e:	dc19      	bgt.n	8021a44 <round+0x4c>
 8021a10:	2c00      	cmp	r4, #0
 8021a12:	da09      	bge.n	8021a28 <round+0x30>
 8021a14:	3401      	adds	r4, #1
 8021a16:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8021a1a:	d103      	bne.n	8021a24 <round+0x2c>
 8021a1c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8021a20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8021a24:	2100      	movs	r1, #0
 8021a26:	e028      	b.n	8021a7a <round+0x82>
 8021a28:	4d15      	ldr	r5, [pc, #84]	; (8021a80 <round+0x88>)
 8021a2a:	4125      	asrs	r5, r4
 8021a2c:	ea01 0605 	and.w	r6, r1, r5
 8021a30:	4332      	orrs	r2, r6
 8021a32:	d00e      	beq.n	8021a52 <round+0x5a>
 8021a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8021a38:	fa42 f404 	asr.w	r4, r2, r4
 8021a3c:	4423      	add	r3, r4
 8021a3e:	ea23 0305 	bic.w	r3, r3, r5
 8021a42:	e7ef      	b.n	8021a24 <round+0x2c>
 8021a44:	2c33      	cmp	r4, #51	; 0x33
 8021a46:	dd07      	ble.n	8021a58 <round+0x60>
 8021a48:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8021a4c:	d101      	bne.n	8021a52 <round+0x5a>
 8021a4e:	f7de fc37 	bl	80002c0 <__adddf3>
 8021a52:	ec41 0b10 	vmov	d0, r0, r1
 8021a56:	bd70      	pop	{r4, r5, r6, pc}
 8021a58:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8021a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8021a60:	40f5      	lsrs	r5, r6
 8021a62:	4228      	tst	r0, r5
 8021a64:	d0f5      	beq.n	8021a52 <round+0x5a>
 8021a66:	2101      	movs	r1, #1
 8021a68:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8021a6c:	fa01 f404 	lsl.w	r4, r1, r4
 8021a70:	1912      	adds	r2, r2, r4
 8021a72:	bf28      	it	cs
 8021a74:	185b      	addcs	r3, r3, r1
 8021a76:	ea22 0105 	bic.w	r1, r2, r5
 8021a7a:	4608      	mov	r0, r1
 8021a7c:	4619      	mov	r1, r3
 8021a7e:	e7e8      	b.n	8021a52 <round+0x5a>
 8021a80:	000fffff 	.word	0x000fffff

08021a84 <roundf>:
 8021a84:	ee10 0a10 	vmov	r0, s0
 8021a88:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8021a8c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8021a90:	2a16      	cmp	r2, #22
 8021a92:	dc15      	bgt.n	8021ac0 <roundf+0x3c>
 8021a94:	2a00      	cmp	r2, #0
 8021a96:	da08      	bge.n	8021aaa <roundf+0x26>
 8021a98:	3201      	adds	r2, #1
 8021a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8021a9e:	d101      	bne.n	8021aa4 <roundf+0x20>
 8021aa0:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8021aa4:	ee00 3a10 	vmov	s0, r3
 8021aa8:	4770      	bx	lr
 8021aaa:	4908      	ldr	r1, [pc, #32]	; (8021acc <roundf+0x48>)
 8021aac:	4111      	asrs	r1, r2
 8021aae:	4208      	tst	r0, r1
 8021ab0:	d0fa      	beq.n	8021aa8 <roundf+0x24>
 8021ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8021ab6:	4113      	asrs	r3, r2
 8021ab8:	4403      	add	r3, r0
 8021aba:	ea23 0301 	bic.w	r3, r3, r1
 8021abe:	e7f1      	b.n	8021aa4 <roundf+0x20>
 8021ac0:	2a80      	cmp	r2, #128	; 0x80
 8021ac2:	d1f1      	bne.n	8021aa8 <roundf+0x24>
 8021ac4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8021ac8:	4770      	bx	lr
 8021aca:	bf00      	nop
 8021acc:	007fffff 	.word	0x007fffff

08021ad0 <abort>:
 8021ad0:	b508      	push	{r3, lr}
 8021ad2:	2006      	movs	r0, #6
 8021ad4:	f000 fc86 	bl	80223e4 <raise>
 8021ad8:	2001      	movs	r0, #1
 8021ada:	f7e0 fc83 	bl	80023e4 <_exit>
	...

08021ae0 <__assert_func>:
 8021ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021ae2:	4614      	mov	r4, r2
 8021ae4:	461a      	mov	r2, r3
 8021ae6:	4b09      	ldr	r3, [pc, #36]	; (8021b0c <__assert_func+0x2c>)
 8021ae8:	681b      	ldr	r3, [r3, #0]
 8021aea:	4605      	mov	r5, r0
 8021aec:	68d8      	ldr	r0, [r3, #12]
 8021aee:	b14c      	cbz	r4, 8021b04 <__assert_func+0x24>
 8021af0:	4b07      	ldr	r3, [pc, #28]	; (8021b10 <__assert_func+0x30>)
 8021af2:	9100      	str	r1, [sp, #0]
 8021af4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021af8:	4906      	ldr	r1, [pc, #24]	; (8021b14 <__assert_func+0x34>)
 8021afa:	462b      	mov	r3, r5
 8021afc:	f000 f81a 	bl	8021b34 <fiprintf>
 8021b00:	f7ff ffe6 	bl	8021ad0 <abort>
 8021b04:	4b04      	ldr	r3, [pc, #16]	; (8021b18 <__assert_func+0x38>)
 8021b06:	461c      	mov	r4, r3
 8021b08:	e7f3      	b.n	8021af2 <__assert_func+0x12>
 8021b0a:	bf00      	nop
 8021b0c:	20000018 	.word	0x20000018
 8021b10:	080288ac 	.word	0x080288ac
 8021b14:	080288b9 	.word	0x080288b9
 8021b18:	080288e7 	.word	0x080288e7

08021b1c <atexit>:
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	4601      	mov	r1, r0
 8021b20:	461a      	mov	r2, r3
 8021b22:	4618      	mov	r0, r3
 8021b24:	f000 bd6c 	b.w	8022600 <__register_exitproc>

08021b28 <__errno>:
 8021b28:	4b01      	ldr	r3, [pc, #4]	; (8021b30 <__errno+0x8>)
 8021b2a:	6818      	ldr	r0, [r3, #0]
 8021b2c:	4770      	bx	lr
 8021b2e:	bf00      	nop
 8021b30:	20000018 	.word	0x20000018

08021b34 <fiprintf>:
 8021b34:	b40e      	push	{r1, r2, r3}
 8021b36:	b503      	push	{r0, r1, lr}
 8021b38:	4601      	mov	r1, r0
 8021b3a:	ab03      	add	r3, sp, #12
 8021b3c:	4805      	ldr	r0, [pc, #20]	; (8021b54 <fiprintf+0x20>)
 8021b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021b42:	6800      	ldr	r0, [r0, #0]
 8021b44:	9301      	str	r3, [sp, #4]
 8021b46:	f000 f951 	bl	8021dec <_vfiprintf_r>
 8021b4a:	b002      	add	sp, #8
 8021b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b50:	b003      	add	sp, #12
 8021b52:	4770      	bx	lr
 8021b54:	20000018 	.word	0x20000018

08021b58 <__libc_init_array>:
 8021b58:	b570      	push	{r4, r5, r6, lr}
 8021b5a:	4d0d      	ldr	r5, [pc, #52]	; (8021b90 <__libc_init_array+0x38>)
 8021b5c:	4c0d      	ldr	r4, [pc, #52]	; (8021b94 <__libc_init_array+0x3c>)
 8021b5e:	1b64      	subs	r4, r4, r5
 8021b60:	10a4      	asrs	r4, r4, #2
 8021b62:	2600      	movs	r6, #0
 8021b64:	42a6      	cmp	r6, r4
 8021b66:	d109      	bne.n	8021b7c <__libc_init_array+0x24>
 8021b68:	4d0b      	ldr	r5, [pc, #44]	; (8021b98 <__libc_init_array+0x40>)
 8021b6a:	4c0c      	ldr	r4, [pc, #48]	; (8021b9c <__libc_init_array+0x44>)
 8021b6c:	f001 fa08 	bl	8022f80 <_init>
 8021b70:	1b64      	subs	r4, r4, r5
 8021b72:	10a4      	asrs	r4, r4, #2
 8021b74:	2600      	movs	r6, #0
 8021b76:	42a6      	cmp	r6, r4
 8021b78:	d105      	bne.n	8021b86 <__libc_init_array+0x2e>
 8021b7a:	bd70      	pop	{r4, r5, r6, pc}
 8021b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b80:	4798      	blx	r3
 8021b82:	3601      	adds	r6, #1
 8021b84:	e7ee      	b.n	8021b64 <__libc_init_array+0xc>
 8021b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8021b8a:	4798      	blx	r3
 8021b8c:	3601      	adds	r6, #1
 8021b8e:	e7f2      	b.n	8021b76 <__libc_init_array+0x1e>
 8021b90:	08028988 	.word	0x08028988
 8021b94:	08028988 	.word	0x08028988
 8021b98:	08028988 	.word	0x08028988
 8021b9c:	0802898c 	.word	0x0802898c

08021ba0 <__retarget_lock_init_recursive>:
 8021ba0:	4770      	bx	lr

08021ba2 <__retarget_lock_acquire_recursive>:
 8021ba2:	4770      	bx	lr

08021ba4 <__retarget_lock_release>:
 8021ba4:	4770      	bx	lr

08021ba6 <__retarget_lock_release_recursive>:
 8021ba6:	4770      	bx	lr

08021ba8 <malloc>:
 8021ba8:	4b02      	ldr	r3, [pc, #8]	; (8021bb4 <malloc+0xc>)
 8021baa:	4601      	mov	r1, r0
 8021bac:	6818      	ldr	r0, [r3, #0]
 8021bae:	f000 b899 	b.w	8021ce4 <_malloc_r>
 8021bb2:	bf00      	nop
 8021bb4:	20000018 	.word	0x20000018

08021bb8 <free>:
 8021bb8:	4b02      	ldr	r3, [pc, #8]	; (8021bc4 <free+0xc>)
 8021bba:	4601      	mov	r1, r0
 8021bbc:	6818      	ldr	r0, [r3, #0]
 8021bbe:	f000 b841 	b.w	8021c44 <_free_r>
 8021bc2:	bf00      	nop
 8021bc4:	20000018 	.word	0x20000018

08021bc8 <memcmp>:
 8021bc8:	b530      	push	{r4, r5, lr}
 8021bca:	3901      	subs	r1, #1
 8021bcc:	2400      	movs	r4, #0
 8021bce:	42a2      	cmp	r2, r4
 8021bd0:	d101      	bne.n	8021bd6 <memcmp+0xe>
 8021bd2:	2000      	movs	r0, #0
 8021bd4:	e005      	b.n	8021be2 <memcmp+0x1a>
 8021bd6:	5d03      	ldrb	r3, [r0, r4]
 8021bd8:	3401      	adds	r4, #1
 8021bda:	5d0d      	ldrb	r5, [r1, r4]
 8021bdc:	42ab      	cmp	r3, r5
 8021bde:	d0f6      	beq.n	8021bce <memcmp+0x6>
 8021be0:	1b58      	subs	r0, r3, r5
 8021be2:	bd30      	pop	{r4, r5, pc}

08021be4 <memcpy>:
 8021be4:	440a      	add	r2, r1
 8021be6:	4291      	cmp	r1, r2
 8021be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8021bec:	d100      	bne.n	8021bf0 <memcpy+0xc>
 8021bee:	4770      	bx	lr
 8021bf0:	b510      	push	{r4, lr}
 8021bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021bfa:	4291      	cmp	r1, r2
 8021bfc:	d1f9      	bne.n	8021bf2 <memcpy+0xe>
 8021bfe:	bd10      	pop	{r4, pc}

08021c00 <memmove>:
 8021c00:	4288      	cmp	r0, r1
 8021c02:	b510      	push	{r4, lr}
 8021c04:	eb01 0402 	add.w	r4, r1, r2
 8021c08:	d902      	bls.n	8021c10 <memmove+0x10>
 8021c0a:	4284      	cmp	r4, r0
 8021c0c:	4623      	mov	r3, r4
 8021c0e:	d807      	bhi.n	8021c20 <memmove+0x20>
 8021c10:	1e43      	subs	r3, r0, #1
 8021c12:	42a1      	cmp	r1, r4
 8021c14:	d008      	beq.n	8021c28 <memmove+0x28>
 8021c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021c1e:	e7f8      	b.n	8021c12 <memmove+0x12>
 8021c20:	4402      	add	r2, r0
 8021c22:	4601      	mov	r1, r0
 8021c24:	428a      	cmp	r2, r1
 8021c26:	d100      	bne.n	8021c2a <memmove+0x2a>
 8021c28:	bd10      	pop	{r4, pc}
 8021c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021c32:	e7f7      	b.n	8021c24 <memmove+0x24>

08021c34 <memset>:
 8021c34:	4402      	add	r2, r0
 8021c36:	4603      	mov	r3, r0
 8021c38:	4293      	cmp	r3, r2
 8021c3a:	d100      	bne.n	8021c3e <memset+0xa>
 8021c3c:	4770      	bx	lr
 8021c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8021c42:	e7f9      	b.n	8021c38 <memset+0x4>

08021c44 <_free_r>:
 8021c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c46:	2900      	cmp	r1, #0
 8021c48:	d048      	beq.n	8021cdc <_free_r+0x98>
 8021c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021c4e:	9001      	str	r0, [sp, #4]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	f1a1 0404 	sub.w	r4, r1, #4
 8021c56:	bfb8      	it	lt
 8021c58:	18e4      	addlt	r4, r4, r3
 8021c5a:	f000 ff4f 	bl	8022afc <__malloc_lock>
 8021c5e:	4a20      	ldr	r2, [pc, #128]	; (8021ce0 <_free_r+0x9c>)
 8021c60:	9801      	ldr	r0, [sp, #4]
 8021c62:	6813      	ldr	r3, [r2, #0]
 8021c64:	4615      	mov	r5, r2
 8021c66:	b933      	cbnz	r3, 8021c76 <_free_r+0x32>
 8021c68:	6063      	str	r3, [r4, #4]
 8021c6a:	6014      	str	r4, [r2, #0]
 8021c6c:	b003      	add	sp, #12
 8021c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021c72:	f000 bf49 	b.w	8022b08 <__malloc_unlock>
 8021c76:	42a3      	cmp	r3, r4
 8021c78:	d90b      	bls.n	8021c92 <_free_r+0x4e>
 8021c7a:	6821      	ldr	r1, [r4, #0]
 8021c7c:	1862      	adds	r2, r4, r1
 8021c7e:	4293      	cmp	r3, r2
 8021c80:	bf04      	itt	eq
 8021c82:	681a      	ldreq	r2, [r3, #0]
 8021c84:	685b      	ldreq	r3, [r3, #4]
 8021c86:	6063      	str	r3, [r4, #4]
 8021c88:	bf04      	itt	eq
 8021c8a:	1852      	addeq	r2, r2, r1
 8021c8c:	6022      	streq	r2, [r4, #0]
 8021c8e:	602c      	str	r4, [r5, #0]
 8021c90:	e7ec      	b.n	8021c6c <_free_r+0x28>
 8021c92:	461a      	mov	r2, r3
 8021c94:	685b      	ldr	r3, [r3, #4]
 8021c96:	b10b      	cbz	r3, 8021c9c <_free_r+0x58>
 8021c98:	42a3      	cmp	r3, r4
 8021c9a:	d9fa      	bls.n	8021c92 <_free_r+0x4e>
 8021c9c:	6811      	ldr	r1, [r2, #0]
 8021c9e:	1855      	adds	r5, r2, r1
 8021ca0:	42a5      	cmp	r5, r4
 8021ca2:	d10b      	bne.n	8021cbc <_free_r+0x78>
 8021ca4:	6824      	ldr	r4, [r4, #0]
 8021ca6:	4421      	add	r1, r4
 8021ca8:	1854      	adds	r4, r2, r1
 8021caa:	42a3      	cmp	r3, r4
 8021cac:	6011      	str	r1, [r2, #0]
 8021cae:	d1dd      	bne.n	8021c6c <_free_r+0x28>
 8021cb0:	681c      	ldr	r4, [r3, #0]
 8021cb2:	685b      	ldr	r3, [r3, #4]
 8021cb4:	6053      	str	r3, [r2, #4]
 8021cb6:	4421      	add	r1, r4
 8021cb8:	6011      	str	r1, [r2, #0]
 8021cba:	e7d7      	b.n	8021c6c <_free_r+0x28>
 8021cbc:	d902      	bls.n	8021cc4 <_free_r+0x80>
 8021cbe:	230c      	movs	r3, #12
 8021cc0:	6003      	str	r3, [r0, #0]
 8021cc2:	e7d3      	b.n	8021c6c <_free_r+0x28>
 8021cc4:	6825      	ldr	r5, [r4, #0]
 8021cc6:	1961      	adds	r1, r4, r5
 8021cc8:	428b      	cmp	r3, r1
 8021cca:	bf04      	itt	eq
 8021ccc:	6819      	ldreq	r1, [r3, #0]
 8021cce:	685b      	ldreq	r3, [r3, #4]
 8021cd0:	6063      	str	r3, [r4, #4]
 8021cd2:	bf04      	itt	eq
 8021cd4:	1949      	addeq	r1, r1, r5
 8021cd6:	6021      	streq	r1, [r4, #0]
 8021cd8:	6054      	str	r4, [r2, #4]
 8021cda:	e7c7      	b.n	8021c6c <_free_r+0x28>
 8021cdc:	b003      	add	sp, #12
 8021cde:	bd30      	pop	{r4, r5, pc}
 8021ce0:	20000464 	.word	0x20000464

08021ce4 <_malloc_r>:
 8021ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ce6:	1ccd      	adds	r5, r1, #3
 8021ce8:	f025 0503 	bic.w	r5, r5, #3
 8021cec:	3508      	adds	r5, #8
 8021cee:	2d0c      	cmp	r5, #12
 8021cf0:	bf38      	it	cc
 8021cf2:	250c      	movcc	r5, #12
 8021cf4:	2d00      	cmp	r5, #0
 8021cf6:	4606      	mov	r6, r0
 8021cf8:	db01      	blt.n	8021cfe <_malloc_r+0x1a>
 8021cfa:	42a9      	cmp	r1, r5
 8021cfc:	d903      	bls.n	8021d06 <_malloc_r+0x22>
 8021cfe:	230c      	movs	r3, #12
 8021d00:	6033      	str	r3, [r6, #0]
 8021d02:	2000      	movs	r0, #0
 8021d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d06:	f000 fef9 	bl	8022afc <__malloc_lock>
 8021d0a:	4921      	ldr	r1, [pc, #132]	; (8021d90 <_malloc_r+0xac>)
 8021d0c:	680a      	ldr	r2, [r1, #0]
 8021d0e:	4614      	mov	r4, r2
 8021d10:	b99c      	cbnz	r4, 8021d3a <_malloc_r+0x56>
 8021d12:	4f20      	ldr	r7, [pc, #128]	; (8021d94 <_malloc_r+0xb0>)
 8021d14:	683b      	ldr	r3, [r7, #0]
 8021d16:	b923      	cbnz	r3, 8021d22 <_malloc_r+0x3e>
 8021d18:	4621      	mov	r1, r4
 8021d1a:	4630      	mov	r0, r6
 8021d1c:	f000 fb2a 	bl	8022374 <_sbrk_r>
 8021d20:	6038      	str	r0, [r7, #0]
 8021d22:	4629      	mov	r1, r5
 8021d24:	4630      	mov	r0, r6
 8021d26:	f000 fb25 	bl	8022374 <_sbrk_r>
 8021d2a:	1c43      	adds	r3, r0, #1
 8021d2c:	d123      	bne.n	8021d76 <_malloc_r+0x92>
 8021d2e:	230c      	movs	r3, #12
 8021d30:	6033      	str	r3, [r6, #0]
 8021d32:	4630      	mov	r0, r6
 8021d34:	f000 fee8 	bl	8022b08 <__malloc_unlock>
 8021d38:	e7e3      	b.n	8021d02 <_malloc_r+0x1e>
 8021d3a:	6823      	ldr	r3, [r4, #0]
 8021d3c:	1b5b      	subs	r3, r3, r5
 8021d3e:	d417      	bmi.n	8021d70 <_malloc_r+0x8c>
 8021d40:	2b0b      	cmp	r3, #11
 8021d42:	d903      	bls.n	8021d4c <_malloc_r+0x68>
 8021d44:	6023      	str	r3, [r4, #0]
 8021d46:	441c      	add	r4, r3
 8021d48:	6025      	str	r5, [r4, #0]
 8021d4a:	e004      	b.n	8021d56 <_malloc_r+0x72>
 8021d4c:	6863      	ldr	r3, [r4, #4]
 8021d4e:	42a2      	cmp	r2, r4
 8021d50:	bf0c      	ite	eq
 8021d52:	600b      	streq	r3, [r1, #0]
 8021d54:	6053      	strne	r3, [r2, #4]
 8021d56:	4630      	mov	r0, r6
 8021d58:	f000 fed6 	bl	8022b08 <__malloc_unlock>
 8021d5c:	f104 000b 	add.w	r0, r4, #11
 8021d60:	1d23      	adds	r3, r4, #4
 8021d62:	f020 0007 	bic.w	r0, r0, #7
 8021d66:	1ac2      	subs	r2, r0, r3
 8021d68:	d0cc      	beq.n	8021d04 <_malloc_r+0x20>
 8021d6a:	1a1b      	subs	r3, r3, r0
 8021d6c:	50a3      	str	r3, [r4, r2]
 8021d6e:	e7c9      	b.n	8021d04 <_malloc_r+0x20>
 8021d70:	4622      	mov	r2, r4
 8021d72:	6864      	ldr	r4, [r4, #4]
 8021d74:	e7cc      	b.n	8021d10 <_malloc_r+0x2c>
 8021d76:	1cc4      	adds	r4, r0, #3
 8021d78:	f024 0403 	bic.w	r4, r4, #3
 8021d7c:	42a0      	cmp	r0, r4
 8021d7e:	d0e3      	beq.n	8021d48 <_malloc_r+0x64>
 8021d80:	1a21      	subs	r1, r4, r0
 8021d82:	4630      	mov	r0, r6
 8021d84:	f000 faf6 	bl	8022374 <_sbrk_r>
 8021d88:	3001      	adds	r0, #1
 8021d8a:	d1dd      	bne.n	8021d48 <_malloc_r+0x64>
 8021d8c:	e7cf      	b.n	8021d2e <_malloc_r+0x4a>
 8021d8e:	bf00      	nop
 8021d90:	20000464 	.word	0x20000464
 8021d94:	20000468 	.word	0x20000468

08021d98 <__sfputc_r>:
 8021d98:	6893      	ldr	r3, [r2, #8]
 8021d9a:	3b01      	subs	r3, #1
 8021d9c:	2b00      	cmp	r3, #0
 8021d9e:	b410      	push	{r4}
 8021da0:	6093      	str	r3, [r2, #8]
 8021da2:	da08      	bge.n	8021db6 <__sfputc_r+0x1e>
 8021da4:	6994      	ldr	r4, [r2, #24]
 8021da6:	42a3      	cmp	r3, r4
 8021da8:	db01      	blt.n	8021dae <__sfputc_r+0x16>
 8021daa:	290a      	cmp	r1, #10
 8021dac:	d103      	bne.n	8021db6 <__sfputc_r+0x1e>
 8021dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021db2:	f000 bb65 	b.w	8022480 <__swbuf_r>
 8021db6:	6813      	ldr	r3, [r2, #0]
 8021db8:	1c58      	adds	r0, r3, #1
 8021dba:	6010      	str	r0, [r2, #0]
 8021dbc:	7019      	strb	r1, [r3, #0]
 8021dbe:	4608      	mov	r0, r1
 8021dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021dc4:	4770      	bx	lr

08021dc6 <__sfputs_r>:
 8021dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021dc8:	4606      	mov	r6, r0
 8021dca:	460f      	mov	r7, r1
 8021dcc:	4614      	mov	r4, r2
 8021dce:	18d5      	adds	r5, r2, r3
 8021dd0:	42ac      	cmp	r4, r5
 8021dd2:	d101      	bne.n	8021dd8 <__sfputs_r+0x12>
 8021dd4:	2000      	movs	r0, #0
 8021dd6:	e007      	b.n	8021de8 <__sfputs_r+0x22>
 8021dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ddc:	463a      	mov	r2, r7
 8021dde:	4630      	mov	r0, r6
 8021de0:	f7ff ffda 	bl	8021d98 <__sfputc_r>
 8021de4:	1c43      	adds	r3, r0, #1
 8021de6:	d1f3      	bne.n	8021dd0 <__sfputs_r+0xa>
 8021de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021dec <_vfiprintf_r>:
 8021dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021df0:	460d      	mov	r5, r1
 8021df2:	b09d      	sub	sp, #116	; 0x74
 8021df4:	4614      	mov	r4, r2
 8021df6:	4698      	mov	r8, r3
 8021df8:	4606      	mov	r6, r0
 8021dfa:	b118      	cbz	r0, 8021e04 <_vfiprintf_r+0x18>
 8021dfc:	6983      	ldr	r3, [r0, #24]
 8021dfe:	b90b      	cbnz	r3, 8021e04 <_vfiprintf_r+0x18>
 8021e00:	f000 fd7a 	bl	80228f8 <__sinit>
 8021e04:	4b89      	ldr	r3, [pc, #548]	; (802202c <_vfiprintf_r+0x240>)
 8021e06:	429d      	cmp	r5, r3
 8021e08:	d11b      	bne.n	8021e42 <_vfiprintf_r+0x56>
 8021e0a:	6875      	ldr	r5, [r6, #4]
 8021e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e0e:	07d9      	lsls	r1, r3, #31
 8021e10:	d405      	bmi.n	8021e1e <_vfiprintf_r+0x32>
 8021e12:	89ab      	ldrh	r3, [r5, #12]
 8021e14:	059a      	lsls	r2, r3, #22
 8021e16:	d402      	bmi.n	8021e1e <_vfiprintf_r+0x32>
 8021e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e1a:	f7ff fec2 	bl	8021ba2 <__retarget_lock_acquire_recursive>
 8021e1e:	89ab      	ldrh	r3, [r5, #12]
 8021e20:	071b      	lsls	r3, r3, #28
 8021e22:	d501      	bpl.n	8021e28 <_vfiprintf_r+0x3c>
 8021e24:	692b      	ldr	r3, [r5, #16]
 8021e26:	b9eb      	cbnz	r3, 8021e64 <_vfiprintf_r+0x78>
 8021e28:	4629      	mov	r1, r5
 8021e2a:	4630      	mov	r0, r6
 8021e2c:	f000 fb7a 	bl	8022524 <__swsetup_r>
 8021e30:	b1c0      	cbz	r0, 8021e64 <_vfiprintf_r+0x78>
 8021e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021e34:	07dc      	lsls	r4, r3, #31
 8021e36:	d50e      	bpl.n	8021e56 <_vfiprintf_r+0x6a>
 8021e38:	f04f 30ff 	mov.w	r0, #4294967295
 8021e3c:	b01d      	add	sp, #116	; 0x74
 8021e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e42:	4b7b      	ldr	r3, [pc, #492]	; (8022030 <_vfiprintf_r+0x244>)
 8021e44:	429d      	cmp	r5, r3
 8021e46:	d101      	bne.n	8021e4c <_vfiprintf_r+0x60>
 8021e48:	68b5      	ldr	r5, [r6, #8]
 8021e4a:	e7df      	b.n	8021e0c <_vfiprintf_r+0x20>
 8021e4c:	4b79      	ldr	r3, [pc, #484]	; (8022034 <_vfiprintf_r+0x248>)
 8021e4e:	429d      	cmp	r5, r3
 8021e50:	bf08      	it	eq
 8021e52:	68f5      	ldreq	r5, [r6, #12]
 8021e54:	e7da      	b.n	8021e0c <_vfiprintf_r+0x20>
 8021e56:	89ab      	ldrh	r3, [r5, #12]
 8021e58:	0598      	lsls	r0, r3, #22
 8021e5a:	d4ed      	bmi.n	8021e38 <_vfiprintf_r+0x4c>
 8021e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e5e:	f7ff fea2 	bl	8021ba6 <__retarget_lock_release_recursive>
 8021e62:	e7e9      	b.n	8021e38 <_vfiprintf_r+0x4c>
 8021e64:	2300      	movs	r3, #0
 8021e66:	9309      	str	r3, [sp, #36]	; 0x24
 8021e68:	2320      	movs	r3, #32
 8021e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021e72:	2330      	movs	r3, #48	; 0x30
 8021e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022038 <_vfiprintf_r+0x24c>
 8021e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021e7c:	f04f 0901 	mov.w	r9, #1
 8021e80:	4623      	mov	r3, r4
 8021e82:	469a      	mov	sl, r3
 8021e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e88:	b10a      	cbz	r2, 8021e8e <_vfiprintf_r+0xa2>
 8021e8a:	2a25      	cmp	r2, #37	; 0x25
 8021e8c:	d1f9      	bne.n	8021e82 <_vfiprintf_r+0x96>
 8021e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8021e92:	d00b      	beq.n	8021eac <_vfiprintf_r+0xc0>
 8021e94:	465b      	mov	r3, fp
 8021e96:	4622      	mov	r2, r4
 8021e98:	4629      	mov	r1, r5
 8021e9a:	4630      	mov	r0, r6
 8021e9c:	f7ff ff93 	bl	8021dc6 <__sfputs_r>
 8021ea0:	3001      	adds	r0, #1
 8021ea2:	f000 80aa 	beq.w	8021ffa <_vfiprintf_r+0x20e>
 8021ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ea8:	445a      	add	r2, fp
 8021eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8021eac:	f89a 3000 	ldrb.w	r3, [sl]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	f000 80a2 	beq.w	8021ffa <_vfiprintf_r+0x20e>
 8021eb6:	2300      	movs	r3, #0
 8021eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8021ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021ec0:	f10a 0a01 	add.w	sl, sl, #1
 8021ec4:	9304      	str	r3, [sp, #16]
 8021ec6:	9307      	str	r3, [sp, #28]
 8021ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8021ece:	4654      	mov	r4, sl
 8021ed0:	2205      	movs	r2, #5
 8021ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ed6:	4858      	ldr	r0, [pc, #352]	; (8022038 <_vfiprintf_r+0x24c>)
 8021ed8:	f7de f992 	bl	8000200 <memchr>
 8021edc:	9a04      	ldr	r2, [sp, #16]
 8021ede:	b9d8      	cbnz	r0, 8021f18 <_vfiprintf_r+0x12c>
 8021ee0:	06d1      	lsls	r1, r2, #27
 8021ee2:	bf44      	itt	mi
 8021ee4:	2320      	movmi	r3, #32
 8021ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021eea:	0713      	lsls	r3, r2, #28
 8021eec:	bf44      	itt	mi
 8021eee:	232b      	movmi	r3, #43	; 0x2b
 8021ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8021ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8021efa:	d015      	beq.n	8021f28 <_vfiprintf_r+0x13c>
 8021efc:	9a07      	ldr	r2, [sp, #28]
 8021efe:	4654      	mov	r4, sl
 8021f00:	2000      	movs	r0, #0
 8021f02:	f04f 0c0a 	mov.w	ip, #10
 8021f06:	4621      	mov	r1, r4
 8021f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021f0c:	3b30      	subs	r3, #48	; 0x30
 8021f0e:	2b09      	cmp	r3, #9
 8021f10:	d94e      	bls.n	8021fb0 <_vfiprintf_r+0x1c4>
 8021f12:	b1b0      	cbz	r0, 8021f42 <_vfiprintf_r+0x156>
 8021f14:	9207      	str	r2, [sp, #28]
 8021f16:	e014      	b.n	8021f42 <_vfiprintf_r+0x156>
 8021f18:	eba0 0308 	sub.w	r3, r0, r8
 8021f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8021f20:	4313      	orrs	r3, r2
 8021f22:	9304      	str	r3, [sp, #16]
 8021f24:	46a2      	mov	sl, r4
 8021f26:	e7d2      	b.n	8021ece <_vfiprintf_r+0xe2>
 8021f28:	9b03      	ldr	r3, [sp, #12]
 8021f2a:	1d19      	adds	r1, r3, #4
 8021f2c:	681b      	ldr	r3, [r3, #0]
 8021f2e:	9103      	str	r1, [sp, #12]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	bfbb      	ittet	lt
 8021f34:	425b      	neglt	r3, r3
 8021f36:	f042 0202 	orrlt.w	r2, r2, #2
 8021f3a:	9307      	strge	r3, [sp, #28]
 8021f3c:	9307      	strlt	r3, [sp, #28]
 8021f3e:	bfb8      	it	lt
 8021f40:	9204      	strlt	r2, [sp, #16]
 8021f42:	7823      	ldrb	r3, [r4, #0]
 8021f44:	2b2e      	cmp	r3, #46	; 0x2e
 8021f46:	d10c      	bne.n	8021f62 <_vfiprintf_r+0x176>
 8021f48:	7863      	ldrb	r3, [r4, #1]
 8021f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8021f4c:	d135      	bne.n	8021fba <_vfiprintf_r+0x1ce>
 8021f4e:	9b03      	ldr	r3, [sp, #12]
 8021f50:	1d1a      	adds	r2, r3, #4
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	9203      	str	r2, [sp, #12]
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	bfb8      	it	lt
 8021f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8021f5e:	3402      	adds	r4, #2
 8021f60:	9305      	str	r3, [sp, #20]
 8021f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022048 <_vfiprintf_r+0x25c>
 8021f66:	7821      	ldrb	r1, [r4, #0]
 8021f68:	2203      	movs	r2, #3
 8021f6a:	4650      	mov	r0, sl
 8021f6c:	f7de f948 	bl	8000200 <memchr>
 8021f70:	b140      	cbz	r0, 8021f84 <_vfiprintf_r+0x198>
 8021f72:	2340      	movs	r3, #64	; 0x40
 8021f74:	eba0 000a 	sub.w	r0, r0, sl
 8021f78:	fa03 f000 	lsl.w	r0, r3, r0
 8021f7c:	9b04      	ldr	r3, [sp, #16]
 8021f7e:	4303      	orrs	r3, r0
 8021f80:	3401      	adds	r4, #1
 8021f82:	9304      	str	r3, [sp, #16]
 8021f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f88:	482c      	ldr	r0, [pc, #176]	; (802203c <_vfiprintf_r+0x250>)
 8021f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f8e:	2206      	movs	r2, #6
 8021f90:	f7de f936 	bl	8000200 <memchr>
 8021f94:	2800      	cmp	r0, #0
 8021f96:	d03f      	beq.n	8022018 <_vfiprintf_r+0x22c>
 8021f98:	4b29      	ldr	r3, [pc, #164]	; (8022040 <_vfiprintf_r+0x254>)
 8021f9a:	bb1b      	cbnz	r3, 8021fe4 <_vfiprintf_r+0x1f8>
 8021f9c:	9b03      	ldr	r3, [sp, #12]
 8021f9e:	3307      	adds	r3, #7
 8021fa0:	f023 0307 	bic.w	r3, r3, #7
 8021fa4:	3308      	adds	r3, #8
 8021fa6:	9303      	str	r3, [sp, #12]
 8021fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021faa:	443b      	add	r3, r7
 8021fac:	9309      	str	r3, [sp, #36]	; 0x24
 8021fae:	e767      	b.n	8021e80 <_vfiprintf_r+0x94>
 8021fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8021fb4:	460c      	mov	r4, r1
 8021fb6:	2001      	movs	r0, #1
 8021fb8:	e7a5      	b.n	8021f06 <_vfiprintf_r+0x11a>
 8021fba:	2300      	movs	r3, #0
 8021fbc:	3401      	adds	r4, #1
 8021fbe:	9305      	str	r3, [sp, #20]
 8021fc0:	4619      	mov	r1, r3
 8021fc2:	f04f 0c0a 	mov.w	ip, #10
 8021fc6:	4620      	mov	r0, r4
 8021fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021fcc:	3a30      	subs	r2, #48	; 0x30
 8021fce:	2a09      	cmp	r2, #9
 8021fd0:	d903      	bls.n	8021fda <_vfiprintf_r+0x1ee>
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	d0c5      	beq.n	8021f62 <_vfiprintf_r+0x176>
 8021fd6:	9105      	str	r1, [sp, #20]
 8021fd8:	e7c3      	b.n	8021f62 <_vfiprintf_r+0x176>
 8021fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8021fde:	4604      	mov	r4, r0
 8021fe0:	2301      	movs	r3, #1
 8021fe2:	e7f0      	b.n	8021fc6 <_vfiprintf_r+0x1da>
 8021fe4:	ab03      	add	r3, sp, #12
 8021fe6:	9300      	str	r3, [sp, #0]
 8021fe8:	462a      	mov	r2, r5
 8021fea:	4b16      	ldr	r3, [pc, #88]	; (8022044 <_vfiprintf_r+0x258>)
 8021fec:	a904      	add	r1, sp, #16
 8021fee:	4630      	mov	r0, r6
 8021ff0:	f3af 8000 	nop.w
 8021ff4:	4607      	mov	r7, r0
 8021ff6:	1c78      	adds	r0, r7, #1
 8021ff8:	d1d6      	bne.n	8021fa8 <_vfiprintf_r+0x1bc>
 8021ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021ffc:	07d9      	lsls	r1, r3, #31
 8021ffe:	d405      	bmi.n	802200c <_vfiprintf_r+0x220>
 8022000:	89ab      	ldrh	r3, [r5, #12]
 8022002:	059a      	lsls	r2, r3, #22
 8022004:	d402      	bmi.n	802200c <_vfiprintf_r+0x220>
 8022006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022008:	f7ff fdcd 	bl	8021ba6 <__retarget_lock_release_recursive>
 802200c:	89ab      	ldrh	r3, [r5, #12]
 802200e:	065b      	lsls	r3, r3, #25
 8022010:	f53f af12 	bmi.w	8021e38 <_vfiprintf_r+0x4c>
 8022014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022016:	e711      	b.n	8021e3c <_vfiprintf_r+0x50>
 8022018:	ab03      	add	r3, sp, #12
 802201a:	9300      	str	r3, [sp, #0]
 802201c:	462a      	mov	r2, r5
 802201e:	4b09      	ldr	r3, [pc, #36]	; (8022044 <_vfiprintf_r+0x258>)
 8022020:	a904      	add	r1, sp, #16
 8022022:	4630      	mov	r0, r6
 8022024:	f000 f880 	bl	8022128 <_printf_i>
 8022028:	e7e4      	b.n	8021ff4 <_vfiprintf_r+0x208>
 802202a:	bf00      	nop
 802202c:	08028940 	.word	0x08028940
 8022030:	08028960 	.word	0x08028960
 8022034:	08028920 	.word	0x08028920
 8022038:	080288ec 	.word	0x080288ec
 802203c:	080288f6 	.word	0x080288f6
 8022040:	00000000 	.word	0x00000000
 8022044:	08021dc7 	.word	0x08021dc7
 8022048:	080288f2 	.word	0x080288f2

0802204c <_printf_common>:
 802204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022050:	4616      	mov	r6, r2
 8022052:	4699      	mov	r9, r3
 8022054:	688a      	ldr	r2, [r1, #8]
 8022056:	690b      	ldr	r3, [r1, #16]
 8022058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802205c:	4293      	cmp	r3, r2
 802205e:	bfb8      	it	lt
 8022060:	4613      	movlt	r3, r2
 8022062:	6033      	str	r3, [r6, #0]
 8022064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022068:	4607      	mov	r7, r0
 802206a:	460c      	mov	r4, r1
 802206c:	b10a      	cbz	r2, 8022072 <_printf_common+0x26>
 802206e:	3301      	adds	r3, #1
 8022070:	6033      	str	r3, [r6, #0]
 8022072:	6823      	ldr	r3, [r4, #0]
 8022074:	0699      	lsls	r1, r3, #26
 8022076:	bf42      	ittt	mi
 8022078:	6833      	ldrmi	r3, [r6, #0]
 802207a:	3302      	addmi	r3, #2
 802207c:	6033      	strmi	r3, [r6, #0]
 802207e:	6825      	ldr	r5, [r4, #0]
 8022080:	f015 0506 	ands.w	r5, r5, #6
 8022084:	d106      	bne.n	8022094 <_printf_common+0x48>
 8022086:	f104 0a19 	add.w	sl, r4, #25
 802208a:	68e3      	ldr	r3, [r4, #12]
 802208c:	6832      	ldr	r2, [r6, #0]
 802208e:	1a9b      	subs	r3, r3, r2
 8022090:	42ab      	cmp	r3, r5
 8022092:	dc26      	bgt.n	80220e2 <_printf_common+0x96>
 8022094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022098:	1e13      	subs	r3, r2, #0
 802209a:	6822      	ldr	r2, [r4, #0]
 802209c:	bf18      	it	ne
 802209e:	2301      	movne	r3, #1
 80220a0:	0692      	lsls	r2, r2, #26
 80220a2:	d42b      	bmi.n	80220fc <_printf_common+0xb0>
 80220a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80220a8:	4649      	mov	r1, r9
 80220aa:	4638      	mov	r0, r7
 80220ac:	47c0      	blx	r8
 80220ae:	3001      	adds	r0, #1
 80220b0:	d01e      	beq.n	80220f0 <_printf_common+0xa4>
 80220b2:	6823      	ldr	r3, [r4, #0]
 80220b4:	68e5      	ldr	r5, [r4, #12]
 80220b6:	6832      	ldr	r2, [r6, #0]
 80220b8:	f003 0306 	and.w	r3, r3, #6
 80220bc:	2b04      	cmp	r3, #4
 80220be:	bf08      	it	eq
 80220c0:	1aad      	subeq	r5, r5, r2
 80220c2:	68a3      	ldr	r3, [r4, #8]
 80220c4:	6922      	ldr	r2, [r4, #16]
 80220c6:	bf0c      	ite	eq
 80220c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80220cc:	2500      	movne	r5, #0
 80220ce:	4293      	cmp	r3, r2
 80220d0:	bfc4      	itt	gt
 80220d2:	1a9b      	subgt	r3, r3, r2
 80220d4:	18ed      	addgt	r5, r5, r3
 80220d6:	2600      	movs	r6, #0
 80220d8:	341a      	adds	r4, #26
 80220da:	42b5      	cmp	r5, r6
 80220dc:	d11a      	bne.n	8022114 <_printf_common+0xc8>
 80220de:	2000      	movs	r0, #0
 80220e0:	e008      	b.n	80220f4 <_printf_common+0xa8>
 80220e2:	2301      	movs	r3, #1
 80220e4:	4652      	mov	r2, sl
 80220e6:	4649      	mov	r1, r9
 80220e8:	4638      	mov	r0, r7
 80220ea:	47c0      	blx	r8
 80220ec:	3001      	adds	r0, #1
 80220ee:	d103      	bne.n	80220f8 <_printf_common+0xac>
 80220f0:	f04f 30ff 	mov.w	r0, #4294967295
 80220f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220f8:	3501      	adds	r5, #1
 80220fa:	e7c6      	b.n	802208a <_printf_common+0x3e>
 80220fc:	18e1      	adds	r1, r4, r3
 80220fe:	1c5a      	adds	r2, r3, #1
 8022100:	2030      	movs	r0, #48	; 0x30
 8022102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022106:	4422      	add	r2, r4
 8022108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802210c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022110:	3302      	adds	r3, #2
 8022112:	e7c7      	b.n	80220a4 <_printf_common+0x58>
 8022114:	2301      	movs	r3, #1
 8022116:	4622      	mov	r2, r4
 8022118:	4649      	mov	r1, r9
 802211a:	4638      	mov	r0, r7
 802211c:	47c0      	blx	r8
 802211e:	3001      	adds	r0, #1
 8022120:	d0e6      	beq.n	80220f0 <_printf_common+0xa4>
 8022122:	3601      	adds	r6, #1
 8022124:	e7d9      	b.n	80220da <_printf_common+0x8e>
	...

08022128 <_printf_i>:
 8022128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802212c:	460c      	mov	r4, r1
 802212e:	4691      	mov	r9, r2
 8022130:	7e27      	ldrb	r7, [r4, #24]
 8022132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022134:	2f78      	cmp	r7, #120	; 0x78
 8022136:	4680      	mov	r8, r0
 8022138:	469a      	mov	sl, r3
 802213a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802213e:	d807      	bhi.n	8022150 <_printf_i+0x28>
 8022140:	2f62      	cmp	r7, #98	; 0x62
 8022142:	d80a      	bhi.n	802215a <_printf_i+0x32>
 8022144:	2f00      	cmp	r7, #0
 8022146:	f000 80d8 	beq.w	80222fa <_printf_i+0x1d2>
 802214a:	2f58      	cmp	r7, #88	; 0x58
 802214c:	f000 80a3 	beq.w	8022296 <_printf_i+0x16e>
 8022150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022158:	e03a      	b.n	80221d0 <_printf_i+0xa8>
 802215a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802215e:	2b15      	cmp	r3, #21
 8022160:	d8f6      	bhi.n	8022150 <_printf_i+0x28>
 8022162:	a001      	add	r0, pc, #4	; (adr r0, 8022168 <_printf_i+0x40>)
 8022164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022168:	080221c1 	.word	0x080221c1
 802216c:	080221d5 	.word	0x080221d5
 8022170:	08022151 	.word	0x08022151
 8022174:	08022151 	.word	0x08022151
 8022178:	08022151 	.word	0x08022151
 802217c:	08022151 	.word	0x08022151
 8022180:	080221d5 	.word	0x080221d5
 8022184:	08022151 	.word	0x08022151
 8022188:	08022151 	.word	0x08022151
 802218c:	08022151 	.word	0x08022151
 8022190:	08022151 	.word	0x08022151
 8022194:	080222e1 	.word	0x080222e1
 8022198:	08022205 	.word	0x08022205
 802219c:	080222c3 	.word	0x080222c3
 80221a0:	08022151 	.word	0x08022151
 80221a4:	08022151 	.word	0x08022151
 80221a8:	08022303 	.word	0x08022303
 80221ac:	08022151 	.word	0x08022151
 80221b0:	08022205 	.word	0x08022205
 80221b4:	08022151 	.word	0x08022151
 80221b8:	08022151 	.word	0x08022151
 80221bc:	080222cb 	.word	0x080222cb
 80221c0:	680b      	ldr	r3, [r1, #0]
 80221c2:	1d1a      	adds	r2, r3, #4
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	600a      	str	r2, [r1, #0]
 80221c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80221cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80221d0:	2301      	movs	r3, #1
 80221d2:	e0a3      	b.n	802231c <_printf_i+0x1f4>
 80221d4:	6825      	ldr	r5, [r4, #0]
 80221d6:	6808      	ldr	r0, [r1, #0]
 80221d8:	062e      	lsls	r6, r5, #24
 80221da:	f100 0304 	add.w	r3, r0, #4
 80221de:	d50a      	bpl.n	80221f6 <_printf_i+0xce>
 80221e0:	6805      	ldr	r5, [r0, #0]
 80221e2:	600b      	str	r3, [r1, #0]
 80221e4:	2d00      	cmp	r5, #0
 80221e6:	da03      	bge.n	80221f0 <_printf_i+0xc8>
 80221e8:	232d      	movs	r3, #45	; 0x2d
 80221ea:	426d      	negs	r5, r5
 80221ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80221f0:	485e      	ldr	r0, [pc, #376]	; (802236c <_printf_i+0x244>)
 80221f2:	230a      	movs	r3, #10
 80221f4:	e019      	b.n	802222a <_printf_i+0x102>
 80221f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80221fa:	6805      	ldr	r5, [r0, #0]
 80221fc:	600b      	str	r3, [r1, #0]
 80221fe:	bf18      	it	ne
 8022200:	b22d      	sxthne	r5, r5
 8022202:	e7ef      	b.n	80221e4 <_printf_i+0xbc>
 8022204:	680b      	ldr	r3, [r1, #0]
 8022206:	6825      	ldr	r5, [r4, #0]
 8022208:	1d18      	adds	r0, r3, #4
 802220a:	6008      	str	r0, [r1, #0]
 802220c:	0628      	lsls	r0, r5, #24
 802220e:	d501      	bpl.n	8022214 <_printf_i+0xec>
 8022210:	681d      	ldr	r5, [r3, #0]
 8022212:	e002      	b.n	802221a <_printf_i+0xf2>
 8022214:	0669      	lsls	r1, r5, #25
 8022216:	d5fb      	bpl.n	8022210 <_printf_i+0xe8>
 8022218:	881d      	ldrh	r5, [r3, #0]
 802221a:	4854      	ldr	r0, [pc, #336]	; (802236c <_printf_i+0x244>)
 802221c:	2f6f      	cmp	r7, #111	; 0x6f
 802221e:	bf0c      	ite	eq
 8022220:	2308      	moveq	r3, #8
 8022222:	230a      	movne	r3, #10
 8022224:	2100      	movs	r1, #0
 8022226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802222a:	6866      	ldr	r6, [r4, #4]
 802222c:	60a6      	str	r6, [r4, #8]
 802222e:	2e00      	cmp	r6, #0
 8022230:	bfa2      	ittt	ge
 8022232:	6821      	ldrge	r1, [r4, #0]
 8022234:	f021 0104 	bicge.w	r1, r1, #4
 8022238:	6021      	strge	r1, [r4, #0]
 802223a:	b90d      	cbnz	r5, 8022240 <_printf_i+0x118>
 802223c:	2e00      	cmp	r6, #0
 802223e:	d04d      	beq.n	80222dc <_printf_i+0x1b4>
 8022240:	4616      	mov	r6, r2
 8022242:	fbb5 f1f3 	udiv	r1, r5, r3
 8022246:	fb03 5711 	mls	r7, r3, r1, r5
 802224a:	5dc7      	ldrb	r7, [r0, r7]
 802224c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022250:	462f      	mov	r7, r5
 8022252:	42bb      	cmp	r3, r7
 8022254:	460d      	mov	r5, r1
 8022256:	d9f4      	bls.n	8022242 <_printf_i+0x11a>
 8022258:	2b08      	cmp	r3, #8
 802225a:	d10b      	bne.n	8022274 <_printf_i+0x14c>
 802225c:	6823      	ldr	r3, [r4, #0]
 802225e:	07df      	lsls	r7, r3, #31
 8022260:	d508      	bpl.n	8022274 <_printf_i+0x14c>
 8022262:	6923      	ldr	r3, [r4, #16]
 8022264:	6861      	ldr	r1, [r4, #4]
 8022266:	4299      	cmp	r1, r3
 8022268:	bfde      	ittt	le
 802226a:	2330      	movle	r3, #48	; 0x30
 802226c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022274:	1b92      	subs	r2, r2, r6
 8022276:	6122      	str	r2, [r4, #16]
 8022278:	f8cd a000 	str.w	sl, [sp]
 802227c:	464b      	mov	r3, r9
 802227e:	aa03      	add	r2, sp, #12
 8022280:	4621      	mov	r1, r4
 8022282:	4640      	mov	r0, r8
 8022284:	f7ff fee2 	bl	802204c <_printf_common>
 8022288:	3001      	adds	r0, #1
 802228a:	d14c      	bne.n	8022326 <_printf_i+0x1fe>
 802228c:	f04f 30ff 	mov.w	r0, #4294967295
 8022290:	b004      	add	sp, #16
 8022292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022296:	4835      	ldr	r0, [pc, #212]	; (802236c <_printf_i+0x244>)
 8022298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802229c:	6823      	ldr	r3, [r4, #0]
 802229e:	680e      	ldr	r6, [r1, #0]
 80222a0:	061f      	lsls	r7, r3, #24
 80222a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80222a6:	600e      	str	r6, [r1, #0]
 80222a8:	d514      	bpl.n	80222d4 <_printf_i+0x1ac>
 80222aa:	07d9      	lsls	r1, r3, #31
 80222ac:	bf44      	itt	mi
 80222ae:	f043 0320 	orrmi.w	r3, r3, #32
 80222b2:	6023      	strmi	r3, [r4, #0]
 80222b4:	b91d      	cbnz	r5, 80222be <_printf_i+0x196>
 80222b6:	6823      	ldr	r3, [r4, #0]
 80222b8:	f023 0320 	bic.w	r3, r3, #32
 80222bc:	6023      	str	r3, [r4, #0]
 80222be:	2310      	movs	r3, #16
 80222c0:	e7b0      	b.n	8022224 <_printf_i+0xfc>
 80222c2:	6823      	ldr	r3, [r4, #0]
 80222c4:	f043 0320 	orr.w	r3, r3, #32
 80222c8:	6023      	str	r3, [r4, #0]
 80222ca:	2378      	movs	r3, #120	; 0x78
 80222cc:	4828      	ldr	r0, [pc, #160]	; (8022370 <_printf_i+0x248>)
 80222ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80222d2:	e7e3      	b.n	802229c <_printf_i+0x174>
 80222d4:	065e      	lsls	r6, r3, #25
 80222d6:	bf48      	it	mi
 80222d8:	b2ad      	uxthmi	r5, r5
 80222da:	e7e6      	b.n	80222aa <_printf_i+0x182>
 80222dc:	4616      	mov	r6, r2
 80222de:	e7bb      	b.n	8022258 <_printf_i+0x130>
 80222e0:	680b      	ldr	r3, [r1, #0]
 80222e2:	6826      	ldr	r6, [r4, #0]
 80222e4:	6960      	ldr	r0, [r4, #20]
 80222e6:	1d1d      	adds	r5, r3, #4
 80222e8:	600d      	str	r5, [r1, #0]
 80222ea:	0635      	lsls	r5, r6, #24
 80222ec:	681b      	ldr	r3, [r3, #0]
 80222ee:	d501      	bpl.n	80222f4 <_printf_i+0x1cc>
 80222f0:	6018      	str	r0, [r3, #0]
 80222f2:	e002      	b.n	80222fa <_printf_i+0x1d2>
 80222f4:	0671      	lsls	r1, r6, #25
 80222f6:	d5fb      	bpl.n	80222f0 <_printf_i+0x1c8>
 80222f8:	8018      	strh	r0, [r3, #0]
 80222fa:	2300      	movs	r3, #0
 80222fc:	6123      	str	r3, [r4, #16]
 80222fe:	4616      	mov	r6, r2
 8022300:	e7ba      	b.n	8022278 <_printf_i+0x150>
 8022302:	680b      	ldr	r3, [r1, #0]
 8022304:	1d1a      	adds	r2, r3, #4
 8022306:	600a      	str	r2, [r1, #0]
 8022308:	681e      	ldr	r6, [r3, #0]
 802230a:	6862      	ldr	r2, [r4, #4]
 802230c:	2100      	movs	r1, #0
 802230e:	4630      	mov	r0, r6
 8022310:	f7dd ff76 	bl	8000200 <memchr>
 8022314:	b108      	cbz	r0, 802231a <_printf_i+0x1f2>
 8022316:	1b80      	subs	r0, r0, r6
 8022318:	6060      	str	r0, [r4, #4]
 802231a:	6863      	ldr	r3, [r4, #4]
 802231c:	6123      	str	r3, [r4, #16]
 802231e:	2300      	movs	r3, #0
 8022320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022324:	e7a8      	b.n	8022278 <_printf_i+0x150>
 8022326:	6923      	ldr	r3, [r4, #16]
 8022328:	4632      	mov	r2, r6
 802232a:	4649      	mov	r1, r9
 802232c:	4640      	mov	r0, r8
 802232e:	47d0      	blx	sl
 8022330:	3001      	adds	r0, #1
 8022332:	d0ab      	beq.n	802228c <_printf_i+0x164>
 8022334:	6823      	ldr	r3, [r4, #0]
 8022336:	079b      	lsls	r3, r3, #30
 8022338:	d413      	bmi.n	8022362 <_printf_i+0x23a>
 802233a:	68e0      	ldr	r0, [r4, #12]
 802233c:	9b03      	ldr	r3, [sp, #12]
 802233e:	4298      	cmp	r0, r3
 8022340:	bfb8      	it	lt
 8022342:	4618      	movlt	r0, r3
 8022344:	e7a4      	b.n	8022290 <_printf_i+0x168>
 8022346:	2301      	movs	r3, #1
 8022348:	4632      	mov	r2, r6
 802234a:	4649      	mov	r1, r9
 802234c:	4640      	mov	r0, r8
 802234e:	47d0      	blx	sl
 8022350:	3001      	adds	r0, #1
 8022352:	d09b      	beq.n	802228c <_printf_i+0x164>
 8022354:	3501      	adds	r5, #1
 8022356:	68e3      	ldr	r3, [r4, #12]
 8022358:	9903      	ldr	r1, [sp, #12]
 802235a:	1a5b      	subs	r3, r3, r1
 802235c:	42ab      	cmp	r3, r5
 802235e:	dcf2      	bgt.n	8022346 <_printf_i+0x21e>
 8022360:	e7eb      	b.n	802233a <_printf_i+0x212>
 8022362:	2500      	movs	r5, #0
 8022364:	f104 0619 	add.w	r6, r4, #25
 8022368:	e7f5      	b.n	8022356 <_printf_i+0x22e>
 802236a:	bf00      	nop
 802236c:	080288fd 	.word	0x080288fd
 8022370:	0802890e 	.word	0x0802890e

08022374 <_sbrk_r>:
 8022374:	b538      	push	{r3, r4, r5, lr}
 8022376:	4d06      	ldr	r5, [pc, #24]	; (8022390 <_sbrk_r+0x1c>)
 8022378:	2300      	movs	r3, #0
 802237a:	4604      	mov	r4, r0
 802237c:	4608      	mov	r0, r1
 802237e:	602b      	str	r3, [r5, #0]
 8022380:	f7e0 f8a8 	bl	80024d4 <_sbrk>
 8022384:	1c43      	adds	r3, r0, #1
 8022386:	d102      	bne.n	802238e <_sbrk_r+0x1a>
 8022388:	682b      	ldr	r3, [r5, #0]
 802238a:	b103      	cbz	r3, 802238e <_sbrk_r+0x1a>
 802238c:	6023      	str	r3, [r4, #0]
 802238e:	bd38      	pop	{r3, r4, r5, pc}
 8022390:	200008f8 	.word	0x200008f8

08022394 <_raise_r>:
 8022394:	291f      	cmp	r1, #31
 8022396:	b538      	push	{r3, r4, r5, lr}
 8022398:	4604      	mov	r4, r0
 802239a:	460d      	mov	r5, r1
 802239c:	d904      	bls.n	80223a8 <_raise_r+0x14>
 802239e:	2316      	movs	r3, #22
 80223a0:	6003      	str	r3, [r0, #0]
 80223a2:	f04f 30ff 	mov.w	r0, #4294967295
 80223a6:	bd38      	pop	{r3, r4, r5, pc}
 80223a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80223aa:	b112      	cbz	r2, 80223b2 <_raise_r+0x1e>
 80223ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80223b0:	b94b      	cbnz	r3, 80223c6 <_raise_r+0x32>
 80223b2:	4620      	mov	r0, r4
 80223b4:	f000 f830 	bl	8022418 <_getpid_r>
 80223b8:	462a      	mov	r2, r5
 80223ba:	4601      	mov	r1, r0
 80223bc:	4620      	mov	r0, r4
 80223be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80223c2:	f000 b817 	b.w	80223f4 <_kill_r>
 80223c6:	2b01      	cmp	r3, #1
 80223c8:	d00a      	beq.n	80223e0 <_raise_r+0x4c>
 80223ca:	1c59      	adds	r1, r3, #1
 80223cc:	d103      	bne.n	80223d6 <_raise_r+0x42>
 80223ce:	2316      	movs	r3, #22
 80223d0:	6003      	str	r3, [r0, #0]
 80223d2:	2001      	movs	r0, #1
 80223d4:	e7e7      	b.n	80223a6 <_raise_r+0x12>
 80223d6:	2400      	movs	r4, #0
 80223d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80223dc:	4628      	mov	r0, r5
 80223de:	4798      	blx	r3
 80223e0:	2000      	movs	r0, #0
 80223e2:	e7e0      	b.n	80223a6 <_raise_r+0x12>

080223e4 <raise>:
 80223e4:	4b02      	ldr	r3, [pc, #8]	; (80223f0 <raise+0xc>)
 80223e6:	4601      	mov	r1, r0
 80223e8:	6818      	ldr	r0, [r3, #0]
 80223ea:	f7ff bfd3 	b.w	8022394 <_raise_r>
 80223ee:	bf00      	nop
 80223f0:	20000018 	.word	0x20000018

080223f4 <_kill_r>:
 80223f4:	b538      	push	{r3, r4, r5, lr}
 80223f6:	4d07      	ldr	r5, [pc, #28]	; (8022414 <_kill_r+0x20>)
 80223f8:	2300      	movs	r3, #0
 80223fa:	4604      	mov	r4, r0
 80223fc:	4608      	mov	r0, r1
 80223fe:	4611      	mov	r1, r2
 8022400:	602b      	str	r3, [r5, #0]
 8022402:	f7df ffdf 	bl	80023c4 <_kill>
 8022406:	1c43      	adds	r3, r0, #1
 8022408:	d102      	bne.n	8022410 <_kill_r+0x1c>
 802240a:	682b      	ldr	r3, [r5, #0]
 802240c:	b103      	cbz	r3, 8022410 <_kill_r+0x1c>
 802240e:	6023      	str	r3, [r4, #0]
 8022410:	bd38      	pop	{r3, r4, r5, pc}
 8022412:	bf00      	nop
 8022414:	200008f8 	.word	0x200008f8

08022418 <_getpid_r>:
 8022418:	f7df bfcc 	b.w	80023b4 <_getpid>

0802241c <siprintf>:
 802241c:	b40e      	push	{r1, r2, r3}
 802241e:	b500      	push	{lr}
 8022420:	b09c      	sub	sp, #112	; 0x70
 8022422:	ab1d      	add	r3, sp, #116	; 0x74
 8022424:	9002      	str	r0, [sp, #8]
 8022426:	9006      	str	r0, [sp, #24]
 8022428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802242c:	4809      	ldr	r0, [pc, #36]	; (8022454 <siprintf+0x38>)
 802242e:	9107      	str	r1, [sp, #28]
 8022430:	9104      	str	r1, [sp, #16]
 8022432:	4909      	ldr	r1, [pc, #36]	; (8022458 <siprintf+0x3c>)
 8022434:	f853 2b04 	ldr.w	r2, [r3], #4
 8022438:	9105      	str	r1, [sp, #20]
 802243a:	6800      	ldr	r0, [r0, #0]
 802243c:	9301      	str	r3, [sp, #4]
 802243e:	a902      	add	r1, sp, #8
 8022440:	f000 fbea 	bl	8022c18 <_svfiprintf_r>
 8022444:	9b02      	ldr	r3, [sp, #8]
 8022446:	2200      	movs	r2, #0
 8022448:	701a      	strb	r2, [r3, #0]
 802244a:	b01c      	add	sp, #112	; 0x70
 802244c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022450:	b003      	add	sp, #12
 8022452:	4770      	bx	lr
 8022454:	20000018 	.word	0x20000018
 8022458:	ffff0208 	.word	0xffff0208

0802245c <strncmp>:
 802245c:	b510      	push	{r4, lr}
 802245e:	b16a      	cbz	r2, 802247c <strncmp+0x20>
 8022460:	3901      	subs	r1, #1
 8022462:	1884      	adds	r4, r0, r2
 8022464:	f810 3b01 	ldrb.w	r3, [r0], #1
 8022468:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802246c:	4293      	cmp	r3, r2
 802246e:	d103      	bne.n	8022478 <strncmp+0x1c>
 8022470:	42a0      	cmp	r0, r4
 8022472:	d001      	beq.n	8022478 <strncmp+0x1c>
 8022474:	2b00      	cmp	r3, #0
 8022476:	d1f5      	bne.n	8022464 <strncmp+0x8>
 8022478:	1a98      	subs	r0, r3, r2
 802247a:	bd10      	pop	{r4, pc}
 802247c:	4610      	mov	r0, r2
 802247e:	e7fc      	b.n	802247a <strncmp+0x1e>

08022480 <__swbuf_r>:
 8022480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022482:	460e      	mov	r6, r1
 8022484:	4614      	mov	r4, r2
 8022486:	4605      	mov	r5, r0
 8022488:	b118      	cbz	r0, 8022492 <__swbuf_r+0x12>
 802248a:	6983      	ldr	r3, [r0, #24]
 802248c:	b90b      	cbnz	r3, 8022492 <__swbuf_r+0x12>
 802248e:	f000 fa33 	bl	80228f8 <__sinit>
 8022492:	4b21      	ldr	r3, [pc, #132]	; (8022518 <__swbuf_r+0x98>)
 8022494:	429c      	cmp	r4, r3
 8022496:	d12b      	bne.n	80224f0 <__swbuf_r+0x70>
 8022498:	686c      	ldr	r4, [r5, #4]
 802249a:	69a3      	ldr	r3, [r4, #24]
 802249c:	60a3      	str	r3, [r4, #8]
 802249e:	89a3      	ldrh	r3, [r4, #12]
 80224a0:	071a      	lsls	r2, r3, #28
 80224a2:	d52f      	bpl.n	8022504 <__swbuf_r+0x84>
 80224a4:	6923      	ldr	r3, [r4, #16]
 80224a6:	b36b      	cbz	r3, 8022504 <__swbuf_r+0x84>
 80224a8:	6923      	ldr	r3, [r4, #16]
 80224aa:	6820      	ldr	r0, [r4, #0]
 80224ac:	1ac0      	subs	r0, r0, r3
 80224ae:	6963      	ldr	r3, [r4, #20]
 80224b0:	b2f6      	uxtb	r6, r6
 80224b2:	4283      	cmp	r3, r0
 80224b4:	4637      	mov	r7, r6
 80224b6:	dc04      	bgt.n	80224c2 <__swbuf_r+0x42>
 80224b8:	4621      	mov	r1, r4
 80224ba:	4628      	mov	r0, r5
 80224bc:	f000 f988 	bl	80227d0 <_fflush_r>
 80224c0:	bb30      	cbnz	r0, 8022510 <__swbuf_r+0x90>
 80224c2:	68a3      	ldr	r3, [r4, #8]
 80224c4:	3b01      	subs	r3, #1
 80224c6:	60a3      	str	r3, [r4, #8]
 80224c8:	6823      	ldr	r3, [r4, #0]
 80224ca:	1c5a      	adds	r2, r3, #1
 80224cc:	6022      	str	r2, [r4, #0]
 80224ce:	701e      	strb	r6, [r3, #0]
 80224d0:	6963      	ldr	r3, [r4, #20]
 80224d2:	3001      	adds	r0, #1
 80224d4:	4283      	cmp	r3, r0
 80224d6:	d004      	beq.n	80224e2 <__swbuf_r+0x62>
 80224d8:	89a3      	ldrh	r3, [r4, #12]
 80224da:	07db      	lsls	r3, r3, #31
 80224dc:	d506      	bpl.n	80224ec <__swbuf_r+0x6c>
 80224de:	2e0a      	cmp	r6, #10
 80224e0:	d104      	bne.n	80224ec <__swbuf_r+0x6c>
 80224e2:	4621      	mov	r1, r4
 80224e4:	4628      	mov	r0, r5
 80224e6:	f000 f973 	bl	80227d0 <_fflush_r>
 80224ea:	b988      	cbnz	r0, 8022510 <__swbuf_r+0x90>
 80224ec:	4638      	mov	r0, r7
 80224ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80224f0:	4b0a      	ldr	r3, [pc, #40]	; (802251c <__swbuf_r+0x9c>)
 80224f2:	429c      	cmp	r4, r3
 80224f4:	d101      	bne.n	80224fa <__swbuf_r+0x7a>
 80224f6:	68ac      	ldr	r4, [r5, #8]
 80224f8:	e7cf      	b.n	802249a <__swbuf_r+0x1a>
 80224fa:	4b09      	ldr	r3, [pc, #36]	; (8022520 <__swbuf_r+0xa0>)
 80224fc:	429c      	cmp	r4, r3
 80224fe:	bf08      	it	eq
 8022500:	68ec      	ldreq	r4, [r5, #12]
 8022502:	e7ca      	b.n	802249a <__swbuf_r+0x1a>
 8022504:	4621      	mov	r1, r4
 8022506:	4628      	mov	r0, r5
 8022508:	f000 f80c 	bl	8022524 <__swsetup_r>
 802250c:	2800      	cmp	r0, #0
 802250e:	d0cb      	beq.n	80224a8 <__swbuf_r+0x28>
 8022510:	f04f 37ff 	mov.w	r7, #4294967295
 8022514:	e7ea      	b.n	80224ec <__swbuf_r+0x6c>
 8022516:	bf00      	nop
 8022518:	08028940 	.word	0x08028940
 802251c:	08028960 	.word	0x08028960
 8022520:	08028920 	.word	0x08028920

08022524 <__swsetup_r>:
 8022524:	4b32      	ldr	r3, [pc, #200]	; (80225f0 <__swsetup_r+0xcc>)
 8022526:	b570      	push	{r4, r5, r6, lr}
 8022528:	681d      	ldr	r5, [r3, #0]
 802252a:	4606      	mov	r6, r0
 802252c:	460c      	mov	r4, r1
 802252e:	b125      	cbz	r5, 802253a <__swsetup_r+0x16>
 8022530:	69ab      	ldr	r3, [r5, #24]
 8022532:	b913      	cbnz	r3, 802253a <__swsetup_r+0x16>
 8022534:	4628      	mov	r0, r5
 8022536:	f000 f9df 	bl	80228f8 <__sinit>
 802253a:	4b2e      	ldr	r3, [pc, #184]	; (80225f4 <__swsetup_r+0xd0>)
 802253c:	429c      	cmp	r4, r3
 802253e:	d10f      	bne.n	8022560 <__swsetup_r+0x3c>
 8022540:	686c      	ldr	r4, [r5, #4]
 8022542:	89a3      	ldrh	r3, [r4, #12]
 8022544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022548:	0719      	lsls	r1, r3, #28
 802254a:	d42c      	bmi.n	80225a6 <__swsetup_r+0x82>
 802254c:	06dd      	lsls	r5, r3, #27
 802254e:	d411      	bmi.n	8022574 <__swsetup_r+0x50>
 8022550:	2309      	movs	r3, #9
 8022552:	6033      	str	r3, [r6, #0]
 8022554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022558:	81a3      	strh	r3, [r4, #12]
 802255a:	f04f 30ff 	mov.w	r0, #4294967295
 802255e:	e03e      	b.n	80225de <__swsetup_r+0xba>
 8022560:	4b25      	ldr	r3, [pc, #148]	; (80225f8 <__swsetup_r+0xd4>)
 8022562:	429c      	cmp	r4, r3
 8022564:	d101      	bne.n	802256a <__swsetup_r+0x46>
 8022566:	68ac      	ldr	r4, [r5, #8]
 8022568:	e7eb      	b.n	8022542 <__swsetup_r+0x1e>
 802256a:	4b24      	ldr	r3, [pc, #144]	; (80225fc <__swsetup_r+0xd8>)
 802256c:	429c      	cmp	r4, r3
 802256e:	bf08      	it	eq
 8022570:	68ec      	ldreq	r4, [r5, #12]
 8022572:	e7e6      	b.n	8022542 <__swsetup_r+0x1e>
 8022574:	0758      	lsls	r0, r3, #29
 8022576:	d512      	bpl.n	802259e <__swsetup_r+0x7a>
 8022578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802257a:	b141      	cbz	r1, 802258e <__swsetup_r+0x6a>
 802257c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022580:	4299      	cmp	r1, r3
 8022582:	d002      	beq.n	802258a <__swsetup_r+0x66>
 8022584:	4630      	mov	r0, r6
 8022586:	f7ff fb5d 	bl	8021c44 <_free_r>
 802258a:	2300      	movs	r3, #0
 802258c:	6363      	str	r3, [r4, #52]	; 0x34
 802258e:	89a3      	ldrh	r3, [r4, #12]
 8022590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022594:	81a3      	strh	r3, [r4, #12]
 8022596:	2300      	movs	r3, #0
 8022598:	6063      	str	r3, [r4, #4]
 802259a:	6923      	ldr	r3, [r4, #16]
 802259c:	6023      	str	r3, [r4, #0]
 802259e:	89a3      	ldrh	r3, [r4, #12]
 80225a0:	f043 0308 	orr.w	r3, r3, #8
 80225a4:	81a3      	strh	r3, [r4, #12]
 80225a6:	6923      	ldr	r3, [r4, #16]
 80225a8:	b94b      	cbnz	r3, 80225be <__swsetup_r+0x9a>
 80225aa:	89a3      	ldrh	r3, [r4, #12]
 80225ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80225b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80225b4:	d003      	beq.n	80225be <__swsetup_r+0x9a>
 80225b6:	4621      	mov	r1, r4
 80225b8:	4630      	mov	r0, r6
 80225ba:	f000 fa5f 	bl	8022a7c <__smakebuf_r>
 80225be:	89a0      	ldrh	r0, [r4, #12]
 80225c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80225c4:	f010 0301 	ands.w	r3, r0, #1
 80225c8:	d00a      	beq.n	80225e0 <__swsetup_r+0xbc>
 80225ca:	2300      	movs	r3, #0
 80225cc:	60a3      	str	r3, [r4, #8]
 80225ce:	6963      	ldr	r3, [r4, #20]
 80225d0:	425b      	negs	r3, r3
 80225d2:	61a3      	str	r3, [r4, #24]
 80225d4:	6923      	ldr	r3, [r4, #16]
 80225d6:	b943      	cbnz	r3, 80225ea <__swsetup_r+0xc6>
 80225d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80225dc:	d1ba      	bne.n	8022554 <__swsetup_r+0x30>
 80225de:	bd70      	pop	{r4, r5, r6, pc}
 80225e0:	0781      	lsls	r1, r0, #30
 80225e2:	bf58      	it	pl
 80225e4:	6963      	ldrpl	r3, [r4, #20]
 80225e6:	60a3      	str	r3, [r4, #8]
 80225e8:	e7f4      	b.n	80225d4 <__swsetup_r+0xb0>
 80225ea:	2000      	movs	r0, #0
 80225ec:	e7f7      	b.n	80225de <__swsetup_r+0xba>
 80225ee:	bf00      	nop
 80225f0:	20000018 	.word	0x20000018
 80225f4:	08028940 	.word	0x08028940
 80225f8:	08028960 	.word	0x08028960
 80225fc:	08028920 	.word	0x08028920

08022600 <__register_exitproc>:
 8022600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022604:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80226c0 <__register_exitproc+0xc0>
 8022608:	4606      	mov	r6, r0
 802260a:	f8d8 0000 	ldr.w	r0, [r8]
 802260e:	461f      	mov	r7, r3
 8022610:	460d      	mov	r5, r1
 8022612:	4691      	mov	r9, r2
 8022614:	f7ff fac5 	bl	8021ba2 <__retarget_lock_acquire_recursive>
 8022618:	4b25      	ldr	r3, [pc, #148]	; (80226b0 <__register_exitproc+0xb0>)
 802261a:	681c      	ldr	r4, [r3, #0]
 802261c:	b934      	cbnz	r4, 802262c <__register_exitproc+0x2c>
 802261e:	4c25      	ldr	r4, [pc, #148]	; (80226b4 <__register_exitproc+0xb4>)
 8022620:	601c      	str	r4, [r3, #0]
 8022622:	4b25      	ldr	r3, [pc, #148]	; (80226b8 <__register_exitproc+0xb8>)
 8022624:	b113      	cbz	r3, 802262c <__register_exitproc+0x2c>
 8022626:	681b      	ldr	r3, [r3, #0]
 8022628:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802262c:	6863      	ldr	r3, [r4, #4]
 802262e:	2b1f      	cmp	r3, #31
 8022630:	dd07      	ble.n	8022642 <__register_exitproc+0x42>
 8022632:	f8d8 0000 	ldr.w	r0, [r8]
 8022636:	f7ff fab6 	bl	8021ba6 <__retarget_lock_release_recursive>
 802263a:	f04f 30ff 	mov.w	r0, #4294967295
 802263e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022642:	b34e      	cbz	r6, 8022698 <__register_exitproc+0x98>
 8022644:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022648:	b988      	cbnz	r0, 802266e <__register_exitproc+0x6e>
 802264a:	4b1c      	ldr	r3, [pc, #112]	; (80226bc <__register_exitproc+0xbc>)
 802264c:	b923      	cbnz	r3, 8022658 <__register_exitproc+0x58>
 802264e:	f8d8 0000 	ldr.w	r0, [r8]
 8022652:	f7ff faa7 	bl	8021ba4 <__retarget_lock_release>
 8022656:	e7f0      	b.n	802263a <__register_exitproc+0x3a>
 8022658:	f44f 7084 	mov.w	r0, #264	; 0x108
 802265c:	f7ff faa4 	bl	8021ba8 <malloc>
 8022660:	2800      	cmp	r0, #0
 8022662:	d0f4      	beq.n	802264e <__register_exitproc+0x4e>
 8022664:	2300      	movs	r3, #0
 8022666:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802266a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802266e:	6863      	ldr	r3, [r4, #4]
 8022670:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022674:	2201      	movs	r2, #1
 8022676:	409a      	lsls	r2, r3
 8022678:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802267c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022680:	4313      	orrs	r3, r2
 8022682:	2e02      	cmp	r6, #2
 8022684:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022688:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802268c:	bf02      	ittt	eq
 802268e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8022692:	431a      	orreq	r2, r3
 8022694:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8022698:	6863      	ldr	r3, [r4, #4]
 802269a:	f8d8 0000 	ldr.w	r0, [r8]
 802269e:	1c5a      	adds	r2, r3, #1
 80226a0:	3302      	adds	r3, #2
 80226a2:	6062      	str	r2, [r4, #4]
 80226a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80226a8:	f7ff fa7d 	bl	8021ba6 <__retarget_lock_release_recursive>
 80226ac:	2000      	movs	r0, #0
 80226ae:	e7c6      	b.n	802263e <__register_exitproc+0x3e>
 80226b0:	200004f8 	.word	0x200004f8
 80226b4:	2000046c 	.word	0x2000046c
 80226b8:	00000000 	.word	0x00000000
 80226bc:	08021ba9 	.word	0x08021ba9
 80226c0:	2000007c 	.word	0x2000007c

080226c4 <__sflush_r>:
 80226c4:	898a      	ldrh	r2, [r1, #12]
 80226c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226ca:	4605      	mov	r5, r0
 80226cc:	0710      	lsls	r0, r2, #28
 80226ce:	460c      	mov	r4, r1
 80226d0:	d458      	bmi.n	8022784 <__sflush_r+0xc0>
 80226d2:	684b      	ldr	r3, [r1, #4]
 80226d4:	2b00      	cmp	r3, #0
 80226d6:	dc05      	bgt.n	80226e4 <__sflush_r+0x20>
 80226d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80226da:	2b00      	cmp	r3, #0
 80226dc:	dc02      	bgt.n	80226e4 <__sflush_r+0x20>
 80226de:	2000      	movs	r0, #0
 80226e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80226e6:	2e00      	cmp	r6, #0
 80226e8:	d0f9      	beq.n	80226de <__sflush_r+0x1a>
 80226ea:	2300      	movs	r3, #0
 80226ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80226f0:	682f      	ldr	r7, [r5, #0]
 80226f2:	602b      	str	r3, [r5, #0]
 80226f4:	d032      	beq.n	802275c <__sflush_r+0x98>
 80226f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80226f8:	89a3      	ldrh	r3, [r4, #12]
 80226fa:	075a      	lsls	r2, r3, #29
 80226fc:	d505      	bpl.n	802270a <__sflush_r+0x46>
 80226fe:	6863      	ldr	r3, [r4, #4]
 8022700:	1ac0      	subs	r0, r0, r3
 8022702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022704:	b10b      	cbz	r3, 802270a <__sflush_r+0x46>
 8022706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022708:	1ac0      	subs	r0, r0, r3
 802270a:	2300      	movs	r3, #0
 802270c:	4602      	mov	r2, r0
 802270e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022710:	6a21      	ldr	r1, [r4, #32]
 8022712:	4628      	mov	r0, r5
 8022714:	47b0      	blx	r6
 8022716:	1c43      	adds	r3, r0, #1
 8022718:	89a3      	ldrh	r3, [r4, #12]
 802271a:	d106      	bne.n	802272a <__sflush_r+0x66>
 802271c:	6829      	ldr	r1, [r5, #0]
 802271e:	291d      	cmp	r1, #29
 8022720:	d82c      	bhi.n	802277c <__sflush_r+0xb8>
 8022722:	4a2a      	ldr	r2, [pc, #168]	; (80227cc <__sflush_r+0x108>)
 8022724:	40ca      	lsrs	r2, r1
 8022726:	07d6      	lsls	r6, r2, #31
 8022728:	d528      	bpl.n	802277c <__sflush_r+0xb8>
 802272a:	2200      	movs	r2, #0
 802272c:	6062      	str	r2, [r4, #4]
 802272e:	04d9      	lsls	r1, r3, #19
 8022730:	6922      	ldr	r2, [r4, #16]
 8022732:	6022      	str	r2, [r4, #0]
 8022734:	d504      	bpl.n	8022740 <__sflush_r+0x7c>
 8022736:	1c42      	adds	r2, r0, #1
 8022738:	d101      	bne.n	802273e <__sflush_r+0x7a>
 802273a:	682b      	ldr	r3, [r5, #0]
 802273c:	b903      	cbnz	r3, 8022740 <__sflush_r+0x7c>
 802273e:	6560      	str	r0, [r4, #84]	; 0x54
 8022740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022742:	602f      	str	r7, [r5, #0]
 8022744:	2900      	cmp	r1, #0
 8022746:	d0ca      	beq.n	80226de <__sflush_r+0x1a>
 8022748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802274c:	4299      	cmp	r1, r3
 802274e:	d002      	beq.n	8022756 <__sflush_r+0x92>
 8022750:	4628      	mov	r0, r5
 8022752:	f7ff fa77 	bl	8021c44 <_free_r>
 8022756:	2000      	movs	r0, #0
 8022758:	6360      	str	r0, [r4, #52]	; 0x34
 802275a:	e7c1      	b.n	80226e0 <__sflush_r+0x1c>
 802275c:	6a21      	ldr	r1, [r4, #32]
 802275e:	2301      	movs	r3, #1
 8022760:	4628      	mov	r0, r5
 8022762:	47b0      	blx	r6
 8022764:	1c41      	adds	r1, r0, #1
 8022766:	d1c7      	bne.n	80226f8 <__sflush_r+0x34>
 8022768:	682b      	ldr	r3, [r5, #0]
 802276a:	2b00      	cmp	r3, #0
 802276c:	d0c4      	beq.n	80226f8 <__sflush_r+0x34>
 802276e:	2b1d      	cmp	r3, #29
 8022770:	d001      	beq.n	8022776 <__sflush_r+0xb2>
 8022772:	2b16      	cmp	r3, #22
 8022774:	d101      	bne.n	802277a <__sflush_r+0xb6>
 8022776:	602f      	str	r7, [r5, #0]
 8022778:	e7b1      	b.n	80226de <__sflush_r+0x1a>
 802277a:	89a3      	ldrh	r3, [r4, #12]
 802277c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022780:	81a3      	strh	r3, [r4, #12]
 8022782:	e7ad      	b.n	80226e0 <__sflush_r+0x1c>
 8022784:	690f      	ldr	r7, [r1, #16]
 8022786:	2f00      	cmp	r7, #0
 8022788:	d0a9      	beq.n	80226de <__sflush_r+0x1a>
 802278a:	0793      	lsls	r3, r2, #30
 802278c:	680e      	ldr	r6, [r1, #0]
 802278e:	bf08      	it	eq
 8022790:	694b      	ldreq	r3, [r1, #20]
 8022792:	600f      	str	r7, [r1, #0]
 8022794:	bf18      	it	ne
 8022796:	2300      	movne	r3, #0
 8022798:	eba6 0807 	sub.w	r8, r6, r7
 802279c:	608b      	str	r3, [r1, #8]
 802279e:	f1b8 0f00 	cmp.w	r8, #0
 80227a2:	dd9c      	ble.n	80226de <__sflush_r+0x1a>
 80227a4:	6a21      	ldr	r1, [r4, #32]
 80227a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80227a8:	4643      	mov	r3, r8
 80227aa:	463a      	mov	r2, r7
 80227ac:	4628      	mov	r0, r5
 80227ae:	47b0      	blx	r6
 80227b0:	2800      	cmp	r0, #0
 80227b2:	dc06      	bgt.n	80227c2 <__sflush_r+0xfe>
 80227b4:	89a3      	ldrh	r3, [r4, #12]
 80227b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227ba:	81a3      	strh	r3, [r4, #12]
 80227bc:	f04f 30ff 	mov.w	r0, #4294967295
 80227c0:	e78e      	b.n	80226e0 <__sflush_r+0x1c>
 80227c2:	4407      	add	r7, r0
 80227c4:	eba8 0800 	sub.w	r8, r8, r0
 80227c8:	e7e9      	b.n	802279e <__sflush_r+0xda>
 80227ca:	bf00      	nop
 80227cc:	20400001 	.word	0x20400001

080227d0 <_fflush_r>:
 80227d0:	b538      	push	{r3, r4, r5, lr}
 80227d2:	690b      	ldr	r3, [r1, #16]
 80227d4:	4605      	mov	r5, r0
 80227d6:	460c      	mov	r4, r1
 80227d8:	b913      	cbnz	r3, 80227e0 <_fflush_r+0x10>
 80227da:	2500      	movs	r5, #0
 80227dc:	4628      	mov	r0, r5
 80227de:	bd38      	pop	{r3, r4, r5, pc}
 80227e0:	b118      	cbz	r0, 80227ea <_fflush_r+0x1a>
 80227e2:	6983      	ldr	r3, [r0, #24]
 80227e4:	b90b      	cbnz	r3, 80227ea <_fflush_r+0x1a>
 80227e6:	f000 f887 	bl	80228f8 <__sinit>
 80227ea:	4b14      	ldr	r3, [pc, #80]	; (802283c <_fflush_r+0x6c>)
 80227ec:	429c      	cmp	r4, r3
 80227ee:	d11b      	bne.n	8022828 <_fflush_r+0x58>
 80227f0:	686c      	ldr	r4, [r5, #4]
 80227f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227f6:	2b00      	cmp	r3, #0
 80227f8:	d0ef      	beq.n	80227da <_fflush_r+0xa>
 80227fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80227fc:	07d0      	lsls	r0, r2, #31
 80227fe:	d404      	bmi.n	802280a <_fflush_r+0x3a>
 8022800:	0599      	lsls	r1, r3, #22
 8022802:	d402      	bmi.n	802280a <_fflush_r+0x3a>
 8022804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022806:	f7ff f9cc 	bl	8021ba2 <__retarget_lock_acquire_recursive>
 802280a:	4628      	mov	r0, r5
 802280c:	4621      	mov	r1, r4
 802280e:	f7ff ff59 	bl	80226c4 <__sflush_r>
 8022812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022814:	07da      	lsls	r2, r3, #31
 8022816:	4605      	mov	r5, r0
 8022818:	d4e0      	bmi.n	80227dc <_fflush_r+0xc>
 802281a:	89a3      	ldrh	r3, [r4, #12]
 802281c:	059b      	lsls	r3, r3, #22
 802281e:	d4dd      	bmi.n	80227dc <_fflush_r+0xc>
 8022820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022822:	f7ff f9c0 	bl	8021ba6 <__retarget_lock_release_recursive>
 8022826:	e7d9      	b.n	80227dc <_fflush_r+0xc>
 8022828:	4b05      	ldr	r3, [pc, #20]	; (8022840 <_fflush_r+0x70>)
 802282a:	429c      	cmp	r4, r3
 802282c:	d101      	bne.n	8022832 <_fflush_r+0x62>
 802282e:	68ac      	ldr	r4, [r5, #8]
 8022830:	e7df      	b.n	80227f2 <_fflush_r+0x22>
 8022832:	4b04      	ldr	r3, [pc, #16]	; (8022844 <_fflush_r+0x74>)
 8022834:	429c      	cmp	r4, r3
 8022836:	bf08      	it	eq
 8022838:	68ec      	ldreq	r4, [r5, #12]
 802283a:	e7da      	b.n	80227f2 <_fflush_r+0x22>
 802283c:	08028940 	.word	0x08028940
 8022840:	08028960 	.word	0x08028960
 8022844:	08028920 	.word	0x08028920

08022848 <std>:
 8022848:	2300      	movs	r3, #0
 802284a:	b510      	push	{r4, lr}
 802284c:	4604      	mov	r4, r0
 802284e:	e9c0 3300 	strd	r3, r3, [r0]
 8022852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022856:	6083      	str	r3, [r0, #8]
 8022858:	8181      	strh	r1, [r0, #12]
 802285a:	6643      	str	r3, [r0, #100]	; 0x64
 802285c:	81c2      	strh	r2, [r0, #14]
 802285e:	6183      	str	r3, [r0, #24]
 8022860:	4619      	mov	r1, r3
 8022862:	2208      	movs	r2, #8
 8022864:	305c      	adds	r0, #92	; 0x5c
 8022866:	f7ff f9e5 	bl	8021c34 <memset>
 802286a:	4b05      	ldr	r3, [pc, #20]	; (8022880 <std+0x38>)
 802286c:	6263      	str	r3, [r4, #36]	; 0x24
 802286e:	4b05      	ldr	r3, [pc, #20]	; (8022884 <std+0x3c>)
 8022870:	62a3      	str	r3, [r4, #40]	; 0x28
 8022872:	4b05      	ldr	r3, [pc, #20]	; (8022888 <std+0x40>)
 8022874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022876:	4b05      	ldr	r3, [pc, #20]	; (802288c <std+0x44>)
 8022878:	6224      	str	r4, [r4, #32]
 802287a:	6323      	str	r3, [r4, #48]	; 0x30
 802287c:	bd10      	pop	{r4, pc}
 802287e:	bf00      	nop
 8022880:	08022e19 	.word	0x08022e19
 8022884:	08022e3b 	.word	0x08022e3b
 8022888:	08022e73 	.word	0x08022e73
 802288c:	08022e97 	.word	0x08022e97

08022890 <_cleanup_r>:
 8022890:	4901      	ldr	r1, [pc, #4]	; (8022898 <_cleanup_r+0x8>)
 8022892:	f000 b8af 	b.w	80229f4 <_fwalk_reent>
 8022896:	bf00      	nop
 8022898:	080227d1 	.word	0x080227d1

0802289c <__sfmoreglue>:
 802289c:	b570      	push	{r4, r5, r6, lr}
 802289e:	1e4a      	subs	r2, r1, #1
 80228a0:	2568      	movs	r5, #104	; 0x68
 80228a2:	4355      	muls	r5, r2
 80228a4:	460e      	mov	r6, r1
 80228a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80228aa:	f7ff fa1b 	bl	8021ce4 <_malloc_r>
 80228ae:	4604      	mov	r4, r0
 80228b0:	b140      	cbz	r0, 80228c4 <__sfmoreglue+0x28>
 80228b2:	2100      	movs	r1, #0
 80228b4:	e9c0 1600 	strd	r1, r6, [r0]
 80228b8:	300c      	adds	r0, #12
 80228ba:	60a0      	str	r0, [r4, #8]
 80228bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80228c0:	f7ff f9b8 	bl	8021c34 <memset>
 80228c4:	4620      	mov	r0, r4
 80228c6:	bd70      	pop	{r4, r5, r6, pc}

080228c8 <__sfp_lock_acquire>:
 80228c8:	4801      	ldr	r0, [pc, #4]	; (80228d0 <__sfp_lock_acquire+0x8>)
 80228ca:	f7ff b96a 	b.w	8021ba2 <__retarget_lock_acquire_recursive>
 80228ce:	bf00      	nop
 80228d0:	200008f0 	.word	0x200008f0

080228d4 <__sfp_lock_release>:
 80228d4:	4801      	ldr	r0, [pc, #4]	; (80228dc <__sfp_lock_release+0x8>)
 80228d6:	f7ff b966 	b.w	8021ba6 <__retarget_lock_release_recursive>
 80228da:	bf00      	nop
 80228dc:	200008f0 	.word	0x200008f0

080228e0 <__sinit_lock_acquire>:
 80228e0:	4801      	ldr	r0, [pc, #4]	; (80228e8 <__sinit_lock_acquire+0x8>)
 80228e2:	f7ff b95e 	b.w	8021ba2 <__retarget_lock_acquire_recursive>
 80228e6:	bf00      	nop
 80228e8:	200008ef 	.word	0x200008ef

080228ec <__sinit_lock_release>:
 80228ec:	4801      	ldr	r0, [pc, #4]	; (80228f4 <__sinit_lock_release+0x8>)
 80228ee:	f7ff b95a 	b.w	8021ba6 <__retarget_lock_release_recursive>
 80228f2:	bf00      	nop
 80228f4:	200008ef 	.word	0x200008ef

080228f8 <__sinit>:
 80228f8:	b510      	push	{r4, lr}
 80228fa:	4604      	mov	r4, r0
 80228fc:	f7ff fff0 	bl	80228e0 <__sinit_lock_acquire>
 8022900:	69a3      	ldr	r3, [r4, #24]
 8022902:	b11b      	cbz	r3, 802290c <__sinit+0x14>
 8022904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022908:	f7ff bff0 	b.w	80228ec <__sinit_lock_release>
 802290c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022910:	6523      	str	r3, [r4, #80]	; 0x50
 8022912:	4b13      	ldr	r3, [pc, #76]	; (8022960 <__sinit+0x68>)
 8022914:	4a13      	ldr	r2, [pc, #76]	; (8022964 <__sinit+0x6c>)
 8022916:	681b      	ldr	r3, [r3, #0]
 8022918:	62a2      	str	r2, [r4, #40]	; 0x28
 802291a:	42a3      	cmp	r3, r4
 802291c:	bf04      	itt	eq
 802291e:	2301      	moveq	r3, #1
 8022920:	61a3      	streq	r3, [r4, #24]
 8022922:	4620      	mov	r0, r4
 8022924:	f000 f820 	bl	8022968 <__sfp>
 8022928:	6060      	str	r0, [r4, #4]
 802292a:	4620      	mov	r0, r4
 802292c:	f000 f81c 	bl	8022968 <__sfp>
 8022930:	60a0      	str	r0, [r4, #8]
 8022932:	4620      	mov	r0, r4
 8022934:	f000 f818 	bl	8022968 <__sfp>
 8022938:	2200      	movs	r2, #0
 802293a:	60e0      	str	r0, [r4, #12]
 802293c:	2104      	movs	r1, #4
 802293e:	6860      	ldr	r0, [r4, #4]
 8022940:	f7ff ff82 	bl	8022848 <std>
 8022944:	68a0      	ldr	r0, [r4, #8]
 8022946:	2201      	movs	r2, #1
 8022948:	2109      	movs	r1, #9
 802294a:	f7ff ff7d 	bl	8022848 <std>
 802294e:	68e0      	ldr	r0, [r4, #12]
 8022950:	2202      	movs	r2, #2
 8022952:	2112      	movs	r1, #18
 8022954:	f7ff ff78 	bl	8022848 <std>
 8022958:	2301      	movs	r3, #1
 802295a:	61a3      	str	r3, [r4, #24]
 802295c:	e7d2      	b.n	8022904 <__sinit+0xc>
 802295e:	bf00      	nop
 8022960:	080288e8 	.word	0x080288e8
 8022964:	08022891 	.word	0x08022891

08022968 <__sfp>:
 8022968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802296a:	4607      	mov	r7, r0
 802296c:	f7ff ffac 	bl	80228c8 <__sfp_lock_acquire>
 8022970:	4b1e      	ldr	r3, [pc, #120]	; (80229ec <__sfp+0x84>)
 8022972:	681e      	ldr	r6, [r3, #0]
 8022974:	69b3      	ldr	r3, [r6, #24]
 8022976:	b913      	cbnz	r3, 802297e <__sfp+0x16>
 8022978:	4630      	mov	r0, r6
 802297a:	f7ff ffbd 	bl	80228f8 <__sinit>
 802297e:	3648      	adds	r6, #72	; 0x48
 8022980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022984:	3b01      	subs	r3, #1
 8022986:	d503      	bpl.n	8022990 <__sfp+0x28>
 8022988:	6833      	ldr	r3, [r6, #0]
 802298a:	b30b      	cbz	r3, 80229d0 <__sfp+0x68>
 802298c:	6836      	ldr	r6, [r6, #0]
 802298e:	e7f7      	b.n	8022980 <__sfp+0x18>
 8022990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022994:	b9d5      	cbnz	r5, 80229cc <__sfp+0x64>
 8022996:	4b16      	ldr	r3, [pc, #88]	; (80229f0 <__sfp+0x88>)
 8022998:	60e3      	str	r3, [r4, #12]
 802299a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802299e:	6665      	str	r5, [r4, #100]	; 0x64
 80229a0:	f7ff f8fe 	bl	8021ba0 <__retarget_lock_init_recursive>
 80229a4:	f7ff ff96 	bl	80228d4 <__sfp_lock_release>
 80229a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80229ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80229b0:	6025      	str	r5, [r4, #0]
 80229b2:	61a5      	str	r5, [r4, #24]
 80229b4:	2208      	movs	r2, #8
 80229b6:	4629      	mov	r1, r5
 80229b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80229bc:	f7ff f93a 	bl	8021c34 <memset>
 80229c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80229c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80229c8:	4620      	mov	r0, r4
 80229ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229cc:	3468      	adds	r4, #104	; 0x68
 80229ce:	e7d9      	b.n	8022984 <__sfp+0x1c>
 80229d0:	2104      	movs	r1, #4
 80229d2:	4638      	mov	r0, r7
 80229d4:	f7ff ff62 	bl	802289c <__sfmoreglue>
 80229d8:	4604      	mov	r4, r0
 80229da:	6030      	str	r0, [r6, #0]
 80229dc:	2800      	cmp	r0, #0
 80229de:	d1d5      	bne.n	802298c <__sfp+0x24>
 80229e0:	f7ff ff78 	bl	80228d4 <__sfp_lock_release>
 80229e4:	230c      	movs	r3, #12
 80229e6:	603b      	str	r3, [r7, #0]
 80229e8:	e7ee      	b.n	80229c8 <__sfp+0x60>
 80229ea:	bf00      	nop
 80229ec:	080288e8 	.word	0x080288e8
 80229f0:	ffff0001 	.word	0xffff0001

080229f4 <_fwalk_reent>:
 80229f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80229f8:	4606      	mov	r6, r0
 80229fa:	4688      	mov	r8, r1
 80229fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022a00:	2700      	movs	r7, #0
 8022a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022a06:	f1b9 0901 	subs.w	r9, r9, #1
 8022a0a:	d505      	bpl.n	8022a18 <_fwalk_reent+0x24>
 8022a0c:	6824      	ldr	r4, [r4, #0]
 8022a0e:	2c00      	cmp	r4, #0
 8022a10:	d1f7      	bne.n	8022a02 <_fwalk_reent+0xe>
 8022a12:	4638      	mov	r0, r7
 8022a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a18:	89ab      	ldrh	r3, [r5, #12]
 8022a1a:	2b01      	cmp	r3, #1
 8022a1c:	d907      	bls.n	8022a2e <_fwalk_reent+0x3a>
 8022a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022a22:	3301      	adds	r3, #1
 8022a24:	d003      	beq.n	8022a2e <_fwalk_reent+0x3a>
 8022a26:	4629      	mov	r1, r5
 8022a28:	4630      	mov	r0, r6
 8022a2a:	47c0      	blx	r8
 8022a2c:	4307      	orrs	r7, r0
 8022a2e:	3568      	adds	r5, #104	; 0x68
 8022a30:	e7e9      	b.n	8022a06 <_fwalk_reent+0x12>

08022a32 <__swhatbuf_r>:
 8022a32:	b570      	push	{r4, r5, r6, lr}
 8022a34:	460e      	mov	r6, r1
 8022a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a3a:	2900      	cmp	r1, #0
 8022a3c:	b096      	sub	sp, #88	; 0x58
 8022a3e:	4614      	mov	r4, r2
 8022a40:	461d      	mov	r5, r3
 8022a42:	da07      	bge.n	8022a54 <__swhatbuf_r+0x22>
 8022a44:	2300      	movs	r3, #0
 8022a46:	602b      	str	r3, [r5, #0]
 8022a48:	89b3      	ldrh	r3, [r6, #12]
 8022a4a:	061a      	lsls	r2, r3, #24
 8022a4c:	d410      	bmi.n	8022a70 <__swhatbuf_r+0x3e>
 8022a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022a52:	e00e      	b.n	8022a72 <__swhatbuf_r+0x40>
 8022a54:	466a      	mov	r2, sp
 8022a56:	f000 fa45 	bl	8022ee4 <_fstat_r>
 8022a5a:	2800      	cmp	r0, #0
 8022a5c:	dbf2      	blt.n	8022a44 <__swhatbuf_r+0x12>
 8022a5e:	9a01      	ldr	r2, [sp, #4]
 8022a60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022a64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022a68:	425a      	negs	r2, r3
 8022a6a:	415a      	adcs	r2, r3
 8022a6c:	602a      	str	r2, [r5, #0]
 8022a6e:	e7ee      	b.n	8022a4e <__swhatbuf_r+0x1c>
 8022a70:	2340      	movs	r3, #64	; 0x40
 8022a72:	2000      	movs	r0, #0
 8022a74:	6023      	str	r3, [r4, #0]
 8022a76:	b016      	add	sp, #88	; 0x58
 8022a78:	bd70      	pop	{r4, r5, r6, pc}
	...

08022a7c <__smakebuf_r>:
 8022a7c:	898b      	ldrh	r3, [r1, #12]
 8022a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022a80:	079d      	lsls	r5, r3, #30
 8022a82:	4606      	mov	r6, r0
 8022a84:	460c      	mov	r4, r1
 8022a86:	d507      	bpl.n	8022a98 <__smakebuf_r+0x1c>
 8022a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022a8c:	6023      	str	r3, [r4, #0]
 8022a8e:	6123      	str	r3, [r4, #16]
 8022a90:	2301      	movs	r3, #1
 8022a92:	6163      	str	r3, [r4, #20]
 8022a94:	b002      	add	sp, #8
 8022a96:	bd70      	pop	{r4, r5, r6, pc}
 8022a98:	ab01      	add	r3, sp, #4
 8022a9a:	466a      	mov	r2, sp
 8022a9c:	f7ff ffc9 	bl	8022a32 <__swhatbuf_r>
 8022aa0:	9900      	ldr	r1, [sp, #0]
 8022aa2:	4605      	mov	r5, r0
 8022aa4:	4630      	mov	r0, r6
 8022aa6:	f7ff f91d 	bl	8021ce4 <_malloc_r>
 8022aaa:	b948      	cbnz	r0, 8022ac0 <__smakebuf_r+0x44>
 8022aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ab0:	059a      	lsls	r2, r3, #22
 8022ab2:	d4ef      	bmi.n	8022a94 <__smakebuf_r+0x18>
 8022ab4:	f023 0303 	bic.w	r3, r3, #3
 8022ab8:	f043 0302 	orr.w	r3, r3, #2
 8022abc:	81a3      	strh	r3, [r4, #12]
 8022abe:	e7e3      	b.n	8022a88 <__smakebuf_r+0xc>
 8022ac0:	4b0d      	ldr	r3, [pc, #52]	; (8022af8 <__smakebuf_r+0x7c>)
 8022ac2:	62b3      	str	r3, [r6, #40]	; 0x28
 8022ac4:	89a3      	ldrh	r3, [r4, #12]
 8022ac6:	6020      	str	r0, [r4, #0]
 8022ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022acc:	81a3      	strh	r3, [r4, #12]
 8022ace:	9b00      	ldr	r3, [sp, #0]
 8022ad0:	6163      	str	r3, [r4, #20]
 8022ad2:	9b01      	ldr	r3, [sp, #4]
 8022ad4:	6120      	str	r0, [r4, #16]
 8022ad6:	b15b      	cbz	r3, 8022af0 <__smakebuf_r+0x74>
 8022ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022adc:	4630      	mov	r0, r6
 8022ade:	f000 fa13 	bl	8022f08 <_isatty_r>
 8022ae2:	b128      	cbz	r0, 8022af0 <__smakebuf_r+0x74>
 8022ae4:	89a3      	ldrh	r3, [r4, #12]
 8022ae6:	f023 0303 	bic.w	r3, r3, #3
 8022aea:	f043 0301 	orr.w	r3, r3, #1
 8022aee:	81a3      	strh	r3, [r4, #12]
 8022af0:	89a0      	ldrh	r0, [r4, #12]
 8022af2:	4305      	orrs	r5, r0
 8022af4:	81a5      	strh	r5, [r4, #12]
 8022af6:	e7cd      	b.n	8022a94 <__smakebuf_r+0x18>
 8022af8:	08022891 	.word	0x08022891

08022afc <__malloc_lock>:
 8022afc:	4801      	ldr	r0, [pc, #4]	; (8022b04 <__malloc_lock+0x8>)
 8022afe:	f7ff b850 	b.w	8021ba2 <__retarget_lock_acquire_recursive>
 8022b02:	bf00      	nop
 8022b04:	200008ec 	.word	0x200008ec

08022b08 <__malloc_unlock>:
 8022b08:	4801      	ldr	r0, [pc, #4]	; (8022b10 <__malloc_unlock+0x8>)
 8022b0a:	f7ff b84c 	b.w	8021ba6 <__retarget_lock_release_recursive>
 8022b0e:	bf00      	nop
 8022b10:	200008ec 	.word	0x200008ec

08022b14 <_realloc_r>:
 8022b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b16:	4607      	mov	r7, r0
 8022b18:	4614      	mov	r4, r2
 8022b1a:	460e      	mov	r6, r1
 8022b1c:	b921      	cbnz	r1, 8022b28 <_realloc_r+0x14>
 8022b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8022b22:	4611      	mov	r1, r2
 8022b24:	f7ff b8de 	b.w	8021ce4 <_malloc_r>
 8022b28:	b922      	cbnz	r2, 8022b34 <_realloc_r+0x20>
 8022b2a:	f7ff f88b 	bl	8021c44 <_free_r>
 8022b2e:	4625      	mov	r5, r4
 8022b30:	4628      	mov	r0, r5
 8022b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b34:	f000 fa0a 	bl	8022f4c <_malloc_usable_size_r>
 8022b38:	42a0      	cmp	r0, r4
 8022b3a:	d20f      	bcs.n	8022b5c <_realloc_r+0x48>
 8022b3c:	4621      	mov	r1, r4
 8022b3e:	4638      	mov	r0, r7
 8022b40:	f7ff f8d0 	bl	8021ce4 <_malloc_r>
 8022b44:	4605      	mov	r5, r0
 8022b46:	2800      	cmp	r0, #0
 8022b48:	d0f2      	beq.n	8022b30 <_realloc_r+0x1c>
 8022b4a:	4631      	mov	r1, r6
 8022b4c:	4622      	mov	r2, r4
 8022b4e:	f7ff f849 	bl	8021be4 <memcpy>
 8022b52:	4631      	mov	r1, r6
 8022b54:	4638      	mov	r0, r7
 8022b56:	f7ff f875 	bl	8021c44 <_free_r>
 8022b5a:	e7e9      	b.n	8022b30 <_realloc_r+0x1c>
 8022b5c:	4635      	mov	r5, r6
 8022b5e:	e7e7      	b.n	8022b30 <_realloc_r+0x1c>

08022b60 <__ssputs_r>:
 8022b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b64:	688e      	ldr	r6, [r1, #8]
 8022b66:	429e      	cmp	r6, r3
 8022b68:	4682      	mov	sl, r0
 8022b6a:	460c      	mov	r4, r1
 8022b6c:	4690      	mov	r8, r2
 8022b6e:	461f      	mov	r7, r3
 8022b70:	d838      	bhi.n	8022be4 <__ssputs_r+0x84>
 8022b72:	898a      	ldrh	r2, [r1, #12]
 8022b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022b78:	d032      	beq.n	8022be0 <__ssputs_r+0x80>
 8022b7a:	6825      	ldr	r5, [r4, #0]
 8022b7c:	6909      	ldr	r1, [r1, #16]
 8022b7e:	eba5 0901 	sub.w	r9, r5, r1
 8022b82:	6965      	ldr	r5, [r4, #20]
 8022b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022b88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022b8c:	3301      	adds	r3, #1
 8022b8e:	444b      	add	r3, r9
 8022b90:	106d      	asrs	r5, r5, #1
 8022b92:	429d      	cmp	r5, r3
 8022b94:	bf38      	it	cc
 8022b96:	461d      	movcc	r5, r3
 8022b98:	0553      	lsls	r3, r2, #21
 8022b9a:	d531      	bpl.n	8022c00 <__ssputs_r+0xa0>
 8022b9c:	4629      	mov	r1, r5
 8022b9e:	f7ff f8a1 	bl	8021ce4 <_malloc_r>
 8022ba2:	4606      	mov	r6, r0
 8022ba4:	b950      	cbnz	r0, 8022bbc <__ssputs_r+0x5c>
 8022ba6:	230c      	movs	r3, #12
 8022ba8:	f8ca 3000 	str.w	r3, [sl]
 8022bac:	89a3      	ldrh	r3, [r4, #12]
 8022bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022bb2:	81a3      	strh	r3, [r4, #12]
 8022bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8022bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bbc:	6921      	ldr	r1, [r4, #16]
 8022bbe:	464a      	mov	r2, r9
 8022bc0:	f7ff f810 	bl	8021be4 <memcpy>
 8022bc4:	89a3      	ldrh	r3, [r4, #12]
 8022bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022bce:	81a3      	strh	r3, [r4, #12]
 8022bd0:	6126      	str	r6, [r4, #16]
 8022bd2:	6165      	str	r5, [r4, #20]
 8022bd4:	444e      	add	r6, r9
 8022bd6:	eba5 0509 	sub.w	r5, r5, r9
 8022bda:	6026      	str	r6, [r4, #0]
 8022bdc:	60a5      	str	r5, [r4, #8]
 8022bde:	463e      	mov	r6, r7
 8022be0:	42be      	cmp	r6, r7
 8022be2:	d900      	bls.n	8022be6 <__ssputs_r+0x86>
 8022be4:	463e      	mov	r6, r7
 8022be6:	4632      	mov	r2, r6
 8022be8:	6820      	ldr	r0, [r4, #0]
 8022bea:	4641      	mov	r1, r8
 8022bec:	f7ff f808 	bl	8021c00 <memmove>
 8022bf0:	68a3      	ldr	r3, [r4, #8]
 8022bf2:	6822      	ldr	r2, [r4, #0]
 8022bf4:	1b9b      	subs	r3, r3, r6
 8022bf6:	4432      	add	r2, r6
 8022bf8:	60a3      	str	r3, [r4, #8]
 8022bfa:	6022      	str	r2, [r4, #0]
 8022bfc:	2000      	movs	r0, #0
 8022bfe:	e7db      	b.n	8022bb8 <__ssputs_r+0x58>
 8022c00:	462a      	mov	r2, r5
 8022c02:	f7ff ff87 	bl	8022b14 <_realloc_r>
 8022c06:	4606      	mov	r6, r0
 8022c08:	2800      	cmp	r0, #0
 8022c0a:	d1e1      	bne.n	8022bd0 <__ssputs_r+0x70>
 8022c0c:	6921      	ldr	r1, [r4, #16]
 8022c0e:	4650      	mov	r0, sl
 8022c10:	f7ff f818 	bl	8021c44 <_free_r>
 8022c14:	e7c7      	b.n	8022ba6 <__ssputs_r+0x46>
	...

08022c18 <_svfiprintf_r>:
 8022c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c1c:	4698      	mov	r8, r3
 8022c1e:	898b      	ldrh	r3, [r1, #12]
 8022c20:	061b      	lsls	r3, r3, #24
 8022c22:	b09d      	sub	sp, #116	; 0x74
 8022c24:	4607      	mov	r7, r0
 8022c26:	460d      	mov	r5, r1
 8022c28:	4614      	mov	r4, r2
 8022c2a:	d50e      	bpl.n	8022c4a <_svfiprintf_r+0x32>
 8022c2c:	690b      	ldr	r3, [r1, #16]
 8022c2e:	b963      	cbnz	r3, 8022c4a <_svfiprintf_r+0x32>
 8022c30:	2140      	movs	r1, #64	; 0x40
 8022c32:	f7ff f857 	bl	8021ce4 <_malloc_r>
 8022c36:	6028      	str	r0, [r5, #0]
 8022c38:	6128      	str	r0, [r5, #16]
 8022c3a:	b920      	cbnz	r0, 8022c46 <_svfiprintf_r+0x2e>
 8022c3c:	230c      	movs	r3, #12
 8022c3e:	603b      	str	r3, [r7, #0]
 8022c40:	f04f 30ff 	mov.w	r0, #4294967295
 8022c44:	e0d1      	b.n	8022dea <_svfiprintf_r+0x1d2>
 8022c46:	2340      	movs	r3, #64	; 0x40
 8022c48:	616b      	str	r3, [r5, #20]
 8022c4a:	2300      	movs	r3, #0
 8022c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8022c4e:	2320      	movs	r3, #32
 8022c50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022c54:	f8cd 800c 	str.w	r8, [sp, #12]
 8022c58:	2330      	movs	r3, #48	; 0x30
 8022c5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022e04 <_svfiprintf_r+0x1ec>
 8022c5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022c62:	f04f 0901 	mov.w	r9, #1
 8022c66:	4623      	mov	r3, r4
 8022c68:	469a      	mov	sl, r3
 8022c6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022c6e:	b10a      	cbz	r2, 8022c74 <_svfiprintf_r+0x5c>
 8022c70:	2a25      	cmp	r2, #37	; 0x25
 8022c72:	d1f9      	bne.n	8022c68 <_svfiprintf_r+0x50>
 8022c74:	ebba 0b04 	subs.w	fp, sl, r4
 8022c78:	d00b      	beq.n	8022c92 <_svfiprintf_r+0x7a>
 8022c7a:	465b      	mov	r3, fp
 8022c7c:	4622      	mov	r2, r4
 8022c7e:	4629      	mov	r1, r5
 8022c80:	4638      	mov	r0, r7
 8022c82:	f7ff ff6d 	bl	8022b60 <__ssputs_r>
 8022c86:	3001      	adds	r0, #1
 8022c88:	f000 80aa 	beq.w	8022de0 <_svfiprintf_r+0x1c8>
 8022c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022c8e:	445a      	add	r2, fp
 8022c90:	9209      	str	r2, [sp, #36]	; 0x24
 8022c92:	f89a 3000 	ldrb.w	r3, [sl]
 8022c96:	2b00      	cmp	r3, #0
 8022c98:	f000 80a2 	beq.w	8022de0 <_svfiprintf_r+0x1c8>
 8022c9c:	2300      	movs	r3, #0
 8022c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8022ca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022ca6:	f10a 0a01 	add.w	sl, sl, #1
 8022caa:	9304      	str	r3, [sp, #16]
 8022cac:	9307      	str	r3, [sp, #28]
 8022cae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022cb2:	931a      	str	r3, [sp, #104]	; 0x68
 8022cb4:	4654      	mov	r4, sl
 8022cb6:	2205      	movs	r2, #5
 8022cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cbc:	4851      	ldr	r0, [pc, #324]	; (8022e04 <_svfiprintf_r+0x1ec>)
 8022cbe:	f7dd fa9f 	bl	8000200 <memchr>
 8022cc2:	9a04      	ldr	r2, [sp, #16]
 8022cc4:	b9d8      	cbnz	r0, 8022cfe <_svfiprintf_r+0xe6>
 8022cc6:	06d0      	lsls	r0, r2, #27
 8022cc8:	bf44      	itt	mi
 8022cca:	2320      	movmi	r3, #32
 8022ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022cd0:	0711      	lsls	r1, r2, #28
 8022cd2:	bf44      	itt	mi
 8022cd4:	232b      	movmi	r3, #43	; 0x2b
 8022cd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022cda:	f89a 3000 	ldrb.w	r3, [sl]
 8022cde:	2b2a      	cmp	r3, #42	; 0x2a
 8022ce0:	d015      	beq.n	8022d0e <_svfiprintf_r+0xf6>
 8022ce2:	9a07      	ldr	r2, [sp, #28]
 8022ce4:	4654      	mov	r4, sl
 8022ce6:	2000      	movs	r0, #0
 8022ce8:	f04f 0c0a 	mov.w	ip, #10
 8022cec:	4621      	mov	r1, r4
 8022cee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022cf2:	3b30      	subs	r3, #48	; 0x30
 8022cf4:	2b09      	cmp	r3, #9
 8022cf6:	d94e      	bls.n	8022d96 <_svfiprintf_r+0x17e>
 8022cf8:	b1b0      	cbz	r0, 8022d28 <_svfiprintf_r+0x110>
 8022cfa:	9207      	str	r2, [sp, #28]
 8022cfc:	e014      	b.n	8022d28 <_svfiprintf_r+0x110>
 8022cfe:	eba0 0308 	sub.w	r3, r0, r8
 8022d02:	fa09 f303 	lsl.w	r3, r9, r3
 8022d06:	4313      	orrs	r3, r2
 8022d08:	9304      	str	r3, [sp, #16]
 8022d0a:	46a2      	mov	sl, r4
 8022d0c:	e7d2      	b.n	8022cb4 <_svfiprintf_r+0x9c>
 8022d0e:	9b03      	ldr	r3, [sp, #12]
 8022d10:	1d19      	adds	r1, r3, #4
 8022d12:	681b      	ldr	r3, [r3, #0]
 8022d14:	9103      	str	r1, [sp, #12]
 8022d16:	2b00      	cmp	r3, #0
 8022d18:	bfbb      	ittet	lt
 8022d1a:	425b      	neglt	r3, r3
 8022d1c:	f042 0202 	orrlt.w	r2, r2, #2
 8022d20:	9307      	strge	r3, [sp, #28]
 8022d22:	9307      	strlt	r3, [sp, #28]
 8022d24:	bfb8      	it	lt
 8022d26:	9204      	strlt	r2, [sp, #16]
 8022d28:	7823      	ldrb	r3, [r4, #0]
 8022d2a:	2b2e      	cmp	r3, #46	; 0x2e
 8022d2c:	d10c      	bne.n	8022d48 <_svfiprintf_r+0x130>
 8022d2e:	7863      	ldrb	r3, [r4, #1]
 8022d30:	2b2a      	cmp	r3, #42	; 0x2a
 8022d32:	d135      	bne.n	8022da0 <_svfiprintf_r+0x188>
 8022d34:	9b03      	ldr	r3, [sp, #12]
 8022d36:	1d1a      	adds	r2, r3, #4
 8022d38:	681b      	ldr	r3, [r3, #0]
 8022d3a:	9203      	str	r2, [sp, #12]
 8022d3c:	2b00      	cmp	r3, #0
 8022d3e:	bfb8      	it	lt
 8022d40:	f04f 33ff 	movlt.w	r3, #4294967295
 8022d44:	3402      	adds	r4, #2
 8022d46:	9305      	str	r3, [sp, #20]
 8022d48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022e14 <_svfiprintf_r+0x1fc>
 8022d4c:	7821      	ldrb	r1, [r4, #0]
 8022d4e:	2203      	movs	r2, #3
 8022d50:	4650      	mov	r0, sl
 8022d52:	f7dd fa55 	bl	8000200 <memchr>
 8022d56:	b140      	cbz	r0, 8022d6a <_svfiprintf_r+0x152>
 8022d58:	2340      	movs	r3, #64	; 0x40
 8022d5a:	eba0 000a 	sub.w	r0, r0, sl
 8022d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8022d62:	9b04      	ldr	r3, [sp, #16]
 8022d64:	4303      	orrs	r3, r0
 8022d66:	3401      	adds	r4, #1
 8022d68:	9304      	str	r3, [sp, #16]
 8022d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022d6e:	4826      	ldr	r0, [pc, #152]	; (8022e08 <_svfiprintf_r+0x1f0>)
 8022d70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022d74:	2206      	movs	r2, #6
 8022d76:	f7dd fa43 	bl	8000200 <memchr>
 8022d7a:	2800      	cmp	r0, #0
 8022d7c:	d038      	beq.n	8022df0 <_svfiprintf_r+0x1d8>
 8022d7e:	4b23      	ldr	r3, [pc, #140]	; (8022e0c <_svfiprintf_r+0x1f4>)
 8022d80:	bb1b      	cbnz	r3, 8022dca <_svfiprintf_r+0x1b2>
 8022d82:	9b03      	ldr	r3, [sp, #12]
 8022d84:	3307      	adds	r3, #7
 8022d86:	f023 0307 	bic.w	r3, r3, #7
 8022d8a:	3308      	adds	r3, #8
 8022d8c:	9303      	str	r3, [sp, #12]
 8022d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022d90:	4433      	add	r3, r6
 8022d92:	9309      	str	r3, [sp, #36]	; 0x24
 8022d94:	e767      	b.n	8022c66 <_svfiprintf_r+0x4e>
 8022d96:	fb0c 3202 	mla	r2, ip, r2, r3
 8022d9a:	460c      	mov	r4, r1
 8022d9c:	2001      	movs	r0, #1
 8022d9e:	e7a5      	b.n	8022cec <_svfiprintf_r+0xd4>
 8022da0:	2300      	movs	r3, #0
 8022da2:	3401      	adds	r4, #1
 8022da4:	9305      	str	r3, [sp, #20]
 8022da6:	4619      	mov	r1, r3
 8022da8:	f04f 0c0a 	mov.w	ip, #10
 8022dac:	4620      	mov	r0, r4
 8022dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022db2:	3a30      	subs	r2, #48	; 0x30
 8022db4:	2a09      	cmp	r2, #9
 8022db6:	d903      	bls.n	8022dc0 <_svfiprintf_r+0x1a8>
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d0c5      	beq.n	8022d48 <_svfiprintf_r+0x130>
 8022dbc:	9105      	str	r1, [sp, #20]
 8022dbe:	e7c3      	b.n	8022d48 <_svfiprintf_r+0x130>
 8022dc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8022dc4:	4604      	mov	r4, r0
 8022dc6:	2301      	movs	r3, #1
 8022dc8:	e7f0      	b.n	8022dac <_svfiprintf_r+0x194>
 8022dca:	ab03      	add	r3, sp, #12
 8022dcc:	9300      	str	r3, [sp, #0]
 8022dce:	462a      	mov	r2, r5
 8022dd0:	4b0f      	ldr	r3, [pc, #60]	; (8022e10 <_svfiprintf_r+0x1f8>)
 8022dd2:	a904      	add	r1, sp, #16
 8022dd4:	4638      	mov	r0, r7
 8022dd6:	f3af 8000 	nop.w
 8022dda:	1c42      	adds	r2, r0, #1
 8022ddc:	4606      	mov	r6, r0
 8022dde:	d1d6      	bne.n	8022d8e <_svfiprintf_r+0x176>
 8022de0:	89ab      	ldrh	r3, [r5, #12]
 8022de2:	065b      	lsls	r3, r3, #25
 8022de4:	f53f af2c 	bmi.w	8022c40 <_svfiprintf_r+0x28>
 8022de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022dea:	b01d      	add	sp, #116	; 0x74
 8022dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022df0:	ab03      	add	r3, sp, #12
 8022df2:	9300      	str	r3, [sp, #0]
 8022df4:	462a      	mov	r2, r5
 8022df6:	4b06      	ldr	r3, [pc, #24]	; (8022e10 <_svfiprintf_r+0x1f8>)
 8022df8:	a904      	add	r1, sp, #16
 8022dfa:	4638      	mov	r0, r7
 8022dfc:	f7ff f994 	bl	8022128 <_printf_i>
 8022e00:	e7eb      	b.n	8022dda <_svfiprintf_r+0x1c2>
 8022e02:	bf00      	nop
 8022e04:	080288ec 	.word	0x080288ec
 8022e08:	080288f6 	.word	0x080288f6
 8022e0c:	00000000 	.word	0x00000000
 8022e10:	08022b61 	.word	0x08022b61
 8022e14:	080288f2 	.word	0x080288f2

08022e18 <__sread>:
 8022e18:	b510      	push	{r4, lr}
 8022e1a:	460c      	mov	r4, r1
 8022e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e20:	f000 f89c 	bl	8022f5c <_read_r>
 8022e24:	2800      	cmp	r0, #0
 8022e26:	bfab      	itete	ge
 8022e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8022e2c:	181b      	addge	r3, r3, r0
 8022e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022e32:	bfac      	ite	ge
 8022e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8022e36:	81a3      	strhlt	r3, [r4, #12]
 8022e38:	bd10      	pop	{r4, pc}

08022e3a <__swrite>:
 8022e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e3e:	461f      	mov	r7, r3
 8022e40:	898b      	ldrh	r3, [r1, #12]
 8022e42:	05db      	lsls	r3, r3, #23
 8022e44:	4605      	mov	r5, r0
 8022e46:	460c      	mov	r4, r1
 8022e48:	4616      	mov	r6, r2
 8022e4a:	d505      	bpl.n	8022e58 <__swrite+0x1e>
 8022e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e50:	2302      	movs	r3, #2
 8022e52:	2200      	movs	r2, #0
 8022e54:	f000 f868 	bl	8022f28 <_lseek_r>
 8022e58:	89a3      	ldrh	r3, [r4, #12]
 8022e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022e62:	81a3      	strh	r3, [r4, #12]
 8022e64:	4632      	mov	r2, r6
 8022e66:	463b      	mov	r3, r7
 8022e68:	4628      	mov	r0, r5
 8022e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022e6e:	f000 b817 	b.w	8022ea0 <_write_r>

08022e72 <__sseek>:
 8022e72:	b510      	push	{r4, lr}
 8022e74:	460c      	mov	r4, r1
 8022e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e7a:	f000 f855 	bl	8022f28 <_lseek_r>
 8022e7e:	1c43      	adds	r3, r0, #1
 8022e80:	89a3      	ldrh	r3, [r4, #12]
 8022e82:	bf15      	itete	ne
 8022e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8022e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022e8e:	81a3      	strheq	r3, [r4, #12]
 8022e90:	bf18      	it	ne
 8022e92:	81a3      	strhne	r3, [r4, #12]
 8022e94:	bd10      	pop	{r4, pc}

08022e96 <__sclose>:
 8022e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e9a:	f000 b813 	b.w	8022ec4 <_close_r>
	...

08022ea0 <_write_r>:
 8022ea0:	b538      	push	{r3, r4, r5, lr}
 8022ea2:	4d07      	ldr	r5, [pc, #28]	; (8022ec0 <_write_r+0x20>)
 8022ea4:	4604      	mov	r4, r0
 8022ea6:	4608      	mov	r0, r1
 8022ea8:	4611      	mov	r1, r2
 8022eaa:	2200      	movs	r2, #0
 8022eac:	602a      	str	r2, [r5, #0]
 8022eae:	461a      	mov	r2, r3
 8022eb0:	f7df fabf 	bl	8002432 <_write>
 8022eb4:	1c43      	adds	r3, r0, #1
 8022eb6:	d102      	bne.n	8022ebe <_write_r+0x1e>
 8022eb8:	682b      	ldr	r3, [r5, #0]
 8022eba:	b103      	cbz	r3, 8022ebe <_write_r+0x1e>
 8022ebc:	6023      	str	r3, [r4, #0]
 8022ebe:	bd38      	pop	{r3, r4, r5, pc}
 8022ec0:	200008f8 	.word	0x200008f8

08022ec4 <_close_r>:
 8022ec4:	b538      	push	{r3, r4, r5, lr}
 8022ec6:	4d06      	ldr	r5, [pc, #24]	; (8022ee0 <_close_r+0x1c>)
 8022ec8:	2300      	movs	r3, #0
 8022eca:	4604      	mov	r4, r0
 8022ecc:	4608      	mov	r0, r1
 8022ece:	602b      	str	r3, [r5, #0]
 8022ed0:	f7df facb 	bl	800246a <_close>
 8022ed4:	1c43      	adds	r3, r0, #1
 8022ed6:	d102      	bne.n	8022ede <_close_r+0x1a>
 8022ed8:	682b      	ldr	r3, [r5, #0]
 8022eda:	b103      	cbz	r3, 8022ede <_close_r+0x1a>
 8022edc:	6023      	str	r3, [r4, #0]
 8022ede:	bd38      	pop	{r3, r4, r5, pc}
 8022ee0:	200008f8 	.word	0x200008f8

08022ee4 <_fstat_r>:
 8022ee4:	b538      	push	{r3, r4, r5, lr}
 8022ee6:	4d07      	ldr	r5, [pc, #28]	; (8022f04 <_fstat_r+0x20>)
 8022ee8:	2300      	movs	r3, #0
 8022eea:	4604      	mov	r4, r0
 8022eec:	4608      	mov	r0, r1
 8022eee:	4611      	mov	r1, r2
 8022ef0:	602b      	str	r3, [r5, #0]
 8022ef2:	f7df fac6 	bl	8002482 <_fstat>
 8022ef6:	1c43      	adds	r3, r0, #1
 8022ef8:	d102      	bne.n	8022f00 <_fstat_r+0x1c>
 8022efa:	682b      	ldr	r3, [r5, #0]
 8022efc:	b103      	cbz	r3, 8022f00 <_fstat_r+0x1c>
 8022efe:	6023      	str	r3, [r4, #0]
 8022f00:	bd38      	pop	{r3, r4, r5, pc}
 8022f02:	bf00      	nop
 8022f04:	200008f8 	.word	0x200008f8

08022f08 <_isatty_r>:
 8022f08:	b538      	push	{r3, r4, r5, lr}
 8022f0a:	4d06      	ldr	r5, [pc, #24]	; (8022f24 <_isatty_r+0x1c>)
 8022f0c:	2300      	movs	r3, #0
 8022f0e:	4604      	mov	r4, r0
 8022f10:	4608      	mov	r0, r1
 8022f12:	602b      	str	r3, [r5, #0]
 8022f14:	f7df fac5 	bl	80024a2 <_isatty>
 8022f18:	1c43      	adds	r3, r0, #1
 8022f1a:	d102      	bne.n	8022f22 <_isatty_r+0x1a>
 8022f1c:	682b      	ldr	r3, [r5, #0]
 8022f1e:	b103      	cbz	r3, 8022f22 <_isatty_r+0x1a>
 8022f20:	6023      	str	r3, [r4, #0]
 8022f22:	bd38      	pop	{r3, r4, r5, pc}
 8022f24:	200008f8 	.word	0x200008f8

08022f28 <_lseek_r>:
 8022f28:	b538      	push	{r3, r4, r5, lr}
 8022f2a:	4d07      	ldr	r5, [pc, #28]	; (8022f48 <_lseek_r+0x20>)
 8022f2c:	4604      	mov	r4, r0
 8022f2e:	4608      	mov	r0, r1
 8022f30:	4611      	mov	r1, r2
 8022f32:	2200      	movs	r2, #0
 8022f34:	602a      	str	r2, [r5, #0]
 8022f36:	461a      	mov	r2, r3
 8022f38:	f7df fabe 	bl	80024b8 <_lseek>
 8022f3c:	1c43      	adds	r3, r0, #1
 8022f3e:	d102      	bne.n	8022f46 <_lseek_r+0x1e>
 8022f40:	682b      	ldr	r3, [r5, #0]
 8022f42:	b103      	cbz	r3, 8022f46 <_lseek_r+0x1e>
 8022f44:	6023      	str	r3, [r4, #0]
 8022f46:	bd38      	pop	{r3, r4, r5, pc}
 8022f48:	200008f8 	.word	0x200008f8

08022f4c <_malloc_usable_size_r>:
 8022f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022f50:	1f18      	subs	r0, r3, #4
 8022f52:	2b00      	cmp	r3, #0
 8022f54:	bfbc      	itt	lt
 8022f56:	580b      	ldrlt	r3, [r1, r0]
 8022f58:	18c0      	addlt	r0, r0, r3
 8022f5a:	4770      	bx	lr

08022f5c <_read_r>:
 8022f5c:	b538      	push	{r3, r4, r5, lr}
 8022f5e:	4d07      	ldr	r5, [pc, #28]	; (8022f7c <_read_r+0x20>)
 8022f60:	4604      	mov	r4, r0
 8022f62:	4608      	mov	r0, r1
 8022f64:	4611      	mov	r1, r2
 8022f66:	2200      	movs	r2, #0
 8022f68:	602a      	str	r2, [r5, #0]
 8022f6a:	461a      	mov	r2, r3
 8022f6c:	f7df fa44 	bl	80023f8 <_read>
 8022f70:	1c43      	adds	r3, r0, #1
 8022f72:	d102      	bne.n	8022f7a <_read_r+0x1e>
 8022f74:	682b      	ldr	r3, [r5, #0]
 8022f76:	b103      	cbz	r3, 8022f7a <_read_r+0x1e>
 8022f78:	6023      	str	r3, [r4, #0]
 8022f7a:	bd38      	pop	{r3, r4, r5, pc}
 8022f7c:	200008f8 	.word	0x200008f8

08022f80 <_init>:
 8022f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f82:	bf00      	nop
 8022f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f86:	bc08      	pop	{r3}
 8022f88:	469e      	mov	lr, r3
 8022f8a:	4770      	bx	lr

08022f8c <_fini>:
 8022f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f8e:	bf00      	nop
 8022f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022f92:	bc08      	pop	{r3}
 8022f94:	469e      	mov	lr, r3
 8022f96:	4770      	bx	lr
