/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/
#include "tensorflow/lite/kernels/internal/reference/pad.h"

#include <string.h>

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/internal/portable_tensor.h"
#include "tensorflow/lite/kernels/internal/types.h"
#include "tensorflow/lite/kernels/kernel_util.h"
#include "tensorflow/lite/kernels/op_macros.h"
#include "tensorflow/lite/micro/kernels/kernel_util.h"

#include "overlay_fw.h"

#ifdef OVERLAY_FW
extern "C" {
#include "dmacopying.h"
#include "main.h"
}

extern UART_HandleTypeDef huart1;
extern TIM_HandleTypeDef  htim10;

extern volatile DMACopyQue DMAQue[NUM_DMA_STREAMS_USED];

extern volatile PartitionedExecutionState partitioned_exec_state;

extern volatile TfLiteEvalTensor oc_input_tensors[OP_MAX_INPUT_SIZE];
//extern volatile uint8_t oc_input_tensors_buffers[OP_MAX_INPUT_SIZE][TENSOR_BUFFER_SIZE];
//extern volatile int oc_input_tensors_dims_data[OP_MAX_INPUT_SIZE][4];
//extern volatile TfLiteIntArray oc_input_tensors_dims_array_0;
//extern volatile TfLiteIntArray oc_input_tensors_dims_array_1;

extern volatile TfLiteEvalTensor oc_input2_tensors[OP_MAX_INPUT_SIZE];
//extern volatile uint8_t oc_input2_tensors_buffers[OP_MAX_INPUT_SIZE][TENSOR_BUFFER_SIZE];
//extern volatile int oc_input2_tensors_dims_data[OP_MAX_INPUT_SIZE][4];
//extern volatile TfLiteIntArray oc_input2_tensors_dims_array_0;
//extern volatile TfLiteIntArray oc_input2_tensors_dims_array_1;

#ifdef OVERLAY_BIASES
extern volatile TfLiteEvalTensor oc_input3_tensor;
//extern volatile uint8_t oc_input3_tensor_buffer[BIAS_TENSOR_BUFFER_SIZE];
//extern volatile int oc_input3_tensor_dims_data[MAX_NUM_DIMS];
//extern volatile TfLiteIntArray oc_input3_tensor_dims_array;
#endif

extern volatile TfLiteEvalTensor oc_output_tensors;
//extern uint8_t oc_output_tensors_buffers[TENSOR_BUFFER_SIZE];
//extern volatile int oc_output_tensors_dims_data[4];
//extern volatile TfLiteIntArray oc_output_tensors_dims_array;

extern uint32_t dma_waiting;
uint32_t dma_waiting_pad = 0;
uint32_t dma_waiting_pad_p0 = 0;
uint16_t dma_waiting_pad_time = 0;
#endif

namespace tflite {
namespace ops {
namespace micro {
namespace pad {
namespace {

struct OpData {
  PadParams params;
  int32_t output_zero_point;
};

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
  TFLITE_DCHECK(node->user_data != nullptr);
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);

  const TfLiteTensor* input = GetInput(context, node, /*index=*/0);
  TF_LITE_ENSURE(context, input != nullptr);
  const TfLiteTensor* paddings = GetInput(context, node, /*index=*/1);
  TF_LITE_ENSURE(context, paddings != nullptr);
  const TfLiteTensor* constant_values =
      NumInputs(node) == 3 ? GetInput(context, node, /*index=*/2) : nullptr;
  TfLiteTensor* output = GetOutput(context, node, /*index=*/0);
  TF_LITE_ENSURE(context, output != nullptr);

  TF_LITE_ENSURE_EQ(context, input->type, output->type);

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(context, NumDimensions(input) <=
                              reference_ops::PadKernelMaxDimensionCount());

  if (constant_values != nullptr) {
    TF_LITE_ENSURE_EQ(context, input->type, constant_values->type);
    // Ensure that constant_values is a scalar.
    TF_LITE_ENSURE_EQ(context, NumElements(constant_values), 1);
  }

  // There must be a pair of paddings for each output dimension.
  TF_LITE_ENSURE_EQ(context, GetTensorShape(paddings).FlatSize(),
                    output->dims->size * 2);

  // On Micro, outputs must be properly sized by the converter.
  // NOTE: This data is only available because the paddings buffer is stored in
  // the flatbuffer:
  TF_LITE_ENSURE(context, IsConstantTensor(paddings));
  const int32_t* paddings_data = GetTensorData<int32_t>(paddings);
  for (int i = 0; i < output->dims->size; i++) {
    int output_dim = output->dims->data[i];
    int expected_dim =
        input->dims->data[i] + paddings_data[i * 2] + paddings_data[i * 2 + 1];
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
  }

  // Calculate OpData:
  data->params.resizing_category = ResizingCategory::kGenericResize;
  const int paddings_total = GetTensorShape(paddings).FlatSize();
  if (paddings_total == 8 && (paddings_data[0] == 0 && paddings_data[1] == 0) &&
      (paddings_data[6] == 0 && paddings_data[7] == 0)) {
    data->params.resizing_category = ResizingCategory::kImageStyle;
  }

  const int num_input_dimensions = NumDimensions(input);
  data->params.left_padding_count = num_input_dimensions;
  data->params.right_padding_count = num_input_dimensions;

  for (int idx = num_input_dimensions - 1; idx >= 0; --idx) {
    data->params.left_padding[idx] = paddings_data[idx * 2];
    data->params.right_padding[idx] = paddings_data[idx * 2 + 1];
  }

  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
    if (constant_values == nullptr) {
      // Quantized Pad requires that 0 is represented in the quantized
      // range.
      if (input->type == kTfLiteUInt8) {
        TF_LITE_ENSURE(context, output->params.zero_point >=
                                    std::numeric_limits<uint8_t>::min());
        TF_LITE_ENSURE(context, output->params.zero_point <=
                                    std::numeric_limits<uint8_t>::max());
      } else {
        TF_LITE_ENSURE(context, output->params.zero_point >=
                                    std::numeric_limits<int8_t>::min());
        TF_LITE_ENSURE(context, output->params.zero_point <=
                                    std::numeric_limits<int8_t>::max());
      }
    } else {
      // Quantized Pad requires that 'constant_values' is represented in the
      // same quantized range as the input and output tensors.
      TF_LITE_ENSURE_EQ(context, output->params.zero_point,
                        constant_values->params.zero_point);
      TF_LITE_ENSURE_EQ(context, static_cast<double>(output->params.scale),
                        static_cast<double>(constant_values->params.scale));
    }
    data->output_zero_point = output->params.zero_point;
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
	TFLITE_DCHECK(node->user_data != nullptr);
	#ifdef OVERLAY_FW
	OpData* data = static_cast<OpData*>(node->user_data);
	#else
	const OpData* data = static_cast<const OpData*>(node->user_data);
	#endif

	const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, /*index=*/0);
	const TfLiteEvalTensor* constant_values = NumInputs(node) == 3 ? tflite::micro::GetEvalInput(context, node, /*index=*/2) : nullptr;
	TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, /*index=*/0);

	#ifdef OVERLAY_FW
	PadParams * params = &data->params;

	int32_t op_h_top_padding	= params->left_padding[DIM_IDX_HEIGHT];
	int32_t op_h_bot_padding	= params->right_padding[DIM_IDX_HEIGHT];

	volatile PartitionInfo * op_part_info		= &partitioned_exec_state.ops_parts_info[partitioned_exec_state.currentOp];
	volatile PartitionInfo * next_op_part_info	= &partitioned_exec_state.ops_parts_info[partitioned_exec_state.currentOp+1];

//	OVERLAY_CopyInData(&DMAQue, op_part_info, 0, input, &oc_input_tensors[partitioned_exec_state.pingPong]);

	uint32_t nextOpFirstPartCopied			= 0;
	uint32_t output_tensor_produced_bytes	= 0;

//	StartTransfer(&DmaHandle);
//	while ( (DMAQue[1].readIdx != DMAQue[1].writeIdx) );

	#ifdef OVERLAY_FILTERS
	const TfLiteEvalTensor * next_op_filter = next_op_part_info->filter;

	if ( next_op_filter ) {
		uint32_t next_op_filterTensorSize	=	next_op_filter->dims->data[0] *
												next_op_filter->dims->data[1] *
												next_op_filter->dims->data[2] *
												next_op_filter->dims->data[3];
		if ( next_op_filterTensorSize < INPUT2_TENSOR_BUFFER_0_SIZE )
			DMA_CopyTensor(&DMAQue[0], next_op_filter, &oc_input2_tensors[0]);
	}
	#endif

	#ifdef OVERLAY_BIASES
	const TfLiteEvalTensor * next_op_bias = next_op_part_info->bias;

	if ( next_op_bias ) {
		uint32_t next_op_biasTensorSize		=	next_op_bias->dims->data[0] * 4;
		if ( next_op_biasTensorSize < BIAS_TENSOR_BUFFER_SIZE )
			DMA_CopyTensor(&DMAQue[0], next_op_bias, &oc_input3_tensor);
	}
	#endif

	// start pipeline
	for ( int32_t p = 0; p < op_part_info->numParts; p++ ) {

		partitioned_exec_state.currentPart = p;

		uint16_t timer_val;
	    int uart_buf_len;
		char uart_buf[50];

		timer_val = __HAL_TIM_GET_COUNTER(&htim10);

		// wait till input data copied
		while ( (DMAQue[0].readIdx != DMAQue[0].writeIdx) );

//		while ( (DMAQue[0].readIdx != DMAQue[0].writeIdx) && (DMAQue[1].readIdx != DMAQue[1].writeIdx) ) {
//		while ( DMAQue[0].readIdx != DMAQue[0].writeIdx ) {
//			if (p != 0)
//				dma_waiting_pad++;
//			else
//				dma_waiting_pad_p0++;
//		}

		timer_val = __HAL_TIM_GET_COUNTER(&htim10) - timer_val;
		if (p != 0)
			dma_waiting_pad_time += timer_val;

//		uart_buf_len = sprintf(uart_buf, "dma_waiting_pad: %u\n", dma_waiting_pad);
//		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);
//		uart_buf_len = sprintf(uart_buf, "dma_wait: %u\n", dma_waiting);
//		HAL_UART_Transmit(&huart1, (uint8_t *)uart_buf, uart_buf_len, 100);

//		SCB_InvalidateDCache_by_Addr( (uint32_t*) ( ( (uint32_t)&oc_input_tensors_buffers[partitioned_exec_state.pingPong][0] ) & ~(uint32_t)0x1F), bytes_in_partition + 32 );

		// get next input and setup dma before processing copied in input
		if ( p < (op_part_info->numParts-1) )
			OVERLAY_CopyInData(&DMAQue[0], op_part_info, p+1, &oc_input_tensors[!partitioned_exec_state.pingPong], &oc_input2_tensors[!partitioned_exec_state.pingPong]);
		else { // get first part of next operation
			  if (next_op_part_info->input1) {
				  uint32_t startingRow			= next_op_part_info->partitionStart[0];
				  uint32_t endingRow			= next_op_part_info->partitionEnd[0];
				  uint32_t bytes_in_partition	= (endingRow-startingRow)* next_op_part_info->input1->dims->data[0] * next_op_part_info->input1->dims->data[2] * next_op_part_info->input1->dims->data[3];

				  if ( output_tensor_produced_bytes >= bytes_in_partition ) {
					  OVERLAY_CopyInData(&DMAQue[0], next_op_part_info, 0, &oc_input_tensors[!partitioned_exec_state.pingPong], &oc_input2_tensors[!partitioned_exec_state.pingPong]);
					  nextOpFirstPartCopied = 1;
				  }
			  }
		}

		params->left_padding[DIM_IDX_HEIGHT]	= op_part_info->op_part_data[p][OP_DATA_PAD_H_TOP_PAD_IDX];
		params->right_padding[DIM_IDX_HEIGHT]	= op_part_info->op_part_data[p][OP_DATA_PAD_H_BOT_PAD_IDX];

		oc_output_tensors.dims->data[1]	= op_part_info->out_partitioned_dim[p];

		oc_output_tensors.type			= output->type;
		oc_output_tensors.data.int8		= &output->data.int8[output_tensor_produced_bytes];
		oc_output_tensors.dims->size	= output->dims->size;
		oc_output_tensors.dims->data[0]	= output->dims->data[0];
		oc_output_tensors.dims->data[2]	= output->dims->data[2];
		oc_output_tensors.dims->data[3]	= output->dims->data[3];

		output_tensor_produced_bytes += oc_output_tensors.dims->data[0] * oc_output_tensors.dims->data[1] * oc_output_tensors.dims->data[2] * oc_output_tensors.dims->data[3];

		switch (oc_input_tensors[partitioned_exec_state.pingPong].type) {
		case kTfLiteFloat32: {
		  float pad_value =
			  constant_values == nullptr
				  ? 0.f
				  : *tflite::micro::GetTensorData<float>(constant_values);
		  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
			reference_ops::PadImageStyle(
				data->params, tflite::micro::GetTensorShape(input),
				tflite::micro::GetTensorData<float>(input), &pad_value,
				tflite::micro::GetTensorShape(output),
				tflite::micro::GetTensorData<float>(output));
		  } else {
			reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
							   tflite::micro::GetTensorData<float>(input),
							   &pad_value, tflite::micro::GetTensorShape(output),
							   tflite::micro::GetTensorData<float>(output));
		  }
		} break;
		case kTfLiteUInt8: {
		  uint8_t pad_value;
		  if (constant_values == nullptr) {
			pad_value = static_cast<uint8_t>(data->output_zero_point);
		  } else {
			pad_value = *tflite::micro::GetTensorData<uint8_t>(constant_values);
		  }
		  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
			reference_ops::PadImageStyle(
				data->params, tflite::micro::GetTensorShape(input),
				tflite::micro::GetTensorData<uint8_t>(input), &pad_value,
				tflite::micro::GetTensorShape(output),
				tflite::micro::GetTensorData<uint8_t>(output));
		  } else {
			reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
							   tflite::micro::GetTensorData<uint8_t>(input),
							   &pad_value, tflite::micro::GetTensorShape(output),
							   tflite::micro::GetTensorData<uint8_t>(output));
		  }
		} break;
		case kTfLiteInt8: {
		  int8_t pad_value;
		  if (constant_values == nullptr) {
			pad_value = static_cast<uint8_t>(data->output_zero_point);
		  } else {
			pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
		  }
		  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
			reference_ops::PadImageStyle(
				data->params, tflite::micro::GetTensorShape((TfLiteEvalTensor *)&oc_input_tensors[partitioned_exec_state.pingPong]),
				tflite::micro::GetTensorData<int8_t>((TfLiteEvalTensor *)&oc_input_tensors[partitioned_exec_state.pingPong]), &pad_value,
				tflite::micro::GetTensorShape((TfLiteEvalTensor *)&oc_output_tensors),
				tflite::micro::GetTensorData<int8_t>((TfLiteEvalTensor *)&oc_output_tensors));
		  } else {
			reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
							   tflite::micro::GetTensorData<int8_t>(input),
							   &pad_value, tflite::micro::GetTensorShape(output),
							   tflite::micro::GetTensorData<int8_t>(output));
		  }
		} break;
		case kTfLiteInt32: {
		  int32_t pad_value =
			  constant_values == nullptr
				  ? 0
				  : *tflite::micro::GetTensorData<int32_t>(constant_values);
		  reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
							 tflite::micro::GetTensorData<int32_t>(input),
							 &pad_value, tflite::micro::GetTensorShape(output),
							 tflite::micro::GetTensorData<int32_t>(output));
		} break;
		default:

		  TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
							 TfLiteTypeGetName(input->type));
		  return kTfLiteError;
		}

		  if ( !( p < (op_part_info->numParts-1) ) && !nextOpFirstPartCopied && next_op_part_info->input1 )
			OVERLAY_CopyInData(&DMAQue[0], next_op_part_info, 0, &oc_input_tensors[!partitioned_exec_state.pingPong], &oc_input2_tensors[!partitioned_exec_state.pingPong]);

		// switch buffer that was being copied in in background
		partitioned_exec_state.pingPong = !partitioned_exec_state.pingPong;

		// restore parameters to original op parameters
		params->left_padding[DIM_IDX_HEIGHT]	= op_h_top_padding;
		params->right_padding[DIM_IDX_HEIGHT]	= op_h_bot_padding;

	}

//	const TfLiteEvalTensor * next_op_filter = next_op_part_info->filter;
//
//	if ( next_op_filter ) {
//		uint32_t next_op_filterTensorSize	=	next_op_filter->dims->data[0] *
//												next_op_filter->dims->data[1] *
//												next_op_filter->dims->data[2] *
//												next_op_filter->dims->data[3];
//
//		if ( next_op_filterTensorSize < TENSOR_BUFFER_SIZE )
//			DMA_CopyTensor(&DMAQue[1], next_op_filter, &oc_input2_tensors[0]);
//	}
//
	#else
	switch (input->type) {
	case kTfLiteFloat32: {
	  float pad_value =
		  constant_values == nullptr
			  ? 0.f
			  : *tflite::micro::GetTensorData<float>(constant_values);
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
			tflite::micro::GetTensorData<float>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
			tflite::micro::GetTensorData<float>(output));
	  } else {
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<float>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<float>(output));
	  }
	} break;
	case kTfLiteUInt8: {
	  uint8_t pad_value;
	  if (constant_values == nullptr) {
		pad_value = static_cast<uint8_t>(data->output_zero_point);
	  } else {
		pad_value = *tflite::micro::GetTensorData<uint8_t>(constant_values);
	  }
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
			tflite::micro::GetTensorData<uint8_t>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
			tflite::micro::GetTensorData<uint8_t>(output));
	  } else {
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<uint8_t>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<uint8_t>(output));
	  }
	} break;
	case kTfLiteInt8: {
	  int8_t pad_value;
	  if (constant_values == nullptr) {
		pad_value = static_cast<uint8_t>(data->output_zero_point);
	  } else {
		pad_value = *tflite::micro::GetTensorData<int8_t>(constant_values);
	  }
	  if (data->params.resizing_category == ResizingCategory::kImageStyle) {
		reference_ops::PadImageStyle(
			data->params, tflite::micro::GetTensorShape(input),
			tflite::micro::GetTensorData<int8_t>(input), &pad_value,
			tflite::micro::GetTensorShape(output),
			tflite::micro::GetTensorData<int8_t>(output));
	  } else {
		reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						   tflite::micro::GetTensorData<int8_t>(input),
						   &pad_value, tflite::micro::GetTensorShape(output),
						   tflite::micro::GetTensorData<int8_t>(output));
	  }
	} break;
	case kTfLiteInt32: {
	  int32_t pad_value =
		  constant_values == nullptr
			  ? 0
			  : *tflite::micro::GetTensorData<int32_t>(constant_values);
	  reference_ops::Pad(data->params, tflite::micro::GetTensorShape(input),
						 tflite::micro::GetTensorData<int32_t>(input),
						 &pad_value, tflite::micro::GetTensorShape(output),
						 tflite::micro::GetTensorData<int32_t>(output));
	} break;
	default:

	  TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
						 TfLiteTypeGetName(input->type));
	  return kTfLiteError;
	}
	#endif
	#undef TF_LITE_PAD
	return kTfLiteOk;
}

}  // namespace pad

TfLiteRegistration Register_PAD() {
  return {/*init=*/pad::Init,
          /*free=*/nullptr,
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

// Also register Pad as PadV2.
TfLiteRegistration Register_PADV2() {
  return {/*init=*/pad::Init,
          /*free=*/nullptr,
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

}  // namespace micro
}  // namespace ops
}  // namespace tflite
