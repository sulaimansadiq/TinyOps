limits:1204:7:static constexpr long int std::numeric_limits<long int>::min()	4	static
limits:1207:7:static constexpr long int std::numeric_limits<long int>::max()	4	static
gthr-default.h:229:1:int __gthread_key_delete(__gthread_key_t)	16	static
fixedpoint.h:329:21:IntegerType gemmlowp::SaturatingRoundingDoublingHighMul(IntegerType, IntegerType) [with IntegerType = long int]	64	static
types.h:202:3:tflite::RuntimeShape::~RuntimeShape()	16	static
types.h:212:18:int32_t tflite::RuntimeShape::DimensionsCount() const	16	static
types.h:213:18:int32_t tflite::RuntimeShape::Dims(int) const	16	static
types.h:231:25:const int32_t* tflite::RuntimeShape::DimsData() const	16	static
types.h:289:14:int tflite::RuntimeShape::FlatSize() const	32	static
types.h:519:12:int tflite::MatchingFlatSize(const tflite::RuntimeShape&, const tflite::RuntimeShape&)	32	static
common.h:156:16:int32_t tflite::MultiplyByQuantizedMultiplier(int32_t, int32_t, int)	32	static
leaky_relu.h:26:13:void tflite::reference_ops::LeakyRelu(const tflite::LeakyReluParams&, const tflite::RuntimeShape&, const float*, const tflite::RuntimeShape&, float*)	40	static
kernel_util.h:152:12:int tflite::NumInputs(const TfLiteNode*)	16	static
kernel_util.h:153:12:int tflite::NumOutputs(const TfLiteNode*)	16	static
kernel_util.h:31:26:TfLiteEvalTensor* tflite::micro::GetMutableEvalInput(const TfLiteContext*, const TfLiteNode*, int)	24	static
kernel_util.h:40:32:const TfLiteEvalTensor* tflite::micro::GetEvalInput(const TfLiteContext*, const TfLiteNode*, int)	24	static
kernel_util.h:46:26:TfLiteEvalTensor* tflite::micro::GetEvalOutput(const TfLiteContext*, const TfLiteNode*, int)	24	static
leaky_relu.cc:61:14:TfLiteStatus tflite::{anonymous}::CalculateOpData(TfLiteContext*, TfLiteNode*)	88	static
leaky_relu.cc:97:7:void* tflite::{anonymous}::LeakyReluInit(TfLiteContext*, const char*, size_t)	24	static
leaky_relu.cc:102:14:TfLiteStatus tflite::{anonymous}::LeakyReluPrepare(TfLiteContext*, TfLiteNode*)	16	static
leaky_relu.cc:106:14:TfLiteStatus tflite::{anonymous}::LeakyReluEval(TfLiteContext*, TfLiteNode*)	128	static
leaky_relu.cc:142:20:TfLiteRegistration tflite::Register_LEAKY_RELU()	24	static
stl_algobase.h:222:5:constexpr const _Tp& std::max(const _Tp&, const _Tp&) [with _Tp = long int]	16	static
stl_algobase.h:198:5:constexpr const _Tp& std::min(const _Tp&, const _Tp&) [with _Tp = long int]	16	static
fixedpoint.h:357:20:IntegerType gemmlowp::RoundingDivideByPOT(IntegerType, int) [with IntegerType = long int]	56	static
kernel_util.h:61:10:const T* tflite::micro::GetTensorData(const TfLiteEvalTensor*) [with T = float]	16	static
kernel_util.h:55:4:T* tflite::micro::GetTensorData(TfLiteEvalTensor*) [with T = float]	16	static
leaky_relu.cc:43:6:void tflite::{anonymous}::QuantizeLeakyRelu(const tflite::{anonymous}::LeakyReluOpData&, const TfLiteEvalTensor*, TfLiteEvalTensor*) [with T = signed char]	120	static
fixedpoint.h:64:10:tRawType gemmlowp::Dup(typename gemmlowp::FixedPointRawTypeTraits<tRawType>::ScalarRawType) [with tRawType = long int]	16	static
fixedpoint.h:70:14:tIntegerType gemmlowp::BitAnd(tIntegerType, tIntegerType) [with tIntegerType = long int]	16	static
fixedpoint.h:140:14:tIntegerType gemmlowp::ShiftRight(tIntegerType, int) [with tIntegerType = long int]	16	static
fixedpoint.h:199:14:tIntegerType gemmlowp::MaskIfLessThan(tIntegerType, tIntegerType) [with tIntegerType = long int]	16	static
fixedpoint.h:94:14:tIntegerType gemmlowp::Add(tIntegerType, tIntegerType) [with tIntegerType = long int]	16	static
fixedpoint.h:185:14:tIntegerType gemmlowp::MaskIfGreaterThan(tIntegerType, tIntegerType) [with tIntegerType = long int]	16	static
kernel_util.h:61:10:const T* tflite::micro::GetTensorData(const TfLiteEvalTensor*) [with T = signed char]	16	static
kernel_util.h:55:4:T* tflite::micro::GetTensorData(TfLiteEvalTensor*) [with T = signed char]	16	static
leaky_relu.h:38:13:void tflite::reference_ops::QuantizeLeakyRelu(const tflite::LeakyReluParams&, const tflite::RuntimeShape&, const T*, const tflite::RuntimeShape&, T*) [with T = signed char]	56	static
fixedpoint.h:156:14:tIntegerType gemmlowp::MaskIfNonZero(tIntegerType) [with tIntegerType = long int]	16	static
fixedpoint.h:88:14:tIntegerType gemmlowp::BitNot(tIntegerType) [with tIntegerType = long int]	16	static
